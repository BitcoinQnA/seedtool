/*
BIP86 - Taproot addresses

Copyright 2021 Anderson Juhasc

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
(function (f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f();
  } else if (typeof define === 'function' && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== 'undefined') {
      g = window;
    } else if (typeof global !== 'undefined') {
      g = global;
    } else if (typeof self !== 'undefined') {
      g = self;
    } else {
      g = this;
    }
    g.bip86 = f();
  }
})(function () {
  var define, module, exports;
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = 'function' == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw ((a.code = 'MODULE_NOT_FOUND'), a);
          }
          var p = (n[i] = { exports: {} });
          e[i][0].call(
            p.exports,
            function (r) {
              var n = e[i][1][r];
              return o(n || r);
            },
            p,
            p.exports,
            r,
            e,
            n,
            t
          );
        }
        return n[i].exports;
      }
      for (
        var u = 'function' == typeof require && require, i = 0;
        i < t.length;
        i++
      )
        o(t[i]);
      return o;
    }
    return r;
  })()(
    {
      1: [
        function (require, module, exports) {
          'use strict';
          // base-x encoding / decoding
          // Copyright (c) 2018 base-x contributors
          // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
          // Distributed under the MIT software license, see the accompanying
          // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
          // @ts-ignore
          var _Buffer = require('safe-buffer').Buffer;
          function base(ALPHABET) {
            if (ALPHABET.length >= 255) {
              throw new TypeError('Alphabet too long');
            }
            var BASE_MAP = new Uint8Array(256);
            for (var j = 0; j < BASE_MAP.length; j++) {
              BASE_MAP[j] = 255;
            }
            for (var i = 0; i < ALPHABET.length; i++) {
              var x = ALPHABET.charAt(i);
              var xc = x.charCodeAt(0);
              if (BASE_MAP[xc] !== 255) {
                throw new TypeError(x + ' is ambiguous');
              }
              BASE_MAP[xc] = i;
            }
            var BASE = ALPHABET.length;
            var LEADER = ALPHABET.charAt(0);
            var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
            var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
            function encode(source) {
              if (Array.isArray(source) || source instanceof Uint8Array) {
                source = _Buffer.from(source);
              }
              if (!_Buffer.isBuffer(source)) {
                throw new TypeError('Expected Buffer');
              }
              if (source.length === 0) {
                return '';
              }
              // Skip & count leading zeroes.
              var zeroes = 0;
              var length = 0;
              var pbegin = 0;
              var pend = source.length;
              while (pbegin !== pend && source[pbegin] === 0) {
                pbegin++;
                zeroes++;
              }
              // Allocate enough space in big-endian base58 representation.
              var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
              var b58 = new Uint8Array(size);
              // Process the bytes.
              while (pbegin !== pend) {
                var carry = source[pbegin];
                // Apply "b58 = b58 * 256 + ch".
                var i = 0;
                for (
                  var it1 = size - 1;
                  (carry !== 0 || i < length) && it1 !== -1;
                  it1--, i++
                ) {
                  carry += (256 * b58[it1]) >>> 0;
                  b58[it1] = carry % BASE >>> 0;
                  carry = (carry / BASE) >>> 0;
                }
                if (carry !== 0) {
                  throw new Error('Non-zero carry');
                }
                length = i;
                pbegin++;
              }
              // Skip leading zeroes in base58 result.
              var it2 = size - length;
              while (it2 !== size && b58[it2] === 0) {
                it2++;
              }
              // Translate the result into a string.
              var str = LEADER.repeat(zeroes);
              for (; it2 < size; ++it2) {
                str += ALPHABET.charAt(b58[it2]);
              }
              return str;
            }
            function decodeUnsafe(source) {
              if (typeof source !== 'string') {
                throw new TypeError('Expected String');
              }
              if (source.length === 0) {
                return _Buffer.alloc(0);
              }
              var psz = 0;
              // Skip and count leading '1's.
              var zeroes = 0;
              var length = 0;
              while (source[psz] === LEADER) {
                zeroes++;
                psz++;
              }
              // Allocate enough space in big-endian base256 representation.
              var size = ((source.length - psz) * FACTOR + 1) >>> 0; // log(58) / log(256), rounded up.
              var b256 = new Uint8Array(size);
              // Process the characters.
              while (source[psz]) {
                // Decode character
                var carry = BASE_MAP[source.charCodeAt(psz)];
                // Invalid character
                if (carry === 255) {
                  return;
                }
                var i = 0;
                for (
                  var it3 = size - 1;
                  (carry !== 0 || i < length) && it3 !== -1;
                  it3--, i++
                ) {
                  carry += (BASE * b256[it3]) >>> 0;
                  b256[it3] = carry % 256 >>> 0;
                  carry = (carry / 256) >>> 0;
                }
                if (carry !== 0) {
                  throw new Error('Non-zero carry');
                }
                length = i;
                psz++;
              }
              // Skip leading zeroes in b256.
              var it4 = size - length;
              while (it4 !== size && b256[it4] === 0) {
                it4++;
              }
              var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
              vch.fill(0x00, 0, zeroes);
              var j = zeroes;
              while (it4 !== size) {
                vch[j++] = b256[it4++];
              }
              return vch;
            }
            function decode(string) {
              var buffer = decodeUnsafe(string);
              if (buffer) {
                return buffer;
              }
              throw new Error('Non-base' + BASE + ' character');
            }
            return {
              encode: encode,
              decodeUnsafe: decodeUnsafe,
              decode: decode,
            };
          }
          module.exports = base;
        },
        { 'safe-buffer': 158 },
      ],
      2: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.bech32m = exports.bech32 = void 0;
          const ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
          const ALPHABET_MAP = {};
          for (let z = 0; z < ALPHABET.length; z++) {
            const x = ALPHABET.charAt(z);
            ALPHABET_MAP[x] = z;
          }
          function polymodStep(pre) {
            const b = pre >> 25;
            return (
              ((pre & 0x1ffffff) << 5) ^
              (-((b >> 0) & 1) & 0x3b6a57b2) ^
              (-((b >> 1) & 1) & 0x26508e6d) ^
              (-((b >> 2) & 1) & 0x1ea119fa) ^
              (-((b >> 3) & 1) & 0x3d4233dd) ^
              (-((b >> 4) & 1) & 0x2a1462b3)
            );
          }
          function prefixChk(prefix) {
            let chk = 1;
            for (let i = 0; i < prefix.length; ++i) {
              const c = prefix.charCodeAt(i);
              if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')';
              chk = polymodStep(chk) ^ (c >> 5);
            }
            chk = polymodStep(chk);
            for (let i = 0; i < prefix.length; ++i) {
              const v = prefix.charCodeAt(i);
              chk = polymodStep(chk) ^ (v & 0x1f);
            }
            return chk;
          }
          function convert(data, inBits, outBits, pad) {
            let value = 0;
            let bits = 0;
            const maxV = (1 << outBits) - 1;
            const result = [];
            for (let i = 0; i < data.length; ++i) {
              value = (value << inBits) | data[i];
              bits += inBits;
              while (bits >= outBits) {
                bits -= outBits;
                result.push((value >> bits) & maxV);
              }
            }
            if (pad) {
              if (bits > 0) {
                result.push((value << (outBits - bits)) & maxV);
              }
            } else {
              if (bits >= inBits) return 'Excess padding';
              if ((value << (outBits - bits)) & maxV) return 'Non-zero padding';
            }
            return result;
          }
          function toWords(bytes) {
            return convert(bytes, 8, 5, true);
          }
          function fromWordsUnsafe(words) {
            const res = convert(words, 5, 8, false);
            if (Array.isArray(res)) return res;
          }
          function fromWords(words) {
            const res = convert(words, 5, 8, false);
            if (Array.isArray(res)) return res;
            throw new Error(res);
          }
          function getLibraryFromEncoding(encoding) {
            let ENCODING_CONST;
            if (encoding === 'bech32') {
              ENCODING_CONST = 1;
            } else {
              ENCODING_CONST = 0x2bc830a3;
            }
            function encode(prefix, words, LIMIT) {
              LIMIT = LIMIT || 90;
              if (prefix.length + 7 + words.length > LIMIT)
                throw new TypeError('Exceeds length limit');
              prefix = prefix.toLowerCase();
              // determine chk mod
              let chk = prefixChk(prefix);
              if (typeof chk === 'string') throw new Error(chk);
              let result = prefix + '1';
              for (let i = 0; i < words.length; ++i) {
                const x = words[i];
                if (x >> 5 !== 0) throw new Error('Non 5-bit word');
                chk = polymodStep(chk) ^ x;
                result += ALPHABET.charAt(x);
              }
              for (let i = 0; i < 6; ++i) {
                chk = polymodStep(chk);
              }
              chk ^= ENCODING_CONST;
              for (let i = 0; i < 6; ++i) {
                const v = (chk >> ((5 - i) * 5)) & 0x1f;
                result += ALPHABET.charAt(v);
              }
              return result;
            }
            function __decode(str, LIMIT) {
              LIMIT = LIMIT || 90;
              if (str.length < 8) return str + ' too short';
              if (str.length > LIMIT) return 'Exceeds length limit';
              // don't allow mixed case
              const lowered = str.toLowerCase();
              const uppered = str.toUpperCase();
              if (str !== lowered && str !== uppered)
                return 'Mixed-case string ' + str;
              str = lowered;
              const split = str.lastIndexOf('1');
              if (split === -1) return 'No separator character for ' + str;
              if (split === 0) return 'Missing prefix for ' + str;
              const prefix = str.slice(0, split);
              const wordChars = str.slice(split + 1);
              if (wordChars.length < 6) return 'Data too short';
              let chk = prefixChk(prefix);
              if (typeof chk === 'string') return chk;
              const words = [];
              for (let i = 0; i < wordChars.length; ++i) {
                const c = wordChars.charAt(i);
                const v = ALPHABET_MAP[c];
                if (v === undefined) return 'Unknown character ' + c;
                chk = polymodStep(chk) ^ v;
                // not in the checksum?
                if (i + 6 >= wordChars.length) continue;
                words.push(v);
              }
              if (chk !== ENCODING_CONST) return 'Invalid checksum for ' + str;
              return { prefix, words };
            }
            function decodeUnsafe(str, LIMIT) {
              const res = __decode(str, LIMIT);
              if (typeof res === 'object') return res;
            }
            function decode(str, LIMIT) {
              const res = __decode(str, LIMIT);
              if (typeof res === 'object') return res;
              throw new Error(res);
            }
            return {
              decodeUnsafe,
              decode,
              encode,
              toWords,
              fromWordsUnsafe,
              fromWords,
            };
          }
          exports.bech32 = getLibraryFromEncoding('bech32');
          exports.bech32m = getLibraryFromEncoding('bech32m');
        },
        {},
      ],
      3: [
        function (require, module, exports) {
          // (public) Constructor
          function BigInteger(a, b, c) {
            if (!(this instanceof BigInteger)) return new BigInteger(a, b, c);

            if (a != null) {
              if ('number' == typeof a) this.fromNumber(a, b, c);
              else if (b == null && 'string' != typeof a)
                this.fromString(a, 256);
              else this.fromString(a, b);
            }
          }

          var proto = BigInteger.prototype;

          // duck-typed isBigInteger
          proto.__bigi = require('../package.json').version;
          BigInteger.isBigInteger = function (obj, check_ver) {
            return (
              obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)
            );
          };

          // Bits per digit
          var dbits;

          // am: Compute w_j += (x*this_i), propagate carries,
          // c is initial carry, returns final carry.
          // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
          // We need to select the fastest one that works in this environment.

          // am1: use a single mult and divide to get the high bits,
          // max digit bits should be 26 because
          // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
          function am1(i, x, w, j, c, n) {
            while (--n >= 0) {
              var v = x * this[i++] + w[j] + c;
              c = Math.floor(v / 0x4000000);
              w[j++] = v & 0x3ffffff;
            }
            return c;
          }
          // am2 avoids a big mult-and-extract completely.
          // Max digit bits should be <= 30 because we do bitwise ops
          // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
          function am2(i, x, w, j, c, n) {
            var xl = x & 0x7fff,
              xh = x >> 15;
            while (--n >= 0) {
              var l = this[i] & 0x7fff;
              var h = this[i++] >> 15;
              var m = xh * l + h * xl;
              l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
              c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
              w[j++] = l & 0x3fffffff;
            }
            return c;
          }
          // Alternately, set max digit bits to 28 since some
          // browsers slow down when dealing with 32-bit numbers.
          function am3(i, x, w, j, c, n) {
            var xl = x & 0x3fff,
              xh = x >> 14;
            while (--n >= 0) {
              var l = this[i] & 0x3fff;
              var h = this[i++] >> 14;
              var m = xh * l + h * xl;
              l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
              c = (l >> 28) + (m >> 14) + xh * h;
              w[j++] = l & 0xfffffff;
            }
            return c;
          }

          // wtf?
          BigInteger.prototype.am = am1;
          dbits = 26;

          BigInteger.prototype.DB = dbits;
          BigInteger.prototype.DM = (1 << dbits) - 1;
          var DV = (BigInteger.prototype.DV = 1 << dbits);

          var BI_FP = 52;
          BigInteger.prototype.FV = Math.pow(2, BI_FP);
          BigInteger.prototype.F1 = BI_FP - dbits;
          BigInteger.prototype.F2 = 2 * dbits - BI_FP;

          // Digit conversions
          var BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';
          var BI_RC = new Array();
          var rr, vv;
          rr = '0'.charCodeAt(0);
          for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
          rr = 'a'.charCodeAt(0);
          for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
          rr = 'A'.charCodeAt(0);
          for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

          function int2char(n) {
            return BI_RM.charAt(n);
          }

          function intAt(s, i) {
            var c = BI_RC[s.charCodeAt(i)];
            return c == null ? -1 : c;
          }

          // (protected) copy this to r
          function bnpCopyTo(r) {
            for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
            r.t = this.t;
            r.s = this.s;
          }

          // (protected) set from integer value x, -DV <= x < DV
          function bnpFromInt(x) {
            this.t = 1;
            this.s = x < 0 ? -1 : 0;
            if (x > 0) this[0] = x;
            else if (x < -1) this[0] = x + DV;
            else this.t = 0;
          }

          // return bigint initialized to value
          function nbv(i) {
            var r = new BigInteger();
            r.fromInt(i);
            return r;
          }

          // (protected) set from string and radix
          function bnpFromString(s, b) {
            var self = this;

            var k;
            if (b == 16) k = 4;
            else if (b == 8) k = 3;
            else if (b == 256) k = 8; // byte array
            else if (b == 2) k = 1;
            else if (b == 32) k = 5;
            else if (b == 4) k = 2;
            else {
              self.fromRadix(s, b);
              return;
            }
            self.t = 0;
            self.s = 0;
            var i = s.length,
              mi = false,
              sh = 0;
            while (--i >= 0) {
              var x = k == 8 ? s[i] & 0xff : intAt(s, i);
              if (x < 0) {
                if (s.charAt(i) == '-') mi = true;
                continue;
              }
              mi = false;
              if (sh == 0) self[self.t++] = x;
              else if (sh + k > self.DB) {
                self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh;
                self[self.t++] = x >> (self.DB - sh);
              } else self[self.t - 1] |= x << sh;
              sh += k;
              if (sh >= self.DB) sh -= self.DB;
            }
            if (k == 8 && (s[0] & 0x80) != 0) {
              self.s = -1;
              if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh;
            }
            self.clamp();
            if (mi) BigInteger.ZERO.subTo(self, self);
          }

          // (protected) clamp off excess high words
          function bnpClamp() {
            var c = this.s & this.DM;
            while (this.t > 0 && this[this.t - 1] == c) --this.t;
          }

          // (public) return string representation in given radix
          function bnToString(b) {
            var self = this;
            if (self.s < 0) return '-' + self.negate().toString(b);
            var k;
            if (b == 16) k = 4;
            else if (b == 8) k = 3;
            else if (b == 2) k = 1;
            else if (b == 32) k = 5;
            else if (b == 4) k = 2;
            else return self.toRadix(b);
            var km = (1 << k) - 1,
              d,
              m = false,
              r = '',
              i = self.t;
            var p = self.DB - ((i * self.DB) % k);
            if (i-- > 0) {
              if (p < self.DB && (d = self[i] >> p) > 0) {
                m = true;
                r = int2char(d);
              }
              while (i >= 0) {
                if (p < k) {
                  d = (self[i] & ((1 << p) - 1)) << (k - p);
                  d |= self[--i] >> (p += self.DB - k);
                } else {
                  d = (self[i] >> (p -= k)) & km;
                  if (p <= 0) {
                    p += self.DB;
                    --i;
                  }
                }
                if (d > 0) m = true;
                if (m) r += int2char(d);
              }
            }
            return m ? r : '0';
          }

          // (public) -this
          function bnNegate() {
            var r = new BigInteger();
            BigInteger.ZERO.subTo(this, r);
            return r;
          }

          // (public) |this|
          function bnAbs() {
            return this.s < 0 ? this.negate() : this;
          }

          // (public) return + if this > a, - if this < a, 0 if equal
          function bnCompareTo(a) {
            var r = this.s - a.s;
            if (r != 0) return r;
            var i = this.t;
            r = i - a.t;
            if (r != 0) return this.s < 0 ? -r : r;
            while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
            return 0;
          }

          // returns bit length of the integer x
          function nbits(x) {
            var r = 1,
              t;
            if ((t = x >>> 16) != 0) {
              x = t;
              r += 16;
            }
            if ((t = x >> 8) != 0) {
              x = t;
              r += 8;
            }
            if ((t = x >> 4) != 0) {
              x = t;
              r += 4;
            }
            if ((t = x >> 2) != 0) {
              x = t;
              r += 2;
            }
            if ((t = x >> 1) != 0) {
              x = t;
              r += 1;
            }
            return r;
          }

          // (public) return the number of bits in "this"
          function bnBitLength() {
            if (this.t <= 0) return 0;
            return (
              this.DB * (this.t - 1) +
              nbits(this[this.t - 1] ^ (this.s & this.DM))
            );
          }

          // (public) return the number of bytes in "this"
          function bnByteLength() {
            return this.bitLength() >> 3;
          }

          // (protected) r = this << n*DB
          function bnpDLShiftTo(n, r) {
            var i;
            for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
            for (i = n - 1; i >= 0; --i) r[i] = 0;
            r.t = this.t + n;
            r.s = this.s;
          }

          // (protected) r = this >> n*DB
          function bnpDRShiftTo(n, r) {
            for (var i = n; i < this.t; ++i) r[i - n] = this[i];
            r.t = Math.max(this.t - n, 0);
            r.s = this.s;
          }

          // (protected) r = this << n
          function bnpLShiftTo(n, r) {
            var self = this;
            var bs = n % self.DB;
            var cbs = self.DB - bs;
            var bm = (1 << cbs) - 1;
            var ds = Math.floor(n / self.DB),
              c = (self.s << bs) & self.DM,
              i;
            for (i = self.t - 1; i >= 0; --i) {
              r[i + ds + 1] = (self[i] >> cbs) | c;
              c = (self[i] & bm) << bs;
            }
            for (i = ds - 1; i >= 0; --i) r[i] = 0;
            r[ds] = c;
            r.t = self.t + ds + 1;
            r.s = self.s;
            r.clamp();
          }

          // (protected) r = this >> n
          function bnpRShiftTo(n, r) {
            var self = this;
            r.s = self.s;
            var ds = Math.floor(n / self.DB);
            if (ds >= self.t) {
              r.t = 0;
              return;
            }
            var bs = n % self.DB;
            var cbs = self.DB - bs;
            var bm = (1 << bs) - 1;
            r[0] = self[ds] >> bs;
            for (var i = ds + 1; i < self.t; ++i) {
              r[i - ds - 1] |= (self[i] & bm) << cbs;
              r[i - ds] = self[i] >> bs;
            }
            if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs;
            r.t = self.t - ds;
            r.clamp();
          }

          // (protected) r = this - a
          function bnpSubTo(a, r) {
            var self = this;
            var i = 0,
              c = 0,
              m = Math.min(a.t, self.t);
            while (i < m) {
              c += self[i] - a[i];
              r[i++] = c & self.DM;
              c >>= self.DB;
            }
            if (a.t < self.t) {
              c -= a.s;
              while (i < self.t) {
                c += self[i];
                r[i++] = c & self.DM;
                c >>= self.DB;
              }
              c += self.s;
            } else {
              c += self.s;
              while (i < a.t) {
                c -= a[i];
                r[i++] = c & self.DM;
                c >>= self.DB;
              }
              c -= a.s;
            }
            r.s = c < 0 ? -1 : 0;
            if (c < -1) r[i++] = self.DV + c;
            else if (c > 0) r[i++] = c;
            r.t = i;
            r.clamp();
          }

          // (protected) r = this * a, r != this,a (HAC 14.12)
          // "this" should be the larger one if appropriate.
          function bnpMultiplyTo(a, r) {
            var x = this.abs(),
              y = a.abs();
            var i = x.t;
            r.t = i + y.t;
            while (--i >= 0) r[i] = 0;
            for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
            r.s = 0;
            r.clamp();
            if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
          }

          // (protected) r = this^2, r != this (HAC 14.16)
          function bnpSquareTo(r) {
            var x = this.abs();
            var i = (r.t = 2 * x.t);
            while (--i >= 0) r[i] = 0;
            for (i = 0; i < x.t - 1; ++i) {
              var c = x.am(i, x[i], r, 2 * i, 0, 1);
              if (
                (r[i + x.t] += x.am(
                  i + 1,
                  2 * x[i],
                  r,
                  2 * i + 1,
                  c,
                  x.t - i - 1
                )) >= x.DV
              ) {
                r[i + x.t] -= x.DV;
                r[i + x.t + 1] = 1;
              }
            }
            if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
            r.s = 0;
            r.clamp();
          }

          // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
          // r != q, this != m.  q or r may be null.
          function bnpDivRemTo(m, q, r) {
            var self = this;
            var pm = m.abs();
            if (pm.t <= 0) return;
            var pt = self.abs();
            if (pt.t < pm.t) {
              if (q != null) q.fromInt(0);
              if (r != null) self.copyTo(r);
              return;
            }
            if (r == null) r = new BigInteger();
            var y = new BigInteger(),
              ts = self.s,
              ms = m.s;
            var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus
            if (nsh > 0) {
              pm.lShiftTo(nsh, y);
              pt.lShiftTo(nsh, r);
            } else {
              pm.copyTo(y);
              pt.copyTo(r);
            }
            var ys = y.t;
            var y0 = y[ys - 1];
            if (y0 == 0) return;
            var yt = y0 * (1 << self.F1) + (ys > 1 ? y[ys - 2] >> self.F2 : 0);
            var d1 = self.FV / yt,
              d2 = (1 << self.F1) / yt,
              e = 1 << self.F2;
            var i = r.t,
              j = i - ys,
              t = q == null ? new BigInteger() : q;
            y.dlShiftTo(j, t);
            if (r.compareTo(t) >= 0) {
              r[r.t++] = 1;
              r.subTo(t, r);
            }
            BigInteger.ONE.dlShiftTo(ys, t);
            t.subTo(y, y); // "negative" y so we can replace sub with am later
            while (y.t < ys) y[y.t++] = 0;
            while (--j >= 0) {
              // Estimate quotient digit
              var qd =
                r[--i] == y0
                  ? self.DM
                  : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
              if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                // Try it out
                y.dlShiftTo(j, t);
                r.subTo(t, r);
                while (r[i] < --qd) r.subTo(t, r);
              }
            }
            if (q != null) {
              r.drShiftTo(ys, q);
              if (ts != ms) BigInteger.ZERO.subTo(q, q);
            }
            r.t = ys;
            r.clamp();
            if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
            if (ts < 0) BigInteger.ZERO.subTo(r, r);
          }

          // (public) this mod a
          function bnMod(a) {
            var r = new BigInteger();
            this.abs().divRemTo(a, null, r);
            if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
            return r;
          }

          // Modular reduction using "classic" algorithm
          function Classic(m) {
            this.m = m;
          }

          function cConvert(x) {
            if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
            else return x;
          }

          function cRevert(x) {
            return x;
          }

          function cReduce(x) {
            x.divRemTo(this.m, null, x);
          }

          function cMulTo(x, y, r) {
            x.multiplyTo(y, r);
            this.reduce(r);
          }

          function cSqrTo(x, r) {
            x.squareTo(r);
            this.reduce(r);
          }

          Classic.prototype.convert = cConvert;
          Classic.prototype.revert = cRevert;
          Classic.prototype.reduce = cReduce;
          Classic.prototype.mulTo = cMulTo;
          Classic.prototype.sqrTo = cSqrTo;

          // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
          // justification:
          //         xy == 1 (mod m)
          //         xy =  1+km
          //   xy(2-xy) = (1+km)(1-km)
          // x[y(2-xy)] = 1-k^2m^2
          // x[y(2-xy)] == 1 (mod m^2)
          // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
          // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
          // JS multiply "overflows" differently from C/C++, so care is needed here.
          function bnpInvDigit() {
            if (this.t < 1) return 0;
            var x = this[0];
            if ((x & 1) == 0) return 0;
            var y = x & 3; // y == 1/x mod 2^2
            y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
            y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
            y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
            // last step - calculate inverse mod DV directly
            // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
            y = (y * (2 - ((x * y) % this.DV))) % this.DV; // y == 1/x mod 2^dbits
            // we really want the negative inverse, and -DV < y < DV
            return y > 0 ? this.DV - y : -y;
          }

          // Montgomery reduction
          function Montgomery(m) {
            this.m = m;
            this.mp = m.invDigit();
            this.mpl = this.mp & 0x7fff;
            this.mph = this.mp >> 15;
            this.um = (1 << (m.DB - 15)) - 1;
            this.mt2 = 2 * m.t;
          }

          // xR mod m
          function montConvert(x) {
            var r = new BigInteger();
            x.abs().dlShiftTo(this.m.t, r);
            r.divRemTo(this.m, null, r);
            if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
            return r;
          }

          // x/R mod m
          function montRevert(x) {
            var r = new BigInteger();
            x.copyTo(r);
            this.reduce(r);
            return r;
          }

          // x = x/R mod m (HAC 14.32)
          function montReduce(x) {
            while (x.t <= this.mt2)
              // pad x so am has enough room later
              x[x.t++] = 0;
            for (var i = 0; i < this.m.t; ++i) {
              // faster way of calculating u0 = x[i]*mp mod DV
              var j = x[i] & 0x7fff;
              var u0 =
                (j * this.mpl +
                  (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) <<
                    15)) &
                x.DM;
              // use am to combine the multiply-shift-add into one call
              j = i + this.m.t;
              x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
              // propagate carry
              while (x[j] >= x.DV) {
                x[j] -= x.DV;
                x[++j]++;
              }
            }
            x.clamp();
            x.drShiftTo(this.m.t, x);
            if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
          }

          // r = "x^2/R mod m"; x != r
          function montSqrTo(x, r) {
            x.squareTo(r);
            this.reduce(r);
          }

          // r = "xy/R mod m"; x,y != r
          function montMulTo(x, y, r) {
            x.multiplyTo(y, r);
            this.reduce(r);
          }

          Montgomery.prototype.convert = montConvert;
          Montgomery.prototype.revert = montRevert;
          Montgomery.prototype.reduce = montReduce;
          Montgomery.prototype.mulTo = montMulTo;
          Montgomery.prototype.sqrTo = montSqrTo;

          // (protected) true iff this is even
          function bnpIsEven() {
            return (this.t > 0 ? this[0] & 1 : this.s) == 0;
          }

          // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
          function bnpExp(e, z) {
            if (e > 0xffffffff || e < 1) return BigInteger.ONE;
            var r = new BigInteger(),
              r2 = new BigInteger(),
              g = z.convert(this),
              i = nbits(e) - 1;
            g.copyTo(r);
            while (--i >= 0) {
              z.sqrTo(r, r2);
              if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
              else {
                var t = r;
                r = r2;
                r2 = t;
              }
            }
            return z.revert(r);
          }

          // (public) this^e % m, 0 <= e < 2^32
          function bnModPowInt(e, m) {
            var z;
            if (e < 256 || m.isEven()) z = new Classic(m);
            else z = new Montgomery(m);
            return this.exp(e, z);
          }

          // protected
          proto.copyTo = bnpCopyTo;
          proto.fromInt = bnpFromInt;
          proto.fromString = bnpFromString;
          proto.clamp = bnpClamp;
          proto.dlShiftTo = bnpDLShiftTo;
          proto.drShiftTo = bnpDRShiftTo;
          proto.lShiftTo = bnpLShiftTo;
          proto.rShiftTo = bnpRShiftTo;
          proto.subTo = bnpSubTo;
          proto.multiplyTo = bnpMultiplyTo;
          proto.squareTo = bnpSquareTo;
          proto.divRemTo = bnpDivRemTo;
          proto.invDigit = bnpInvDigit;
          proto.isEven = bnpIsEven;
          proto.exp = bnpExp;

          // public
          proto.toString = bnToString;
          proto.negate = bnNegate;
          proto.abs = bnAbs;
          proto.compareTo = bnCompareTo;
          proto.bitLength = bnBitLength;
          proto.byteLength = bnByteLength;
          proto.mod = bnMod;
          proto.modPowInt = bnModPowInt;

          // (public)
          function bnClone() {
            var r = new BigInteger();
            this.copyTo(r);
            return r;
          }

          // (public) return value as integer
          function bnIntValue() {
            if (this.s < 0) {
              if (this.t == 1) return this[0] - this.DV;
              else if (this.t == 0) return -1;
            } else if (this.t == 1) return this[0];
            else if (this.t == 0) return 0;
            // assumes 16 < DB < 32
            return (
              ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
            );
          }

          // (public) return value as byte
          function bnByteValue() {
            return this.t == 0 ? this.s : (this[0] << 24) >> 24;
          }

          // (public) return value as short (assumes DB>=16)
          function bnShortValue() {
            return this.t == 0 ? this.s : (this[0] << 16) >> 16;
          }

          // (protected) return x s.t. r^x < DV
          function bnpChunkSize(r) {
            return Math.floor((Math.LN2 * this.DB) / Math.log(r));
          }

          // (public) 0 if this == 0, 1 if this > 0
          function bnSigNum() {
            if (this.s < 0) return -1;
            else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
            else return 1;
          }

          // (protected) convert to radix string
          function bnpToRadix(b) {
            if (b == null) b = 10;
            if (this.signum() == 0 || b < 2 || b > 36) return '0';
            var cs = this.chunkSize(b);
            var a = Math.pow(b, cs);
            var d = nbv(a),
              y = new BigInteger(),
              z = new BigInteger(),
              r = '';
            this.divRemTo(d, y, z);
            while (y.signum() > 0) {
              r = (a + z.intValue()).toString(b).substr(1) + r;
              y.divRemTo(d, y, z);
            }
            return z.intValue().toString(b) + r;
          }

          // (protected) convert from radix string
          function bnpFromRadix(s, b) {
            var self = this;
            self.fromInt(0);
            if (b == null) b = 10;
            var cs = self.chunkSize(b);
            var d = Math.pow(b, cs),
              mi = false,
              j = 0,
              w = 0;
            for (var i = 0; i < s.length; ++i) {
              var x = intAt(s, i);
              if (x < 0) {
                if (s.charAt(i) == '-' && self.signum() == 0) mi = true;
                continue;
              }
              w = b * w + x;
              if (++j >= cs) {
                self.dMultiply(d);
                self.dAddOffset(w, 0);
                j = 0;
                w = 0;
              }
            }
            if (j > 0) {
              self.dMultiply(Math.pow(b, j));
              self.dAddOffset(w, 0);
            }
            if (mi) BigInteger.ZERO.subTo(self, self);
          }

          // (protected) alternate constructor
          function bnpFromNumber(a, b, c) {
            var self = this;
            if ('number' == typeof b) {
              // new BigInteger(int,int,RNG)
              if (a < 2) self.fromInt(1);
              else {
                self.fromNumber(a, c);
                if (!self.testBit(a - 1))
                  // force MSB set
                  self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self);
                if (self.isEven()) self.dAddOffset(1, 0); // force odd
                while (!self.isProbablePrime(b)) {
                  self.dAddOffset(2, 0);
                  if (self.bitLength() > a)
                    self.subTo(BigInteger.ONE.shiftLeft(a - 1), self);
                }
              }
            } else {
              // new BigInteger(int,RNG)
              var x = new Array(),
                t = a & 7;
              x.length = (a >> 3) + 1;
              b.nextBytes(x);
              if (t > 0) x[0] &= (1 << t) - 1;
              else x[0] = 0;
              self.fromString(x, 256);
            }
          }

          // (public) convert to bigendian byte array
          function bnToByteArray() {
            var self = this;
            var i = self.t,
              r = new Array();
            r[0] = self.s;
            var p = self.DB - ((i * self.DB) % 8),
              d,
              k = 0;
            if (i-- > 0) {
              if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)
                r[k++] = d | (self.s << (self.DB - p));
              while (i >= 0) {
                if (p < 8) {
                  d = (self[i] & ((1 << p) - 1)) << (8 - p);
                  d |= self[--i] >> (p += self.DB - 8);
                } else {
                  d = (self[i] >> (p -= 8)) & 0xff;
                  if (p <= 0) {
                    p += self.DB;
                    --i;
                  }
                }
                if ((d & 0x80) != 0) d |= -256;
                if (k === 0 && (self.s & 0x80) != (d & 0x80)) ++k;
                if (k > 0 || d != self.s) r[k++] = d;
              }
            }
            return r;
          }

          function bnEquals(a) {
            return this.compareTo(a) == 0;
          }

          function bnMin(a) {
            return this.compareTo(a) < 0 ? this : a;
          }

          function bnMax(a) {
            return this.compareTo(a) > 0 ? this : a;
          }

          // (protected) r = this op a (bitwise)
          function bnpBitwiseTo(a, op, r) {
            var self = this;
            var i,
              f,
              m = Math.min(a.t, self.t);
            for (i = 0; i < m; ++i) r[i] = op(self[i], a[i]);
            if (a.t < self.t) {
              f = a.s & self.DM;
              for (i = m; i < self.t; ++i) r[i] = op(self[i], f);
              r.t = self.t;
            } else {
              f = self.s & self.DM;
              for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
              r.t = a.t;
            }
            r.s = op(self.s, a.s);
            r.clamp();
          }

          // (public) this & a
          function op_and(x, y) {
            return x & y;
          }

          function bnAnd(a) {
            var r = new BigInteger();
            this.bitwiseTo(a, op_and, r);
            return r;
          }

          // (public) this | a
          function op_or(x, y) {
            return x | y;
          }

          function bnOr(a) {
            var r = new BigInteger();
            this.bitwiseTo(a, op_or, r);
            return r;
          }

          // (public) this ^ a
          function op_xor(x, y) {
            return x ^ y;
          }

          function bnXor(a) {
            var r = new BigInteger();
            this.bitwiseTo(a, op_xor, r);
            return r;
          }

          // (public) this & ~a
          function op_andnot(x, y) {
            return x & ~y;
          }

          function bnAndNot(a) {
            var r = new BigInteger();
            this.bitwiseTo(a, op_andnot, r);
            return r;
          }

          // (public) ~this
          function bnNot() {
            var r = new BigInteger();
            for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];
            r.t = this.t;
            r.s = ~this.s;
            return r;
          }

          // (public) this << n
          function bnShiftLeft(n) {
            var r = new BigInteger();
            if (n < 0) this.rShiftTo(-n, r);
            else this.lShiftTo(n, r);
            return r;
          }

          // (public) this >> n
          function bnShiftRight(n) {
            var r = new BigInteger();
            if (n < 0) this.lShiftTo(-n, r);
            else this.rShiftTo(n, r);
            return r;
          }

          // return index of lowest 1-bit in x, x < 2^31
          function lbit(x) {
            if (x == 0) return -1;
            var r = 0;
            if ((x & 0xffff) == 0) {
              x >>= 16;
              r += 16;
            }
            if ((x & 0xff) == 0) {
              x >>= 8;
              r += 8;
            }
            if ((x & 0xf) == 0) {
              x >>= 4;
              r += 4;
            }
            if ((x & 3) == 0) {
              x >>= 2;
              r += 2;
            }
            if ((x & 1) == 0) ++r;
            return r;
          }

          // (public) returns index of lowest 1-bit (or -1 if none)
          function bnGetLowestSetBit() {
            for (var i = 0; i < this.t; ++i)
              if (this[i] != 0) return i * this.DB + lbit(this[i]);
            if (this.s < 0) return this.t * this.DB;
            return -1;
          }

          // return number of 1 bits in x
          function cbit(x) {
            var r = 0;
            while (x != 0) {
              x &= x - 1;
              ++r;
            }
            return r;
          }

          // (public) return number of set bits
          function bnBitCount() {
            var r = 0,
              x = this.s & this.DM;
            for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);
            return r;
          }

          // (public) true iff nth bit is set
          function bnTestBit(n) {
            var j = Math.floor(n / this.DB);
            if (j >= this.t) return this.s != 0;
            return (this[j] & (1 << n % this.DB)) != 0;
          }

          // (protected) this op (1<<n)
          function bnpChangeBit(n, op) {
            var r = BigInteger.ONE.shiftLeft(n);
            this.bitwiseTo(r, op, r);
            return r;
          }

          // (public) this | (1<<n)
          function bnSetBit(n) {
            return this.changeBit(n, op_or);
          }

          // (public) this & ~(1<<n)
          function bnClearBit(n) {
            return this.changeBit(n, op_andnot);
          }

          // (public) this ^ (1<<n)
          function bnFlipBit(n) {
            return this.changeBit(n, op_xor);
          }

          // (protected) r = this + a
          function bnpAddTo(a, r) {
            var self = this;

            var i = 0,
              c = 0,
              m = Math.min(a.t, self.t);
            while (i < m) {
              c += self[i] + a[i];
              r[i++] = c & self.DM;
              c >>= self.DB;
            }
            if (a.t < self.t) {
              c += a.s;
              while (i < self.t) {
                c += self[i];
                r[i++] = c & self.DM;
                c >>= self.DB;
              }
              c += self.s;
            } else {
              c += self.s;
              while (i < a.t) {
                c += a[i];
                r[i++] = c & self.DM;
                c >>= self.DB;
              }
              c += a.s;
            }
            r.s = c < 0 ? -1 : 0;
            if (c > 0) r[i++] = c;
            else if (c < -1) r[i++] = self.DV + c;
            r.t = i;
            r.clamp();
          }

          // (public) this + a
          function bnAdd(a) {
            var r = new BigInteger();
            this.addTo(a, r);
            return r;
          }

          // (public) this - a
          function bnSubtract(a) {
            var r = new BigInteger();
            this.subTo(a, r);
            return r;
          }

          // (public) this * a
          function bnMultiply(a) {
            var r = new BigInteger();
            this.multiplyTo(a, r);
            return r;
          }

          // (public) this^2
          function bnSquare() {
            var r = new BigInteger();
            this.squareTo(r);
            return r;
          }

          // (public) this / a
          function bnDivide(a) {
            var r = new BigInteger();
            this.divRemTo(a, r, null);
            return r;
          }

          // (public) this % a
          function bnRemainder(a) {
            var r = new BigInteger();
            this.divRemTo(a, null, r);
            return r;
          }

          // (public) [this/a,this%a]
          function bnDivideAndRemainder(a) {
            var q = new BigInteger(),
              r = new BigInteger();
            this.divRemTo(a, q, r);
            return new Array(q, r);
          }

          // (protected) this *= n, this >= 0, 1 < n < DV
          function bnpDMultiply(n) {
            this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
            ++this.t;
            this.clamp();
          }

          // (protected) this += n << w words, this >= 0
          function bnpDAddOffset(n, w) {
            if (n == 0) return;
            while (this.t <= w) this[this.t++] = 0;
            this[w] += n;
            while (this[w] >= this.DV) {
              this[w] -= this.DV;
              if (++w >= this.t) this[this.t++] = 0;
              ++this[w];
            }
          }

          // A "null" reducer
          function NullExp() {}

          function nNop(x) {
            return x;
          }

          function nMulTo(x, y, r) {
            x.multiplyTo(y, r);
          }

          function nSqrTo(x, r) {
            x.squareTo(r);
          }

          NullExp.prototype.convert = nNop;
          NullExp.prototype.revert = nNop;
          NullExp.prototype.mulTo = nMulTo;
          NullExp.prototype.sqrTo = nSqrTo;

          // (public) this^e
          function bnPow(e) {
            return this.exp(e, new NullExp());
          }

          // (protected) r = lower n words of "this * a", a.t <= n
          // "this" should be the larger one if appropriate.
          function bnpMultiplyLowerTo(a, n, r) {
            var i = Math.min(this.t + a.t, n);
            r.s = 0; // assumes a,this >= 0
            r.t = i;
            while (i > 0) r[--i] = 0;
            var j;
            for (j = r.t - this.t; i < j; ++i)
              r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
            for (j = Math.min(a.t, n); i < j; ++i)
              this.am(0, a[i], r, i, 0, n - i);
            r.clamp();
          }

          // (protected) r = "this * a" without lower n words, n > 0
          // "this" should be the larger one if appropriate.
          function bnpMultiplyUpperTo(a, n, r) {
            --n;
            var i = (r.t = this.t + a.t - n);
            r.s = 0; // assumes a,this >= 0
            while (--i >= 0) r[i] = 0;
            for (i = Math.max(n - this.t, 0); i < a.t; ++i)
              r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
            r.clamp();
            r.drShiftTo(1, r);
          }

          // Barrett modular reduction
          function Barrett(m) {
            // setup Barrett
            this.r2 = new BigInteger();
            this.q3 = new BigInteger();
            BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
            this.mu = this.r2.divide(m);
            this.m = m;
          }

          function barrettConvert(x) {
            if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
            else if (x.compareTo(this.m) < 0) return x;
            else {
              var r = new BigInteger();
              x.copyTo(r);
              this.reduce(r);
              return r;
            }
          }

          function barrettRevert(x) {
            return x;
          }

          // x = x mod m (HAC 14.42)
          function barrettReduce(x) {
            var self = this;
            x.drShiftTo(self.m.t - 1, self.r2);
            if (x.t > self.m.t + 1) {
              x.t = self.m.t + 1;
              x.clamp();
            }
            self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3);
            self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2);
            while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1);
            x.subTo(self.r2, x);
            while (x.compareTo(self.m) >= 0) x.subTo(self.m, x);
          }

          // r = x^2 mod m; x != r
          function barrettSqrTo(x, r) {
            x.squareTo(r);
            this.reduce(r);
          }

          // r = x*y mod m; x,y != r
          function barrettMulTo(x, y, r) {
            x.multiplyTo(y, r);
            this.reduce(r);
          }

          Barrett.prototype.convert = barrettConvert;
          Barrett.prototype.revert = barrettRevert;
          Barrett.prototype.reduce = barrettReduce;
          Barrett.prototype.mulTo = barrettMulTo;
          Barrett.prototype.sqrTo = barrettSqrTo;

          // (public) this^e % m (HAC 14.85)
          function bnModPow(e, m) {
            var i = e.bitLength(),
              k,
              r = nbv(1),
              z;
            if (i <= 0) return r;
            else if (i < 18) k = 1;
            else if (i < 48) k = 3;
            else if (i < 144) k = 4;
            else if (i < 768) k = 5;
            else k = 6;
            if (i < 8) z = new Classic(m);
            else if (m.isEven()) z = new Barrett(m);
            else z = new Montgomery(m);

            // precomputation
            var g = new Array(),
              n = 3,
              k1 = k - 1,
              km = (1 << k) - 1;
            g[1] = z.convert(this);
            if (k > 1) {
              var g2 = new BigInteger();
              z.sqrTo(g[1], g2);
              while (n <= km) {
                g[n] = new BigInteger();
                z.mulTo(g2, g[n - 2], g[n]);
                n += 2;
              }
            }

            var j = e.t - 1,
              w,
              is1 = true,
              r2 = new BigInteger(),
              t;
            i = nbits(e[j]) - 1;
            while (j >= 0) {
              if (i >= k1) w = (e[j] >> (i - k1)) & km;
              else {
                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
                if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);
              }

              n = k;
              while ((w & 1) == 0) {
                w >>= 1;
                --n;
              }
              if ((i -= n) < 0) {
                i += this.DB;
                --j;
              }
              if (is1) {
                // ret == 1, don't bother squaring or multiplying it
                g[w].copyTo(r);
                is1 = false;
              } else {
                while (n > 1) {
                  z.sqrTo(r, r2);
                  z.sqrTo(r2, r);
                  n -= 2;
                }
                if (n > 0) z.sqrTo(r, r2);
                else {
                  t = r;
                  r = r2;
                  r2 = t;
                }
                z.mulTo(r2, g[w], r);
              }

              while (j >= 0 && (e[j] & (1 << i)) == 0) {
                z.sqrTo(r, r2);
                t = r;
                r = r2;
                r2 = t;
                if (--i < 0) {
                  i = this.DB - 1;
                  --j;
                }
              }
            }
            return z.revert(r);
          }

          // (public) gcd(this,a) (HAC 14.54)
          function bnGCD(a) {
            var x = this.s < 0 ? this.negate() : this.clone();
            var y = a.s < 0 ? a.negate() : a.clone();
            if (x.compareTo(y) < 0) {
              var t = x;
              x = y;
              y = t;
            }
            var i = x.getLowestSetBit(),
              g = y.getLowestSetBit();
            if (g < 0) return x;
            if (i < g) g = i;
            if (g > 0) {
              x.rShiftTo(g, x);
              y.rShiftTo(g, y);
            }
            while (x.signum() > 0) {
              if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
              if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
              if (x.compareTo(y) >= 0) {
                x.subTo(y, x);
                x.rShiftTo(1, x);
              } else {
                y.subTo(x, y);
                y.rShiftTo(1, y);
              }
            }
            if (g > 0) y.lShiftTo(g, y);
            return y;
          }

          // (protected) this % n, n < 2^26
          function bnpModInt(n) {
            if (n <= 0) return 0;
            var d = this.DV % n,
              r = this.s < 0 ? n - 1 : 0;
            if (this.t > 0)
              if (d == 0) r = this[0] % n;
              else
                for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
            return r;
          }

          // (public) 1/this % m (HAC 14.61)
          function bnModInverse(m) {
            var ac = m.isEven();
            if (this.signum() === 0) throw new Error('division by zero');
            if ((this.isEven() && ac) || m.signum() == 0)
              return BigInteger.ZERO;
            var u = m.clone(),
              v = this.clone();
            var a = nbv(1),
              b = nbv(0),
              c = nbv(0),
              d = nbv(1);
            while (u.signum() != 0) {
              while (u.isEven()) {
                u.rShiftTo(1, u);
                if (ac) {
                  if (!a.isEven() || !b.isEven()) {
                    a.addTo(this, a);
                    b.subTo(m, b);
                  }
                  a.rShiftTo(1, a);
                } else if (!b.isEven()) b.subTo(m, b);
                b.rShiftTo(1, b);
              }
              while (v.isEven()) {
                v.rShiftTo(1, v);
                if (ac) {
                  if (!c.isEven() || !d.isEven()) {
                    c.addTo(this, c);
                    d.subTo(m, d);
                  }
                  c.rShiftTo(1, c);
                } else if (!d.isEven()) d.subTo(m, d);
                d.rShiftTo(1, d);
              }
              if (u.compareTo(v) >= 0) {
                u.subTo(v, u);
                if (ac) a.subTo(c, a);
                b.subTo(d, b);
              } else {
                v.subTo(u, v);
                if (ac) c.subTo(a, c);
                d.subTo(b, d);
              }
            }
            if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
            while (d.compareTo(m) >= 0) d.subTo(m, d);
            while (d.signum() < 0) d.addTo(m, d);
            return d;
          }

          var lowprimes = [
            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
            67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,
            139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
            211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,
            281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359,
            367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,
            443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,
            523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
            613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
            691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773,
            787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
            877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,
            971, 977, 983, 991, 997,
          ];

          var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

          // (public) test primality with certainty >= 1-.5^t
          function bnIsProbablePrime(t) {
            var i,
              x = this.abs();
            if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
              for (i = 0; i < lowprimes.length; ++i)
                if (x[0] == lowprimes[i]) return true;
              return false;
            }
            if (x.isEven()) return false;
            i = 1;
            while (i < lowprimes.length) {
              var m = lowprimes[i],
                j = i + 1;
              while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
              m = x.modInt(m);
              while (i < j) if (m % lowprimes[i++] == 0) return false;
            }
            return x.millerRabin(t);
          }

          // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
          function bnpMillerRabin(t) {
            var n1 = this.subtract(BigInteger.ONE);
            var k = n1.getLowestSetBit();
            if (k <= 0) return false;
            var r = n1.shiftRight(k);
            t = (t + 1) >> 1;
            if (t > lowprimes.length) t = lowprimes.length;
            var a = new BigInteger(null);
            var j,
              bases = [];
            for (var i = 0; i < t; ++i) {
              for (;;) {
                j = lowprimes[Math.floor(Math.random() * lowprimes.length)];
                if (bases.indexOf(j) == -1) break;
              }
              bases.push(j);
              a.fromInt(j);
              var y = a.modPow(r, this);
              if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
                var j = 1;
                while (j++ < k && y.compareTo(n1) != 0) {
                  y = y.modPowInt(2, this);
                  if (y.compareTo(BigInteger.ONE) == 0) return false;
                }
                if (y.compareTo(n1) != 0) return false;
              }
            }
            return true;
          }

          // protected
          proto.chunkSize = bnpChunkSize;
          proto.toRadix = bnpToRadix;
          proto.fromRadix = bnpFromRadix;
          proto.fromNumber = bnpFromNumber;
          proto.bitwiseTo = bnpBitwiseTo;
          proto.changeBit = bnpChangeBit;
          proto.addTo = bnpAddTo;
          proto.dMultiply = bnpDMultiply;
          proto.dAddOffset = bnpDAddOffset;
          proto.multiplyLowerTo = bnpMultiplyLowerTo;
          proto.multiplyUpperTo = bnpMultiplyUpperTo;
          proto.modInt = bnpModInt;
          proto.millerRabin = bnpMillerRabin;

          // public
          proto.clone = bnClone;
          proto.intValue = bnIntValue;
          proto.byteValue = bnByteValue;
          proto.shortValue = bnShortValue;
          proto.signum = bnSigNum;
          proto.toByteArray = bnToByteArray;
          proto.equals = bnEquals;
          proto.min = bnMin;
          proto.max = bnMax;
          proto.and = bnAnd;
          proto.or = bnOr;
          proto.xor = bnXor;
          proto.andNot = bnAndNot;
          proto.not = bnNot;
          proto.shiftLeft = bnShiftLeft;
          proto.shiftRight = bnShiftRight;
          proto.getLowestSetBit = bnGetLowestSetBit;
          proto.bitCount = bnBitCount;
          proto.testBit = bnTestBit;
          proto.setBit = bnSetBit;
          proto.clearBit = bnClearBit;
          proto.flipBit = bnFlipBit;
          proto.add = bnAdd;
          proto.subtract = bnSubtract;
          proto.multiply = bnMultiply;
          proto.divide = bnDivide;
          proto.remainder = bnRemainder;
          proto.divideAndRemainder = bnDivideAndRemainder;
          proto.modPow = bnModPow;
          proto.modInverse = bnModInverse;
          proto.pow = bnPow;
          proto.gcd = bnGCD;
          proto.isProbablePrime = bnIsProbablePrime;

          // JSBN-specific extension
          proto.square = bnSquare;

          // constants
          BigInteger.ZERO = nbv(0);
          BigInteger.ONE = nbv(1);
          BigInteger.valueOf = nbv;

          module.exports = BigInteger;
        },
        { '../package.json': 6 },
      ],
      4: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              // FIXME: Kind of a weird way to throw exceptions, consider removing
              var assert = require('assert');
              var BigInteger = require('./bigi');

              /**
               * Turns a byte array into a big integer.
               *
               * This function will interpret a byte array as a big integer in big
               * endian notation.
               */
              BigInteger.fromByteArrayUnsigned = function (byteArray) {
                // BigInteger expects a DER integer conformant byte array
                if (byteArray[0] & 0x80) {
                  return new BigInteger([0].concat(byteArray));
                }

                return new BigInteger(byteArray);
              };

              /**
               * Returns a byte array representation of the big integer.
               *
               * This returns the absolute of the contained value in big endian
               * form. A value of zero results in an empty array.
               */
              BigInteger.prototype.toByteArrayUnsigned = function () {
                var byteArray = this.toByteArray();
                return byteArray[0] === 0 ? byteArray.slice(1) : byteArray;
              };

              BigInteger.fromDERInteger = function (byteArray) {
                return new BigInteger(byteArray);
              };

              /*
               * Converts BigInteger to a DER integer representation.
               *
               * The format for this value uses the most significant bit as a sign
               * bit.  If the most significant bit is already set and the integer is
               * positive, a 0x00 is prepended.
               *
               * Examples:
               *
               *      0 =>     0x00
               *      1 =>     0x01
               *     -1 =>     0xff
               *    127 =>     0x7f
               *   -127 =>     0x81
               *    128 =>   0x0080
               *   -128 =>     0x80
               *    255 =>   0x00ff
               *   -255 =>   0xff01
               *  16300 =>   0x3fac
               * -16300 =>   0xc054
               *  62300 => 0x00f35c
               * -62300 => 0xff0ca4
               */
              BigInteger.prototype.toDERInteger =
                BigInteger.prototype.toByteArray;

              BigInteger.fromBuffer = function (buffer) {
                // BigInteger expects a DER integer conformant byte array
                if (buffer[0] & 0x80) {
                  var byteArray = Array.prototype.slice.call(buffer);

                  return new BigInteger([0].concat(byteArray));
                }

                return new BigInteger(buffer);
              };

              BigInteger.fromHex = function (hex) {
                if (hex === '') return BigInteger.ZERO;

                assert.equal(
                  hex,
                  hex.match(/^[A-Fa-f0-9]+/),
                  'Invalid hex string'
                );
                assert.equal(hex.length % 2, 0, 'Incomplete hex');
                return new BigInteger(hex, 16);
              };

              BigInteger.prototype.toBuffer = function (size) {
                var byteArray = this.toByteArrayUnsigned();
                var zeros = [];

                var padding = size - byteArray.length;
                while (zeros.length < padding) zeros.push(0);

                return new Buffer(zeros.concat(byteArray));
              };

              BigInteger.prototype.toHex = function (size) {
                return this.toBuffer(size).toString('hex');
              };
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { './bigi': 3, assert: 177, buffer: 183 },
      ],
      5: [
        function (require, module, exports) {
          var BigInteger = require('./bigi');

          //addons
          require('./convert');

          module.exports = BigInteger;
        },
        { './bigi': 3, './convert': 4 },
      ],
      6: [
        function (require, module, exports) {
          module.exports = {
            name: 'bigi',
            version: '1.4.2',
            description: 'Big integers.',
            keywords: [
              'cryptography',
              'math',
              'bitcoin',
              'arbitrary',
              'precision',
              'arithmetic',
              'big',
              'integer',
              'int',
              'number',
              'biginteger',
              'bigint',
              'bignumber',
              'decimal',
              'float',
            ],
            devDependencies: {
              coveralls: '^2.11.2',
              istanbul: '^0.3.5',
              jshint: '^2.5.1',
              mocha: '^2.1.0',
              mochify: '^2.1.0',
            },
            repository: {
              url: 'https://github.com/cryptocoinjs/bigi',
              type: 'git',
            },
            main: './lib/index.js',
            scripts: {
              'browser-test': './node_modules/.bin/mochify --wd -R spec',
              test: './node_modules/.bin/_mocha -- test/*.js',
              jshint:
                './node_modules/.bin/jshint --config jshint.json lib/*.js ; true',
              unit: './node_modules/.bin/mocha',
              coverage:
                './node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js',
              coveralls:
                'npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info',
            },
            dependencies: {},
            testling: {
              files: 'test/*.js',
              harness: 'mocha',
              browsers: [
                'ie/9..latest',
                'firefox/latest',
                'chrome/latest',
                'safari/6.0..latest',
                'iphone/6.0..latest',
                'android-browser/4.2..latest',
              ],
            },
          };
        },
        {},
      ],
      7: [
        function (require, module, exports) {
          const BigInteger = require('bigi');
          const Buffer = require('safe-buffer').Buffer;
          const ecurve = require('ecurve');
          const curve = ecurve.getCurveByName('secp256k1');

          const one = BigInteger.ONE;
          const n = curve.n;
          const p = curve.p;

          function checkBuffer(name, buf, len, idx) {
            const idxStr = idx !== undefined ? '[' + idx + ']' : '';
            if (!Buffer.isBuffer(buf)) {
              throw new Error(name + idxStr + ' must be a Buffer');
            }
            if (buf.length !== len) {
              throw new Error(
                name + idxStr + ' must be ' + len + ' bytes long'
              );
            }
          }

          function checkArray(name, arr) {
            if (!arr || !arr.length) {
              throw new Error(
                name + ' must be an array with one or more elements'
              );
            }
          }

          function checkPubKeyArr(pubKeys) {
            checkArray('pubKeys', pubKeys);
            for (let i = 0; i < pubKeys.length; i++) {
              checkBuffer('pubKey', pubKeys[i], 32, i);
            }
          }

          function checkMessageArr(messages) {
            checkArray('messages', messages);
            for (let i = 0; i < messages.length; i++) {
              checkBuffer('message', messages[i], 32, i);
            }
          }

          function checkSignatureArr(signatures) {
            checkArray('signatures', signatures);
            for (let i = 0; i < signatures.length; i++) {
              checkBuffer('signature', signatures[i], 64, i);
            }
          }

          function checkNonceArr(nonces) {
            checkArray('nonces', nonces);
            for (let i = 0; i < nonces.length; i++) {
              checkBuffer('nonce', nonces[i], 32, i);
            }
          }

          function checkPrivateKey(privateKey, idx) {
            const idxStr = idx !== undefined ? '[' + idx + ']' : '';
            if (
              !BigInteger.isBigInteger(privateKey) &&
              !(typeof privateKey == 'string')
            ) {
              throw new Error(
                'privateKey' +
                  idxStr +
                  ' must be a BigInteger or valid hex string'
              );
            }

            if (typeof privateKey == 'string') {
              if (privateKey.match(/[^a-f^A-F^0-9]+/)) {
                throw new Error(
                  'privateKey must be a BigInteger or valid hex string'
                );
              }

              checkRange('privateKey', BigInteger.fromHex(privateKey));
              return;
            }

            checkRange('privateKey', privateKey);
          }

          function checkSignParams(privateKey, message) {
            checkPrivateKey(privateKey);
            checkBuffer('message', message, 32);
          }

          function checkVerifyParams(pubKey, message, signature) {
            checkBuffer('pubKey', pubKey, 32);
            checkBuffer('message', message, 32);
            checkBuffer('signature', signature, 64);
          }

          function checkBatchVerifyParams(pubKeys, messages, signatures) {
            checkPubKeyArr(pubKeys);
            checkMessageArr(messages);
            checkSignatureArr(signatures);
            if (
              pubKeys.length !== messages.length ||
              messages.length !== signatures.length
            ) {
              throw new Error(
                'all parameters must be an array with the same length'
              );
            }
          }

          function checkSessionParams(
            sessionId,
            privateKey,
            message,
            pubKeyCombined,
            ell
          ) {
            checkSignParams(privateKey, message);
            checkBuffer('sessionId', sessionId, 32);
            checkBuffer('pubKeyCombined', pubKeyCombined, 32);
            checkBuffer('ell', ell, 32);
          }

          function checkRange(name, scalar) {
            if (
              scalar.compareTo(one) < 0 ||
              scalar.compareTo(n.subtract(one)) > 0
            ) {
              throw new Error(name + ' must be an integer in the range 1..n-1');
            }
          }

          function checkSignatureInput(r, s) {
            if (r.compareTo(p) >= 0) {
              throw new Error('r is larger than or equal to field size');
            }
            if (s.compareTo(n) >= 0) {
              throw new Error('s is larger than or equal to curve order');
            }
          }

          function checkPointExists(pubKeyEven, P) {
            if (P.curve.isInfinity(P)) {
              throw new Error('point is at infinity');
            }
            const pEven = P.affineY.isEven();
            if (pubKeyEven !== pEven) {
              throw new Error('point does not exist');
            }
          }

          function checkAux(aux) {
            if (aux.length !== 32) {
              throw new Error('aux must be 32 bytes');
            }
          }

          module.exports = {
            checkSessionParams,
            checkSignParams,
            checkVerifyParams,
            checkBatchVerifyParams,
            checkRange,
            checkSignatureInput,
            checkPointExists,
            checkPubKeyArr,
            checkArray,
            checkNonceArr,
            checkAux,
          };
        },
        { bigi: 5, ecurve: 97, 'safe-buffer': 158 },
      ],
      8: [
        function (require, module, exports) {
          const BigInteger = require('bigi');
          const Buffer = require('safe-buffer').Buffer;
          const sha256 = require('js-sha256');

          function bufferToInt(buffer) {
            return BigInteger.fromBuffer(buffer);
          }

          function intToBuffer(bigInteger) {
            return bigInteger.toBuffer(32);
          }

          function hash(buffer) {
            return Buffer.from(sha256.create().update(buffer).array());
          }

          module.exports = {
            bufferToInt,
            intToBuffer,
            hash,
          };
        },
        { bigi: 5, 'js-sha256': 131, 'safe-buffer': 158 },
      ],
      9: [
        function (require, module, exports) {
          const schnorr = require('./schnorr');
          schnorr.check = require('./check');
          schnorr.convert = require('./convert');
          schnorr.math = require('./math');
          schnorr.muSig = require('./mu-sig');
          schnorr.taproot = require('./taproot');

          module.exports = schnorr;
        },
        {
          './check': 7,
          './convert': 8,
          './math': 10,
          './mu-sig': 11,
          './schnorr': 12,
          './taproot': 13,
        },
      ],
      10: [
        function (require, module, exports) {
          const BigInteger = require('bigi');
          const Buffer = require('safe-buffer').Buffer;
          const ecurve = require('ecurve');
          const randomBytes = require('randombytes');
          const curve = ecurve.getCurveByName('secp256k1');
          const check = require('./check');
          const convert = require('./convert');

          const concat = Buffer.concat;
          const G = curve.G;
          const p = curve.p;
          const n = curve.n;
          const zero = BigInteger.ZERO;
          const one = BigInteger.ONE;
          const two = BigInteger.valueOf(2);
          const three = BigInteger.valueOf(3);
          const four = BigInteger.valueOf(4);
          const seven = BigInteger.valueOf(7);

          function deterministicGetK0(privateKey, publicKey, message) {
            check.checkSignParams(privateKey, message);

            const h = taggedHash(
              'BIP0340/nonce',
              concat([convert.intToBuffer(privateKey), publicKey, message])
            );
            const i = convert.bufferToInt(h);
            return i.mod(n);
          }

          function isEven(pubKey) {
            return pubKey.affineY.mod(two).equals(zero);
          }

          function getEvenKey(pubKey, privateKey) {
            if (isEven(pubKey)) {
              return privateKey.clone();
            }

            return n.subtract(privateKey);
          }

          function getE(Rx, Px, m) {
            const hash = taggedHash('BIP0340/challenge', concat([Rx, Px, m]));
            return convert.bufferToInt(hash).mod(n);
          }

          function getR(s, e, P) {
            const sG = G.multiply(s);
            const eP = P.multiply(e);
            return sG.add(eP.negate());
          }

          function taggedHash(tag, msg) {
            const tagHash = convert.hash(tag);
            return convert.hash(concat([tagHash, tagHash, Buffer.from(msg)]));
          }

          function liftX(Px) {
            const x = convert.bufferToInt(Px);

            const c = x.pow(three).add(seven).mod(p);
            const y = c.modPow(p.add(one).divide(four), p);
            if (c.compareTo(y.modPow(two, p)) !== 0) {
              throw new Error('c is not equal to y^2');
            }
            let P = ecurve.Point.fromAffine(curve, x, y);
            if (!isEven(P)) {
              P = ecurve.Point.fromAffine(curve, x, p.subtract(y));
            }

            check.checkPointExists(true, P);
            return P;
          }

          function randomA() {
            let a = null;
            for (;;) {
              a = convert.bufferToInt(Buffer.from(randomBytes(32)));
              try {
                check.checkRange('a', a);
                return a;
              } catch (e) {
                // out of range, generate another one
              }
            }
          }

          module.exports = {
            deterministicGetK0,
            isEven,
            getEvenKey,
            getE,
            getR,
            taggedHash,
            liftX,
            randomA,
          };
        },
        {
          './check': 7,
          './convert': 8,
          bigi: 5,
          ecurve: 97,
          randombytes: 141,
          'safe-buffer': 158,
        },
      ],
      11: [
        function (require, module, exports) {
          const Buffer = require('safe-buffer').Buffer;
          const ecurve = require('ecurve');
          const curve = ecurve.getCurveByName('secp256k1');
          const math = require('./math');
          const check = require('./check');
          const convert = require('./convert');

          const concat = Buffer.concat;
          const G = curve.G;
          const n = curve.n;
          const MUSIG_TAG = convert.hash(Buffer.from('MuSig coefficient'));

          // Computes ell = SHA256(pubKeys[0], ..., pubKeys[pubKeys.length-1]) with
          // pubKeys serialized in compressed form.
          function computeEll(pubKeys) {
            check.checkPubKeyArr(pubKeys);
            return convert.hash(concat(pubKeys));
          }

          function computeCoefficient(ell, idx) {
            const idxBuf = Buffer.alloc(4);
            idxBuf.writeUInt32LE(idx);
            const data = concat([MUSIG_TAG, MUSIG_TAG, ell, idxBuf]);
            return convert.bufferToInt(convert.hash(data)).mod(n);
          }

          function pubKeyCombine(pubKeys, pubKeyHash) {
            const ell = pubKeyHash || computeEll(pubKeys);
            let X = null;
            for (let i = 0; i < pubKeys.length; i++) {
              const Xi = math.liftX(pubKeys[i]);
              const coefficient = computeCoefficient(ell, i);
              const summand = Xi.multiply(coefficient);
              if (X === null) {
                X = summand;
              } else {
                X = X.add(summand);
              }
            }
            return X;
          }

          function sessionInitialize(
            sessionId,
            privateKey,
            message,
            pubKeyCombined,
            pkParity,
            ell,
            idx
          ) {
            check.checkSessionParams(
              sessionId,
              privateKey,
              message,
              pubKeyCombined,
              ell
            );

            const session = {
              sessionId,
              message,
              pubKeyCombined,
              pkParity,
              ell,
              idx,
            };

            const coefficient = computeCoefficient(ell, idx);
            session.secretKey = privateKey.multiply(coefficient).mod(n);
            session.ownKeyParity = math.isEven(G.multiply(privateKey));
            if (session.pkParity !== session.ownKeyParity) {
              session.secretKey = n.subtract(session.secretKey);
            }

            const nonceData = concat([
              sessionId,
              message,
              session.pubKeyCombined,
              convert.intToBuffer(privateKey),
            ]);
            session.secretNonce = convert.bufferToInt(convert.hash(nonceData));
            check.checkRange('secretNonce', session.secretNonce);
            const R = G.multiply(session.secretNonce);
            session.nonce = convert.intToBuffer(R.affineX);
            session.nonceParity = math.isEven(R);
            session.commitment = convert.hash(session.nonce);
            return session;
          }

          function sessionNonceCombine(session, nonces) {
            check.checkNonceArr(nonces);
            let R = math.liftX(nonces[0]);
            for (let i = 1; i < nonces.length; i++) {
              R = R.add(math.liftX(nonces[i]));
            }
            session.combinedNonceParity = math.isEven(R);
            return convert.intToBuffer(R.affineX);
          }

          function partialSign(
            session,
            message,
            nonceCombined,
            pubKeyCombined
          ) {
            const e = math.getE(nonceCombined, pubKeyCombined, message);
            const sk = session.secretKey;
            let k = session.secretNonce;
            if (session.nonceParity !== session.combinedNonceParity) {
              k = n.subtract(k);
            }
            return sk.multiply(e).add(k).mod(n);
          }

          function partialSigVerify(
            session,
            partialSig,
            nonceCombined,
            idx,
            pubKey,
            nonce
          ) {
            let e = math.getE(
              nonceCombined,
              session.pubKeyCombined,
              session.message
            );
            const coefficient = computeCoefficient(session.ell, idx);
            const Pj = math.liftX(pubKey);
            const Ri = math.liftX(nonce);

            if (!session.pkParity) {
              e = n.subtract(e);
            }

            let RP = math.getR(partialSig, e.multiply(coefficient).mod(n), Pj);
            if (session.combinedNonceParity) {
              RP = RP.negate();
            }
            const sum = RP.add(Ri);
            if (!sum.curve.isInfinity(sum)) {
              throw new Error('partial signature verification failed');
            }
          }

          function partialSigCombine(nonceCombined, partialSigs) {
            const R = math.liftX(nonceCombined);
            check.checkArray('partialSigs', partialSigs);
            const Rx = convert.intToBuffer(R.affineX);
            let s = partialSigs[0];
            for (let i = 1; i < partialSigs.length; i++) {
              s = s.add(partialSigs[i]).mod(n);
            }
            return concat([Rx, convert.intToBuffer(s)]);
          }

          module.exports = {
            computeEll,
            computeCoefficient,
            pubKeyCombine,
            sessionInitialize,
            sessionNonceCombine,
            partialSign,
            partialSigVerify,
            partialSigCombine,
          };
        },
        {
          './check': 7,
          './convert': 8,
          './math': 10,
          ecurve: 97,
          'safe-buffer': 158,
        },
      ],
      12: [
        function (require, module, exports) {
          const BigInteger = require('bigi');
          const Buffer = require('safe-buffer').Buffer;
          const ecurve = require('ecurve');
          const curve = ecurve.getCurveByName('secp256k1');
          const math = require('./math');
          const check = require('./check');
          const convert = require('./convert');

          const concat = Buffer.concat;
          const G = curve.G;
          const p = curve.p;
          const n = curve.n;
          const zero = BigInteger.ZERO;

          function sign(privateKey, message, aux) {
            // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#signing
            check.checkSignParams(privateKey, message);
            privateKey =
              typeof privateKey == 'string'
                ? BigInteger.fromHex(privateKey)
                : privateKey;

            const P = G.multiply(privateKey);
            const Px = convert.intToBuffer(P.affineX);

            const d = math.getEvenKey(P, privateKey);
            let kPrime;
            if (aux) {
              check.checkAux(aux);

              const t = convert.intToBuffer(
                d.xor(convert.bufferToInt(math.taggedHash('BIP0340/aux', aux)))
              );
              const rand = math.taggedHash(
                'BIP0340/nonce',
                concat([t, Px, message])
              );
              kPrime = convert.bufferToInt(rand).mod(n);
            } else {
              kPrime = math.deterministicGetK0(d, Px, message);
            }

            if (kPrime.signum() === 0) {
              throw new Error('kPrime is zero');
            }

            const R = G.multiply(kPrime);
            const k = math.getEvenKey(R, kPrime);
            const Rx = convert.intToBuffer(R.affineX);
            const e = math.getE(Rx, Px, message);
            return concat([
              Rx,
              convert.intToBuffer(k.add(e.multiply(d)).mod(n)),
            ]);
          }

          function verify(pubKey, message, signature) {
            check.checkVerifyParams(pubKey, message, signature);

            // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#verification
            const P = math.liftX(pubKey);
            const Px = convert.intToBuffer(P.affineX);
            const r = convert.bufferToInt(signature.slice(0, 32));
            const s = convert.bufferToInt(signature.slice(32, 64));
            check.checkSignatureInput(r, s);
            const e = math.getE(convert.intToBuffer(r), Px, message);
            const R = math.getR(s, e, P);
            if (
              R.curve.isInfinity(R) ||
              !math.isEven(R) ||
              !R.affineX.equals(r)
            ) {
              throw new Error('signature verification failed');
            }
          }

          function batchVerify(pubKeys, messages, signatures) {
            check.checkBatchVerifyParams(pubKeys, messages, signatures);

            // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Batch_Verification
            let leftSide = zero;
            let rightSide = null;
            for (let i = 0; i < pubKeys.length; i++) {
              const P = math.liftX(pubKeys[i]);
              const Px = convert.intToBuffer(P.affineX);
              const r = convert.bufferToInt(signatures[i].slice(0, 32));
              const s = convert.bufferToInt(signatures[i].slice(32, 64));
              check.checkSignatureInput(r, s);
              const e = math.getE(convert.intToBuffer(r), Px, messages[i]);
              const R = math.liftX(signatures[i].slice(0, 32));

              if (i === 0) {
                leftSide = leftSide.add(s);
                rightSide = R;
                rightSide = rightSide.add(P.multiply(e));
              } else {
                const a = math.randomA();
                leftSide = leftSide.add(a.multiply(s));
                rightSide = rightSide.add(R.multiply(a));
                rightSide = rightSide.add(P.multiply(a.multiply(e)));
              }
            }

            if (!G.multiply(leftSide).equals(rightSide)) {
              throw new Error('signature verification failed');
            }
          }

          module.exports = {
            sign,
            verify,
            batchVerify,
          };
        },
        {
          './check': 7,
          './convert': 8,
          './math': 10,
          bigi: 5,
          ecurve: 97,
          'safe-buffer': 158,
        },
      ],
      13: [
        function (require, module, exports) {
          const Buffer = require('safe-buffer').Buffer;
          const ecurve = require('ecurve');
          const curve = ecurve.getCurveByName('secp256k1');
          const math = require('./math');
          const convert = require('./convert');

          const concat = Buffer.concat;
          const G = curve.G;

          function taprootConstruct(pubKey, scripts) {
            // If the spending conditions do not require a script path, the output key should commit to an unspendable script path
            // instead of having no script path. This can be achieved by computing the output key point as
            // Q = P + int(hashTapTweak(bytes(P)))G.
            // https://en.bitcoin.it/wiki/BIP_0341#cite_note-22
            if (!scripts) {
              scripts = [];
            }
            const h = taprootTree(scripts);
            const Px = convert.intToBuffer(pubKey.affineX);
            const P = math.liftX(Px);
            const tweak = convert.bufferToInt(
              math.taggedHash('TapTweak', concat([Px, h]))
            );
            const Q = P.add(G.multiply(tweak));
            return convert.intToBuffer(Q.affineX);
          }

          function taprootTree(scripts) {
            let h = Buffer.alloc(32, 0);
            if (!scripts || scripts.length === 0) {
              return Buffer.alloc(0, 0);
            }

            // TODO(guggero): Implement script part.
            return h;
          }

          module.exports = {
            taprootConstruct,
          };
        },
        { './convert': 8, './math': 10, ecurve: 97, 'safe-buffer': 158 },
      ],
      14: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          const parser_1 = require('../parser');
          function combine(psbts) {
            const self = psbts[0];
            const selfKeyVals = parser_1.psbtToKeyVals(self);
            const others = psbts.slice(1);
            if (others.length === 0)
              throw new Error('Combine: Nothing to combine');
            const selfTx = getTx(self);
            if (selfTx === undefined) {
              throw new Error('Combine: Self missing transaction');
            }
            const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);
            const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);
            const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);
            for (const other of others) {
              const otherTx = getTx(other);
              if (
                otherTx === undefined ||
                !otherTx.toBuffer().equals(selfTx.toBuffer())
              ) {
                throw new Error(
                  'Combine: One of the Psbts does not have the same transaction.'
                );
              }
              const otherKeyVals = parser_1.psbtToKeyVals(other);
              const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);
              otherGlobalSet.forEach(
                keyPusher(
                  selfGlobalSet,
                  selfKeyVals.globalKeyVals,
                  otherKeyVals.globalKeyVals
                )
              );
              const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);
              otherInputSets.forEach((inputSet, idx) =>
                inputSet.forEach(
                  keyPusher(
                    selfInputSets[idx],
                    selfKeyVals.inputKeyVals[idx],
                    otherKeyVals.inputKeyVals[idx]
                  )
                )
              );
              const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);
              otherOutputSets.forEach((outputSet, idx) =>
                outputSet.forEach(
                  keyPusher(
                    selfOutputSets[idx],
                    selfKeyVals.outputKeyVals[idx],
                    otherKeyVals.outputKeyVals[idx]
                  )
                )
              );
            }
            return parser_1.psbtFromKeyVals(selfTx, {
              globalMapKeyVals: selfKeyVals.globalKeyVals,
              inputKeyVals: selfKeyVals.inputKeyVals,
              outputKeyVals: selfKeyVals.outputKeyVals,
            });
          }
          exports.combine = combine;
          function keyPusher(selfSet, selfKeyVals, otherKeyVals) {
            return (key) => {
              if (selfSet.has(key)) return;
              const newKv = otherKeyVals.filter(
                (kv) => kv.key.toString('hex') === key
              )[0];
              selfKeyVals.push(newKv);
              selfSet.add(key);
            };
          }
          function getTx(psbt) {
            return psbt.globalMap.unsignedTx;
          }
          function getKeySet(keyVals) {
            const set = new Set();
            keyVals.forEach((keyVal) => {
              const hex = keyVal.key.toString('hex');
              if (set.has(hex))
                throw new Error('Combine: KeyValue Map keys should be unique');
              set.add(hex);
            });
            return set;
          }
        },
        { '../parser': 39 },
      ],
      15: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              const range = (n) => [...Array(n).keys()];
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.GlobalTypes.GLOBAL_XPUB) {
                  throw new Error(
                    'Decode Error: could not decode globalXpub with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if (
                  keyVal.key.length !== 79 ||
                  ![2, 3].includes(keyVal.key[46])
                ) {
                  throw new Error(
                    'Decode Error: globalXpub has invalid extended pubkey in key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if ((keyVal.value.length / 4) % 1 !== 0) {
                  throw new Error(
                    'Decode Error: Global GLOBAL_XPUB value length should be multiple of 4'
                  );
                }
                const extendedPubkey = keyVal.key.slice(1);
                const data = {
                  masterFingerprint: keyVal.value.slice(0, 4),
                  extendedPubkey,
                  path: 'm',
                };
                for (const i of range(keyVal.value.length / 4 - 1)) {
                  const val = keyVal.value.readUInt32LE(i * 4 + 4);
                  const isHard = !!(val & 0x80000000);
                  const idx = val & 0x7fffffff;
                  data.path += '/' + idx.toString(10) + (isHard ? "'" : '');
                }
                return data;
              }
              exports.decode = decode;
              function encode(data) {
                const head = Buffer.from([
                  typeFields_1.GlobalTypes.GLOBAL_XPUB,
                ]);
                const key = Buffer.concat([head, data.extendedPubkey]);
                const splitPath = data.path.split('/');
                const value = Buffer.allocUnsafe(splitPath.length * 4);
                data.masterFingerprint.copy(value, 0);
                let offset = 4;
                splitPath.slice(1).forEach((level) => {
                  const isHard = level.slice(-1) === "'";
                  let num =
                    0x7fffffff &
                    parseInt(isHard ? level.slice(0, -1) : level, 10);
                  if (isHard) num += 0x80000000;
                  value.writeUInt32LE(num, offset);
                  offset += 4;
                });
                return {
                  key,
                  value,
                };
              }
              exports.encode = encode;
              exports.expected =
                '{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }';
              function check(data) {
                const epk = data.extendedPubkey;
                const mfp = data.masterFingerprint;
                const p = data.path;
                return (
                  Buffer.isBuffer(epk) &&
                  epk.length === 78 &&
                  [2, 3].indexOf(epk[45]) > -1 &&
                  Buffer.isBuffer(mfp) &&
                  mfp.length === 4 &&
                  typeof p === 'string' &&
                  !!p.match(/^m(\/\d+'?)*$/)
                );
              }
              exports.check = check;
              function canAddToArray(array, item, dupeSet) {
                const dupeString = item.extendedPubkey.toString('hex');
                if (dupeSet.has(dupeString)) return false;
                dupeSet.add(dupeString);
                return (
                  array.filter((v) =>
                    v.extendedPubkey.equals(item.extendedPubkey)
                  ).length === 0
                );
              }
              exports.canAddToArray = canAddToArray;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      16: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function encode(data) {
                return {
                  key: Buffer.from([typeFields_1.GlobalTypes.UNSIGNED_TX]),
                  value: data.toBuffer(),
                };
              }
              exports.encode = encode;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      17: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          const typeFields_1 = require('../typeFields');
          const globalXpub = require('./global/globalXpub');
          const unsignedTx = require('./global/unsignedTx');
          const finalScriptSig = require('./input/finalScriptSig');
          const finalScriptWitness = require('./input/finalScriptWitness');
          const nonWitnessUtxo = require('./input/nonWitnessUtxo');
          const partialSig = require('./input/partialSig');
          const porCommitment = require('./input/porCommitment');
          const sighashType = require('./input/sighashType');
          const tapKeySig = require('./input/tapKeySig');
          const tapLeafScript = require('./input/tapLeafScript');
          const tapMerkleRoot = require('./input/tapMerkleRoot');
          const tapScriptSig = require('./input/tapScriptSig');
          const witnessUtxo = require('./input/witnessUtxo');
          const tapTree = require('./output/tapTree');
          const bip32Derivation = require('./shared/bip32Derivation');
          const checkPubkey = require('./shared/checkPubkey');
          const redeemScript = require('./shared/redeemScript');
          const tapBip32Derivation = require('./shared/tapBip32Derivation');
          const tapInternalKey = require('./shared/tapInternalKey');
          const witnessScript = require('./shared/witnessScript');
          const globals = {
            unsignedTx,
            globalXpub,
            // pass an Array of key bytes that require pubkey beside the key
            checkPubkey: checkPubkey.makeChecker([]),
          };
          exports.globals = globals;
          const inputs = {
            nonWitnessUtxo,
            partialSig,
            sighashType,
            finalScriptSig,
            finalScriptWitness,
            porCommitment,
            witnessUtxo,
            bip32Derivation: bip32Derivation.makeConverter(
              typeFields_1.InputTypes.BIP32_DERIVATION
            ),
            redeemScript: redeemScript.makeConverter(
              typeFields_1.InputTypes.REDEEM_SCRIPT
            ),
            witnessScript: witnessScript.makeConverter(
              typeFields_1.InputTypes.WITNESS_SCRIPT
            ),
            checkPubkey: checkPubkey.makeChecker([
              typeFields_1.InputTypes.PARTIAL_SIG,
              typeFields_1.InputTypes.BIP32_DERIVATION,
            ]),
            tapKeySig,
            tapScriptSig,
            tapLeafScript,
            tapBip32Derivation: tapBip32Derivation.makeConverter(
              typeFields_1.InputTypes.TAP_BIP32_DERIVATION
            ),
            tapInternalKey: tapInternalKey.makeConverter(
              typeFields_1.InputTypes.TAP_INTERNAL_KEY
            ),
            tapMerkleRoot,
          };
          exports.inputs = inputs;
          const outputs = {
            bip32Derivation: bip32Derivation.makeConverter(
              typeFields_1.OutputTypes.BIP32_DERIVATION
            ),
            redeemScript: redeemScript.makeConverter(
              typeFields_1.OutputTypes.REDEEM_SCRIPT
            ),
            witnessScript: witnessScript.makeConverter(
              typeFields_1.OutputTypes.WITNESS_SCRIPT
            ),
            checkPubkey: checkPubkey.makeChecker([
              typeFields_1.OutputTypes.BIP32_DERIVATION,
            ]),
            tapBip32Derivation: tapBip32Derivation.makeConverter(
              typeFields_1.OutputTypes.TAP_BIP32_DERIVATION
            ),
            tapTree,
            tapInternalKey: tapInternalKey.makeConverter(
              typeFields_1.OutputTypes.TAP_INTERNAL_KEY
            ),
          };
          exports.outputs = outputs;
        },
        {
          '../typeFields': 42,
          './global/globalXpub': 15,
          './global/unsignedTx': 16,
          './input/finalScriptSig': 18,
          './input/finalScriptWitness': 19,
          './input/nonWitnessUtxo': 20,
          './input/partialSig': 21,
          './input/porCommitment': 22,
          './input/sighashType': 23,
          './input/tapKeySig': 24,
          './input/tapLeafScript': 25,
          './input/tapMerkleRoot': 26,
          './input/tapScriptSig': 27,
          './input/witnessUtxo': 28,
          './output/tapTree': 29,
          './shared/bip32Derivation': 30,
          './shared/checkPubkey': 31,
          './shared/redeemScript': 32,
          './shared/tapBip32Derivation': 33,
          './shared/tapInternalKey': 34,
          './shared/witnessScript': 35,
        },
      ],
      18: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTSIG) {
                  throw new Error(
                    'Decode Error: could not decode finalScriptSig with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                return keyVal.value;
              }
              exports.decode = decode;
              function encode(data) {
                const key = Buffer.from([
                  typeFields_1.InputTypes.FINAL_SCRIPTSIG,
                ]);
                return {
                  key,
                  value: data,
                };
              }
              exports.encode = encode;
              exports.expected = 'Buffer';
              function check(data) {
                return Buffer.isBuffer(data);
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.finalScriptSig === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      19: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (
                  keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS
                ) {
                  throw new Error(
                    'Decode Error: could not decode finalScriptWitness with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                return keyVal.value;
              }
              exports.decode = decode;
              function encode(data) {
                const key = Buffer.from([
                  typeFields_1.InputTypes.FINAL_SCRIPTWITNESS,
                ]);
                return {
                  key,
                  value: data,
                };
              }
              exports.encode = encode;
              exports.expected = 'Buffer';
              function check(data) {
                return Buffer.isBuffer(data);
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.finalScriptWitness === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      20: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (
                  keyVal.key[0] !== typeFields_1.InputTypes.NON_WITNESS_UTXO
                ) {
                  throw new Error(
                    'Decode Error: could not decode nonWitnessUtxo with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                return keyVal.value;
              }
              exports.decode = decode;
              function encode(data) {
                return {
                  key: Buffer.from([typeFields_1.InputTypes.NON_WITNESS_UTXO]),
                  value: data,
                };
              }
              exports.encode = encode;
              exports.expected = 'Buffer';
              function check(data) {
                return Buffer.isBuffer(data);
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.nonWitnessUtxo === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      21: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.InputTypes.PARTIAL_SIG) {
                  throw new Error(
                    'Decode Error: could not decode partialSig with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if (
                  !(keyVal.key.length === 34 || keyVal.key.length === 66) ||
                  ![2, 3, 4].includes(keyVal.key[1])
                ) {
                  throw new Error(
                    'Decode Error: partialSig has invalid pubkey in key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                const pubkey = keyVal.key.slice(1);
                return {
                  pubkey,
                  signature: keyVal.value,
                };
              }
              exports.decode = decode;
              function encode(pSig) {
                const head = Buffer.from([typeFields_1.InputTypes.PARTIAL_SIG]);
                return {
                  key: Buffer.concat([head, pSig.pubkey]),
                  value: pSig.signature,
                };
              }
              exports.encode = encode;
              exports.expected = '{ pubkey: Buffer; signature: Buffer; }';
              function check(data) {
                return (
                  Buffer.isBuffer(data.pubkey) &&
                  Buffer.isBuffer(data.signature) &&
                  [33, 65].includes(data.pubkey.length) &&
                  [2, 3, 4].includes(data.pubkey[0]) &&
                  isDerSigWithSighash(data.signature)
                );
              }
              exports.check = check;
              function isDerSigWithSighash(buf) {
                if (!Buffer.isBuffer(buf) || buf.length < 9) return false;
                if (buf[0] !== 0x30) return false;
                if (buf.length !== buf[1] + 3) return false;
                if (buf[2] !== 0x02) return false;
                const rLen = buf[3];
                if (rLen > 33 || rLen < 1) return false;
                if (buf[3 + rLen + 1] !== 0x02) return false;
                const sLen = buf[3 + rLen + 2];
                if (sLen > 33 || sLen < 1) return false;
                if (buf.length !== 3 + rLen + 2 + sLen + 2) return false;
                return true;
              }
              function canAddToArray(array, item, dupeSet) {
                const dupeString = item.pubkey.toString('hex');
                if (dupeSet.has(dupeString)) return false;
                dupeSet.add(dupeString);
                return (
                  array.filter((v) => v.pubkey.equals(item.pubkey)).length === 0
                );
              }
              exports.canAddToArray = canAddToArray;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      22: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.InputTypes.POR_COMMITMENT) {
                  throw new Error(
                    'Decode Error: could not decode porCommitment with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                return keyVal.value.toString('utf8');
              }
              exports.decode = decode;
              function encode(data) {
                const key = Buffer.from([
                  typeFields_1.InputTypes.POR_COMMITMENT,
                ]);
                return {
                  key,
                  value: Buffer.from(data, 'utf8'),
                };
              }
              exports.encode = encode;
              exports.expected = 'string';
              function check(data) {
                return typeof data === 'string';
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.porCommitment === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      23: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.InputTypes.SIGHASH_TYPE) {
                  throw new Error(
                    'Decode Error: could not decode sighashType with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                return keyVal.value.readUInt32LE(0);
              }
              exports.decode = decode;
              function encode(data) {
                const key = Buffer.from([typeFields_1.InputTypes.SIGHASH_TYPE]);
                const value = Buffer.allocUnsafe(4);
                value.writeUInt32LE(data, 0);
                return {
                  key,
                  value,
                };
              }
              exports.encode = encode;
              exports.expected = 'number';
              function check(data) {
                return typeof data === 'number';
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.sighashType === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      24: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (
                  keyVal.key[0] !== typeFields_1.InputTypes.TAP_KEY_SIG ||
                  keyVal.key.length !== 1
                ) {
                  throw new Error(
                    'Decode Error: could not decode tapKeySig with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if (!check(keyVal.value)) {
                  throw new Error(
                    'Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature'
                  );
                }
                return keyVal.value;
              }
              exports.decode = decode;
              function encode(value) {
                const key = Buffer.from([typeFields_1.InputTypes.TAP_KEY_SIG]);
                return { key, value };
              }
              exports.encode = encode;
              exports.expected = 'Buffer';
              function check(data) {
                return (
                  Buffer.isBuffer(data) &&
                  (data.length === 64 || data.length === 65)
                );
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.tapKeySig === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      25: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.InputTypes.TAP_LEAF_SCRIPT) {
                  throw new Error(
                    'Decode Error: could not decode tapLeafScript with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if ((keyVal.key.length - 2) % 32 !== 0) {
                  throw new Error(
                    'Decode Error: tapLeafScript has invalid control block in key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                const leafVersion = keyVal.value[keyVal.value.length - 1];
                if ((keyVal.key[1] & 0xfe) !== leafVersion) {
                  throw new Error(
                    'Decode Error: tapLeafScript bad leaf version in key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                const script = keyVal.value.slice(0, -1);
                const controlBlock = keyVal.key.slice(1);
                return { controlBlock, script, leafVersion };
              }
              exports.decode = decode;
              function encode(tScript) {
                const head = Buffer.from([
                  typeFields_1.InputTypes.TAP_LEAF_SCRIPT,
                ]);
                const verBuf = Buffer.from([tScript.leafVersion]);
                return {
                  key: Buffer.concat([head, tScript.controlBlock]),
                  value: Buffer.concat([tScript.script, verBuf]),
                };
              }
              exports.encode = encode;
              exports.expected =
                '{ controlBlock: Buffer; leafVersion: number, script: Buffer; }';
              function check(data) {
                return (
                  Buffer.isBuffer(data.controlBlock) &&
                  (data.controlBlock.length - 1) % 32 === 0 &&
                  (data.controlBlock[0] & 0xfe) === data.leafVersion &&
                  Buffer.isBuffer(data.script)
                );
              }
              exports.check = check;
              function canAddToArray(array, item, dupeSet) {
                const dupeString = item.controlBlock.toString('hex');
                if (dupeSet.has(dupeString)) return false;
                dupeSet.add(dupeString);
                return (
                  array.filter((v) => v.controlBlock.equals(item.controlBlock))
                    .length === 0
                );
              }
              exports.canAddToArray = canAddToArray;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      26: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (
                  keyVal.key[0] !== typeFields_1.InputTypes.TAP_MERKLE_ROOT ||
                  keyVal.key.length !== 1
                ) {
                  throw new Error(
                    'Decode Error: could not decode tapMerkleRoot with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if (!check(keyVal.value)) {
                  throw new Error(
                    'Decode Error: tapMerkleRoot not a 32-byte hash'
                  );
                }
                return keyVal.value;
              }
              exports.decode = decode;
              function encode(value) {
                const key = Buffer.from([
                  typeFields_1.InputTypes.TAP_MERKLE_ROOT,
                ]);
                return { key, value };
              }
              exports.encode = encode;
              exports.expected = 'Buffer';
              function check(data) {
                return Buffer.isBuffer(data) && data.length === 32;
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.tapMerkleRoot === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      27: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.InputTypes.TAP_SCRIPT_SIG) {
                  throw new Error(
                    'Decode Error: could not decode tapScriptSig with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if (keyVal.key.length !== 65) {
                  throw new Error(
                    'Decode Error: tapScriptSig has invalid key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                if (keyVal.value.length !== 64 && keyVal.value.length !== 65) {
                  throw new Error(
                    'Decode Error: tapScriptSig has invalid signature in key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                const pubkey = keyVal.key.slice(1, 33);
                const leafHash = keyVal.key.slice(33);
                return {
                  pubkey,
                  leafHash,
                  signature: keyVal.value,
                };
              }
              exports.decode = decode;
              function encode(tSig) {
                const head = Buffer.from([
                  typeFields_1.InputTypes.TAP_SCRIPT_SIG,
                ]);
                return {
                  key: Buffer.concat([head, tSig.pubkey, tSig.leafHash]),
                  value: tSig.signature,
                };
              }
              exports.encode = encode;
              exports.expected =
                '{ pubkey: Buffer; leafHash: Buffer; signature: Buffer; }';
              function check(data) {
                return (
                  Buffer.isBuffer(data.pubkey) &&
                  Buffer.isBuffer(data.leafHash) &&
                  Buffer.isBuffer(data.signature) &&
                  data.pubkey.length === 32 &&
                  data.leafHash.length === 32 &&
                  (data.signature.length === 64 || data.signature.length === 65)
                );
              }
              exports.check = check;
              function canAddToArray(array, item, dupeSet) {
                const dupeString =
                  item.pubkey.toString('hex') + item.leafHash.toString('hex');
                if (dupeSet.has(dupeString)) return false;
                dupeSet.add(dupeString);
                return (
                  array.filter(
                    (v) =>
                      v.pubkey.equals(item.pubkey) &&
                      v.leafHash.equals(item.leafHash)
                  ).length === 0
                );
              }
              exports.canAddToArray = canAddToArray;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, buffer: 183 },
      ],
      28: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              const tools_1 = require('../tools');
              const varuint = require('../varint');
              function decode(keyVal) {
                if (keyVal.key[0] !== typeFields_1.InputTypes.WITNESS_UTXO) {
                  throw new Error(
                    'Decode Error: could not decode witnessUtxo with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                const value = tools_1.readUInt64LE(keyVal.value, 0);
                let _offset = 8;
                const scriptLen = varuint.decode(keyVal.value, _offset);
                _offset += varuint.encodingLength(scriptLen);
                const script = keyVal.value.slice(_offset);
                if (script.length !== scriptLen) {
                  throw new Error(
                    'Decode Error: WITNESS_UTXO script is not proper length'
                  );
                }
                return {
                  script,
                  value,
                };
              }
              exports.decode = decode;
              function encode(data) {
                const { script, value } = data;
                const varintLen = varuint.encodingLength(script.length);
                const result = Buffer.allocUnsafe(
                  8 + varintLen + script.length
                );
                tools_1.writeUInt64LE(result, value, 0);
                varuint.encode(script.length, result, 8);
                script.copy(result, 8 + varintLen);
                return {
                  key: Buffer.from([typeFields_1.InputTypes.WITNESS_UTXO]),
                  value: result,
                };
              }
              exports.encode = encode;
              exports.expected = '{ script: Buffer; value: number; }';
              function check(data) {
                return (
                  Buffer.isBuffer(data.script) && typeof data.value === 'number'
                );
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.witnessUtxo === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          '../../typeFields': 42,
          '../tools': 36,
          '../varint': 37,
          buffer: 183,
        },
      ],
      29: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const typeFields_1 = require('../../typeFields');
              const varuint = require('../varint');
              function decode(keyVal) {
                if (
                  keyVal.key[0] !== typeFields_1.OutputTypes.TAP_TREE ||
                  keyVal.key.length !== 1
                ) {
                  throw new Error(
                    'Decode Error: could not decode tapTree with key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
                let _offset = 0;
                const data = [];
                while (_offset < keyVal.value.length) {
                  const depth = keyVal.value[_offset++];
                  const leafVersion = keyVal.value[_offset++];
                  const scriptLen = varuint.decode(keyVal.value, _offset);
                  _offset += varuint.encodingLength(scriptLen);
                  data.push({
                    depth,
                    leafVersion,
                    script: keyVal.value.slice(_offset, _offset + scriptLen),
                  });
                  _offset += scriptLen;
                }
                return { leaves: data };
              }
              exports.decode = decode;
              function encode(tree) {
                const key = Buffer.from([typeFields_1.OutputTypes.TAP_TREE]);
                const bufs = [].concat(
                  ...tree.leaves.map((tapLeaf) => [
                    Buffer.of(tapLeaf.depth, tapLeaf.leafVersion),
                    varuint.encode(tapLeaf.script.length),
                    tapLeaf.script,
                  ])
                );
                return {
                  key,
                  value: Buffer.concat(bufs),
                };
              }
              exports.encode = encode;
              exports.expected =
                '{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }';
              function check(data) {
                return (
                  Array.isArray(data.leaves) &&
                  data.leaves.every(
                    (tapLeaf) =>
                      tapLeaf.depth >= 0 &&
                      tapLeaf.depth <= 128 &&
                      (tapLeaf.leafVersion & 0xfe) === tapLeaf.leafVersion &&
                      Buffer.isBuffer(tapLeaf.script)
                  )
                );
              }
              exports.check = check;
              function canAdd(currentData, newData) {
                return (
                  !!currentData &&
                  !!newData &&
                  currentData.tapTree === undefined
                );
              }
              exports.canAdd = canAdd;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../../typeFields': 42, '../varint': 37, buffer: 183 },
      ],
      30: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const range = (n) => [...Array(n).keys()];
              const isValidDERKey = (pubkey) =>
                (pubkey.length === 33 && [2, 3].includes(pubkey[0])) ||
                (pubkey.length === 65 && 4 === pubkey[0]);
              function makeConverter(TYPE_BYTE, isValidPubkey = isValidDERKey) {
                function decode(keyVal) {
                  if (keyVal.key[0] !== TYPE_BYTE) {
                    throw new Error(
                      'Decode Error: could not decode bip32Derivation with key 0x' +
                        keyVal.key.toString('hex')
                    );
                  }
                  const pubkey = keyVal.key.slice(1);
                  if (!isValidPubkey(pubkey)) {
                    throw new Error(
                      'Decode Error: bip32Derivation has invalid pubkey in key 0x' +
                        keyVal.key.toString('hex')
                    );
                  }
                  if ((keyVal.value.length / 4) % 1 !== 0) {
                    throw new Error(
                      'Decode Error: Input BIP32_DERIVATION value length should be multiple of 4'
                    );
                  }
                  const data = {
                    masterFingerprint: keyVal.value.slice(0, 4),
                    pubkey,
                    path: 'm',
                  };
                  for (const i of range(keyVal.value.length / 4 - 1)) {
                    const val = keyVal.value.readUInt32LE(i * 4 + 4);
                    const isHard = !!(val & 0x80000000);
                    const idx = val & 0x7fffffff;
                    data.path += '/' + idx.toString(10) + (isHard ? "'" : '');
                  }
                  return data;
                }
                function encode(data) {
                  const head = Buffer.from([TYPE_BYTE]);
                  const key = Buffer.concat([head, data.pubkey]);
                  const splitPath = data.path.split('/');
                  const value = Buffer.allocUnsafe(splitPath.length * 4);
                  data.masterFingerprint.copy(value, 0);
                  let offset = 4;
                  splitPath.slice(1).forEach((level) => {
                    const isHard = level.slice(-1) === "'";
                    let num =
                      0x7fffffff &
                      parseInt(isHard ? level.slice(0, -1) : level, 10);
                    if (isHard) num += 0x80000000;
                    value.writeUInt32LE(num, offset);
                    offset += 4;
                  });
                  return {
                    key,
                    value,
                  };
                }
                const expected =
                  '{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }';
                function check(data) {
                  return (
                    Buffer.isBuffer(data.pubkey) &&
                    Buffer.isBuffer(data.masterFingerprint) &&
                    typeof data.path === 'string' &&
                    isValidPubkey(data.pubkey) &&
                    data.masterFingerprint.length === 4
                  );
                }
                function canAddToArray(array, item, dupeSet) {
                  const dupeString = item.pubkey.toString('hex');
                  if (dupeSet.has(dupeString)) return false;
                  dupeSet.add(dupeString);
                  return (
                    array.filter((v) => v.pubkey.equals(item.pubkey)).length ===
                    0
                  );
                }
                return {
                  decode,
                  encode,
                  check,
                  expected,
                  canAddToArray,
                };
              }
              exports.makeConverter = makeConverter;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      31: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          function makeChecker(pubkeyTypes) {
            return checkPubkey;
            function checkPubkey(keyVal) {
              let pubkey;
              if (pubkeyTypes.includes(keyVal.key[0])) {
                pubkey = keyVal.key.slice(1);
                if (
                  !(pubkey.length === 33 || pubkey.length === 65) ||
                  ![2, 3, 4].includes(pubkey[0])
                ) {
                  throw new Error(
                    'Format Error: invalid pubkey in key 0x' +
                      keyVal.key.toString('hex')
                  );
                }
              }
              return pubkey;
            }
          }
          exports.makeChecker = makeChecker;
        },
        {},
      ],
      32: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              function makeConverter(TYPE_BYTE) {
                function decode(keyVal) {
                  if (keyVal.key[0] !== TYPE_BYTE) {
                    throw new Error(
                      'Decode Error: could not decode redeemScript with key 0x' +
                        keyVal.key.toString('hex')
                    );
                  }
                  return keyVal.value;
                }
                function encode(data) {
                  const key = Buffer.from([TYPE_BYTE]);
                  return {
                    key,
                    value: data,
                  };
                }
                const expected = 'Buffer';
                function check(data) {
                  return Buffer.isBuffer(data);
                }
                function canAdd(currentData, newData) {
                  return (
                    !!currentData &&
                    !!newData &&
                    currentData.redeemScript === undefined
                  );
                }
                return {
                  decode,
                  encode,
                  check,
                  expected,
                  canAdd,
                };
              }
              exports.makeConverter = makeConverter;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      33: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const varuint = require('../varint');
              const bip32Derivation = require('./bip32Derivation');
              const isValidBIP340Key = (pubkey) => pubkey.length === 32;
              function makeConverter(TYPE_BYTE) {
                const parent = bip32Derivation.makeConverter(
                  TYPE_BYTE,
                  isValidBIP340Key
                );
                function decode(keyVal) {
                  const nHashes = varuint.decode(keyVal.value);
                  const nHashesLen = varuint.encodingLength(nHashes);
                  const base = parent.decode({
                    key: keyVal.key,
                    value: keyVal.value.slice(nHashesLen + nHashes * 32),
                  });
                  const leafHashes = new Array(nHashes);
                  for (
                    let i = 0, _offset = nHashesLen;
                    i < nHashes;
                    i++, _offset += 32
                  ) {
                    leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);
                  }
                  return Object.assign({}, base, { leafHashes });
                }
                function encode(data) {
                  const base = parent.encode(data);
                  const nHashesLen = varuint.encodingLength(
                    data.leafHashes.length
                  );
                  const nHashesBuf = Buffer.allocUnsafe(nHashesLen);
                  varuint.encode(data.leafHashes.length, nHashesBuf);
                  const value = Buffer.concat([
                    nHashesBuf,
                    ...data.leafHashes,
                    base.value,
                  ]);
                  return Object.assign({}, base, { value });
                }
                const expected =
                  '{ ' +
                  'masterFingerprint: Buffer; ' +
                  'pubkey: Buffer; ' +
                  'path: string; ' +
                  'leafHashes: Buffer[]; ' +
                  '}';
                function check(data) {
                  return (
                    Array.isArray(data.leafHashes) &&
                    data.leafHashes.every(
                      (leafHash) =>
                        Buffer.isBuffer(leafHash) && leafHash.length === 32
                    ) &&
                    parent.check(data)
                  );
                }
                return {
                  decode,
                  encode,
                  check,
                  expected,
                  canAddToArray: parent.canAddToArray,
                };
              }
              exports.makeConverter = makeConverter;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../varint': 37, './bip32Derivation': 30, buffer: 183 },
      ],
      34: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              function makeConverter(TYPE_BYTE) {
                function decode(keyVal) {
                  if (keyVal.key[0] !== TYPE_BYTE || keyVal.key.length !== 1) {
                    throw new Error(
                      'Decode Error: could not decode tapInternalKey with key 0x' +
                        keyVal.key.toString('hex')
                    );
                  }
                  if (keyVal.value.length !== 32) {
                    throw new Error(
                      'Decode Error: tapInternalKey not a 32-byte x-only pubkey'
                    );
                  }
                  return keyVal.value;
                }
                function encode(value) {
                  const key = Buffer.from([TYPE_BYTE]);
                  return { key, value };
                }
                const expected = 'Buffer';
                function check(data) {
                  return Buffer.isBuffer(data) && data.length === 32;
                }
                function canAdd(currentData, newData) {
                  return (
                    !!currentData &&
                    !!newData &&
                    currentData.tapInternalKey === undefined
                  );
                }
                return {
                  decode,
                  encode,
                  check,
                  expected,
                  canAdd,
                };
              }
              exports.makeConverter = makeConverter;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      35: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              function makeConverter(TYPE_BYTE) {
                function decode(keyVal) {
                  if (keyVal.key[0] !== TYPE_BYTE) {
                    throw new Error(
                      'Decode Error: could not decode witnessScript with key 0x' +
                        keyVal.key.toString('hex')
                    );
                  }
                  return keyVal.value;
                }
                function encode(data) {
                  const key = Buffer.from([TYPE_BYTE]);
                  return {
                    key,
                    value: data,
                  };
                }
                const expected = 'Buffer';
                function check(data) {
                  return Buffer.isBuffer(data);
                }
                function canAdd(currentData, newData) {
                  return (
                    !!currentData &&
                    !!newData &&
                    currentData.witnessScript === undefined
                  );
                }
                return {
                  decode,
                  encode,
                  check,
                  expected,
                  canAdd,
                };
              }
              exports.makeConverter = makeConverter;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      36: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const varuint = require('./varint');
              exports.range = (n) => [...Array(n).keys()];
              function reverseBuffer(buffer) {
                if (buffer.length < 1) return buffer;
                let j = buffer.length - 1;
                let tmp = 0;
                for (let i = 0; i < buffer.length / 2; i++) {
                  tmp = buffer[i];
                  buffer[i] = buffer[j];
                  buffer[j] = tmp;
                  j--;
                }
                return buffer;
              }
              exports.reverseBuffer = reverseBuffer;
              function keyValsToBuffer(keyVals) {
                const buffers = keyVals.map(keyValToBuffer);
                buffers.push(Buffer.from([0]));
                return Buffer.concat(buffers);
              }
              exports.keyValsToBuffer = keyValsToBuffer;
              function keyValToBuffer(keyVal) {
                const keyLen = keyVal.key.length;
                const valLen = keyVal.value.length;
                const keyVarIntLen = varuint.encodingLength(keyLen);
                const valVarIntLen = varuint.encodingLength(valLen);
                const buffer = Buffer.allocUnsafe(
                  keyVarIntLen + keyLen + valVarIntLen + valLen
                );
                varuint.encode(keyLen, buffer, 0);
                keyVal.key.copy(buffer, keyVarIntLen);
                varuint.encode(valLen, buffer, keyVarIntLen + keyLen);
                keyVal.value.copy(buffer, keyVarIntLen + keyLen + valVarIntLen);
                return buffer;
              }
              exports.keyValToBuffer = keyValToBuffer;
              // https://github.com/feross/buffer/blob/master/index.js#L1127
              function verifuint(value, max) {
                if (typeof value !== 'number')
                  throw new Error('cannot write a non-number as a number');
                if (value < 0)
                  throw new Error(
                    'specified a negative value for writing an unsigned value'
                  );
                if (value > max)
                  throw new Error('RangeError: value out of range');
                if (Math.floor(value) !== value)
                  throw new Error('value has a fractional component');
              }
              function readUInt64LE(buffer, offset) {
                const a = buffer.readUInt32LE(offset);
                let b = buffer.readUInt32LE(offset + 4);
                b *= 0x100000000;
                verifuint(b + a, 0x001fffffffffffff);
                return b + a;
              }
              exports.readUInt64LE = readUInt64LE;
              function writeUInt64LE(buffer, value, offset) {
                verifuint(value, 0x001fffffffffffff);
                buffer.writeInt32LE(value & -1, offset);
                buffer.writeUInt32LE(
                  Math.floor(value / 0x100000000),
                  offset + 4
                );
                return offset + 8;
              }
              exports.writeUInt64LE = writeUInt64LE;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { './varint': 37, buffer: 183 },
      ],
      37: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              // Number.MAX_SAFE_INTEGER
              const MAX_SAFE_INTEGER = 9007199254740991;
              function checkUInt53(n) {
                if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
                  throw new RangeError('value out of range');
              }
              function encode(_number, buffer, offset) {
                checkUInt53(_number);
                if (!buffer)
                  buffer = Buffer.allocUnsafe(encodingLength(_number));
                if (!Buffer.isBuffer(buffer))
                  throw new TypeError('buffer must be a Buffer instance');
                if (!offset) offset = 0;
                // 8 bit
                if (_number < 0xfd) {
                  buffer.writeUInt8(_number, offset);
                  Object.assign(encode, { bytes: 1 });
                  // 16 bit
                } else if (_number <= 0xffff) {
                  buffer.writeUInt8(0xfd, offset);
                  buffer.writeUInt16LE(_number, offset + 1);
                  Object.assign(encode, { bytes: 3 });
                  // 32 bit
                } else if (_number <= 0xffffffff) {
                  buffer.writeUInt8(0xfe, offset);
                  buffer.writeUInt32LE(_number, offset + 1);
                  Object.assign(encode, { bytes: 5 });
                  // 64 bit
                } else {
                  buffer.writeUInt8(0xff, offset);
                  buffer.writeUInt32LE(_number >>> 0, offset + 1);
                  buffer.writeUInt32LE((_number / 0x100000000) | 0, offset + 5);
                  Object.assign(encode, { bytes: 9 });
                }
                return buffer;
              }
              exports.encode = encode;
              function decode(buffer, offset) {
                if (!Buffer.isBuffer(buffer))
                  throw new TypeError('buffer must be a Buffer instance');
                if (!offset) offset = 0;
                const first = buffer.readUInt8(offset);
                // 8 bit
                if (first < 0xfd) {
                  Object.assign(decode, { bytes: 1 });
                  return first;
                  // 16 bit
                } else if (first === 0xfd) {
                  Object.assign(decode, { bytes: 3 });
                  return buffer.readUInt16LE(offset + 1);
                  // 32 bit
                } else if (first === 0xfe) {
                  Object.assign(decode, { bytes: 5 });
                  return buffer.readUInt32LE(offset + 1);
                  // 64 bit
                } else {
                  Object.assign(decode, { bytes: 9 });
                  const lo = buffer.readUInt32LE(offset + 1);
                  const hi = buffer.readUInt32LE(offset + 5);
                  const _number = hi * 0x0100000000 + lo;
                  checkUInt53(_number);
                  return _number;
                }
              }
              exports.decode = decode;
              function encodingLength(_number) {
                checkUInt53(_number);
                return _number < 0xfd
                  ? 1
                  : _number <= 0xffff
                  ? 3
                  : _number <= 0xffffffff
                  ? 5
                  : 9;
              }
              exports.encodingLength = encodingLength;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      38: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const convert = require('../converter');
              const tools_1 = require('../converter/tools');
              const varuint = require('../converter/varint');
              const typeFields_1 = require('../typeFields');
              function psbtFromBuffer(buffer, txGetter) {
                let offset = 0;
                function varSlice() {
                  const keyLen = varuint.decode(buffer, offset);
                  offset += varuint.encodingLength(keyLen);
                  const key = buffer.slice(offset, offset + keyLen);
                  offset += keyLen;
                  return key;
                }
                function readUInt32BE() {
                  const num = buffer.readUInt32BE(offset);
                  offset += 4;
                  return num;
                }
                function readUInt8() {
                  const num = buffer.readUInt8(offset);
                  offset += 1;
                  return num;
                }
                function getKeyValue() {
                  const key = varSlice();
                  const value = varSlice();
                  return {
                    key,
                    value,
                  };
                }
                function checkEndOfKeyValPairs() {
                  if (offset >= buffer.length) {
                    throw new Error('Format Error: Unexpected End of PSBT');
                  }
                  const isEnd = buffer.readUInt8(offset) === 0;
                  if (isEnd) {
                    offset++;
                  }
                  return isEnd;
                }
                if (readUInt32BE() !== 0x70736274) {
                  throw new Error('Format Error: Invalid Magic Number');
                }
                if (readUInt8() !== 0xff) {
                  throw new Error(
                    'Format Error: Magic Number must be followed by 0xff separator'
                  );
                }
                const globalMapKeyVals = [];
                const globalKeyIndex = {};
                while (!checkEndOfKeyValPairs()) {
                  const keyVal = getKeyValue();
                  const hexKey = keyVal.key.toString('hex');
                  if (globalKeyIndex[hexKey]) {
                    throw new Error(
                      'Format Error: Keys must be unique for global keymap: key ' +
                        hexKey
                    );
                  }
                  globalKeyIndex[hexKey] = 1;
                  globalMapKeyVals.push(keyVal);
                }
                const unsignedTxMaps = globalMapKeyVals.filter(
                  (keyVal) =>
                    keyVal.key[0] === typeFields_1.GlobalTypes.UNSIGNED_TX
                );
                if (unsignedTxMaps.length !== 1) {
                  throw new Error('Format Error: Only one UNSIGNED_TX allowed');
                }
                const unsignedTx = txGetter(unsignedTxMaps[0].value);
                // Get input and output counts to loop the respective fields
                const { inputCount, outputCount } =
                  unsignedTx.getInputOutputCounts();
                const inputKeyVals = [];
                const outputKeyVals = [];
                // Get input fields
                for (const index of tools_1.range(inputCount)) {
                  const inputKeyIndex = {};
                  const input = [];
                  while (!checkEndOfKeyValPairs()) {
                    const keyVal = getKeyValue();
                    const hexKey = keyVal.key.toString('hex');
                    if (inputKeyIndex[hexKey]) {
                      throw new Error(
                        'Format Error: Keys must be unique for each input: ' +
                          'input index ' +
                          index +
                          ' key ' +
                          hexKey
                      );
                    }
                    inputKeyIndex[hexKey] = 1;
                    input.push(keyVal);
                  }
                  inputKeyVals.push(input);
                }
                for (const index of tools_1.range(outputCount)) {
                  const outputKeyIndex = {};
                  const output = [];
                  while (!checkEndOfKeyValPairs()) {
                    const keyVal = getKeyValue();
                    const hexKey = keyVal.key.toString('hex');
                    if (outputKeyIndex[hexKey]) {
                      throw new Error(
                        'Format Error: Keys must be unique for each output: ' +
                          'output index ' +
                          index +
                          ' key ' +
                          hexKey
                      );
                    }
                    outputKeyIndex[hexKey] = 1;
                    output.push(keyVal);
                  }
                  outputKeyVals.push(output);
                }
                return psbtFromKeyVals(unsignedTx, {
                  globalMapKeyVals,
                  inputKeyVals,
                  outputKeyVals,
                });
              }
              exports.psbtFromBuffer = psbtFromBuffer;
              function checkKeyBuffer(type, keyBuf, keyNum) {
                if (!keyBuf.equals(Buffer.from([keyNum]))) {
                  throw new Error(
                    `Format Error: Invalid ${type} key: ${keyBuf.toString(
                      'hex'
                    )}`
                  );
                }
              }
              exports.checkKeyBuffer = checkKeyBuffer;
              function psbtFromKeyVals(
                unsignedTx,
                { globalMapKeyVals, inputKeyVals, outputKeyVals }
              ) {
                // That was easy :-)
                const globalMap = {
                  unsignedTx,
                };
                let txCount = 0;
                for (const keyVal of globalMapKeyVals) {
                  // If a globalMap item needs pubkey, uncomment
                  // const pubkey = convert.globals.checkPubkey(keyVal);
                  switch (keyVal.key[0]) {
                    case typeFields_1.GlobalTypes.UNSIGNED_TX:
                      checkKeyBuffer(
                        'global',
                        keyVal.key,
                        typeFields_1.GlobalTypes.UNSIGNED_TX
                      );
                      if (txCount > 0) {
                        throw new Error(
                          'Format Error: GlobalMap has multiple UNSIGNED_TX'
                        );
                      }
                      txCount++;
                      break;
                    case typeFields_1.GlobalTypes.GLOBAL_XPUB:
                      if (globalMap.globalXpub === undefined) {
                        globalMap.globalXpub = [];
                      }
                      globalMap.globalXpub.push(
                        convert.globals.globalXpub.decode(keyVal)
                      );
                      break;
                    default:
                      // This will allow inclusion during serialization.
                      if (!globalMap.unknownKeyVals)
                        globalMap.unknownKeyVals = [];
                      globalMap.unknownKeyVals.push(keyVal);
                  }
                }
                // Get input and output counts to loop the respective fields
                const inputCount = inputKeyVals.length;
                const outputCount = outputKeyVals.length;
                const inputs = [];
                const outputs = [];
                // Get input fields
                for (const index of tools_1.range(inputCount)) {
                  const input = {};
                  for (const keyVal of inputKeyVals[index]) {
                    convert.inputs.checkPubkey(keyVal);
                    switch (keyVal.key[0]) {
                      case typeFields_1.InputTypes.NON_WITNESS_UTXO:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.NON_WITNESS_UTXO
                        );
                        if (input.nonWitnessUtxo !== undefined) {
                          throw new Error(
                            'Format Error: Input has multiple NON_WITNESS_UTXO'
                          );
                        }
                        input.nonWitnessUtxo =
                          convert.inputs.nonWitnessUtxo.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.WITNESS_UTXO:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.WITNESS_UTXO
                        );
                        if (input.witnessUtxo !== undefined) {
                          throw new Error(
                            'Format Error: Input has multiple WITNESS_UTXO'
                          );
                        }
                        input.witnessUtxo =
                          convert.inputs.witnessUtxo.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.PARTIAL_SIG:
                        if (input.partialSig === undefined) {
                          input.partialSig = [];
                        }
                        input.partialSig.push(
                          convert.inputs.partialSig.decode(keyVal)
                        );
                        break;
                      case typeFields_1.InputTypes.SIGHASH_TYPE:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.SIGHASH_TYPE
                        );
                        if (input.sighashType !== undefined) {
                          throw new Error(
                            'Format Error: Input has multiple SIGHASH_TYPE'
                          );
                        }
                        input.sighashType =
                          convert.inputs.sighashType.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.REDEEM_SCRIPT:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.REDEEM_SCRIPT
                        );
                        if (input.redeemScript !== undefined) {
                          throw new Error(
                            'Format Error: Input has multiple REDEEM_SCRIPT'
                          );
                        }
                        input.redeemScript =
                          convert.inputs.redeemScript.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.WITNESS_SCRIPT:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.WITNESS_SCRIPT
                        );
                        if (input.witnessScript !== undefined) {
                          throw new Error(
                            'Format Error: Input has multiple WITNESS_SCRIPT'
                          );
                        }
                        input.witnessScript =
                          convert.inputs.witnessScript.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.BIP32_DERIVATION:
                        if (input.bip32Derivation === undefined) {
                          input.bip32Derivation = [];
                        }
                        input.bip32Derivation.push(
                          convert.inputs.bip32Derivation.decode(keyVal)
                        );
                        break;
                      case typeFields_1.InputTypes.FINAL_SCRIPTSIG:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.FINAL_SCRIPTSIG
                        );
                        input.finalScriptSig =
                          convert.inputs.finalScriptSig.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.FINAL_SCRIPTWITNESS:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.FINAL_SCRIPTWITNESS
                        );
                        input.finalScriptWitness =
                          convert.inputs.finalScriptWitness.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.POR_COMMITMENT:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.POR_COMMITMENT
                        );
                        input.porCommitment =
                          convert.inputs.porCommitment.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.TAP_KEY_SIG:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.TAP_KEY_SIG
                        );
                        input.tapKeySig =
                          convert.inputs.tapKeySig.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.TAP_SCRIPT_SIG:
                        if (input.tapScriptSig === undefined) {
                          input.tapScriptSig = [];
                        }
                        input.tapScriptSig.push(
                          convert.inputs.tapScriptSig.decode(keyVal)
                        );
                        break;
                      case typeFields_1.InputTypes.TAP_LEAF_SCRIPT:
                        if (input.tapLeafScript === undefined) {
                          input.tapLeafScript = [];
                        }
                        input.tapLeafScript.push(
                          convert.inputs.tapLeafScript.decode(keyVal)
                        );
                        break;
                      case typeFields_1.InputTypes.TAP_BIP32_DERIVATION:
                        if (input.tapBip32Derivation === undefined) {
                          input.tapBip32Derivation = [];
                        }
                        input.tapBip32Derivation.push(
                          convert.inputs.tapBip32Derivation.decode(keyVal)
                        );
                        break;
                      case typeFields_1.InputTypes.TAP_INTERNAL_KEY:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.TAP_INTERNAL_KEY
                        );
                        input.tapInternalKey =
                          convert.inputs.tapInternalKey.decode(keyVal);
                        break;
                      case typeFields_1.InputTypes.TAP_MERKLE_ROOT:
                        checkKeyBuffer(
                          'input',
                          keyVal.key,
                          typeFields_1.InputTypes.TAP_MERKLE_ROOT
                        );
                        input.tapMerkleRoot =
                          convert.inputs.tapMerkleRoot.decode(keyVal);
                        break;
                      default:
                        // This will allow inclusion during serialization.
                        if (!input.unknownKeyVals) input.unknownKeyVals = [];
                        input.unknownKeyVals.push(keyVal);
                    }
                  }
                  inputs.push(input);
                }
                for (const index of tools_1.range(outputCount)) {
                  const output = {};
                  for (const keyVal of outputKeyVals[index]) {
                    convert.outputs.checkPubkey(keyVal);
                    switch (keyVal.key[0]) {
                      case typeFields_1.OutputTypes.REDEEM_SCRIPT:
                        checkKeyBuffer(
                          'output',
                          keyVal.key,
                          typeFields_1.OutputTypes.REDEEM_SCRIPT
                        );
                        if (output.redeemScript !== undefined) {
                          throw new Error(
                            'Format Error: Output has multiple REDEEM_SCRIPT'
                          );
                        }
                        output.redeemScript =
                          convert.outputs.redeemScript.decode(keyVal);
                        break;
                      case typeFields_1.OutputTypes.WITNESS_SCRIPT:
                        checkKeyBuffer(
                          'output',
                          keyVal.key,
                          typeFields_1.OutputTypes.WITNESS_SCRIPT
                        );
                        if (output.witnessScript !== undefined) {
                          throw new Error(
                            'Format Error: Output has multiple WITNESS_SCRIPT'
                          );
                        }
                        output.witnessScript =
                          convert.outputs.witnessScript.decode(keyVal);
                        break;
                      case typeFields_1.OutputTypes.BIP32_DERIVATION:
                        if (output.bip32Derivation === undefined) {
                          output.bip32Derivation = [];
                        }
                        output.bip32Derivation.push(
                          convert.outputs.bip32Derivation.decode(keyVal)
                        );
                        break;
                      case typeFields_1.OutputTypes.TAP_INTERNAL_KEY:
                        checkKeyBuffer(
                          'output',
                          keyVal.key,
                          typeFields_1.OutputTypes.TAP_INTERNAL_KEY
                        );
                        output.tapInternalKey =
                          convert.outputs.tapInternalKey.decode(keyVal);
                        break;
                      case typeFields_1.OutputTypes.TAP_TREE:
                        checkKeyBuffer(
                          'output',
                          keyVal.key,
                          typeFields_1.OutputTypes.TAP_TREE
                        );
                        output.tapTree = convert.outputs.tapTree.decode(keyVal);
                        break;
                      case typeFields_1.OutputTypes.TAP_BIP32_DERIVATION:
                        if (output.tapBip32Derivation === undefined) {
                          output.tapBip32Derivation = [];
                        }
                        output.tapBip32Derivation.push(
                          convert.outputs.tapBip32Derivation.decode(keyVal)
                        );
                        break;
                      default:
                        if (!output.unknownKeyVals) output.unknownKeyVals = [];
                        output.unknownKeyVals.push(keyVal);
                    }
                  }
                  outputs.push(output);
                }
                return { globalMap, inputs, outputs };
              }
              exports.psbtFromKeyVals = psbtFromKeyVals;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          '../converter': 17,
          '../converter/tools': 36,
          '../converter/varint': 37,
          '../typeFields': 42,
          buffer: 183,
        },
      ],
      39: [
        function (require, module, exports) {
          'use strict';
          function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
          }
          Object.defineProperty(exports, '__esModule', { value: true });
          __export(require('./fromBuffer'));
          __export(require('./toBuffer'));
        },
        { './fromBuffer': 38, './toBuffer': 40 },
      ],
      40: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const convert = require('../converter');
              const tools_1 = require('../converter/tools');
              function psbtToBuffer({ globalMap, inputs, outputs }) {
                const { globalKeyVals, inputKeyVals, outputKeyVals } =
                  psbtToKeyVals({
                    globalMap,
                    inputs,
                    outputs,
                  });
                const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);
                const keyValsOrEmptyToBuffer = (keyVals) =>
                  keyVals.length === 0
                    ? [Buffer.from([0])]
                    : keyVals.map(tools_1.keyValsToBuffer);
                const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);
                const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);
                const header = Buffer.allocUnsafe(5);
                header.writeUIntBE(0x70736274ff, 0, 5);
                return Buffer.concat(
                  [header, globalBuffer].concat(inputBuffers, outputBuffers)
                );
              }
              exports.psbtToBuffer = psbtToBuffer;
              const sortKeyVals = (a, b) => {
                return a.key.compare(b.key);
              };
              function keyValsFromMap(keyValMap, converterFactory) {
                const keyHexSet = new Set();
                const keyVals = Object.entries(keyValMap).reduce(
                  (result, [key, value]) => {
                    if (key === 'unknownKeyVals') return result;
                    // We are checking for undefined anyways. So ignore TS error
                    // @ts-ignore
                    const converter = converterFactory[key];
                    if (converter === undefined) return result;
                    const encodedKeyVals = (
                      Array.isArray(value) ? value : [value]
                    ).map(converter.encode);
                    const keyHexes = encodedKeyVals.map((kv) =>
                      kv.key.toString('hex')
                    );
                    keyHexes.forEach((hex) => {
                      if (keyHexSet.has(hex))
                        throw new Error(
                          'Serialize Error: Duplicate key: ' + hex
                        );
                      keyHexSet.add(hex);
                    });
                    return result.concat(encodedKeyVals);
                  },
                  []
                );
                // Get other keyVals that have not yet been gotten
                const otherKeyVals = keyValMap.unknownKeyVals
                  ? keyValMap.unknownKeyVals.filter((keyVal) => {
                      return !keyHexSet.has(keyVal.key.toString('hex'));
                    })
                  : [];
                return keyVals.concat(otherKeyVals).sort(sortKeyVals);
              }
              function psbtToKeyVals({ globalMap, inputs, outputs }) {
                // First parse the global keyVals
                // Get any extra keyvals to pass along
                return {
                  globalKeyVals: keyValsFromMap(globalMap, convert.globals),
                  inputKeyVals: inputs.map((i) =>
                    keyValsFromMap(i, convert.inputs)
                  ),
                  outputKeyVals: outputs.map((o) =>
                    keyValsFromMap(o, convert.outputs)
                  ),
                };
              }
              exports.psbtToKeyVals = psbtToKeyVals;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { '../converter': 17, '../converter/tools': 36, buffer: 183 },
      ],
      41: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const combiner_1 = require('./combiner');
              const parser_1 = require('./parser');
              const typeFields_1 = require('./typeFields');
              const utils_1 = require('./utils');
              class Psbt {
                constructor(tx) {
                  this.inputs = [];
                  this.outputs = [];
                  this.globalMap = {
                    unsignedTx: tx,
                  };
                }
                static fromBase64(data, txFromBuffer) {
                  const buffer = Buffer.from(data, 'base64');
                  return this.fromBuffer(buffer, txFromBuffer);
                }
                static fromHex(data, txFromBuffer) {
                  const buffer = Buffer.from(data, 'hex');
                  return this.fromBuffer(buffer, txFromBuffer);
                }
                static fromBuffer(buffer, txFromBuffer) {
                  const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);
                  const psbt = new this(results.globalMap.unsignedTx);
                  Object.assign(psbt, results);
                  return psbt;
                }
                toBase64() {
                  const buffer = this.toBuffer();
                  return buffer.toString('base64');
                }
                toHex() {
                  const buffer = this.toBuffer();
                  return buffer.toString('hex');
                }
                toBuffer() {
                  return parser_1.psbtToBuffer(this);
                }
                updateGlobal(updateData) {
                  utils_1.updateGlobal(updateData, this.globalMap);
                  return this;
                }
                updateInput(inputIndex, updateData) {
                  const input = utils_1.checkForInput(this.inputs, inputIndex);
                  utils_1.updateInput(updateData, input);
                  return this;
                }
                updateOutput(outputIndex, updateData) {
                  const output = utils_1.checkForOutput(
                    this.outputs,
                    outputIndex
                  );
                  utils_1.updateOutput(updateData, output);
                  return this;
                }
                addUnknownKeyValToGlobal(keyVal) {
                  utils_1.checkHasKey(
                    keyVal,
                    this.globalMap.unknownKeyVals,
                    utils_1.getEnumLength(typeFields_1.GlobalTypes)
                  );
                  if (!this.globalMap.unknownKeyVals)
                    this.globalMap.unknownKeyVals = [];
                  this.globalMap.unknownKeyVals.push(keyVal);
                  return this;
                }
                addUnknownKeyValToInput(inputIndex, keyVal) {
                  const input = utils_1.checkForInput(this.inputs, inputIndex);
                  utils_1.checkHasKey(
                    keyVal,
                    input.unknownKeyVals,
                    utils_1.getEnumLength(typeFields_1.InputTypes)
                  );
                  if (!input.unknownKeyVals) input.unknownKeyVals = [];
                  input.unknownKeyVals.push(keyVal);
                  return this;
                }
                addUnknownKeyValToOutput(outputIndex, keyVal) {
                  const output = utils_1.checkForOutput(
                    this.outputs,
                    outputIndex
                  );
                  utils_1.checkHasKey(
                    keyVal,
                    output.unknownKeyVals,
                    utils_1.getEnumLength(typeFields_1.OutputTypes)
                  );
                  if (!output.unknownKeyVals) output.unknownKeyVals = [];
                  output.unknownKeyVals.push(keyVal);
                  return this;
                }
                addInput(inputData) {
                  this.globalMap.unsignedTx.addInput(inputData);
                  this.inputs.push({
                    unknownKeyVals: [],
                  });
                  const addKeyVals = inputData.unknownKeyVals || [];
                  const inputIndex = this.inputs.length - 1;
                  if (!Array.isArray(addKeyVals)) {
                    throw new Error('unknownKeyVals must be an Array');
                  }
                  addKeyVals.forEach((keyVal) =>
                    this.addUnknownKeyValToInput(inputIndex, keyVal)
                  );
                  utils_1.addInputAttributes(this.inputs, inputData);
                  return this;
                }
                addOutput(outputData) {
                  this.globalMap.unsignedTx.addOutput(outputData);
                  this.outputs.push({
                    unknownKeyVals: [],
                  });
                  const addKeyVals = outputData.unknownKeyVals || [];
                  const outputIndex = this.outputs.length - 1;
                  if (!Array.isArray(addKeyVals)) {
                    throw new Error('unknownKeyVals must be an Array');
                  }
                  addKeyVals.forEach((keyVal) =>
                    this.addUnknownKeyValToInput(outputIndex, keyVal)
                  );
                  utils_1.addOutputAttributes(this.outputs, outputData);
                  return this;
                }
                clearFinalizedInput(inputIndex) {
                  const input = utils_1.checkForInput(this.inputs, inputIndex);
                  utils_1.inputCheckUncleanFinalized(inputIndex, input);
                  for (const key of Object.keys(input)) {
                    if (
                      ![
                        'witnessUtxo',
                        'nonWitnessUtxo',
                        'finalScriptSig',
                        'finalScriptWitness',
                        'unknownKeyVals',
                      ].includes(key)
                    ) {
                      // @ts-ignore
                      delete input[key];
                    }
                  }
                  return this;
                }
                combine(...those) {
                  // Combine this with those.
                  // Return self for chaining.
                  const result = combiner_1.combine([this].concat(those));
                  Object.assign(this, result);
                  return this;
                }
                getTransaction() {
                  return this.globalMap.unsignedTx.toBuffer();
                }
              }
              exports.Psbt = Psbt;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './combiner': 14,
          './parser': 39,
          './typeFields': 42,
          './utils': 43,
          buffer: 183,
        },
      ],
      42: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          var GlobalTypes;
          (function (GlobalTypes) {
            GlobalTypes[(GlobalTypes['UNSIGNED_TX'] = 0)] = 'UNSIGNED_TX';
            GlobalTypes[(GlobalTypes['GLOBAL_XPUB'] = 1)] = 'GLOBAL_XPUB';
          })((GlobalTypes = exports.GlobalTypes || (exports.GlobalTypes = {})));
          exports.GLOBAL_TYPE_NAMES = ['unsignedTx', 'globalXpub'];
          var InputTypes;
          (function (InputTypes) {
            InputTypes[(InputTypes['NON_WITNESS_UTXO'] = 0)] =
              'NON_WITNESS_UTXO';
            InputTypes[(InputTypes['WITNESS_UTXO'] = 1)] = 'WITNESS_UTXO';
            InputTypes[(InputTypes['PARTIAL_SIG'] = 2)] = 'PARTIAL_SIG';
            InputTypes[(InputTypes['SIGHASH_TYPE'] = 3)] = 'SIGHASH_TYPE';
            InputTypes[(InputTypes['REDEEM_SCRIPT'] = 4)] = 'REDEEM_SCRIPT';
            InputTypes[(InputTypes['WITNESS_SCRIPT'] = 5)] = 'WITNESS_SCRIPT';
            InputTypes[(InputTypes['BIP32_DERIVATION'] = 6)] =
              'BIP32_DERIVATION';
            InputTypes[(InputTypes['FINAL_SCRIPTSIG'] = 7)] = 'FINAL_SCRIPTSIG';
            InputTypes[(InputTypes['FINAL_SCRIPTWITNESS'] = 8)] =
              'FINAL_SCRIPTWITNESS';
            InputTypes[(InputTypes['POR_COMMITMENT'] = 9)] = 'POR_COMMITMENT';
            InputTypes[(InputTypes['TAP_KEY_SIG'] = 19)] = 'TAP_KEY_SIG';
            InputTypes[(InputTypes['TAP_SCRIPT_SIG'] = 20)] = 'TAP_SCRIPT_SIG';
            InputTypes[(InputTypes['TAP_LEAF_SCRIPT'] = 21)] =
              'TAP_LEAF_SCRIPT';
            InputTypes[(InputTypes['TAP_BIP32_DERIVATION'] = 22)] =
              'TAP_BIP32_DERIVATION';
            InputTypes[(InputTypes['TAP_INTERNAL_KEY'] = 23)] =
              'TAP_INTERNAL_KEY';
            InputTypes[(InputTypes['TAP_MERKLE_ROOT'] = 24)] =
              'TAP_MERKLE_ROOT';
          })((InputTypes = exports.InputTypes || (exports.InputTypes = {})));
          exports.INPUT_TYPE_NAMES = [
            'nonWitnessUtxo',
            'witnessUtxo',
            'partialSig',
            'sighashType',
            'redeemScript',
            'witnessScript',
            'bip32Derivation',
            'finalScriptSig',
            'finalScriptWitness',
            'porCommitment',
            'tapKeySig',
            'tapScriptSig',
            'tapLeafScript',
            'tapBip32Derivation',
            'tapInternalKey',
            'tapMerkleRoot',
          ];
          var OutputTypes;
          (function (OutputTypes) {
            OutputTypes[(OutputTypes['REDEEM_SCRIPT'] = 0)] = 'REDEEM_SCRIPT';
            OutputTypes[(OutputTypes['WITNESS_SCRIPT'] = 1)] = 'WITNESS_SCRIPT';
            OutputTypes[(OutputTypes['BIP32_DERIVATION'] = 2)] =
              'BIP32_DERIVATION';
            OutputTypes[(OutputTypes['TAP_INTERNAL_KEY'] = 5)] =
              'TAP_INTERNAL_KEY';
            OutputTypes[(OutputTypes['TAP_TREE'] = 6)] = 'TAP_TREE';
            OutputTypes[(OutputTypes['TAP_BIP32_DERIVATION'] = 7)] =
              'TAP_BIP32_DERIVATION';
          })((OutputTypes = exports.OutputTypes || (exports.OutputTypes = {})));
          exports.OUTPUT_TYPE_NAMES = [
            'redeemScript',
            'witnessScript',
            'bip32Derivation',
            'tapInternalKey',
            'tapTree',
            'tapBip32Derivation',
          ];
        },
        {},
      ],
      43: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const converter = require('./converter');
              function checkForInput(inputs, inputIndex) {
                const input = inputs[inputIndex];
                if (input === undefined)
                  throw new Error(`No input #${inputIndex}`);
                return input;
              }
              exports.checkForInput = checkForInput;
              function checkForOutput(outputs, outputIndex) {
                const output = outputs[outputIndex];
                if (output === undefined)
                  throw new Error(`No output #${outputIndex}`);
                return output;
              }
              exports.checkForOutput = checkForOutput;
              function checkHasKey(checkKeyVal, keyVals, enumLength) {
                if (checkKeyVal.key[0] < enumLength) {
                  throw new Error(
                    `Use the method for your specific key instead of addUnknownKeyVal*`
                  );
                }
                if (
                  keyVals &&
                  keyVals.filter((kv) => kv.key.equals(checkKeyVal.key))
                    .length !== 0
                ) {
                  throw new Error(
                    `Duplicate Key: ${checkKeyVal.key.toString('hex')}`
                  );
                }
              }
              exports.checkHasKey = checkHasKey;
              function getEnumLength(myenum) {
                let count = 0;
                Object.keys(myenum).forEach((val) => {
                  if (Number(isNaN(Number(val)))) {
                    count++;
                  }
                });
                return count;
              }
              exports.getEnumLength = getEnumLength;
              function inputCheckUncleanFinalized(inputIndex, input) {
                let result = false;
                if (input.nonWitnessUtxo || input.witnessUtxo) {
                  const needScriptSig = !!input.redeemScript;
                  const needWitnessScript = !!input.witnessScript;
                  const scriptSigOK = !needScriptSig || !!input.finalScriptSig;
                  const witnessScriptOK =
                    !needWitnessScript || !!input.finalScriptWitness;
                  const hasOneFinal =
                    !!input.finalScriptSig || !!input.finalScriptWitness;
                  result = scriptSigOK && witnessScriptOK && hasOneFinal;
                }
                if (result === false) {
                  throw new Error(
                    `Input #${inputIndex} has too much or too little data to clean`
                  );
                }
              }
              exports.inputCheckUncleanFinalized = inputCheckUncleanFinalized;
              function throwForUpdateMaker(typeName, name, expected, data) {
                throw new Error(
                  `Data for ${typeName} key ${name} is incorrect: Expected ` +
                    `${expected} and got ${JSON.stringify(data)}`
                );
              }
              function updateMaker(typeName) {
                return (updateData, mainData) => {
                  for (const name of Object.keys(updateData)) {
                    // @ts-ignore
                    const data = updateData[name];
                    // @ts-ignore
                    const { canAdd, canAddToArray, check, expected } =
                      // @ts-ignore
                      converter[typeName + 's'][name] || {};
                    const isArray = !!canAddToArray;
                    // If unknown data. ignore and do not add
                    if (check) {
                      if (isArray) {
                        if (
                          !Array.isArray(data) ||
                          // @ts-ignore
                          (mainData[name] && !Array.isArray(mainData[name]))
                        ) {
                          throw new Error(`Key type ${name} must be an array`);
                        }
                        if (!data.every(check)) {
                          throwForUpdateMaker(typeName, name, expected, data);
                        }
                        // @ts-ignore
                        const arr = mainData[name] || [];
                        const dupeCheckSet = new Set();
                        if (
                          !data.every((v) =>
                            canAddToArray(arr, v, dupeCheckSet)
                          )
                        ) {
                          throw new Error(
                            'Can not add duplicate data to array'
                          );
                        }
                        // @ts-ignore
                        mainData[name] = arr.concat(data);
                      } else {
                        if (!check(data)) {
                          throwForUpdateMaker(typeName, name, expected, data);
                        }
                        if (!canAdd(mainData, data)) {
                          throw new Error(
                            `Can not add duplicate data to ${typeName}`
                          );
                        }
                        // @ts-ignore
                        mainData[name] = data;
                      }
                    }
                  }
                };
              }
              exports.updateGlobal = updateMaker('global');
              exports.updateInput = updateMaker('input');
              exports.updateOutput = updateMaker('output');
              function addInputAttributes(inputs, data) {
                const index = inputs.length - 1;
                const input = checkForInput(inputs, index);
                exports.updateInput(data, input);
              }
              exports.addInputAttributes = addInputAttributes;
              function addOutputAttributes(outputs, data) {
                const index = outputs.length - 1;
                const output = checkForOutput(outputs, index);
                exports.updateOutput(data, output);
              }
              exports.addOutputAttributes = addOutputAttributes;
              function defaultVersionSetter(version, txBuf) {
                if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
                  throw new Error('Set Version: Invalid Transaction');
                }
                txBuf.writeUInt32LE(version, 0);
                return txBuf;
              }
              exports.defaultVersionSetter = defaultVersionSetter;
              function defaultLocktimeSetter(locktime, txBuf) {
                if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
                  throw new Error('Set Locktime: Invalid Transaction');
                }
                txBuf.writeUInt32LE(locktime, txBuf.length - 4);
                return txBuf;
              }
              exports.defaultLocktimeSetter = defaultLocktimeSetter;
            }.call(this));
          }.call(this, {
            isBuffer: require('../../../../../../node_modules/is-buffer/index.js'),
          }));
        },
        {
          '../../../../../../node_modules/is-buffer/index.js': 187,
          './converter': 17,
        },
      ],
      44: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const crypto = require('./crypto');
              const testecc_1 = require('./testecc');
              const bs58check = require('bs58check');
              const typeforce = require('typeforce');
              const wif = require('wif');
              function BIP32Factory(ecc) {
                testecc_1.testEcc(ecc);
                const UINT256_TYPE = typeforce.BufferN(32);
                const NETWORK_TYPE = typeforce.compile({
                  wif: typeforce.UInt8,
                  bip32: {
                    public: typeforce.UInt32,
                    private: typeforce.UInt32,
                  },
                });
                const BITCOIN = {
                  messagePrefix: '\x18Bitcoin Signed Message:\n',
                  bech32: 'bc',
                  bip32: {
                    public: 0x0488b21e,
                    private: 0x0488ade4,
                  },
                  pubKeyHash: 0x00,
                  scriptHash: 0x05,
                  wif: 0x80,
                };
                const HIGHEST_BIT = 0x80000000;
                const UINT31_MAX = Math.pow(2, 31) - 1;
                function BIP32Path(value) {
                  return (
                    typeforce.String(value) &&
                    value.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null
                  );
                }
                function UInt31(value) {
                  return typeforce.UInt32(value) && value <= UINT31_MAX;
                }
                class BIP32 {
                  constructor(
                    __D,
                    __Q,
                    chainCode,
                    network,
                    __DEPTH = 0,
                    __INDEX = 0,
                    __PARENT_FINGERPRINT = 0x00000000
                  ) {
                    this.__D = __D;
                    this.__Q = __Q;
                    this.chainCode = chainCode;
                    this.network = network;
                    this.__DEPTH = __DEPTH;
                    this.__INDEX = __INDEX;
                    this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
                    typeforce(NETWORK_TYPE, network);
                    this.lowR = false;
                  }
                  get depth() {
                    return this.__DEPTH;
                  }
                  get index() {
                    return this.__INDEX;
                  }
                  get parentFingerprint() {
                    return this.__PARENT_FINGERPRINT;
                  }
                  get publicKey() {
                    if (this.__Q === undefined)
                      this.__Q = Buffer.from(
                        ecc.pointFromScalar(this.__D, true)
                      );
                    return this.__Q;
                  }
                  get privateKey() {
                    return this.__D;
                  }
                  get identifier() {
                    return crypto.hash160(this.publicKey);
                  }
                  get fingerprint() {
                    return this.identifier.slice(0, 4);
                  }
                  get compressed() {
                    return true;
                  }
                  // Private === not neutered
                  // Public === neutered
                  isNeutered() {
                    return this.__D === undefined;
                  }
                  neutered() {
                    return fromPublicKeyLocal(
                      this.publicKey,
                      this.chainCode,
                      this.network,
                      this.depth,
                      this.index,
                      this.parentFingerprint
                    );
                  }
                  toBase58() {
                    const network = this.network;
                    const version = !this.isNeutered()
                      ? network.bip32.private
                      : network.bip32.public;
                    const buffer = Buffer.allocUnsafe(78);
                    // 4 bytes: version bytes
                    buffer.writeUInt32BE(version, 0);
                    // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....
                    buffer.writeUInt8(this.depth, 4);
                    // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
                    buffer.writeUInt32BE(this.parentFingerprint, 5);
                    // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
                    // This is encoded in big endian. (0x00000000 if master key)
                    buffer.writeUInt32BE(this.index, 9);
                    // 32 bytes: the chain code
                    this.chainCode.copy(buffer, 13);
                    // 33 bytes: the public key or private key data
                    if (!this.isNeutered()) {
                      // 0x00 + k for private keys
                      buffer.writeUInt8(0, 45);
                      this.privateKey.copy(buffer, 46);
                      // 33 bytes: the public key
                    } else {
                      // X9.62 encoding for public keys
                      this.publicKey.copy(buffer, 45);
                    }
                    return bs58check.encode(buffer);
                  }
                  toWIF() {
                    if (!this.privateKey)
                      throw new TypeError('Missing private key');
                    return wif.encode(this.network.wif, this.privateKey, true);
                  }
                  // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
                  derive(index) {
                    typeforce(typeforce.UInt32, index);
                    const isHardened = index >= HIGHEST_BIT;
                    const data = Buffer.allocUnsafe(37);
                    // Hardened child
                    if (isHardened) {
                      if (this.isNeutered())
                        throw new TypeError(
                          'Missing private key for hardened child key'
                        );
                      // data = 0x00 || ser256(kpar) || ser32(index)
                      data[0] = 0x00;
                      this.privateKey.copy(data, 1);
                      data.writeUInt32BE(index, 33);
                      // Normal child
                    } else {
                      // data = serP(point(kpar)) || ser32(index)
                      //      = serP(Kpar) || ser32(index)
                      this.publicKey.copy(data, 0);
                      data.writeUInt32BE(index, 33);
                    }
                    const I = crypto.hmacSHA512(this.chainCode, data);
                    const IL = I.slice(0, 32);
                    const IR = I.slice(32);
                    // if parse256(IL) >= n, proceed with the next value for i
                    if (!ecc.isPrivate(IL)) return this.derive(index + 1);
                    // Private parent key -> private child key
                    let hd;
                    if (!this.isNeutered()) {
                      // ki = parse256(IL) + kpar (mod n)
                      const ki = Buffer.from(
                        ecc.privateAdd(this.privateKey, IL)
                      );
                      // In case ki == 0, proceed with the next value for i
                      if (ki == null) return this.derive(index + 1);
                      hd = fromPrivateKeyLocal(
                        ki,
                        IR,
                        this.network,
                        this.depth + 1,
                        index,
                        this.fingerprint.readUInt32BE(0)
                      );
                      // Public parent key -> public child key
                    } else {
                      // Ki = point(parse256(IL)) + Kpar
                      //    = G*IL + Kpar
                      const Ki = Buffer.from(
                        ecc.pointAddScalar(this.publicKey, IL, true)
                      );
                      // In case Ki is the point at infinity, proceed with the next value for i
                      if (Ki === null) return this.derive(index + 1);
                      hd = fromPublicKeyLocal(
                        Ki,
                        IR,
                        this.network,
                        this.depth + 1,
                        index,
                        this.fingerprint.readUInt32BE(0)
                      );
                    }
                    return hd;
                  }
                  deriveHardened(index) {
                    typeforce(UInt31, index);
                    // Only derives hardened private keys by default
                    return this.derive(index + HIGHEST_BIT);
                  }
                  derivePath(path) {
                    typeforce(BIP32Path, path);
                    let splitPath = path.split('/');
                    if (splitPath[0] === 'm') {
                      if (this.parentFingerprint)
                        throw new TypeError('Expected master, got child');
                      splitPath = splitPath.slice(1);
                    }
                    return splitPath.reduce((prevHd, indexStr) => {
                      let index;
                      if (indexStr.slice(-1) === `'`) {
                        index = parseInt(indexStr.slice(0, -1), 10);
                        return prevHd.deriveHardened(index);
                      } else {
                        index = parseInt(indexStr, 10);
                        return prevHd.derive(index);
                      }
                    }, this);
                  }
                  sign(hash, lowR) {
                    if (!this.privateKey)
                      throw new Error('Missing private key');
                    if (lowR === undefined) lowR = this.lowR;
                    if (lowR === false) {
                      return Buffer.from(ecc.sign(hash, this.privateKey));
                    } else {
                      let sig = Buffer.from(ecc.sign(hash, this.privateKey));
                      const extraData = Buffer.alloc(32, 0);
                      let counter = 0;
                      // if first try is lowR, skip the loop
                      // for second try and on, add extra entropy counting up
                      while (sig[0] > 0x7f) {
                        counter++;
                        extraData.writeUIntLE(counter, 0, 6);
                        sig = Buffer.from(
                          ecc.sign(hash, this.privateKey, extraData)
                        );
                      }
                      return sig;
                    }
                  }
                  signSchnorr(hash) {
                    if (!this.privateKey)
                      throw new Error('Missing private key');
                    if (!ecc.signSchnorr)
                      throw new Error(
                        'signSchnorr not supported by ecc library'
                      );
                    return Buffer.from(ecc.signSchnorr(hash, this.privateKey));
                  }
                  verify(hash, signature) {
                    return ecc.verify(hash, this.publicKey, signature);
                  }
                  verifySchnorr(hash, signature) {
                    if (!ecc.verifySchnorr)
                      throw new Error(
                        'verifySchnorr not supported by ecc library'
                      );
                    return ecc.verifySchnorr(
                      hash,
                      this.publicKey.subarray(1, 33),
                      signature
                    );
                  }
                }
                function fromBase58(inString, network) {
                  const buffer = bs58check.decode(inString);
                  if (buffer.length !== 78)
                    throw new TypeError('Invalid buffer length');
                  network = network || BITCOIN;
                  // 4 bytes: version bytes
                  const version = buffer.readUInt32BE(0);
                  if (
                    version !== network.bip32.private &&
                    version !== network.bip32.public
                  )
                    throw new TypeError('Invalid network version');
                  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...
                  const depth = buffer[4];
                  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)
                  const parentFingerprint = buffer.readUInt32BE(5);
                  if (depth === 0) {
                    if (parentFingerprint !== 0x00000000)
                      throw new TypeError('Invalid parent fingerprint');
                  }
                  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
                  // This is encoded in MSB order. (0x00000000 if master key)
                  const index = buffer.readUInt32BE(9);
                  if (depth === 0 && index !== 0)
                    throw new TypeError('Invalid index');
                  // 32 bytes: the chain code
                  const chainCode = buffer.slice(13, 45);
                  let hd;
                  // 33 bytes: private key data (0x00 + k)
                  if (version === network.bip32.private) {
                    if (buffer.readUInt8(45) !== 0x00)
                      throw new TypeError('Invalid private key');
                    const k = buffer.slice(46, 78);
                    hd = fromPrivateKeyLocal(
                      k,
                      chainCode,
                      network,
                      depth,
                      index,
                      parentFingerprint
                    );
                    // 33 bytes: public key data (0x02 + X or 0x03 + X)
                  } else {
                    const X = buffer.slice(45, 78);
                    hd = fromPublicKeyLocal(
                      X,
                      chainCode,
                      network,
                      depth,
                      index,
                      parentFingerprint
                    );
                  }
                  return hd;
                }
                function fromPrivateKey(privateKey, chainCode, network) {
                  return fromPrivateKeyLocal(privateKey, chainCode, network);
                }
                function fromPrivateKeyLocal(
                  privateKey,
                  chainCode,
                  network,
                  depth,
                  index,
                  parentFingerprint
                ) {
                  typeforce(
                    {
                      privateKey: UINT256_TYPE,
                      chainCode: UINT256_TYPE,
                    },
                    { privateKey, chainCode }
                  );
                  network = network || BITCOIN;
                  if (!ecc.isPrivate(privateKey))
                    throw new TypeError('Private key not in range [1, n)');
                  return new BIP32(
                    privateKey,
                    undefined,
                    chainCode,
                    network,
                    depth,
                    index,
                    parentFingerprint
                  );
                }
                function fromPublicKey(publicKey, chainCode, network) {
                  return fromPublicKeyLocal(publicKey, chainCode, network);
                }
                function fromPublicKeyLocal(
                  publicKey,
                  chainCode,
                  network,
                  depth,
                  index,
                  parentFingerprint
                ) {
                  typeforce(
                    {
                      publicKey: typeforce.BufferN(33),
                      chainCode: UINT256_TYPE,
                    },
                    { publicKey, chainCode }
                  );
                  network = network || BITCOIN;
                  // verify the X coordinate is a point on the curve
                  if (!ecc.isPoint(publicKey))
                    throw new TypeError('Point is not on the curve');
                  return new BIP32(
                    undefined,
                    publicKey,
                    chainCode,
                    network,
                    depth,
                    index,
                    parentFingerprint
                  );
                }
                function fromSeed(seed, network) {
                  typeforce(typeforce.Buffer, seed);
                  if (seed.length < 16)
                    throw new TypeError('Seed should be at least 128 bits');
                  if (seed.length > 64)
                    throw new TypeError('Seed should be at most 512 bits');
                  network = network || BITCOIN;
                  const I = crypto.hmacSHA512(
                    Buffer.from('Bitcoin seed', 'utf8'),
                    seed
                  );
                  const IL = I.slice(0, 32);
                  const IR = I.slice(32);
                  return fromPrivateKey(IL, IR, network);
                }
                return {
                  fromSeed,
                  fromBase58,
                  fromPublicKey,
                  fromPrivateKey,
                };
              }
              exports.BIP32Factory = BIP32Factory;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './crypto': 45,
          './testecc': 47,
          bs58check: 89,
          buffer: 183,
          typeforce: 172,
          wif: 176,
        },
      ],
      45: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          const createHash = require('create-hash');
          const createHmac = require('create-hmac');
          function hash160(buffer) {
            const sha256Hash = createHash('sha256').update(buffer).digest();
            try {
              return createHash('rmd160').update(sha256Hash).digest();
            } catch (err) {
              return createHash('ripemd160').update(sha256Hash).digest();
            }
          }
          exports.hash160 = hash160;
          function hmacSHA512(key, data) {
            return createHmac('sha512', key).update(data).digest();
          }
          exports.hmacSHA512 = hmacSHA512;
        },
        { 'create-hash': 91, 'create-hmac': 93 },
      ],
      46: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          var bip32_1 = require('./bip32');
          exports.default = bip32_1.BIP32Factory;
          exports.BIP32Factory = bip32_1.BIP32Factory;
        },
        { './bip32': 44 },
      ],
      47: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const h = (hex) => Buffer.from(hex, 'hex');
              function testEcc(ecc) {
                assert(
                  ecc.isPoint(
                    h(
                      '0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'
                    )
                  )
                );
                assert(
                  !ecc.isPoint(
                    h(
                      '030000000000000000000000000000000000000000000000000000000000000005'
                    )
                  )
                );
                assert(
                  ecc.isPrivate(
                    h(
                      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'
                    )
                  )
                );
                // order - 1
                assert(
                  ecc.isPrivate(
                    h(
                      'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140'
                    )
                  )
                );
                // 0
                assert(
                  !ecc.isPrivate(
                    h(
                      '0000000000000000000000000000000000000000000000000000000000000000'
                    )
                  )
                );
                // order
                assert(
                  !ecc.isPrivate(
                    h(
                      'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'
                    )
                  )
                );
                // order + 1
                assert(
                  !ecc.isPrivate(
                    h(
                      'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142'
                    )
                  )
                );
                assert(
                  Buffer.from(
                    ecc.pointFromScalar(
                      h(
                        'b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af'
                      )
                    )
                  ).equals(
                    h(
                      '02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99'
                    )
                  )
                );
                assert(
                  Buffer.from(
                    ecc.pointAddScalar(
                      h(
                        '0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'
                      ),
                      h(
                        '0000000000000000000000000000000000000000000000000000000000000003'
                      )
                    )
                  ).equals(
                    h(
                      '02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5'
                    )
                  )
                );
                assert(
                  Buffer.from(
                    ecc.privateAdd(
                      h(
                        'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e'
                      ),
                      h(
                        '0000000000000000000000000000000000000000000000000000000000000002'
                      )
                    )
                  ).equals(
                    h(
                      'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140'
                    )
                  )
                );
                assert(
                  Buffer.from(
                    ecc.sign(
                      h(
                        '5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed'
                      ),
                      h(
                        'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140'
                      )
                    )
                  ).equals(
                    h(
                      '54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5'
                    )
                  )
                );
                assert(
                  ecc.verify(
                    h(
                      '5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed'
                    ),
                    h(
                      '0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'
                    ),
                    h(
                      '54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5'
                    )
                  )
                );
                if (ecc.signSchnorr) {
                  assert(
                    Buffer.from(
                      ecc.signSchnorr(
                        h(
                          '7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c'
                        ),
                        h(
                          'c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9'
                        ),
                        h(
                          'c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906'
                        )
                      )
                    ).equals(
                      h(
                        '5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7'
                      )
                    )
                  );
                }
                if (ecc.verifySchnorr) {
                  assert(
                    ecc.verifySchnorr(
                      h(
                        '7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c'
                      ),
                      h(
                        'dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8'
                      ),
                      h(
                        '5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7'
                      )
                    )
                  );
                }
              }
              exports.testEcc = testEcc;
              function assert(bool) {
                if (!bool) throw new Error('ecc library invalid');
              }
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      48: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          // browserify by default only pulls in files that are hard coded in requires
          // In order of last to first in this file, the default wordlist will be chosen
          // based on what is present. (Bundles may remove wordlists they don't need)
          const wordlists = {};
          exports.wordlists = wordlists;
          let _default;
          exports._default = _default;
          try {
            exports._default = _default = require('./wordlists/czech.json');
            wordlists.czech = _default;
          } catch (err) {}
          try {
            exports._default =
              _default = require('./wordlists/chinese_simplified.json');
            wordlists.chinese_simplified = _default;
          } catch (err) {}
          try {
            exports._default =
              _default = require('./wordlists/chinese_traditional.json');
            wordlists.chinese_traditional = _default;
          } catch (err) {}
          try {
            exports._default = _default = require('./wordlists/korean.json');
            wordlists.korean = _default;
          } catch (err) {}
          try {
            exports._default = _default = require('./wordlists/french.json');
            wordlists.french = _default;
          } catch (err) {}
          try {
            exports._default = _default = require('./wordlists/italian.json');
            wordlists.italian = _default;
          } catch (err) {}
          try {
            exports._default = _default = require('./wordlists/spanish.json');
            wordlists.spanish = _default;
          } catch (err) {}
          try {
            exports._default = _default = require('./wordlists/japanese.json');
            wordlists.japanese = _default;
            wordlists.JA = _default;
          } catch (err) {}
          try {
            exports._default =
              _default = require('./wordlists/portuguese.json');
            wordlists.portuguese = _default;
          } catch (err) {}
          try {
            exports._default = _default = require('./wordlists/english.json');
            wordlists.english = _default;
            wordlists.EN = _default;
          } catch (err) {}
        },
        {
          './wordlists/chinese_simplified.json': 50,
          './wordlists/chinese_traditional.json': 51,
          './wordlists/czech.json': 52,
          './wordlists/english.json': 53,
          './wordlists/french.json': 54,
          './wordlists/italian.json': 55,
          './wordlists/japanese.json': 56,
          './wordlists/korean.json': 57,
          './wordlists/portuguese.json': 58,
          './wordlists/spanish.json': 59,
        },
      ],
      49: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              const createHash = require('create-hash');
              const pbkdf2_1 = require('pbkdf2');
              const randomBytes = require('randombytes');
              const _wordlists_1 = require('./_wordlists');
              let DEFAULT_WORDLIST = _wordlists_1._default;
              const INVALID_MNEMONIC = 'Invalid mnemonic';
              const INVALID_ENTROPY = 'Invalid entropy';
              const INVALID_CHECKSUM = 'Invalid mnemonic checksum';
              const WORDLIST_REQUIRED =
                'A wordlist is required but a default could not be found.\n' +
                'Please pass a 2048 word array explicitly.';
              function pbkdf2Promise(
                password,
                saltMixin,
                iterations,
                keylen,
                digest
              ) {
                return Promise.resolve().then(
                  () =>
                    new Promise((resolve, reject) => {
                      const callback = (err, derivedKey) => {
                        if (err) {
                          return reject(err);
                        } else {
                          return resolve(derivedKey);
                        }
                      };
                      pbkdf2_1.pbkdf2(
                        password,
                        saltMixin,
                        iterations,
                        keylen,
                        digest,
                        callback
                      );
                    })
                );
              }
              function normalize(str) {
                return (str || '').normalize('NFKD');
              }
              function lpad(str, padString, length) {
                while (str.length < length) {
                  str = padString + str;
                }
                return str;
              }
              function binaryToByte(bin) {
                return parseInt(bin, 2);
              }
              function bytesToBinary(bytes) {
                return bytes.map((x) => lpad(x.toString(2), '0', 8)).join('');
              }
              function deriveChecksumBits(entropyBuffer) {
                const ENT = entropyBuffer.length * 8;
                const CS = ENT / 32;
                const hash = createHash('sha256')
                  .update(entropyBuffer)
                  .digest();
                return bytesToBinary(Array.from(hash)).slice(0, CS);
              }
              function salt(password) {
                return 'mnemonic' + (password || '');
              }
              function mnemonicToSeedSync(mnemonic, password) {
                const mnemonicBuffer = Buffer.from(normalize(mnemonic), 'utf8');
                const saltBuffer = Buffer.from(
                  salt(normalize(password)),
                  'utf8'
                );
                return pbkdf2_1.pbkdf2Sync(
                  mnemonicBuffer,
                  saltBuffer,
                  2048,
                  64,
                  'sha512'
                );
              }
              exports.mnemonicToSeedSync = mnemonicToSeedSync;
              function mnemonicToSeed(mnemonic, password) {
                return Promise.resolve().then(() => {
                  const mnemonicBuffer = Buffer.from(
                    normalize(mnemonic),
                    'utf8'
                  );
                  const saltBuffer = Buffer.from(
                    salt(normalize(password)),
                    'utf8'
                  );
                  return pbkdf2Promise(
                    mnemonicBuffer,
                    saltBuffer,
                    2048,
                    64,
                    'sha512'
                  );
                });
              }
              exports.mnemonicToSeed = mnemonicToSeed;
              function mnemonicToEntropy(mnemonic, wordlist) {
                wordlist = wordlist || DEFAULT_WORDLIST;
                if (!wordlist) {
                  throw new Error(WORDLIST_REQUIRED);
                }
                const words = normalize(mnemonic).split(' ');
                if (words.length % 3 !== 0) {
                  throw new Error(INVALID_MNEMONIC);
                }
                // convert word indices to 11 bit binary strings
                const bits = words
                  .map((word) => {
                    const index = wordlist.indexOf(word);
                    if (index === -1) {
                      throw new Error(INVALID_MNEMONIC);
                    }
                    return lpad(index.toString(2), '0', 11);
                  })
                  .join('');
                // split the binary string into ENT/CS
                const dividerIndex = Math.floor(bits.length / 33) * 32;
                const entropyBits = bits.slice(0, dividerIndex);
                const checksumBits = bits.slice(dividerIndex);
                // calculate the checksum and compare
                const entropyBytes = entropyBits
                  .match(/(.{1,8})/g)
                  .map(binaryToByte);
                if (entropyBytes.length < 16) {
                  throw new Error(INVALID_ENTROPY);
                }
                if (entropyBytes.length > 32) {
                  throw new Error(INVALID_ENTROPY);
                }
                if (entropyBytes.length % 4 !== 0) {
                  throw new Error(INVALID_ENTROPY);
                }
                const entropy = Buffer.from(entropyBytes);
                const newChecksum = deriveChecksumBits(entropy);
                if (newChecksum !== checksumBits) {
                  throw new Error(INVALID_CHECKSUM);
                }
                return entropy.toString('hex');
              }
              exports.mnemonicToEntropy = mnemonicToEntropy;
              function entropyToMnemonic(entropy, wordlist) {
                if (!Buffer.isBuffer(entropy)) {
                  entropy = Buffer.from(entropy, 'hex');
                }
                wordlist = wordlist || DEFAULT_WORDLIST;
                if (!wordlist) {
                  throw new Error(WORDLIST_REQUIRED);
                }
                // 128 <= ENT <= 256
                if (entropy.length < 16) {
                  throw new TypeError(INVALID_ENTROPY);
                }
                if (entropy.length > 32) {
                  throw new TypeError(INVALID_ENTROPY);
                }
                if (entropy.length % 4 !== 0) {
                  throw new TypeError(INVALID_ENTROPY);
                }
                const entropyBits = bytesToBinary(Array.from(entropy));
                const checksumBits = deriveChecksumBits(entropy);
                const bits = entropyBits + checksumBits;
                const chunks = bits.match(/(.{1,11})/g);
                const words = chunks.map((binary) => {
                  const index = binaryToByte(binary);
                  return wordlist[index];
                });
                return wordlist[0] === '\u3042\u3044\u3053\u304f\u3057\u3093' // Japanese wordlist
                  ? words.join('\u3000')
                  : words.join(' ');
              }
              exports.entropyToMnemonic = entropyToMnemonic;
              function generateMnemonic(strength, rng, wordlist) {
                strength = strength || 128;
                if (strength % 32 !== 0) {
                  throw new TypeError(INVALID_ENTROPY);
                }
                rng = rng || randomBytes;
                return entropyToMnemonic(rng(strength / 8), wordlist);
              }
              exports.generateMnemonic = generateMnemonic;
              function validateMnemonic(mnemonic, wordlist) {
                try {
                  mnemonicToEntropy(mnemonic, wordlist);
                } catch (e) {
                  return false;
                }
                return true;
              }
              exports.validateMnemonic = validateMnemonic;
              function setDefaultWordlist(language) {
                const result = _wordlists_1.wordlists[language];
                if (result) {
                  DEFAULT_WORDLIST = result;
                } else {
                  throw new Error(
                    'Could not find wordlist for language "' + language + '"'
                  );
                }
              }
              exports.setDefaultWordlist = setDefaultWordlist;
              function getDefaultWordlist() {
                if (!DEFAULT_WORDLIST) {
                  throw new Error('No Default Wordlist set');
                }
                return Object.keys(_wordlists_1.wordlists).filter((lang) => {
                  if (lang === 'JA' || lang === 'EN') {
                    return false;
                  }
                  return _wordlists_1.wordlists[lang].every(
                    (word, index) => word === DEFAULT_WORDLIST[index]
                  );
                })[0];
              }
              exports.getDefaultWordlist = getDefaultWordlist;
              var _wordlists_2 = require('./_wordlists');
              exports.wordlists = _wordlists_2.wordlists;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './_wordlists': 48,
          buffer: 183,
          'create-hash': 91,
          pbkdf2: 135,
          randombytes: 141,
        },
      ],
      50: [
        function (require, module, exports) {
          module.exports = [
            '的',
            '一',
            '是',
            '在',
            '不',
            '了',
            '有',
            '和',
            '人',
            '这',
            '中',
            '大',
            '为',
            '上',
            '个',
            '国',
            '我',
            '以',
            '要',
            '他',
            '时',
            '来',
            '用',
            '们',
            '生',
            '到',
            '作',
            '地',
            '于',
            '出',
            '就',
            '分',
            '对',
            '成',
            '会',
            '可',
            '主',
            '发',
            '年',
            '动',
            '同',
            '工',
            '也',
            '能',
            '下',
            '过',
            '子',
            '说',
            '产',
            '种',
            '面',
            '而',
            '方',
            '后',
            '多',
            '定',
            '行',
            '学',
            '法',
            '所',
            '民',
            '得',
            '经',
            '十',
            '三',
            '之',
            '进',
            '着',
            '等',
            '部',
            '度',
            '家',
            '电',
            '力',
            '里',
            '如',
            '水',
            '化',
            '高',
            '自',
            '二',
            '理',
            '起',
            '小',
            '物',
            '现',
            '实',
            '加',
            '量',
            '都',
            '两',
            '体',
            '制',
            '机',
            '当',
            '使',
            '点',
            '从',
            '业',
            '本',
            '去',
            '把',
            '性',
            '好',
            '应',
            '开',
            '它',
            '合',
            '还',
            '因',
            '由',
            '其',
            '些',
            '然',
            '前',
            '外',
            '天',
            '政',
            '四',
            '日',
            '那',
            '社',
            '义',
            '事',
            '平',
            '形',
            '相',
            '全',
            '表',
            '间',
            '样',
            '与',
            '关',
            '各',
            '重',
            '新',
            '线',
            '内',
            '数',
            '正',
            '心',
            '反',
            '你',
            '明',
            '看',
            '原',
            '又',
            '么',
            '利',
            '比',
            '或',
            '但',
            '质',
            '气',
            '第',
            '向',
            '道',
            '命',
            '此',
            '变',
            '条',
            '只',
            '没',
            '结',
            '解',
            '问',
            '意',
            '建',
            '月',
            '公',
            '无',
            '系',
            '军',
            '很',
            '情',
            '者',
            '最',
            '立',
            '代',
            '想',
            '已',
            '通',
            '并',
            '提',
            '直',
            '题',
            '党',
            '程',
            '展',
            '五',
            '果',
            '料',
            '象',
            '员',
            '革',
            '位',
            '入',
            '常',
            '文',
            '总',
            '次',
            '品',
            '式',
            '活',
            '设',
            '及',
            '管',
            '特',
            '件',
            '长',
            '求',
            '老',
            '头',
            '基',
            '资',
            '边',
            '流',
            '路',
            '级',
            '少',
            '图',
            '山',
            '统',
            '接',
            '知',
            '较',
            '将',
            '组',
            '见',
            '计',
            '别',
            '她',
            '手',
            '角',
            '期',
            '根',
            '论',
            '运',
            '农',
            '指',
            '几',
            '九',
            '区',
            '强',
            '放',
            '决',
            '西',
            '被',
            '干',
            '做',
            '必',
            '战',
            '先',
            '回',
            '则',
            '任',
            '取',
            '据',
            '处',
            '队',
            '南',
            '给',
            '色',
            '光',
            '门',
            '即',
            '保',
            '治',
            '北',
            '造',
            '百',
            '规',
            '热',
            '领',
            '七',
            '海',
            '口',
            '东',
            '导',
            '器',
            '压',
            '志',
            '世',
            '金',
            '增',
            '争',
            '济',
            '阶',
            '油',
            '思',
            '术',
            '极',
            '交',
            '受',
            '联',
            '什',
            '认',
            '六',
            '共',
            '权',
            '收',
            '证',
            '改',
            '清',
            '美',
            '再',
            '采',
            '转',
            '更',
            '单',
            '风',
            '切',
            '打',
            '白',
            '教',
            '速',
            '花',
            '带',
            '安',
            '场',
            '身',
            '车',
            '例',
            '真',
            '务',
            '具',
            '万',
            '每',
            '目',
            '至',
            '达',
            '走',
            '积',
            '示',
            '议',
            '声',
            '报',
            '斗',
            '完',
            '类',
            '八',
            '离',
            '华',
            '名',
            '确',
            '才',
            '科',
            '张',
            '信',
            '马',
            '节',
            '话',
            '米',
            '整',
            '空',
            '元',
            '况',
            '今',
            '集',
            '温',
            '传',
            '土',
            '许',
            '步',
            '群',
            '广',
            '石',
            '记',
            '需',
            '段',
            '研',
            '界',
            '拉',
            '林',
            '律',
            '叫',
            '且',
            '究',
            '观',
            '越',
            '织',
            '装',
            '影',
            '算',
            '低',
            '持',
            '音',
            '众',
            '书',
            '布',
            '复',
            '容',
            '儿',
            '须',
            '际',
            '商',
            '非',
            '验',
            '连',
            '断',
            '深',
            '难',
            '近',
            '矿',
            '千',
            '周',
            '委',
            '素',
            '技',
            '备',
            '半',
            '办',
            '青',
            '省',
            '列',
            '习',
            '响',
            '约',
            '支',
            '般',
            '史',
            '感',
            '劳',
            '便',
            '团',
            '往',
            '酸',
            '历',
            '市',
            '克',
            '何',
            '除',
            '消',
            '构',
            '府',
            '称',
            '太',
            '准',
            '精',
            '值',
            '号',
            '率',
            '族',
            '维',
            '划',
            '选',
            '标',
            '写',
            '存',
            '候',
            '毛',
            '亲',
            '快',
            '效',
            '斯',
            '院',
            '查',
            '江',
            '型',
            '眼',
            '王',
            '按',
            '格',
            '养',
            '易',
            '置',
            '派',
            '层',
            '片',
            '始',
            '却',
            '专',
            '状',
            '育',
            '厂',
            '京',
            '识',
            '适',
            '属',
            '圆',
            '包',
            '火',
            '住',
            '调',
            '满',
            '县',
            '局',
            '照',
            '参',
            '红',
            '细',
            '引',
            '听',
            '该',
            '铁',
            '价',
            '严',
            '首',
            '底',
            '液',
            '官',
            '德',
            '随',
            '病',
            '苏',
            '失',
            '尔',
            '死',
            '讲',
            '配',
            '女',
            '黄',
            '推',
            '显',
            '谈',
            '罪',
            '神',
            '艺',
            '呢',
            '席',
            '含',
            '企',
            '望',
            '密',
            '批',
            '营',
            '项',
            '防',
            '举',
            '球',
            '英',
            '氧',
            '势',
            '告',
            '李',
            '台',
            '落',
            '木',
            '帮',
            '轮',
            '破',
            '亚',
            '师',
            '围',
            '注',
            '远',
            '字',
            '材',
            '排',
            '供',
            '河',
            '态',
            '封',
            '另',
            '施',
            '减',
            '树',
            '溶',
            '怎',
            '止',
            '案',
            '言',
            '士',
            '均',
            '武',
            '固',
            '叶',
            '鱼',
            '波',
            '视',
            '仅',
            '费',
            '紧',
            '爱',
            '左',
            '章',
            '早',
            '朝',
            '害',
            '续',
            '轻',
            '服',
            '试',
            '食',
            '充',
            '兵',
            '源',
            '判',
            '护',
            '司',
            '足',
            '某',
            '练',
            '差',
            '致',
            '板',
            '田',
            '降',
            '黑',
            '犯',
            '负',
            '击',
            '范',
            '继',
            '兴',
            '似',
            '余',
            '坚',
            '曲',
            '输',
            '修',
            '故',
            '城',
            '夫',
            '够',
            '送',
            '笔',
            '船',
            '占',
            '右',
            '财',
            '吃',
            '富',
            '春',
            '职',
            '觉',
            '汉',
            '画',
            '功',
            '巴',
            '跟',
            '虽',
            '杂',
            '飞',
            '检',
            '吸',
            '助',
            '升',
            '阳',
            '互',
            '初',
            '创',
            '抗',
            '考',
            '投',
            '坏',
            '策',
            '古',
            '径',
            '换',
            '未',
            '跑',
            '留',
            '钢',
            '曾',
            '端',
            '责',
            '站',
            '简',
            '述',
            '钱',
            '副',
            '尽',
            '帝',
            '射',
            '草',
            '冲',
            '承',
            '独',
            '令',
            '限',
            '阿',
            '宣',
            '环',
            '双',
            '请',
            '超',
            '微',
            '让',
            '控',
            '州',
            '良',
            '轴',
            '找',
            '否',
            '纪',
            '益',
            '依',
            '优',
            '顶',
            '础',
            '载',
            '倒',
            '房',
            '突',
            '坐',
            '粉',
            '敌',
            '略',
            '客',
            '袁',
            '冷',
            '胜',
            '绝',
            '析',
            '块',
            '剂',
            '测',
            '丝',
            '协',
            '诉',
            '念',
            '陈',
            '仍',
            '罗',
            '盐',
            '友',
            '洋',
            '错',
            '苦',
            '夜',
            '刑',
            '移',
            '频',
            '逐',
            '靠',
            '混',
            '母',
            '短',
            '皮',
            '终',
            '聚',
            '汽',
            '村',
            '云',
            '哪',
            '既',
            '距',
            '卫',
            '停',
            '烈',
            '央',
            '察',
            '烧',
            '迅',
            '境',
            '若',
            '印',
            '洲',
            '刻',
            '括',
            '激',
            '孔',
            '搞',
            '甚',
            '室',
            '待',
            '核',
            '校',
            '散',
            '侵',
            '吧',
            '甲',
            '游',
            '久',
            '菜',
            '味',
            '旧',
            '模',
            '湖',
            '货',
            '损',
            '预',
            '阻',
            '毫',
            '普',
            '稳',
            '乙',
            '妈',
            '植',
            '息',
            '扩',
            '银',
            '语',
            '挥',
            '酒',
            '守',
            '拿',
            '序',
            '纸',
            '医',
            '缺',
            '雨',
            '吗',
            '针',
            '刘',
            '啊',
            '急',
            '唱',
            '误',
            '训',
            '愿',
            '审',
            '附',
            '获',
            '茶',
            '鲜',
            '粮',
            '斤',
            '孩',
            '脱',
            '硫',
            '肥',
            '善',
            '龙',
            '演',
            '父',
            '渐',
            '血',
            '欢',
            '械',
            '掌',
            '歌',
            '沙',
            '刚',
            '攻',
            '谓',
            '盾',
            '讨',
            '晚',
            '粒',
            '乱',
            '燃',
            '矛',
            '乎',
            '杀',
            '药',
            '宁',
            '鲁',
            '贵',
            '钟',
            '煤',
            '读',
            '班',
            '伯',
            '香',
            '介',
            '迫',
            '句',
            '丰',
            '培',
            '握',
            '兰',
            '担',
            '弦',
            '蛋',
            '沉',
            '假',
            '穿',
            '执',
            '答',
            '乐',
            '谁',
            '顺',
            '烟',
            '缩',
            '征',
            '脸',
            '喜',
            '松',
            '脚',
            '困',
            '异',
            '免',
            '背',
            '星',
            '福',
            '买',
            '染',
            '井',
            '概',
            '慢',
            '怕',
            '磁',
            '倍',
            '祖',
            '皇',
            '促',
            '静',
            '补',
            '评',
            '翻',
            '肉',
            '践',
            '尼',
            '衣',
            '宽',
            '扬',
            '棉',
            '希',
            '伤',
            '操',
            '垂',
            '秋',
            '宜',
            '氢',
            '套',
            '督',
            '振',
            '架',
            '亮',
            '末',
            '宪',
            '庆',
            '编',
            '牛',
            '触',
            '映',
            '雷',
            '销',
            '诗',
            '座',
            '居',
            '抓',
            '裂',
            '胞',
            '呼',
            '娘',
            '景',
            '威',
            '绿',
            '晶',
            '厚',
            '盟',
            '衡',
            '鸡',
            '孙',
            '延',
            '危',
            '胶',
            '屋',
            '乡',
            '临',
            '陆',
            '顾',
            '掉',
            '呀',
            '灯',
            '岁',
            '措',
            '束',
            '耐',
            '剧',
            '玉',
            '赵',
            '跳',
            '哥',
            '季',
            '课',
            '凯',
            '胡',
            '额',
            '款',
            '绍',
            '卷',
            '齐',
            '伟',
            '蒸',
            '殖',
            '永',
            '宗',
            '苗',
            '川',
            '炉',
            '岩',
            '弱',
            '零',
            '杨',
            '奏',
            '沿',
            '露',
            '杆',
            '探',
            '滑',
            '镇',
            '饭',
            '浓',
            '航',
            '怀',
            '赶',
            '库',
            '夺',
            '伊',
            '灵',
            '税',
            '途',
            '灭',
            '赛',
            '归',
            '召',
            '鼓',
            '播',
            '盘',
            '裁',
            '险',
            '康',
            '唯',
            '录',
            '菌',
            '纯',
            '借',
            '糖',
            '盖',
            '横',
            '符',
            '私',
            '努',
            '堂',
            '域',
            '枪',
            '润',
            '幅',
            '哈',
            '竟',
            '熟',
            '虫',
            '泽',
            '脑',
            '壤',
            '碳',
            '欧',
            '遍',
            '侧',
            '寨',
            '敢',
            '彻',
            '虑',
            '斜',
            '薄',
            '庭',
            '纳',
            '弹',
            '饲',
            '伸',
            '折',
            '麦',
            '湿',
            '暗',
            '荷',
            '瓦',
            '塞',
            '床',
            '筑',
            '恶',
            '户',
            '访',
            '塔',
            '奇',
            '透',
            '梁',
            '刀',
            '旋',
            '迹',
            '卡',
            '氯',
            '遇',
            '份',
            '毒',
            '泥',
            '退',
            '洗',
            '摆',
            '灰',
            '彩',
            '卖',
            '耗',
            '夏',
            '择',
            '忙',
            '铜',
            '献',
            '硬',
            '予',
            '繁',
            '圈',
            '雪',
            '函',
            '亦',
            '抽',
            '篇',
            '阵',
            '阴',
            '丁',
            '尺',
            '追',
            '堆',
            '雄',
            '迎',
            '泛',
            '爸',
            '楼',
            '避',
            '谋',
            '吨',
            '野',
            '猪',
            '旗',
            '累',
            '偏',
            '典',
            '馆',
            '索',
            '秦',
            '脂',
            '潮',
            '爷',
            '豆',
            '忽',
            '托',
            '惊',
            '塑',
            '遗',
            '愈',
            '朱',
            '替',
            '纤',
            '粗',
            '倾',
            '尚',
            '痛',
            '楚',
            '谢',
            '奋',
            '购',
            '磨',
            '君',
            '池',
            '旁',
            '碎',
            '骨',
            '监',
            '捕',
            '弟',
            '暴',
            '割',
            '贯',
            '殊',
            '释',
            '词',
            '亡',
            '壁',
            '顿',
            '宝',
            '午',
            '尘',
            '闻',
            '揭',
            '炮',
            '残',
            '冬',
            '桥',
            '妇',
            '警',
            '综',
            '招',
            '吴',
            '付',
            '浮',
            '遭',
            '徐',
            '您',
            '摇',
            '谷',
            '赞',
            '箱',
            '隔',
            '订',
            '男',
            '吹',
            '园',
            '纷',
            '唐',
            '败',
            '宋',
            '玻',
            '巨',
            '耕',
            '坦',
            '荣',
            '闭',
            '湾',
            '键',
            '凡',
            '驻',
            '锅',
            '救',
            '恩',
            '剥',
            '凝',
            '碱',
            '齿',
            '截',
            '炼',
            '麻',
            '纺',
            '禁',
            '废',
            '盛',
            '版',
            '缓',
            '净',
            '睛',
            '昌',
            '婚',
            '涉',
            '筒',
            '嘴',
            '插',
            '岸',
            '朗',
            '庄',
            '街',
            '藏',
            '姑',
            '贸',
            '腐',
            '奴',
            '啦',
            '惯',
            '乘',
            '伙',
            '恢',
            '匀',
            '纱',
            '扎',
            '辩',
            '耳',
            '彪',
            '臣',
            '亿',
            '璃',
            '抵',
            '脉',
            '秀',
            '萨',
            '俄',
            '网',
            '舞',
            '店',
            '喷',
            '纵',
            '寸',
            '汗',
            '挂',
            '洪',
            '贺',
            '闪',
            '柬',
            '爆',
            '烯',
            '津',
            '稻',
            '墙',
            '软',
            '勇',
            '像',
            '滚',
            '厘',
            '蒙',
            '芳',
            '肯',
            '坡',
            '柱',
            '荡',
            '腿',
            '仪',
            '旅',
            '尾',
            '轧',
            '冰',
            '贡',
            '登',
            '黎',
            '削',
            '钻',
            '勒',
            '逃',
            '障',
            '氨',
            '郭',
            '峰',
            '币',
            '港',
            '伏',
            '轨',
            '亩',
            '毕',
            '擦',
            '莫',
            '刺',
            '浪',
            '秘',
            '援',
            '株',
            '健',
            '售',
            '股',
            '岛',
            '甘',
            '泡',
            '睡',
            '童',
            '铸',
            '汤',
            '阀',
            '休',
            '汇',
            '舍',
            '牧',
            '绕',
            '炸',
            '哲',
            '磷',
            '绩',
            '朋',
            '淡',
            '尖',
            '启',
            '陷',
            '柴',
            '呈',
            '徒',
            '颜',
            '泪',
            '稍',
            '忘',
            '泵',
            '蓝',
            '拖',
            '洞',
            '授',
            '镜',
            '辛',
            '壮',
            '锋',
            '贫',
            '虚',
            '弯',
            '摩',
            '泰',
            '幼',
            '廷',
            '尊',
            '窗',
            '纲',
            '弄',
            '隶',
            '疑',
            '氏',
            '宫',
            '姐',
            '震',
            '瑞',
            '怪',
            '尤',
            '琴',
            '循',
            '描',
            '膜',
            '违',
            '夹',
            '腰',
            '缘',
            '珠',
            '穷',
            '森',
            '枝',
            '竹',
            '沟',
            '催',
            '绳',
            '忆',
            '邦',
            '剩',
            '幸',
            '浆',
            '栏',
            '拥',
            '牙',
            '贮',
            '礼',
            '滤',
            '钠',
            '纹',
            '罢',
            '拍',
            '咱',
            '喊',
            '袖',
            '埃',
            '勤',
            '罚',
            '焦',
            '潜',
            '伍',
            '墨',
            '欲',
            '缝',
            '姓',
            '刊',
            '饱',
            '仿',
            '奖',
            '铝',
            '鬼',
            '丽',
            '跨',
            '默',
            '挖',
            '链',
            '扫',
            '喝',
            '袋',
            '炭',
            '污',
            '幕',
            '诸',
            '弧',
            '励',
            '梅',
            '奶',
            '洁',
            '灾',
            '舟',
            '鉴',
            '苯',
            '讼',
            '抱',
            '毁',
            '懂',
            '寒',
            '智',
            '埔',
            '寄',
            '届',
            '跃',
            '渡',
            '挑',
            '丹',
            '艰',
            '贝',
            '碰',
            '拔',
            '爹',
            '戴',
            '码',
            '梦',
            '芽',
            '熔',
            '赤',
            '渔',
            '哭',
            '敬',
            '颗',
            '奔',
            '铅',
            '仲',
            '虎',
            '稀',
            '妹',
            '乏',
            '珍',
            '申',
            '桌',
            '遵',
            '允',
            '隆',
            '螺',
            '仓',
            '魏',
            '锐',
            '晓',
            '氮',
            '兼',
            '隐',
            '碍',
            '赫',
            '拨',
            '忠',
            '肃',
            '缸',
            '牵',
            '抢',
            '博',
            '巧',
            '壳',
            '兄',
            '杜',
            '讯',
            '诚',
            '碧',
            '祥',
            '柯',
            '页',
            '巡',
            '矩',
            '悲',
            '灌',
            '龄',
            '伦',
            '票',
            '寻',
            '桂',
            '铺',
            '圣',
            '恐',
            '恰',
            '郑',
            '趣',
            '抬',
            '荒',
            '腾',
            '贴',
            '柔',
            '滴',
            '猛',
            '阔',
            '辆',
            '妻',
            '填',
            '撤',
            '储',
            '签',
            '闹',
            '扰',
            '紫',
            '砂',
            '递',
            '戏',
            '吊',
            '陶',
            '伐',
            '喂',
            '疗',
            '瓶',
            '婆',
            '抚',
            '臂',
            '摸',
            '忍',
            '虾',
            '蜡',
            '邻',
            '胸',
            '巩',
            '挤',
            '偶',
            '弃',
            '槽',
            '劲',
            '乳',
            '邓',
            '吉',
            '仁',
            '烂',
            '砖',
            '租',
            '乌',
            '舰',
            '伴',
            '瓜',
            '浅',
            '丙',
            '暂',
            '燥',
            '橡',
            '柳',
            '迷',
            '暖',
            '牌',
            '秧',
            '胆',
            '详',
            '簧',
            '踏',
            '瓷',
            '谱',
            '呆',
            '宾',
            '糊',
            '洛',
            '辉',
            '愤',
            '竞',
            '隙',
            '怒',
            '粘',
            '乃',
            '绪',
            '肩',
            '籍',
            '敏',
            '涂',
            '熙',
            '皆',
            '侦',
            '悬',
            '掘',
            '享',
            '纠',
            '醒',
            '狂',
            '锁',
            '淀',
            '恨',
            '牲',
            '霸',
            '爬',
            '赏',
            '逆',
            '玩',
            '陵',
            '祝',
            '秒',
            '浙',
            '貌',
            '役',
            '彼',
            '悉',
            '鸭',
            '趋',
            '凤',
            '晨',
            '畜',
            '辈',
            '秩',
            '卵',
            '署',
            '梯',
            '炎',
            '滩',
            '棋',
            '驱',
            '筛',
            '峡',
            '冒',
            '啥',
            '寿',
            '译',
            '浸',
            '泉',
            '帽',
            '迟',
            '硅',
            '疆',
            '贷',
            '漏',
            '稿',
            '冠',
            '嫩',
            '胁',
            '芯',
            '牢',
            '叛',
            '蚀',
            '奥',
            '鸣',
            '岭',
            '羊',
            '凭',
            '串',
            '塘',
            '绘',
            '酵',
            '融',
            '盆',
            '锡',
            '庙',
            '筹',
            '冻',
            '辅',
            '摄',
            '袭',
            '筋',
            '拒',
            '僚',
            '旱',
            '钾',
            '鸟',
            '漆',
            '沈',
            '眉',
            '疏',
            '添',
            '棒',
            '穗',
            '硝',
            '韩',
            '逼',
            '扭',
            '侨',
            '凉',
            '挺',
            '碗',
            '栽',
            '炒',
            '杯',
            '患',
            '馏',
            '劝',
            '豪',
            '辽',
            '勃',
            '鸿',
            '旦',
            '吏',
            '拜',
            '狗',
            '埋',
            '辊',
            '掩',
            '饮',
            '搬',
            '骂',
            '辞',
            '勾',
            '扣',
            '估',
            '蒋',
            '绒',
            '雾',
            '丈',
            '朵',
            '姆',
            '拟',
            '宇',
            '辑',
            '陕',
            '雕',
            '偿',
            '蓄',
            '崇',
            '剪',
            '倡',
            '厅',
            '咬',
            '驶',
            '薯',
            '刷',
            '斥',
            '番',
            '赋',
            '奉',
            '佛',
            '浇',
            '漫',
            '曼',
            '扇',
            '钙',
            '桃',
            '扶',
            '仔',
            '返',
            '俗',
            '亏',
            '腔',
            '鞋',
            '棱',
            '覆',
            '框',
            '悄',
            '叔',
            '撞',
            '骗',
            '勘',
            '旺',
            '沸',
            '孤',
            '吐',
            '孟',
            '渠',
            '屈',
            '疾',
            '妙',
            '惜',
            '仰',
            '狠',
            '胀',
            '谐',
            '抛',
            '霉',
            '桑',
            '岗',
            '嘛',
            '衰',
            '盗',
            '渗',
            '脏',
            '赖',
            '涌',
            '甜',
            '曹',
            '阅',
            '肌',
            '哩',
            '厉',
            '烃',
            '纬',
            '毅',
            '昨',
            '伪',
            '症',
            '煮',
            '叹',
            '钉',
            '搭',
            '茎',
            '笼',
            '酷',
            '偷',
            '弓',
            '锥',
            '恒',
            '杰',
            '坑',
            '鼻',
            '翼',
            '纶',
            '叙',
            '狱',
            '逮',
            '罐',
            '络',
            '棚',
            '抑',
            '膨',
            '蔬',
            '寺',
            '骤',
            '穆',
            '冶',
            '枯',
            '册',
            '尸',
            '凸',
            '绅',
            '坯',
            '牺',
            '焰',
            '轰',
            '欣',
            '晋',
            '瘦',
            '御',
            '锭',
            '锦',
            '丧',
            '旬',
            '锻',
            '垄',
            '搜',
            '扑',
            '邀',
            '亭',
            '酯',
            '迈',
            '舒',
            '脆',
            '酶',
            '闲',
            '忧',
            '酚',
            '顽',
            '羽',
            '涨',
            '卸',
            '仗',
            '陪',
            '辟',
            '惩',
            '杭',
            '姚',
            '肚',
            '捉',
            '飘',
            '漂',
            '昆',
            '欺',
            '吾',
            '郎',
            '烷',
            '汁',
            '呵',
            '饰',
            '萧',
            '雅',
            '邮',
            '迁',
            '燕',
            '撒',
            '姻',
            '赴',
            '宴',
            '烦',
            '债',
            '帐',
            '斑',
            '铃',
            '旨',
            '醇',
            '董',
            '饼',
            '雏',
            '姿',
            '拌',
            '傅',
            '腹',
            '妥',
            '揉',
            '贤',
            '拆',
            '歪',
            '葡',
            '胺',
            '丢',
            '浩',
            '徽',
            '昂',
            '垫',
            '挡',
            '览',
            '贪',
            '慰',
            '缴',
            '汪',
            '慌',
            '冯',
            '诺',
            '姜',
            '谊',
            '凶',
            '劣',
            '诬',
            '耀',
            '昏',
            '躺',
            '盈',
            '骑',
            '乔',
            '溪',
            '丛',
            '卢',
            '抹',
            '闷',
            '咨',
            '刮',
            '驾',
            '缆',
            '悟',
            '摘',
            '铒',
            '掷',
            '颇',
            '幻',
            '柄',
            '惠',
            '惨',
            '佳',
            '仇',
            '腊',
            '窝',
            '涤',
            '剑',
            '瞧',
            '堡',
            '泼',
            '葱',
            '罩',
            '霍',
            '捞',
            '胎',
            '苍',
            '滨',
            '俩',
            '捅',
            '湘',
            '砍',
            '霞',
            '邵',
            '萄',
            '疯',
            '淮',
            '遂',
            '熊',
            '粪',
            '烘',
            '宿',
            '档',
            '戈',
            '驳',
            '嫂',
            '裕',
            '徙',
            '箭',
            '捐',
            '肠',
            '撑',
            '晒',
            '辨',
            '殿',
            '莲',
            '摊',
            '搅',
            '酱',
            '屏',
            '疫',
            '哀',
            '蔡',
            '堵',
            '沫',
            '皱',
            '畅',
            '叠',
            '阁',
            '莱',
            '敲',
            '辖',
            '钩',
            '痕',
            '坝',
            '巷',
            '饿',
            '祸',
            '丘',
            '玄',
            '溜',
            '曰',
            '逻',
            '彭',
            '尝',
            '卿',
            '妨',
            '艇',
            '吞',
            '韦',
            '怨',
            '矮',
            '歇',
          ];
        },
        {},
      ],
      51: [
        function (require, module, exports) {
          module.exports = [
            '的',
            '一',
            '是',
            '在',
            '不',
            '了',
            '有',
            '和',
            '人',
            '這',
            '中',
            '大',
            '為',
            '上',
            '個',
            '國',
            '我',
            '以',
            '要',
            '他',
            '時',
            '來',
            '用',
            '們',
            '生',
            '到',
            '作',
            '地',
            '於',
            '出',
            '就',
            '分',
            '對',
            '成',
            '會',
            '可',
            '主',
            '發',
            '年',
            '動',
            '同',
            '工',
            '也',
            '能',
            '下',
            '過',
            '子',
            '說',
            '產',
            '種',
            '面',
            '而',
            '方',
            '後',
            '多',
            '定',
            '行',
            '學',
            '法',
            '所',
            '民',
            '得',
            '經',
            '十',
            '三',
            '之',
            '進',
            '著',
            '等',
            '部',
            '度',
            '家',
            '電',
            '力',
            '裡',
            '如',
            '水',
            '化',
            '高',
            '自',
            '二',
            '理',
            '起',
            '小',
            '物',
            '現',
            '實',
            '加',
            '量',
            '都',
            '兩',
            '體',
            '制',
            '機',
            '當',
            '使',
            '點',
            '從',
            '業',
            '本',
            '去',
            '把',
            '性',
            '好',
            '應',
            '開',
            '它',
            '合',
            '還',
            '因',
            '由',
            '其',
            '些',
            '然',
            '前',
            '外',
            '天',
            '政',
            '四',
            '日',
            '那',
            '社',
            '義',
            '事',
            '平',
            '形',
            '相',
            '全',
            '表',
            '間',
            '樣',
            '與',
            '關',
            '各',
            '重',
            '新',
            '線',
            '內',
            '數',
            '正',
            '心',
            '反',
            '你',
            '明',
            '看',
            '原',
            '又',
            '麼',
            '利',
            '比',
            '或',
            '但',
            '質',
            '氣',
            '第',
            '向',
            '道',
            '命',
            '此',
            '變',
            '條',
            '只',
            '沒',
            '結',
            '解',
            '問',
            '意',
            '建',
            '月',
            '公',
            '無',
            '系',
            '軍',
            '很',
            '情',
            '者',
            '最',
            '立',
            '代',
            '想',
            '已',
            '通',
            '並',
            '提',
            '直',
            '題',
            '黨',
            '程',
            '展',
            '五',
            '果',
            '料',
            '象',
            '員',
            '革',
            '位',
            '入',
            '常',
            '文',
            '總',
            '次',
            '品',
            '式',
            '活',
            '設',
            '及',
            '管',
            '特',
            '件',
            '長',
            '求',
            '老',
            '頭',
            '基',
            '資',
            '邊',
            '流',
            '路',
            '級',
            '少',
            '圖',
            '山',
            '統',
            '接',
            '知',
            '較',
            '將',
            '組',
            '見',
            '計',
            '別',
            '她',
            '手',
            '角',
            '期',
            '根',
            '論',
            '運',
            '農',
            '指',
            '幾',
            '九',
            '區',
            '強',
            '放',
            '決',
            '西',
            '被',
            '幹',
            '做',
            '必',
            '戰',
            '先',
            '回',
            '則',
            '任',
            '取',
            '據',
            '處',
            '隊',
            '南',
            '給',
            '色',
            '光',
            '門',
            '即',
            '保',
            '治',
            '北',
            '造',
            '百',
            '規',
            '熱',
            '領',
            '七',
            '海',
            '口',
            '東',
            '導',
            '器',
            '壓',
            '志',
            '世',
            '金',
            '增',
            '爭',
            '濟',
            '階',
            '油',
            '思',
            '術',
            '極',
            '交',
            '受',
            '聯',
            '什',
            '認',
            '六',
            '共',
            '權',
            '收',
            '證',
            '改',
            '清',
            '美',
            '再',
            '採',
            '轉',
            '更',
            '單',
            '風',
            '切',
            '打',
            '白',
            '教',
            '速',
            '花',
            '帶',
            '安',
            '場',
            '身',
            '車',
            '例',
            '真',
            '務',
            '具',
            '萬',
            '每',
            '目',
            '至',
            '達',
            '走',
            '積',
            '示',
            '議',
            '聲',
            '報',
            '鬥',
            '完',
            '類',
            '八',
            '離',
            '華',
            '名',
            '確',
            '才',
            '科',
            '張',
            '信',
            '馬',
            '節',
            '話',
            '米',
            '整',
            '空',
            '元',
            '況',
            '今',
            '集',
            '溫',
            '傳',
            '土',
            '許',
            '步',
            '群',
            '廣',
            '石',
            '記',
            '需',
            '段',
            '研',
            '界',
            '拉',
            '林',
            '律',
            '叫',
            '且',
            '究',
            '觀',
            '越',
            '織',
            '裝',
            '影',
            '算',
            '低',
            '持',
            '音',
            '眾',
            '書',
            '布',
            '复',
            '容',
            '兒',
            '須',
            '際',
            '商',
            '非',
            '驗',
            '連',
            '斷',
            '深',
            '難',
            '近',
            '礦',
            '千',
            '週',
            '委',
            '素',
            '技',
            '備',
            '半',
            '辦',
            '青',
            '省',
            '列',
            '習',
            '響',
            '約',
            '支',
            '般',
            '史',
            '感',
            '勞',
            '便',
            '團',
            '往',
            '酸',
            '歷',
            '市',
            '克',
            '何',
            '除',
            '消',
            '構',
            '府',
            '稱',
            '太',
            '準',
            '精',
            '值',
            '號',
            '率',
            '族',
            '維',
            '劃',
            '選',
            '標',
            '寫',
            '存',
            '候',
            '毛',
            '親',
            '快',
            '效',
            '斯',
            '院',
            '查',
            '江',
            '型',
            '眼',
            '王',
            '按',
            '格',
            '養',
            '易',
            '置',
            '派',
            '層',
            '片',
            '始',
            '卻',
            '專',
            '狀',
            '育',
            '廠',
            '京',
            '識',
            '適',
            '屬',
            '圓',
            '包',
            '火',
            '住',
            '調',
            '滿',
            '縣',
            '局',
            '照',
            '參',
            '紅',
            '細',
            '引',
            '聽',
            '該',
            '鐵',
            '價',
            '嚴',
            '首',
            '底',
            '液',
            '官',
            '德',
            '隨',
            '病',
            '蘇',
            '失',
            '爾',
            '死',
            '講',
            '配',
            '女',
            '黃',
            '推',
            '顯',
            '談',
            '罪',
            '神',
            '藝',
            '呢',
            '席',
            '含',
            '企',
            '望',
            '密',
            '批',
            '營',
            '項',
            '防',
            '舉',
            '球',
            '英',
            '氧',
            '勢',
            '告',
            '李',
            '台',
            '落',
            '木',
            '幫',
            '輪',
            '破',
            '亞',
            '師',
            '圍',
            '注',
            '遠',
            '字',
            '材',
            '排',
            '供',
            '河',
            '態',
            '封',
            '另',
            '施',
            '減',
            '樹',
            '溶',
            '怎',
            '止',
            '案',
            '言',
            '士',
            '均',
            '武',
            '固',
            '葉',
            '魚',
            '波',
            '視',
            '僅',
            '費',
            '緊',
            '愛',
            '左',
            '章',
            '早',
            '朝',
            '害',
            '續',
            '輕',
            '服',
            '試',
            '食',
            '充',
            '兵',
            '源',
            '判',
            '護',
            '司',
            '足',
            '某',
            '練',
            '差',
            '致',
            '板',
            '田',
            '降',
            '黑',
            '犯',
            '負',
            '擊',
            '范',
            '繼',
            '興',
            '似',
            '餘',
            '堅',
            '曲',
            '輸',
            '修',
            '故',
            '城',
            '夫',
            '夠',
            '送',
            '筆',
            '船',
            '佔',
            '右',
            '財',
            '吃',
            '富',
            '春',
            '職',
            '覺',
            '漢',
            '畫',
            '功',
            '巴',
            '跟',
            '雖',
            '雜',
            '飛',
            '檢',
            '吸',
            '助',
            '昇',
            '陽',
            '互',
            '初',
            '創',
            '抗',
            '考',
            '投',
            '壞',
            '策',
            '古',
            '徑',
            '換',
            '未',
            '跑',
            '留',
            '鋼',
            '曾',
            '端',
            '責',
            '站',
            '簡',
            '述',
            '錢',
            '副',
            '盡',
            '帝',
            '射',
            '草',
            '衝',
            '承',
            '獨',
            '令',
            '限',
            '阿',
            '宣',
            '環',
            '雙',
            '請',
            '超',
            '微',
            '讓',
            '控',
            '州',
            '良',
            '軸',
            '找',
            '否',
            '紀',
            '益',
            '依',
            '優',
            '頂',
            '礎',
            '載',
            '倒',
            '房',
            '突',
            '坐',
            '粉',
            '敵',
            '略',
            '客',
            '袁',
            '冷',
            '勝',
            '絕',
            '析',
            '塊',
            '劑',
            '測',
            '絲',
            '協',
            '訴',
            '念',
            '陳',
            '仍',
            '羅',
            '鹽',
            '友',
            '洋',
            '錯',
            '苦',
            '夜',
            '刑',
            '移',
            '頻',
            '逐',
            '靠',
            '混',
            '母',
            '短',
            '皮',
            '終',
            '聚',
            '汽',
            '村',
            '雲',
            '哪',
            '既',
            '距',
            '衛',
            '停',
            '烈',
            '央',
            '察',
            '燒',
            '迅',
            '境',
            '若',
            '印',
            '洲',
            '刻',
            '括',
            '激',
            '孔',
            '搞',
            '甚',
            '室',
            '待',
            '核',
            '校',
            '散',
            '侵',
            '吧',
            '甲',
            '遊',
            '久',
            '菜',
            '味',
            '舊',
            '模',
            '湖',
            '貨',
            '損',
            '預',
            '阻',
            '毫',
            '普',
            '穩',
            '乙',
            '媽',
            '植',
            '息',
            '擴',
            '銀',
            '語',
            '揮',
            '酒',
            '守',
            '拿',
            '序',
            '紙',
            '醫',
            '缺',
            '雨',
            '嗎',
            '針',
            '劉',
            '啊',
            '急',
            '唱',
            '誤',
            '訓',
            '願',
            '審',
            '附',
            '獲',
            '茶',
            '鮮',
            '糧',
            '斤',
            '孩',
            '脫',
            '硫',
            '肥',
            '善',
            '龍',
            '演',
            '父',
            '漸',
            '血',
            '歡',
            '械',
            '掌',
            '歌',
            '沙',
            '剛',
            '攻',
            '謂',
            '盾',
            '討',
            '晚',
            '粒',
            '亂',
            '燃',
            '矛',
            '乎',
            '殺',
            '藥',
            '寧',
            '魯',
            '貴',
            '鐘',
            '煤',
            '讀',
            '班',
            '伯',
            '香',
            '介',
            '迫',
            '句',
            '豐',
            '培',
            '握',
            '蘭',
            '擔',
            '弦',
            '蛋',
            '沉',
            '假',
            '穿',
            '執',
            '答',
            '樂',
            '誰',
            '順',
            '煙',
            '縮',
            '徵',
            '臉',
            '喜',
            '松',
            '腳',
            '困',
            '異',
            '免',
            '背',
            '星',
            '福',
            '買',
            '染',
            '井',
            '概',
            '慢',
            '怕',
            '磁',
            '倍',
            '祖',
            '皇',
            '促',
            '靜',
            '補',
            '評',
            '翻',
            '肉',
            '踐',
            '尼',
            '衣',
            '寬',
            '揚',
            '棉',
            '希',
            '傷',
            '操',
            '垂',
            '秋',
            '宜',
            '氫',
            '套',
            '督',
            '振',
            '架',
            '亮',
            '末',
            '憲',
            '慶',
            '編',
            '牛',
            '觸',
            '映',
            '雷',
            '銷',
            '詩',
            '座',
            '居',
            '抓',
            '裂',
            '胞',
            '呼',
            '娘',
            '景',
            '威',
            '綠',
            '晶',
            '厚',
            '盟',
            '衡',
            '雞',
            '孫',
            '延',
            '危',
            '膠',
            '屋',
            '鄉',
            '臨',
            '陸',
            '顧',
            '掉',
            '呀',
            '燈',
            '歲',
            '措',
            '束',
            '耐',
            '劇',
            '玉',
            '趙',
            '跳',
            '哥',
            '季',
            '課',
            '凱',
            '胡',
            '額',
            '款',
            '紹',
            '卷',
            '齊',
            '偉',
            '蒸',
            '殖',
            '永',
            '宗',
            '苗',
            '川',
            '爐',
            '岩',
            '弱',
            '零',
            '楊',
            '奏',
            '沿',
            '露',
            '桿',
            '探',
            '滑',
            '鎮',
            '飯',
            '濃',
            '航',
            '懷',
            '趕',
            '庫',
            '奪',
            '伊',
            '靈',
            '稅',
            '途',
            '滅',
            '賽',
            '歸',
            '召',
            '鼓',
            '播',
            '盤',
            '裁',
            '險',
            '康',
            '唯',
            '錄',
            '菌',
            '純',
            '借',
            '糖',
            '蓋',
            '橫',
            '符',
            '私',
            '努',
            '堂',
            '域',
            '槍',
            '潤',
            '幅',
            '哈',
            '竟',
            '熟',
            '蟲',
            '澤',
            '腦',
            '壤',
            '碳',
            '歐',
            '遍',
            '側',
            '寨',
            '敢',
            '徹',
            '慮',
            '斜',
            '薄',
            '庭',
            '納',
            '彈',
            '飼',
            '伸',
            '折',
            '麥',
            '濕',
            '暗',
            '荷',
            '瓦',
            '塞',
            '床',
            '築',
            '惡',
            '戶',
            '訪',
            '塔',
            '奇',
            '透',
            '梁',
            '刀',
            '旋',
            '跡',
            '卡',
            '氯',
            '遇',
            '份',
            '毒',
            '泥',
            '退',
            '洗',
            '擺',
            '灰',
            '彩',
            '賣',
            '耗',
            '夏',
            '擇',
            '忙',
            '銅',
            '獻',
            '硬',
            '予',
            '繁',
            '圈',
            '雪',
            '函',
            '亦',
            '抽',
            '篇',
            '陣',
            '陰',
            '丁',
            '尺',
            '追',
            '堆',
            '雄',
            '迎',
            '泛',
            '爸',
            '樓',
            '避',
            '謀',
            '噸',
            '野',
            '豬',
            '旗',
            '累',
            '偏',
            '典',
            '館',
            '索',
            '秦',
            '脂',
            '潮',
            '爺',
            '豆',
            '忽',
            '托',
            '驚',
            '塑',
            '遺',
            '愈',
            '朱',
            '替',
            '纖',
            '粗',
            '傾',
            '尚',
            '痛',
            '楚',
            '謝',
            '奮',
            '購',
            '磨',
            '君',
            '池',
            '旁',
            '碎',
            '骨',
            '監',
            '捕',
            '弟',
            '暴',
            '割',
            '貫',
            '殊',
            '釋',
            '詞',
            '亡',
            '壁',
            '頓',
            '寶',
            '午',
            '塵',
            '聞',
            '揭',
            '炮',
            '殘',
            '冬',
            '橋',
            '婦',
            '警',
            '綜',
            '招',
            '吳',
            '付',
            '浮',
            '遭',
            '徐',
            '您',
            '搖',
            '谷',
            '贊',
            '箱',
            '隔',
            '訂',
            '男',
            '吹',
            '園',
            '紛',
            '唐',
            '敗',
            '宋',
            '玻',
            '巨',
            '耕',
            '坦',
            '榮',
            '閉',
            '灣',
            '鍵',
            '凡',
            '駐',
            '鍋',
            '救',
            '恩',
            '剝',
            '凝',
            '鹼',
            '齒',
            '截',
            '煉',
            '麻',
            '紡',
            '禁',
            '廢',
            '盛',
            '版',
            '緩',
            '淨',
            '睛',
            '昌',
            '婚',
            '涉',
            '筒',
            '嘴',
            '插',
            '岸',
            '朗',
            '莊',
            '街',
            '藏',
            '姑',
            '貿',
            '腐',
            '奴',
            '啦',
            '慣',
            '乘',
            '夥',
            '恢',
            '勻',
            '紗',
            '扎',
            '辯',
            '耳',
            '彪',
            '臣',
            '億',
            '璃',
            '抵',
            '脈',
            '秀',
            '薩',
            '俄',
            '網',
            '舞',
            '店',
            '噴',
            '縱',
            '寸',
            '汗',
            '掛',
            '洪',
            '賀',
            '閃',
            '柬',
            '爆',
            '烯',
            '津',
            '稻',
            '牆',
            '軟',
            '勇',
            '像',
            '滾',
            '厘',
            '蒙',
            '芳',
            '肯',
            '坡',
            '柱',
            '盪',
            '腿',
            '儀',
            '旅',
            '尾',
            '軋',
            '冰',
            '貢',
            '登',
            '黎',
            '削',
            '鑽',
            '勒',
            '逃',
            '障',
            '氨',
            '郭',
            '峰',
            '幣',
            '港',
            '伏',
            '軌',
            '畝',
            '畢',
            '擦',
            '莫',
            '刺',
            '浪',
            '秘',
            '援',
            '株',
            '健',
            '售',
            '股',
            '島',
            '甘',
            '泡',
            '睡',
            '童',
            '鑄',
            '湯',
            '閥',
            '休',
            '匯',
            '舍',
            '牧',
            '繞',
            '炸',
            '哲',
            '磷',
            '績',
            '朋',
            '淡',
            '尖',
            '啟',
            '陷',
            '柴',
            '呈',
            '徒',
            '顏',
            '淚',
            '稍',
            '忘',
            '泵',
            '藍',
            '拖',
            '洞',
            '授',
            '鏡',
            '辛',
            '壯',
            '鋒',
            '貧',
            '虛',
            '彎',
            '摩',
            '泰',
            '幼',
            '廷',
            '尊',
            '窗',
            '綱',
            '弄',
            '隸',
            '疑',
            '氏',
            '宮',
            '姐',
            '震',
            '瑞',
            '怪',
            '尤',
            '琴',
            '循',
            '描',
            '膜',
            '違',
            '夾',
            '腰',
            '緣',
            '珠',
            '窮',
            '森',
            '枝',
            '竹',
            '溝',
            '催',
            '繩',
            '憶',
            '邦',
            '剩',
            '幸',
            '漿',
            '欄',
            '擁',
            '牙',
            '貯',
            '禮',
            '濾',
            '鈉',
            '紋',
            '罷',
            '拍',
            '咱',
            '喊',
            '袖',
            '埃',
            '勤',
            '罰',
            '焦',
            '潛',
            '伍',
            '墨',
            '欲',
            '縫',
            '姓',
            '刊',
            '飽',
            '仿',
            '獎',
            '鋁',
            '鬼',
            '麗',
            '跨',
            '默',
            '挖',
            '鏈',
            '掃',
            '喝',
            '袋',
            '炭',
            '污',
            '幕',
            '諸',
            '弧',
            '勵',
            '梅',
            '奶',
            '潔',
            '災',
            '舟',
            '鑑',
            '苯',
            '訟',
            '抱',
            '毀',
            '懂',
            '寒',
            '智',
            '埔',
            '寄',
            '屆',
            '躍',
            '渡',
            '挑',
            '丹',
            '艱',
            '貝',
            '碰',
            '拔',
            '爹',
            '戴',
            '碼',
            '夢',
            '芽',
            '熔',
            '赤',
            '漁',
            '哭',
            '敬',
            '顆',
            '奔',
            '鉛',
            '仲',
            '虎',
            '稀',
            '妹',
            '乏',
            '珍',
            '申',
            '桌',
            '遵',
            '允',
            '隆',
            '螺',
            '倉',
            '魏',
            '銳',
            '曉',
            '氮',
            '兼',
            '隱',
            '礙',
            '赫',
            '撥',
            '忠',
            '肅',
            '缸',
            '牽',
            '搶',
            '博',
            '巧',
            '殼',
            '兄',
            '杜',
            '訊',
            '誠',
            '碧',
            '祥',
            '柯',
            '頁',
            '巡',
            '矩',
            '悲',
            '灌',
            '齡',
            '倫',
            '票',
            '尋',
            '桂',
            '鋪',
            '聖',
            '恐',
            '恰',
            '鄭',
            '趣',
            '抬',
            '荒',
            '騰',
            '貼',
            '柔',
            '滴',
            '猛',
            '闊',
            '輛',
            '妻',
            '填',
            '撤',
            '儲',
            '簽',
            '鬧',
            '擾',
            '紫',
            '砂',
            '遞',
            '戲',
            '吊',
            '陶',
            '伐',
            '餵',
            '療',
            '瓶',
            '婆',
            '撫',
            '臂',
            '摸',
            '忍',
            '蝦',
            '蠟',
            '鄰',
            '胸',
            '鞏',
            '擠',
            '偶',
            '棄',
            '槽',
            '勁',
            '乳',
            '鄧',
            '吉',
            '仁',
            '爛',
            '磚',
            '租',
            '烏',
            '艦',
            '伴',
            '瓜',
            '淺',
            '丙',
            '暫',
            '燥',
            '橡',
            '柳',
            '迷',
            '暖',
            '牌',
            '秧',
            '膽',
            '詳',
            '簧',
            '踏',
            '瓷',
            '譜',
            '呆',
            '賓',
            '糊',
            '洛',
            '輝',
            '憤',
            '競',
            '隙',
            '怒',
            '粘',
            '乃',
            '緒',
            '肩',
            '籍',
            '敏',
            '塗',
            '熙',
            '皆',
            '偵',
            '懸',
            '掘',
            '享',
            '糾',
            '醒',
            '狂',
            '鎖',
            '淀',
            '恨',
            '牲',
            '霸',
            '爬',
            '賞',
            '逆',
            '玩',
            '陵',
            '祝',
            '秒',
            '浙',
            '貌',
            '役',
            '彼',
            '悉',
            '鴨',
            '趨',
            '鳳',
            '晨',
            '畜',
            '輩',
            '秩',
            '卵',
            '署',
            '梯',
            '炎',
            '灘',
            '棋',
            '驅',
            '篩',
            '峽',
            '冒',
            '啥',
            '壽',
            '譯',
            '浸',
            '泉',
            '帽',
            '遲',
            '矽',
            '疆',
            '貸',
            '漏',
            '稿',
            '冠',
            '嫩',
            '脅',
            '芯',
            '牢',
            '叛',
            '蝕',
            '奧',
            '鳴',
            '嶺',
            '羊',
            '憑',
            '串',
            '塘',
            '繪',
            '酵',
            '融',
            '盆',
            '錫',
            '廟',
            '籌',
            '凍',
            '輔',
            '攝',
            '襲',
            '筋',
            '拒',
            '僚',
            '旱',
            '鉀',
            '鳥',
            '漆',
            '沈',
            '眉',
            '疏',
            '添',
            '棒',
            '穗',
            '硝',
            '韓',
            '逼',
            '扭',
            '僑',
            '涼',
            '挺',
            '碗',
            '栽',
            '炒',
            '杯',
            '患',
            '餾',
            '勸',
            '豪',
            '遼',
            '勃',
            '鴻',
            '旦',
            '吏',
            '拜',
            '狗',
            '埋',
            '輥',
            '掩',
            '飲',
            '搬',
            '罵',
            '辭',
            '勾',
            '扣',
            '估',
            '蔣',
            '絨',
            '霧',
            '丈',
            '朵',
            '姆',
            '擬',
            '宇',
            '輯',
            '陝',
            '雕',
            '償',
            '蓄',
            '崇',
            '剪',
            '倡',
            '廳',
            '咬',
            '駛',
            '薯',
            '刷',
            '斥',
            '番',
            '賦',
            '奉',
            '佛',
            '澆',
            '漫',
            '曼',
            '扇',
            '鈣',
            '桃',
            '扶',
            '仔',
            '返',
            '俗',
            '虧',
            '腔',
            '鞋',
            '棱',
            '覆',
            '框',
            '悄',
            '叔',
            '撞',
            '騙',
            '勘',
            '旺',
            '沸',
            '孤',
            '吐',
            '孟',
            '渠',
            '屈',
            '疾',
            '妙',
            '惜',
            '仰',
            '狠',
            '脹',
            '諧',
            '拋',
            '黴',
            '桑',
            '崗',
            '嘛',
            '衰',
            '盜',
            '滲',
            '臟',
            '賴',
            '湧',
            '甜',
            '曹',
            '閱',
            '肌',
            '哩',
            '厲',
            '烴',
            '緯',
            '毅',
            '昨',
            '偽',
            '症',
            '煮',
            '嘆',
            '釘',
            '搭',
            '莖',
            '籠',
            '酷',
            '偷',
            '弓',
            '錐',
            '恆',
            '傑',
            '坑',
            '鼻',
            '翼',
            '綸',
            '敘',
            '獄',
            '逮',
            '罐',
            '絡',
            '棚',
            '抑',
            '膨',
            '蔬',
            '寺',
            '驟',
            '穆',
            '冶',
            '枯',
            '冊',
            '屍',
            '凸',
            '紳',
            '坯',
            '犧',
            '焰',
            '轟',
            '欣',
            '晉',
            '瘦',
            '禦',
            '錠',
            '錦',
            '喪',
            '旬',
            '鍛',
            '壟',
            '搜',
            '撲',
            '邀',
            '亭',
            '酯',
            '邁',
            '舒',
            '脆',
            '酶',
            '閒',
            '憂',
            '酚',
            '頑',
            '羽',
            '漲',
            '卸',
            '仗',
            '陪',
            '闢',
            '懲',
            '杭',
            '姚',
            '肚',
            '捉',
            '飄',
            '漂',
            '昆',
            '欺',
            '吾',
            '郎',
            '烷',
            '汁',
            '呵',
            '飾',
            '蕭',
            '雅',
            '郵',
            '遷',
            '燕',
            '撒',
            '姻',
            '赴',
            '宴',
            '煩',
            '債',
            '帳',
            '斑',
            '鈴',
            '旨',
            '醇',
            '董',
            '餅',
            '雛',
            '姿',
            '拌',
            '傅',
            '腹',
            '妥',
            '揉',
            '賢',
            '拆',
            '歪',
            '葡',
            '胺',
            '丟',
            '浩',
            '徽',
            '昂',
            '墊',
            '擋',
            '覽',
            '貪',
            '慰',
            '繳',
            '汪',
            '慌',
            '馮',
            '諾',
            '姜',
            '誼',
            '兇',
            '劣',
            '誣',
            '耀',
            '昏',
            '躺',
            '盈',
            '騎',
            '喬',
            '溪',
            '叢',
            '盧',
            '抹',
            '悶',
            '諮',
            '刮',
            '駕',
            '纜',
            '悟',
            '摘',
            '鉺',
            '擲',
            '頗',
            '幻',
            '柄',
            '惠',
            '慘',
            '佳',
            '仇',
            '臘',
            '窩',
            '滌',
            '劍',
            '瞧',
            '堡',
            '潑',
            '蔥',
            '罩',
            '霍',
            '撈',
            '胎',
            '蒼',
            '濱',
            '倆',
            '捅',
            '湘',
            '砍',
            '霞',
            '邵',
            '萄',
            '瘋',
            '淮',
            '遂',
            '熊',
            '糞',
            '烘',
            '宿',
            '檔',
            '戈',
            '駁',
            '嫂',
            '裕',
            '徙',
            '箭',
            '捐',
            '腸',
            '撐',
            '曬',
            '辨',
            '殿',
            '蓮',
            '攤',
            '攪',
            '醬',
            '屏',
            '疫',
            '哀',
            '蔡',
            '堵',
            '沫',
            '皺',
            '暢',
            '疊',
            '閣',
            '萊',
            '敲',
            '轄',
            '鉤',
            '痕',
            '壩',
            '巷',
            '餓',
            '禍',
            '丘',
            '玄',
            '溜',
            '曰',
            '邏',
            '彭',
            '嘗',
            '卿',
            '妨',
            '艇',
            '吞',
            '韋',
            '怨',
            '矮',
            '歇',
          ];
        },
        {},
      ],
      52: [
        function (require, module, exports) {
          module.exports = [
            'abdikace',
            'abeceda',
            'adresa',
            'agrese',
            'akce',
            'aktovka',
            'alej',
            'alkohol',
            'amputace',
            'ananas',
            'andulka',
            'anekdota',
            'anketa',
            'antika',
            'anulovat',
            'archa',
            'arogance',
            'asfalt',
            'asistent',
            'aspirace',
            'astma',
            'astronom',
            'atlas',
            'atletika',
            'atol',
            'autobus',
            'azyl',
            'babka',
            'bachor',
            'bacil',
            'baculka',
            'badatel',
            'bageta',
            'bagr',
            'bahno',
            'bakterie',
            'balada',
            'baletka',
            'balkon',
            'balonek',
            'balvan',
            'balza',
            'bambus',
            'bankomat',
            'barbar',
            'baret',
            'barman',
            'baroko',
            'barva',
            'baterka',
            'batoh',
            'bavlna',
            'bazalka',
            'bazilika',
            'bazuka',
            'bedna',
            'beran',
            'beseda',
            'bestie',
            'beton',
            'bezinka',
            'bezmoc',
            'beztak',
            'bicykl',
            'bidlo',
            'biftek',
            'bikiny',
            'bilance',
            'biograf',
            'biolog',
            'bitva',
            'bizon',
            'blahobyt',
            'blatouch',
            'blecha',
            'bledule',
            'blesk',
            'blikat',
            'blizna',
            'blokovat',
            'bloudit',
            'blud',
            'bobek',
            'bobr',
            'bodlina',
            'bodnout',
            'bohatost',
            'bojkot',
            'bojovat',
            'bokorys',
            'bolest',
            'borec',
            'borovice',
            'bota',
            'boubel',
            'bouchat',
            'bouda',
            'boule',
            'bourat',
            'boxer',
            'bradavka',
            'brambora',
            'branka',
            'bratr',
            'brepta',
            'briketa',
            'brko',
            'brloh',
            'bronz',
            'broskev',
            'brunetka',
            'brusinka',
            'brzda',
            'brzy',
            'bublina',
            'bubnovat',
            'buchta',
            'buditel',
            'budka',
            'budova',
            'bufet',
            'bujarost',
            'bukvice',
            'buldok',
            'bulva',
            'bunda',
            'bunkr',
            'burza',
            'butik',
            'buvol',
            'buzola',
            'bydlet',
            'bylina',
            'bytovka',
            'bzukot',
            'capart',
            'carevna',
            'cedr',
            'cedule',
            'cejch',
            'cejn',
            'cela',
            'celer',
            'celkem',
            'celnice',
            'cenina',
            'cennost',
            'cenovka',
            'centrum',
            'cenzor',
            'cestopis',
            'cetka',
            'chalupa',
            'chapadlo',
            'charita',
            'chata',
            'chechtat',
            'chemie',
            'chichot',
            'chirurg',
            'chlad',
            'chleba',
            'chlubit',
            'chmel',
            'chmura',
            'chobot',
            'chochol',
            'chodba',
            'cholera',
            'chomout',
            'chopit',
            'choroba',
            'chov',
            'chrapot',
            'chrlit',
            'chrt',
            'chrup',
            'chtivost',
            'chudina',
            'chutnat',
            'chvat',
            'chvilka',
            'chvost',
            'chyba',
            'chystat',
            'chytit',
            'cibule',
            'cigareta',
            'cihelna',
            'cihla',
            'cinkot',
            'cirkus',
            'cisterna',
            'citace',
            'citrus',
            'cizinec',
            'cizost',
            'clona',
            'cokoliv',
            'couvat',
            'ctitel',
            'ctnost',
            'cudnost',
            'cuketa',
            'cukr',
            'cupot',
            'cvaknout',
            'cval',
            'cvik',
            'cvrkot',
            'cyklista',
            'daleko',
            'dareba',
            'datel',
            'datum',
            'dcera',
            'debata',
            'dechovka',
            'decibel',
            'deficit',
            'deflace',
            'dekl',
            'dekret',
            'demokrat',
            'deprese',
            'derby',
            'deska',
            'detektiv',
            'dikobraz',
            'diktovat',
            'dioda',
            'diplom',
            'disk',
            'displej',
            'divadlo',
            'divoch',
            'dlaha',
            'dlouho',
            'dluhopis',
            'dnes',
            'dobro',
            'dobytek',
            'docent',
            'dochutit',
            'dodnes',
            'dohled',
            'dohoda',
            'dohra',
            'dojem',
            'dojnice',
            'doklad',
            'dokola',
            'doktor',
            'dokument',
            'dolar',
            'doleva',
            'dolina',
            'doma',
            'dominant',
            'domluvit',
            'domov',
            'donutit',
            'dopad',
            'dopis',
            'doplnit',
            'doposud',
            'doprovod',
            'dopustit',
            'dorazit',
            'dorost',
            'dort',
            'dosah',
            'doslov',
            'dostatek',
            'dosud',
            'dosyta',
            'dotaz',
            'dotek',
            'dotknout',
            'doufat',
            'doutnat',
            'dovozce',
            'dozadu',
            'doznat',
            'dozorce',
            'drahota',
            'drak',
            'dramatik',
            'dravec',
            'draze',
            'drdol',
            'drobnost',
            'drogerie',
            'drozd',
            'drsnost',
            'drtit',
            'drzost',
            'duben',
            'duchovno',
            'dudek',
            'duha',
            'duhovka',
            'dusit',
            'dusno',
            'dutost',
            'dvojice',
            'dvorec',
            'dynamit',
            'ekolog',
            'ekonomie',
            'elektron',
            'elipsa',
            'email',
            'emise',
            'emoce',
            'empatie',
            'epizoda',
            'epocha',
            'epopej',
            'epos',
            'esej',
            'esence',
            'eskorta',
            'eskymo',
            'etiketa',
            'euforie',
            'evoluce',
            'exekuce',
            'exkurze',
            'expedice',
            'exploze',
            'export',
            'extrakt',
            'facka',
            'fajfka',
            'fakulta',
            'fanatik',
            'fantazie',
            'farmacie',
            'favorit',
            'fazole',
            'federace',
            'fejeton',
            'fenka',
            'fialka',
            'figurant',
            'filozof',
            'filtr',
            'finance',
            'finta',
            'fixace',
            'fjord',
            'flanel',
            'flirt',
            'flotila',
            'fond',
            'fosfor',
            'fotbal',
            'fotka',
            'foton',
            'frakce',
            'freska',
            'fronta',
            'fukar',
            'funkce',
            'fyzika',
            'galeje',
            'garant',
            'genetika',
            'geolog',
            'gilotina',
            'glazura',
            'glejt',
            'golem',
            'golfista',
            'gotika',
            'graf',
            'gramofon',
            'granule',
            'grep',
            'gril',
            'grog',
            'groteska',
            'guma',
            'hadice',
            'hadr',
            'hala',
            'halenka',
            'hanba',
            'hanopis',
            'harfa',
            'harpuna',
            'havran',
            'hebkost',
            'hejkal',
            'hejno',
            'hejtman',
            'hektar',
            'helma',
            'hematom',
            'herec',
            'herna',
            'heslo',
            'hezky',
            'historik',
            'hladovka',
            'hlasivky',
            'hlava',
            'hledat',
            'hlen',
            'hlodavec',
            'hloh',
            'hloupost',
            'hltat',
            'hlubina',
            'hluchota',
            'hmat',
            'hmota',
            'hmyz',
            'hnis',
            'hnojivo',
            'hnout',
            'hoblina',
            'hoboj',
            'hoch',
            'hodiny',
            'hodlat',
            'hodnota',
            'hodovat',
            'hojnost',
            'hokej',
            'holinka',
            'holka',
            'holub',
            'homole',
            'honitba',
            'honorace',
            'horal',
            'horda',
            'horizont',
            'horko',
            'horlivec',
            'hormon',
            'hornina',
            'horoskop',
            'horstvo',
            'hospoda',
            'hostina',
            'hotovost',
            'houba',
            'houf',
            'houpat',
            'houska',
            'hovor',
            'hradba',
            'hranice',
            'hravost',
            'hrazda',
            'hrbolek',
            'hrdina',
            'hrdlo',
            'hrdost',
            'hrnek',
            'hrobka',
            'hromada',
            'hrot',
            'hrouda',
            'hrozen',
            'hrstka',
            'hrubost',
            'hryzat',
            'hubenost',
            'hubnout',
            'hudba',
            'hukot',
            'humr',
            'husita',
            'hustota',
            'hvozd',
            'hybnost',
            'hydrant',
            'hygiena',
            'hymna',
            'hysterik',
            'idylka',
            'ihned',
            'ikona',
            'iluze',
            'imunita',
            'infekce',
            'inflace',
            'inkaso',
            'inovace',
            'inspekce',
            'internet',
            'invalida',
            'investor',
            'inzerce',
            'ironie',
            'jablko',
            'jachta',
            'jahoda',
            'jakmile',
            'jakost',
            'jalovec',
            'jantar',
            'jarmark',
            'jaro',
            'jasan',
            'jasno',
            'jatka',
            'javor',
            'jazyk',
            'jedinec',
            'jedle',
            'jednatel',
            'jehlan',
            'jekot',
            'jelen',
            'jelito',
            'jemnost',
            'jenom',
            'jepice',
            'jeseter',
            'jevit',
            'jezdec',
            'jezero',
            'jinak',
            'jindy',
            'jinoch',
            'jiskra',
            'jistota',
            'jitrnice',
            'jizva',
            'jmenovat',
            'jogurt',
            'jurta',
            'kabaret',
            'kabel',
            'kabinet',
            'kachna',
            'kadet',
            'kadidlo',
            'kahan',
            'kajak',
            'kajuta',
            'kakao',
            'kaktus',
            'kalamita',
            'kalhoty',
            'kalibr',
            'kalnost',
            'kamera',
            'kamkoliv',
            'kamna',
            'kanibal',
            'kanoe',
            'kantor',
            'kapalina',
            'kapela',
            'kapitola',
            'kapka',
            'kaple',
            'kapota',
            'kapr',
            'kapusta',
            'kapybara',
            'karamel',
            'karotka',
            'karton',
            'kasa',
            'katalog',
            'katedra',
            'kauce',
            'kauza',
            'kavalec',
            'kazajka',
            'kazeta',
            'kazivost',
            'kdekoliv',
            'kdesi',
            'kedluben',
            'kemp',
            'keramika',
            'kino',
            'klacek',
            'kladivo',
            'klam',
            'klapot',
            'klasika',
            'klaun',
            'klec',
            'klenba',
            'klepat',
            'klesnout',
            'klid',
            'klima',
            'klisna',
            'klobouk',
            'klokan',
            'klopa',
            'kloub',
            'klubovna',
            'klusat',
            'kluzkost',
            'kmen',
            'kmitat',
            'kmotr',
            'kniha',
            'knot',
            'koalice',
            'koberec',
            'kobka',
            'kobliha',
            'kobyla',
            'kocour',
            'kohout',
            'kojenec',
            'kokos',
            'koktejl',
            'kolaps',
            'koleda',
            'kolize',
            'kolo',
            'komando',
            'kometa',
            'komik',
            'komnata',
            'komora',
            'kompas',
            'komunita',
            'konat',
            'koncept',
            'kondice',
            'konec',
            'konfese',
            'kongres',
            'konina',
            'konkurs',
            'kontakt',
            'konzerva',
            'kopanec',
            'kopie',
            'kopnout',
            'koprovka',
            'korbel',
            'korektor',
            'kormidlo',
            'koroptev',
            'korpus',
            'koruna',
            'koryto',
            'korzet',
            'kosatec',
            'kostka',
            'kotel',
            'kotleta',
            'kotoul',
            'koukat',
            'koupelna',
            'kousek',
            'kouzlo',
            'kovboj',
            'koza',
            'kozoroh',
            'krabice',
            'krach',
            'krajina',
            'kralovat',
            'krasopis',
            'kravata',
            'kredit',
            'krejcar',
            'kresba',
            'kreveta',
            'kriket',
            'kritik',
            'krize',
            'krkavec',
            'krmelec',
            'krmivo',
            'krocan',
            'krok',
            'kronika',
            'kropit',
            'kroupa',
            'krovka',
            'krtek',
            'kruhadlo',
            'krupice',
            'krutost',
            'krvinka',
            'krychle',
            'krypta',
            'krystal',
            'kryt',
            'kudlanka',
            'kufr',
            'kujnost',
            'kukla',
            'kulajda',
            'kulich',
            'kulka',
            'kulomet',
            'kultura',
            'kuna',
            'kupodivu',
            'kurt',
            'kurzor',
            'kutil',
            'kvalita',
            'kvasinka',
            'kvestor',
            'kynolog',
            'kyselina',
            'kytara',
            'kytice',
            'kytka',
            'kytovec',
            'kyvadlo',
            'labrador',
            'lachtan',
            'ladnost',
            'laik',
            'lakomec',
            'lamela',
            'lampa',
            'lanovka',
            'lasice',
            'laso',
            'lastura',
            'latinka',
            'lavina',
            'lebka',
            'leckdy',
            'leden',
            'lednice',
            'ledovka',
            'ledvina',
            'legenda',
            'legie',
            'legrace',
            'lehce',
            'lehkost',
            'lehnout',
            'lektvar',
            'lenochod',
            'lentilka',
            'lepenka',
            'lepidlo',
            'letadlo',
            'letec',
            'letmo',
            'letokruh',
            'levhart',
            'levitace',
            'levobok',
            'libra',
            'lichotka',
            'lidojed',
            'lidskost',
            'lihovina',
            'lijavec',
            'lilek',
            'limetka',
            'linie',
            'linka',
            'linoleum',
            'listopad',
            'litina',
            'litovat',
            'lobista',
            'lodivod',
            'logika',
            'logoped',
            'lokalita',
            'loket',
            'lomcovat',
            'lopata',
            'lopuch',
            'lord',
            'losos',
            'lotr',
            'loudal',
            'louh',
            'louka',
            'louskat',
            'lovec',
            'lstivost',
            'lucerna',
            'lucifer',
            'lump',
            'lusk',
            'lustrace',
            'lvice',
            'lyra',
            'lyrika',
            'lysina',
            'madam',
            'madlo',
            'magistr',
            'mahagon',
            'majetek',
            'majitel',
            'majorita',
            'makak',
            'makovice',
            'makrela',
            'malba',
            'malina',
            'malovat',
            'malvice',
            'maminka',
            'mandle',
            'manko',
            'marnost',
            'masakr',
            'maskot',
            'masopust',
            'matice',
            'matrika',
            'maturita',
            'mazanec',
            'mazivo',
            'mazlit',
            'mazurka',
            'mdloba',
            'mechanik',
            'meditace',
            'medovina',
            'melasa',
            'meloun',
            'mentolka',
            'metla',
            'metoda',
            'metr',
            'mezera',
            'migrace',
            'mihnout',
            'mihule',
            'mikina',
            'mikrofon',
            'milenec',
            'milimetr',
            'milost',
            'mimika',
            'mincovna',
            'minibar',
            'minomet',
            'minulost',
            'miska',
            'mistr',
            'mixovat',
            'mladost',
            'mlha',
            'mlhovina',
            'mlok',
            'mlsat',
            'mluvit',
            'mnich',
            'mnohem',
            'mobil',
            'mocnost',
            'modelka',
            'modlitba',
            'mohyla',
            'mokro',
            'molekula',
            'momentka',
            'monarcha',
            'monokl',
            'monstrum',
            'montovat',
            'monzun',
            'mosaz',
            'moskyt',
            'most',
            'motivace',
            'motorka',
            'motyka',
            'moucha',
            'moudrost',
            'mozaika',
            'mozek',
            'mozol',
            'mramor',
            'mravenec',
            'mrkev',
            'mrtvola',
            'mrzet',
            'mrzutost',
            'mstitel',
            'mudrc',
            'muflon',
            'mulat',
            'mumie',
            'munice',
            'muset',
            'mutace',
            'muzeum',
            'muzikant',
            'myslivec',
            'mzda',
            'nabourat',
            'nachytat',
            'nadace',
            'nadbytek',
            'nadhoz',
            'nadobro',
            'nadpis',
            'nahlas',
            'nahnat',
            'nahodile',
            'nahradit',
            'naivita',
            'najednou',
            'najisto',
            'najmout',
            'naklonit',
            'nakonec',
            'nakrmit',
            'nalevo',
            'namazat',
            'namluvit',
            'nanometr',
            'naoko',
            'naopak',
            'naostro',
            'napadat',
            'napevno',
            'naplnit',
            'napnout',
            'naposled',
            'naprosto',
            'narodit',
            'naruby',
            'narychlo',
            'nasadit',
            'nasekat',
            'naslepo',
            'nastat',
            'natolik',
            'navenek',
            'navrch',
            'navzdory',
            'nazvat',
            'nebe',
            'nechat',
            'necky',
            'nedaleko',
            'nedbat',
            'neduh',
            'negace',
            'nehet',
            'nehoda',
            'nejen',
            'nejprve',
            'neklid',
            'nelibost',
            'nemilost',
            'nemoc',
            'neochota',
            'neonka',
            'nepokoj',
            'nerost',
            'nerv',
            'nesmysl',
            'nesoulad',
            'netvor',
            'neuron',
            'nevina',
            'nezvykle',
            'nicota',
            'nijak',
            'nikam',
            'nikdy',
            'nikl',
            'nikterak',
            'nitro',
            'nocleh',
            'nohavice',
            'nominace',
            'nora',
            'norek',
            'nositel',
            'nosnost',
            'nouze',
            'noviny',
            'novota',
            'nozdra',
            'nuda',
            'nudle',
            'nuget',
            'nutit',
            'nutnost',
            'nutrie',
            'nymfa',
            'obal',
            'obarvit',
            'obava',
            'obdiv',
            'obec',
            'obehnat',
            'obejmout',
            'obezita',
            'obhajoba',
            'obilnice',
            'objasnit',
            'objekt',
            'obklopit',
            'oblast',
            'oblek',
            'obliba',
            'obloha',
            'obluda',
            'obnos',
            'obohatit',
            'obojek',
            'obout',
            'obrazec',
            'obrna',
            'obruba',
            'obrys',
            'obsah',
            'obsluha',
            'obstarat',
            'obuv',
            'obvaz',
            'obvinit',
            'obvod',
            'obvykle',
            'obyvatel',
            'obzor',
            'ocas',
            'ocel',
            'ocenit',
            'ochladit',
            'ochota',
            'ochrana',
            'ocitnout',
            'odboj',
            'odbyt',
            'odchod',
            'odcizit',
            'odebrat',
            'odeslat',
            'odevzdat',
            'odezva',
            'odhadce',
            'odhodit',
            'odjet',
            'odjinud',
            'odkaz',
            'odkoupit',
            'odliv',
            'odluka',
            'odmlka',
            'odolnost',
            'odpad',
            'odpis',
            'odplout',
            'odpor',
            'odpustit',
            'odpykat',
            'odrazka',
            'odsoudit',
            'odstup',
            'odsun',
            'odtok',
            'odtud',
            'odvaha',
            'odveta',
            'odvolat',
            'odvracet',
            'odznak',
            'ofina',
            'ofsajd',
            'ohlas',
            'ohnisko',
            'ohrada',
            'ohrozit',
            'ohryzek',
            'okap',
            'okenice',
            'oklika',
            'okno',
            'okouzlit',
            'okovy',
            'okrasa',
            'okres',
            'okrsek',
            'okruh',
            'okupant',
            'okurka',
            'okusit',
            'olejnina',
            'olizovat',
            'omak',
            'omeleta',
            'omezit',
            'omladina',
            'omlouvat',
            'omluva',
            'omyl',
            'onehdy',
            'opakovat',
            'opasek',
            'operace',
            'opice',
            'opilost',
            'opisovat',
            'opora',
            'opozice',
            'opravdu',
            'oproti',
            'orbital',
            'orchestr',
            'orgie',
            'orlice',
            'orloj',
            'ortel',
            'osada',
            'oschnout',
            'osika',
            'osivo',
            'oslava',
            'oslepit',
            'oslnit',
            'oslovit',
            'osnova',
            'osoba',
            'osolit',
            'ospalec',
            'osten',
            'ostraha',
            'ostuda',
            'ostych',
            'osvojit',
            'oteplit',
            'otisk',
            'otop',
            'otrhat',
            'otrlost',
            'otrok',
            'otruby',
            'otvor',
            'ovanout',
            'ovar',
            'oves',
            'ovlivnit',
            'ovoce',
            'oxid',
            'ozdoba',
            'pachatel',
            'pacient',
            'padouch',
            'pahorek',
            'pakt',
            'palanda',
            'palec',
            'palivo',
            'paluba',
            'pamflet',
            'pamlsek',
            'panenka',
            'panika',
            'panna',
            'panovat',
            'panstvo',
            'pantofle',
            'paprika',
            'parketa',
            'parodie',
            'parta',
            'paruka',
            'paryba',
            'paseka',
            'pasivita',
            'pastelka',
            'patent',
            'patrona',
            'pavouk',
            'pazneht',
            'pazourek',
            'pecka',
            'pedagog',
            'pejsek',
            'peklo',
            'peloton',
            'penalta',
            'pendrek',
            'penze',
            'periskop',
            'pero',
            'pestrost',
            'petarda',
            'petice',
            'petrolej',
            'pevnina',
            'pexeso',
            'pianista',
            'piha',
            'pijavice',
            'pikle',
            'piknik',
            'pilina',
            'pilnost',
            'pilulka',
            'pinzeta',
            'pipeta',
            'pisatel',
            'pistole',
            'pitevna',
            'pivnice',
            'pivovar',
            'placenta',
            'plakat',
            'plamen',
            'planeta',
            'plastika',
            'platit',
            'plavidlo',
            'plaz',
            'plech',
            'plemeno',
            'plenta',
            'ples',
            'pletivo',
            'plevel',
            'plivat',
            'plnit',
            'plno',
            'plocha',
            'plodina',
            'plomba',
            'plout',
            'pluk',
            'plyn',
            'pobavit',
            'pobyt',
            'pochod',
            'pocit',
            'poctivec',
            'podat',
            'podcenit',
            'podepsat',
            'podhled',
            'podivit',
            'podklad',
            'podmanit',
            'podnik',
            'podoba',
            'podpora',
            'podraz',
            'podstata',
            'podvod',
            'podzim',
            'poezie',
            'pohanka',
            'pohnutka',
            'pohovor',
            'pohroma',
            'pohyb',
            'pointa',
            'pojistka',
            'pojmout',
            'pokazit',
            'pokles',
            'pokoj',
            'pokrok',
            'pokuta',
            'pokyn',
            'poledne',
            'polibek',
            'polknout',
            'poloha',
            'polynom',
            'pomalu',
            'pominout',
            'pomlka',
            'pomoc',
            'pomsta',
            'pomyslet',
            'ponechat',
            'ponorka',
            'ponurost',
            'popadat',
            'popel',
            'popisek',
            'poplach',
            'poprosit',
            'popsat',
            'popud',
            'poradce',
            'porce',
            'porod',
            'porucha',
            'poryv',
            'posadit',
            'posed',
            'posila',
            'poskok',
            'poslanec',
            'posoudit',
            'pospolu',
            'postava',
            'posudek',
            'posyp',
            'potah',
            'potkan',
            'potlesk',
            'potomek',
            'potrava',
            'potupa',
            'potvora',
            'poukaz',
            'pouto',
            'pouzdro',
            'povaha',
            'povidla',
            'povlak',
            'povoz',
            'povrch',
            'povstat',
            'povyk',
            'povzdech',
            'pozdrav',
            'pozemek',
            'poznatek',
            'pozor',
            'pozvat',
            'pracovat',
            'prahory',
            'praktika',
            'prales',
            'praotec',
            'praporek',
            'prase',
            'pravda',
            'princip',
            'prkno',
            'probudit',
            'procento',
            'prodej',
            'profese',
            'prohra',
            'projekt',
            'prolomit',
            'promile',
            'pronikat',
            'propad',
            'prorok',
            'prosba',
            'proton',
            'proutek',
            'provaz',
            'prskavka',
            'prsten',
            'prudkost',
            'prut',
            'prvek',
            'prvohory',
            'psanec',
            'psovod',
            'pstruh',
            'ptactvo',
            'puberta',
            'puch',
            'pudl',
            'pukavec',
            'puklina',
            'pukrle',
            'pult',
            'pumpa',
            'punc',
            'pupen',
            'pusa',
            'pusinka',
            'pustina',
            'putovat',
            'putyka',
            'pyramida',
            'pysk',
            'pytel',
            'racek',
            'rachot',
            'radiace',
            'radnice',
            'radon',
            'raft',
            'ragby',
            'raketa',
            'rakovina',
            'rameno',
            'rampouch',
            'rande',
            'rarach',
            'rarita',
            'rasovna',
            'rastr',
            'ratolest',
            'razance',
            'razidlo',
            'reagovat',
            'reakce',
            'recept',
            'redaktor',
            'referent',
            'reflex',
            'rejnok',
            'reklama',
            'rekord',
            'rekrut',
            'rektor',
            'reputace',
            'revize',
            'revma',
            'revolver',
            'rezerva',
            'riskovat',
            'riziko',
            'robotika',
            'rodokmen',
            'rohovka',
            'rokle',
            'rokoko',
            'romaneto',
            'ropovod',
            'ropucha',
            'rorejs',
            'rosol',
            'rostlina',
            'rotmistr',
            'rotoped',
            'rotunda',
            'roubenka',
            'roucho',
            'roup',
            'roura',
            'rovina',
            'rovnice',
            'rozbor',
            'rozchod',
            'rozdat',
            'rozeznat',
            'rozhodce',
            'rozinka',
            'rozjezd',
            'rozkaz',
            'rozloha',
            'rozmar',
            'rozpad',
            'rozruch',
            'rozsah',
            'roztok',
            'rozum',
            'rozvod',
            'rubrika',
            'ruchadlo',
            'rukavice',
            'rukopis',
            'ryba',
            'rybolov',
            'rychlost',
            'rydlo',
            'rypadlo',
            'rytina',
            'ryzost',
            'sadista',
            'sahat',
            'sako',
            'samec',
            'samizdat',
            'samota',
            'sanitka',
            'sardinka',
            'sasanka',
            'satelit',
            'sazba',
            'sazenice',
            'sbor',
            'schovat',
            'sebranka',
            'secese',
            'sedadlo',
            'sediment',
            'sedlo',
            'sehnat',
            'sejmout',
            'sekera',
            'sekta',
            'sekunda',
            'sekvoje',
            'semeno',
            'seno',
            'servis',
            'sesadit',
            'seshora',
            'seskok',
            'seslat',
            'sestra',
            'sesuv',
            'sesypat',
            'setba',
            'setina',
            'setkat',
            'setnout',
            'setrvat',
            'sever',
            'seznam',
            'shoda',
            'shrnout',
            'sifon',
            'silnice',
            'sirka',
            'sirotek',
            'sirup',
            'situace',
            'skafandr',
            'skalisko',
            'skanzen',
            'skaut',
            'skeptik',
            'skica',
            'skladba',
            'sklenice',
            'sklo',
            'skluz',
            'skoba',
            'skokan',
            'skoro',
            'skripta',
            'skrz',
            'skupina',
            'skvost',
            'skvrna',
            'slabika',
            'sladidlo',
            'slanina',
            'slast',
            'slavnost',
            'sledovat',
            'slepec',
            'sleva',
            'slezina',
            'slib',
            'slina',
            'sliznice',
            'slon',
            'sloupek',
            'slovo',
            'sluch',
            'sluha',
            'slunce',
            'slupka',
            'slza',
            'smaragd',
            'smetana',
            'smilstvo',
            'smlouva',
            'smog',
            'smrad',
            'smrk',
            'smrtka',
            'smutek',
            'smysl',
            'snad',
            'snaha',
            'snob',
            'sobota',
            'socha',
            'sodovka',
            'sokol',
            'sopka',
            'sotva',
            'souboj',
            'soucit',
            'soudce',
            'souhlas',
            'soulad',
            'soumrak',
            'souprava',
            'soused',
            'soutok',
            'souviset',
            'spalovna',
            'spasitel',
            'spis',
            'splav',
            'spodek',
            'spojenec',
            'spolu',
            'sponzor',
            'spornost',
            'spousta',
            'sprcha',
            'spustit',
            'sranda',
            'sraz',
            'srdce',
            'srna',
            'srnec',
            'srovnat',
            'srpen',
            'srst',
            'srub',
            'stanice',
            'starosta',
            'statika',
            'stavba',
            'stehno',
            'stezka',
            'stodola',
            'stolek',
            'stopa',
            'storno',
            'stoupat',
            'strach',
            'stres',
            'strhnout',
            'strom',
            'struna',
            'studna',
            'stupnice',
            'stvol',
            'styk',
            'subjekt',
            'subtropy',
            'suchar',
            'sudost',
            'sukno',
            'sundat',
            'sunout',
            'surikata',
            'surovina',
            'svah',
            'svalstvo',
            'svetr',
            'svatba',
            'svazek',
            'svisle',
            'svitek',
            'svoboda',
            'svodidlo',
            'svorka',
            'svrab',
            'sykavka',
            'sykot',
            'synek',
            'synovec',
            'sypat',
            'sypkost',
            'syrovost',
            'sysel',
            'sytost',
            'tabletka',
            'tabule',
            'tahoun',
            'tajemno',
            'tajfun',
            'tajga',
            'tajit',
            'tajnost',
            'taktika',
            'tamhle',
            'tampon',
            'tancovat',
            'tanec',
            'tanker',
            'tapeta',
            'tavenina',
            'tazatel',
            'technika',
            'tehdy',
            'tekutina',
            'telefon',
            'temnota',
            'tendence',
            'tenista',
            'tenor',
            'teplota',
            'tepna',
            'teprve',
            'terapie',
            'termoska',
            'textil',
            'ticho',
            'tiskopis',
            'titulek',
            'tkadlec',
            'tkanina',
            'tlapka',
            'tleskat',
            'tlukot',
            'tlupa',
            'tmel',
            'toaleta',
            'topinka',
            'topol',
            'torzo',
            'touha',
            'toulec',
            'tradice',
            'traktor',
            'tramp',
            'trasa',
            'traverza',
            'trefit',
            'trest',
            'trezor',
            'trhavina',
            'trhlina',
            'trochu',
            'trojice',
            'troska',
            'trouba',
            'trpce',
            'trpitel',
            'trpkost',
            'trubec',
            'truchlit',
            'truhlice',
            'trus',
            'trvat',
            'tudy',
            'tuhnout',
            'tuhost',
            'tundra',
            'turista',
            'turnaj',
            'tuzemsko',
            'tvaroh',
            'tvorba',
            'tvrdost',
            'tvrz',
            'tygr',
            'tykev',
            'ubohost',
            'uboze',
            'ubrat',
            'ubrousek',
            'ubrus',
            'ubytovna',
            'ucho',
            'uctivost',
            'udivit',
            'uhradit',
            'ujednat',
            'ujistit',
            'ujmout',
            'ukazatel',
            'uklidnit',
            'uklonit',
            'ukotvit',
            'ukrojit',
            'ulice',
            'ulita',
            'ulovit',
            'umyvadlo',
            'unavit',
            'uniforma',
            'uniknout',
            'upadnout',
            'uplatnit',
            'uplynout',
            'upoutat',
            'upravit',
            'uran',
            'urazit',
            'usednout',
            'usilovat',
            'usmrtit',
            'usnadnit',
            'usnout',
            'usoudit',
            'ustlat',
            'ustrnout',
            'utahovat',
            'utkat',
            'utlumit',
            'utonout',
            'utopenec',
            'utrousit',
            'uvalit',
            'uvolnit',
            'uvozovka',
            'uzdravit',
            'uzel',
            'uzenina',
            'uzlina',
            'uznat',
            'vagon',
            'valcha',
            'valoun',
            'vana',
            'vandal',
            'vanilka',
            'varan',
            'varhany',
            'varovat',
            'vcelku',
            'vchod',
            'vdova',
            'vedro',
            'vegetace',
            'vejce',
            'velbloud',
            'veletrh',
            'velitel',
            'velmoc',
            'velryba',
            'venkov',
            'veranda',
            'verze',
            'veselka',
            'veskrze',
            'vesnice',
            'vespodu',
            'vesta',
            'veterina',
            'veverka',
            'vibrace',
            'vichr',
            'videohra',
            'vidina',
            'vidle',
            'vila',
            'vinice',
            'viset',
            'vitalita',
            'vize',
            'vizitka',
            'vjezd',
            'vklad',
            'vkus',
            'vlajka',
            'vlak',
            'vlasec',
            'vlevo',
            'vlhkost',
            'vliv',
            'vlnovka',
            'vloupat',
            'vnucovat',
            'vnuk',
            'voda',
            'vodivost',
            'vodoznak',
            'vodstvo',
            'vojensky',
            'vojna',
            'vojsko',
            'volant',
            'volba',
            'volit',
            'volno',
            'voskovka',
            'vozidlo',
            'vozovna',
            'vpravo',
            'vrabec',
            'vracet',
            'vrah',
            'vrata',
            'vrba',
            'vrcholek',
            'vrhat',
            'vrstva',
            'vrtule',
            'vsadit',
            'vstoupit',
            'vstup',
            'vtip',
            'vybavit',
            'vybrat',
            'vychovat',
            'vydat',
            'vydra',
            'vyfotit',
            'vyhledat',
            'vyhnout',
            'vyhodit',
            'vyhradit',
            'vyhubit',
            'vyjasnit',
            'vyjet',
            'vyjmout',
            'vyklopit',
            'vykonat',
            'vylekat',
            'vymazat',
            'vymezit',
            'vymizet',
            'vymyslet',
            'vynechat',
            'vynikat',
            'vynutit',
            'vypadat',
            'vyplatit',
            'vypravit',
            'vypustit',
            'vyrazit',
            'vyrovnat',
            'vyrvat',
            'vyslovit',
            'vysoko',
            'vystavit',
            'vysunout',
            'vysypat',
            'vytasit',
            'vytesat',
            'vytratit',
            'vyvinout',
            'vyvolat',
            'vyvrhel',
            'vyzdobit',
            'vyznat',
            'vzadu',
            'vzbudit',
            'vzchopit',
            'vzdor',
            'vzduch',
            'vzdychat',
            'vzestup',
            'vzhledem',
            'vzkaz',
            'vzlykat',
            'vznik',
            'vzorek',
            'vzpoura',
            'vztah',
            'vztek',
            'xylofon',
            'zabrat',
            'zabydlet',
            'zachovat',
            'zadarmo',
            'zadusit',
            'zafoukat',
            'zahltit',
            'zahodit',
            'zahrada',
            'zahynout',
            'zajatec',
            'zajet',
            'zajistit',
            'zaklepat',
            'zakoupit',
            'zalepit',
            'zamezit',
            'zamotat',
            'zamyslet',
            'zanechat',
            'zanikat',
            'zaplatit',
            'zapojit',
            'zapsat',
            'zarazit',
            'zastavit',
            'zasunout',
            'zatajit',
            'zatemnit',
            'zatknout',
            'zaujmout',
            'zavalit',
            'zavelet',
            'zavinit',
            'zavolat',
            'zavrtat',
            'zazvonit',
            'zbavit',
            'zbrusu',
            'zbudovat',
            'zbytek',
            'zdaleka',
            'zdarma',
            'zdatnost',
            'zdivo',
            'zdobit',
            'zdroj',
            'zdvih',
            'zdymadlo',
            'zelenina',
            'zeman',
            'zemina',
            'zeptat',
            'zezadu',
            'zezdola',
            'zhatit',
            'zhltnout',
            'zhluboka',
            'zhotovit',
            'zhruba',
            'zima',
            'zimnice',
            'zjemnit',
            'zklamat',
            'zkoumat',
            'zkratka',
            'zkumavka',
            'zlato',
            'zlehka',
            'zloba',
            'zlom',
            'zlost',
            'zlozvyk',
            'zmapovat',
            'zmar',
            'zmatek',
            'zmije',
            'zmizet',
            'zmocnit',
            'zmodrat',
            'zmrzlina',
            'zmutovat',
            'znak',
            'znalost',
            'znamenat',
            'znovu',
            'zobrazit',
            'zotavit',
            'zoubek',
            'zoufale',
            'zplodit',
            'zpomalit',
            'zprava',
            'zprostit',
            'zprudka',
            'zprvu',
            'zrada',
            'zranit',
            'zrcadlo',
            'zrnitost',
            'zrno',
            'zrovna',
            'zrychlit',
            'zrzavost',
            'zticha',
            'ztratit',
            'zubovina',
            'zubr',
            'zvednout',
            'zvenku',
            'zvesela',
            'zvon',
            'zvrat',
            'zvukovod',
            'zvyk',
          ];
        },
        {},
      ],
      53: [
        function (require, module, exports) {
          module.exports = [
            'abandon',
            'ability',
            'able',
            'about',
            'above',
            'absent',
            'absorb',
            'abstract',
            'absurd',
            'abuse',
            'access',
            'accident',
            'account',
            'accuse',
            'achieve',
            'acid',
            'acoustic',
            'acquire',
            'across',
            'act',
            'action',
            'actor',
            'actress',
            'actual',
            'adapt',
            'add',
            'addict',
            'address',
            'adjust',
            'admit',
            'adult',
            'advance',
            'advice',
            'aerobic',
            'affair',
            'afford',
            'afraid',
            'again',
            'age',
            'agent',
            'agree',
            'ahead',
            'aim',
            'air',
            'airport',
            'aisle',
            'alarm',
            'album',
            'alcohol',
            'alert',
            'alien',
            'all',
            'alley',
            'allow',
            'almost',
            'alone',
            'alpha',
            'already',
            'also',
            'alter',
            'always',
            'amateur',
            'amazing',
            'among',
            'amount',
            'amused',
            'analyst',
            'anchor',
            'ancient',
            'anger',
            'angle',
            'angry',
            'animal',
            'ankle',
            'announce',
            'annual',
            'another',
            'answer',
            'antenna',
            'antique',
            'anxiety',
            'any',
            'apart',
            'apology',
            'appear',
            'apple',
            'approve',
            'april',
            'arch',
            'arctic',
            'area',
            'arena',
            'argue',
            'arm',
            'armed',
            'armor',
            'army',
            'around',
            'arrange',
            'arrest',
            'arrive',
            'arrow',
            'art',
            'artefact',
            'artist',
            'artwork',
            'ask',
            'aspect',
            'assault',
            'asset',
            'assist',
            'assume',
            'asthma',
            'athlete',
            'atom',
            'attack',
            'attend',
            'attitude',
            'attract',
            'auction',
            'audit',
            'august',
            'aunt',
            'author',
            'auto',
            'autumn',
            'average',
            'avocado',
            'avoid',
            'awake',
            'aware',
            'away',
            'awesome',
            'awful',
            'awkward',
            'axis',
            'baby',
            'bachelor',
            'bacon',
            'badge',
            'bag',
            'balance',
            'balcony',
            'ball',
            'bamboo',
            'banana',
            'banner',
            'bar',
            'barely',
            'bargain',
            'barrel',
            'base',
            'basic',
            'basket',
            'battle',
            'beach',
            'bean',
            'beauty',
            'because',
            'become',
            'beef',
            'before',
            'begin',
            'behave',
            'behind',
            'believe',
            'below',
            'belt',
            'bench',
            'benefit',
            'best',
            'betray',
            'better',
            'between',
            'beyond',
            'bicycle',
            'bid',
            'bike',
            'bind',
            'biology',
            'bird',
            'birth',
            'bitter',
            'black',
            'blade',
            'blame',
            'blanket',
            'blast',
            'bleak',
            'bless',
            'blind',
            'blood',
            'blossom',
            'blouse',
            'blue',
            'blur',
            'blush',
            'board',
            'boat',
            'body',
            'boil',
            'bomb',
            'bone',
            'bonus',
            'book',
            'boost',
            'border',
            'boring',
            'borrow',
            'boss',
            'bottom',
            'bounce',
            'box',
            'boy',
            'bracket',
            'brain',
            'brand',
            'brass',
            'brave',
            'bread',
            'breeze',
            'brick',
            'bridge',
            'brief',
            'bright',
            'bring',
            'brisk',
            'broccoli',
            'broken',
            'bronze',
            'broom',
            'brother',
            'brown',
            'brush',
            'bubble',
            'buddy',
            'budget',
            'buffalo',
            'build',
            'bulb',
            'bulk',
            'bullet',
            'bundle',
            'bunker',
            'burden',
            'burger',
            'burst',
            'bus',
            'business',
            'busy',
            'butter',
            'buyer',
            'buzz',
            'cabbage',
            'cabin',
            'cable',
            'cactus',
            'cage',
            'cake',
            'call',
            'calm',
            'camera',
            'camp',
            'can',
            'canal',
            'cancel',
            'candy',
            'cannon',
            'canoe',
            'canvas',
            'canyon',
            'capable',
            'capital',
            'captain',
            'car',
            'carbon',
            'card',
            'cargo',
            'carpet',
            'carry',
            'cart',
            'case',
            'cash',
            'casino',
            'castle',
            'casual',
            'cat',
            'catalog',
            'catch',
            'category',
            'cattle',
            'caught',
            'cause',
            'caution',
            'cave',
            'ceiling',
            'celery',
            'cement',
            'census',
            'century',
            'cereal',
            'certain',
            'chair',
            'chalk',
            'champion',
            'change',
            'chaos',
            'chapter',
            'charge',
            'chase',
            'chat',
            'cheap',
            'check',
            'cheese',
            'chef',
            'cherry',
            'chest',
            'chicken',
            'chief',
            'child',
            'chimney',
            'choice',
            'choose',
            'chronic',
            'chuckle',
            'chunk',
            'churn',
            'cigar',
            'cinnamon',
            'circle',
            'citizen',
            'city',
            'civil',
            'claim',
            'clap',
            'clarify',
            'claw',
            'clay',
            'clean',
            'clerk',
            'clever',
            'click',
            'client',
            'cliff',
            'climb',
            'clinic',
            'clip',
            'clock',
            'clog',
            'close',
            'cloth',
            'cloud',
            'clown',
            'club',
            'clump',
            'cluster',
            'clutch',
            'coach',
            'coast',
            'coconut',
            'code',
            'coffee',
            'coil',
            'coin',
            'collect',
            'color',
            'column',
            'combine',
            'come',
            'comfort',
            'comic',
            'common',
            'company',
            'concert',
            'conduct',
            'confirm',
            'congress',
            'connect',
            'consider',
            'control',
            'convince',
            'cook',
            'cool',
            'copper',
            'copy',
            'coral',
            'core',
            'corn',
            'correct',
            'cost',
            'cotton',
            'couch',
            'country',
            'couple',
            'course',
            'cousin',
            'cover',
            'coyote',
            'crack',
            'cradle',
            'craft',
            'cram',
            'crane',
            'crash',
            'crater',
            'crawl',
            'crazy',
            'cream',
            'credit',
            'creek',
            'crew',
            'cricket',
            'crime',
            'crisp',
            'critic',
            'crop',
            'cross',
            'crouch',
            'crowd',
            'crucial',
            'cruel',
            'cruise',
            'crumble',
            'crunch',
            'crush',
            'cry',
            'crystal',
            'cube',
            'culture',
            'cup',
            'cupboard',
            'curious',
            'current',
            'curtain',
            'curve',
            'cushion',
            'custom',
            'cute',
            'cycle',
            'dad',
            'damage',
            'damp',
            'dance',
            'danger',
            'daring',
            'dash',
            'daughter',
            'dawn',
            'day',
            'deal',
            'debate',
            'debris',
            'decade',
            'december',
            'decide',
            'decline',
            'decorate',
            'decrease',
            'deer',
            'defense',
            'define',
            'defy',
            'degree',
            'delay',
            'deliver',
            'demand',
            'demise',
            'denial',
            'dentist',
            'deny',
            'depart',
            'depend',
            'deposit',
            'depth',
            'deputy',
            'derive',
            'describe',
            'desert',
            'design',
            'desk',
            'despair',
            'destroy',
            'detail',
            'detect',
            'develop',
            'device',
            'devote',
            'diagram',
            'dial',
            'diamond',
            'diary',
            'dice',
            'diesel',
            'diet',
            'differ',
            'digital',
            'dignity',
            'dilemma',
            'dinner',
            'dinosaur',
            'direct',
            'dirt',
            'disagree',
            'discover',
            'disease',
            'dish',
            'dismiss',
            'disorder',
            'display',
            'distance',
            'divert',
            'divide',
            'divorce',
            'dizzy',
            'doctor',
            'document',
            'dog',
            'doll',
            'dolphin',
            'domain',
            'donate',
            'donkey',
            'donor',
            'door',
            'dose',
            'double',
            'dove',
            'draft',
            'dragon',
            'drama',
            'drastic',
            'draw',
            'dream',
            'dress',
            'drift',
            'drill',
            'drink',
            'drip',
            'drive',
            'drop',
            'drum',
            'dry',
            'duck',
            'dumb',
            'dune',
            'during',
            'dust',
            'dutch',
            'duty',
            'dwarf',
            'dynamic',
            'eager',
            'eagle',
            'early',
            'earn',
            'earth',
            'easily',
            'east',
            'easy',
            'echo',
            'ecology',
            'economy',
            'edge',
            'edit',
            'educate',
            'effort',
            'egg',
            'eight',
            'either',
            'elbow',
            'elder',
            'electric',
            'elegant',
            'element',
            'elephant',
            'elevator',
            'elite',
            'else',
            'embark',
            'embody',
            'embrace',
            'emerge',
            'emotion',
            'employ',
            'empower',
            'empty',
            'enable',
            'enact',
            'end',
            'endless',
            'endorse',
            'enemy',
            'energy',
            'enforce',
            'engage',
            'engine',
            'enhance',
            'enjoy',
            'enlist',
            'enough',
            'enrich',
            'enroll',
            'ensure',
            'enter',
            'entire',
            'entry',
            'envelope',
            'episode',
            'equal',
            'equip',
            'era',
            'erase',
            'erode',
            'erosion',
            'error',
            'erupt',
            'escape',
            'essay',
            'essence',
            'estate',
            'eternal',
            'ethics',
            'evidence',
            'evil',
            'evoke',
            'evolve',
            'exact',
            'example',
            'excess',
            'exchange',
            'excite',
            'exclude',
            'excuse',
            'execute',
            'exercise',
            'exhaust',
            'exhibit',
            'exile',
            'exist',
            'exit',
            'exotic',
            'expand',
            'expect',
            'expire',
            'explain',
            'expose',
            'express',
            'extend',
            'extra',
            'eye',
            'eyebrow',
            'fabric',
            'face',
            'faculty',
            'fade',
            'faint',
            'faith',
            'fall',
            'false',
            'fame',
            'family',
            'famous',
            'fan',
            'fancy',
            'fantasy',
            'farm',
            'fashion',
            'fat',
            'fatal',
            'father',
            'fatigue',
            'fault',
            'favorite',
            'feature',
            'february',
            'federal',
            'fee',
            'feed',
            'feel',
            'female',
            'fence',
            'festival',
            'fetch',
            'fever',
            'few',
            'fiber',
            'fiction',
            'field',
            'figure',
            'file',
            'film',
            'filter',
            'final',
            'find',
            'fine',
            'finger',
            'finish',
            'fire',
            'firm',
            'first',
            'fiscal',
            'fish',
            'fit',
            'fitness',
            'fix',
            'flag',
            'flame',
            'flash',
            'flat',
            'flavor',
            'flee',
            'flight',
            'flip',
            'float',
            'flock',
            'floor',
            'flower',
            'fluid',
            'flush',
            'fly',
            'foam',
            'focus',
            'fog',
            'foil',
            'fold',
            'follow',
            'food',
            'foot',
            'force',
            'forest',
            'forget',
            'fork',
            'fortune',
            'forum',
            'forward',
            'fossil',
            'foster',
            'found',
            'fox',
            'fragile',
            'frame',
            'frequent',
            'fresh',
            'friend',
            'fringe',
            'frog',
            'front',
            'frost',
            'frown',
            'frozen',
            'fruit',
            'fuel',
            'fun',
            'funny',
            'furnace',
            'fury',
            'future',
            'gadget',
            'gain',
            'galaxy',
            'gallery',
            'game',
            'gap',
            'garage',
            'garbage',
            'garden',
            'garlic',
            'garment',
            'gas',
            'gasp',
            'gate',
            'gather',
            'gauge',
            'gaze',
            'general',
            'genius',
            'genre',
            'gentle',
            'genuine',
            'gesture',
            'ghost',
            'giant',
            'gift',
            'giggle',
            'ginger',
            'giraffe',
            'girl',
            'give',
            'glad',
            'glance',
            'glare',
            'glass',
            'glide',
            'glimpse',
            'globe',
            'gloom',
            'glory',
            'glove',
            'glow',
            'glue',
            'goat',
            'goddess',
            'gold',
            'good',
            'goose',
            'gorilla',
            'gospel',
            'gossip',
            'govern',
            'gown',
            'grab',
            'grace',
            'grain',
            'grant',
            'grape',
            'grass',
            'gravity',
            'great',
            'green',
            'grid',
            'grief',
            'grit',
            'grocery',
            'group',
            'grow',
            'grunt',
            'guard',
            'guess',
            'guide',
            'guilt',
            'guitar',
            'gun',
            'gym',
            'habit',
            'hair',
            'half',
            'hammer',
            'hamster',
            'hand',
            'happy',
            'harbor',
            'hard',
            'harsh',
            'harvest',
            'hat',
            'have',
            'hawk',
            'hazard',
            'head',
            'health',
            'heart',
            'heavy',
            'hedgehog',
            'height',
            'hello',
            'helmet',
            'help',
            'hen',
            'hero',
            'hidden',
            'high',
            'hill',
            'hint',
            'hip',
            'hire',
            'history',
            'hobby',
            'hockey',
            'hold',
            'hole',
            'holiday',
            'hollow',
            'home',
            'honey',
            'hood',
            'hope',
            'horn',
            'horror',
            'horse',
            'hospital',
            'host',
            'hotel',
            'hour',
            'hover',
            'hub',
            'huge',
            'human',
            'humble',
            'humor',
            'hundred',
            'hungry',
            'hunt',
            'hurdle',
            'hurry',
            'hurt',
            'husband',
            'hybrid',
            'ice',
            'icon',
            'idea',
            'identify',
            'idle',
            'ignore',
            'ill',
            'illegal',
            'illness',
            'image',
            'imitate',
            'immense',
            'immune',
            'impact',
            'impose',
            'improve',
            'impulse',
            'inch',
            'include',
            'income',
            'increase',
            'index',
            'indicate',
            'indoor',
            'industry',
            'infant',
            'inflict',
            'inform',
            'inhale',
            'inherit',
            'initial',
            'inject',
            'injury',
            'inmate',
            'inner',
            'innocent',
            'input',
            'inquiry',
            'insane',
            'insect',
            'inside',
            'inspire',
            'install',
            'intact',
            'interest',
            'into',
            'invest',
            'invite',
            'involve',
            'iron',
            'island',
            'isolate',
            'issue',
            'item',
            'ivory',
            'jacket',
            'jaguar',
            'jar',
            'jazz',
            'jealous',
            'jeans',
            'jelly',
            'jewel',
            'job',
            'join',
            'joke',
            'journey',
            'joy',
            'judge',
            'juice',
            'jump',
            'jungle',
            'junior',
            'junk',
            'just',
            'kangaroo',
            'keen',
            'keep',
            'ketchup',
            'key',
            'kick',
            'kid',
            'kidney',
            'kind',
            'kingdom',
            'kiss',
            'kit',
            'kitchen',
            'kite',
            'kitten',
            'kiwi',
            'knee',
            'knife',
            'knock',
            'know',
            'lab',
            'label',
            'labor',
            'ladder',
            'lady',
            'lake',
            'lamp',
            'language',
            'laptop',
            'large',
            'later',
            'latin',
            'laugh',
            'laundry',
            'lava',
            'law',
            'lawn',
            'lawsuit',
            'layer',
            'lazy',
            'leader',
            'leaf',
            'learn',
            'leave',
            'lecture',
            'left',
            'leg',
            'legal',
            'legend',
            'leisure',
            'lemon',
            'lend',
            'length',
            'lens',
            'leopard',
            'lesson',
            'letter',
            'level',
            'liar',
            'liberty',
            'library',
            'license',
            'life',
            'lift',
            'light',
            'like',
            'limb',
            'limit',
            'link',
            'lion',
            'liquid',
            'list',
            'little',
            'live',
            'lizard',
            'load',
            'loan',
            'lobster',
            'local',
            'lock',
            'logic',
            'lonely',
            'long',
            'loop',
            'lottery',
            'loud',
            'lounge',
            'love',
            'loyal',
            'lucky',
            'luggage',
            'lumber',
            'lunar',
            'lunch',
            'luxury',
            'lyrics',
            'machine',
            'mad',
            'magic',
            'magnet',
            'maid',
            'mail',
            'main',
            'major',
            'make',
            'mammal',
            'man',
            'manage',
            'mandate',
            'mango',
            'mansion',
            'manual',
            'maple',
            'marble',
            'march',
            'margin',
            'marine',
            'market',
            'marriage',
            'mask',
            'mass',
            'master',
            'match',
            'material',
            'math',
            'matrix',
            'matter',
            'maximum',
            'maze',
            'meadow',
            'mean',
            'measure',
            'meat',
            'mechanic',
            'medal',
            'media',
            'melody',
            'melt',
            'member',
            'memory',
            'mention',
            'menu',
            'mercy',
            'merge',
            'merit',
            'merry',
            'mesh',
            'message',
            'metal',
            'method',
            'middle',
            'midnight',
            'milk',
            'million',
            'mimic',
            'mind',
            'minimum',
            'minor',
            'minute',
            'miracle',
            'mirror',
            'misery',
            'miss',
            'mistake',
            'mix',
            'mixed',
            'mixture',
            'mobile',
            'model',
            'modify',
            'mom',
            'moment',
            'monitor',
            'monkey',
            'monster',
            'month',
            'moon',
            'moral',
            'more',
            'morning',
            'mosquito',
            'mother',
            'motion',
            'motor',
            'mountain',
            'mouse',
            'move',
            'movie',
            'much',
            'muffin',
            'mule',
            'multiply',
            'muscle',
            'museum',
            'mushroom',
            'music',
            'must',
            'mutual',
            'myself',
            'mystery',
            'myth',
            'naive',
            'name',
            'napkin',
            'narrow',
            'nasty',
            'nation',
            'nature',
            'near',
            'neck',
            'need',
            'negative',
            'neglect',
            'neither',
            'nephew',
            'nerve',
            'nest',
            'net',
            'network',
            'neutral',
            'never',
            'news',
            'next',
            'nice',
            'night',
            'noble',
            'noise',
            'nominee',
            'noodle',
            'normal',
            'north',
            'nose',
            'notable',
            'note',
            'nothing',
            'notice',
            'novel',
            'now',
            'nuclear',
            'number',
            'nurse',
            'nut',
            'oak',
            'obey',
            'object',
            'oblige',
            'obscure',
            'observe',
            'obtain',
            'obvious',
            'occur',
            'ocean',
            'october',
            'odor',
            'off',
            'offer',
            'office',
            'often',
            'oil',
            'okay',
            'old',
            'olive',
            'olympic',
            'omit',
            'once',
            'one',
            'onion',
            'online',
            'only',
            'open',
            'opera',
            'opinion',
            'oppose',
            'option',
            'orange',
            'orbit',
            'orchard',
            'order',
            'ordinary',
            'organ',
            'orient',
            'original',
            'orphan',
            'ostrich',
            'other',
            'outdoor',
            'outer',
            'output',
            'outside',
            'oval',
            'oven',
            'over',
            'own',
            'owner',
            'oxygen',
            'oyster',
            'ozone',
            'pact',
            'paddle',
            'page',
            'pair',
            'palace',
            'palm',
            'panda',
            'panel',
            'panic',
            'panther',
            'paper',
            'parade',
            'parent',
            'park',
            'parrot',
            'party',
            'pass',
            'patch',
            'path',
            'patient',
            'patrol',
            'pattern',
            'pause',
            'pave',
            'payment',
            'peace',
            'peanut',
            'pear',
            'peasant',
            'pelican',
            'pen',
            'penalty',
            'pencil',
            'people',
            'pepper',
            'perfect',
            'permit',
            'person',
            'pet',
            'phone',
            'photo',
            'phrase',
            'physical',
            'piano',
            'picnic',
            'picture',
            'piece',
            'pig',
            'pigeon',
            'pill',
            'pilot',
            'pink',
            'pioneer',
            'pipe',
            'pistol',
            'pitch',
            'pizza',
            'place',
            'planet',
            'plastic',
            'plate',
            'play',
            'please',
            'pledge',
            'pluck',
            'plug',
            'plunge',
            'poem',
            'poet',
            'point',
            'polar',
            'pole',
            'police',
            'pond',
            'pony',
            'pool',
            'popular',
            'portion',
            'position',
            'possible',
            'post',
            'potato',
            'pottery',
            'poverty',
            'powder',
            'power',
            'practice',
            'praise',
            'predict',
            'prefer',
            'prepare',
            'present',
            'pretty',
            'prevent',
            'price',
            'pride',
            'primary',
            'print',
            'priority',
            'prison',
            'private',
            'prize',
            'problem',
            'process',
            'produce',
            'profit',
            'program',
            'project',
            'promote',
            'proof',
            'property',
            'prosper',
            'protect',
            'proud',
            'provide',
            'public',
            'pudding',
            'pull',
            'pulp',
            'pulse',
            'pumpkin',
            'punch',
            'pupil',
            'puppy',
            'purchase',
            'purity',
            'purpose',
            'purse',
            'push',
            'put',
            'puzzle',
            'pyramid',
            'quality',
            'quantum',
            'quarter',
            'question',
            'quick',
            'quit',
            'quiz',
            'quote',
            'rabbit',
            'raccoon',
            'race',
            'rack',
            'radar',
            'radio',
            'rail',
            'rain',
            'raise',
            'rally',
            'ramp',
            'ranch',
            'random',
            'range',
            'rapid',
            'rare',
            'rate',
            'rather',
            'raven',
            'raw',
            'razor',
            'ready',
            'real',
            'reason',
            'rebel',
            'rebuild',
            'recall',
            'receive',
            'recipe',
            'record',
            'recycle',
            'reduce',
            'reflect',
            'reform',
            'refuse',
            'region',
            'regret',
            'regular',
            'reject',
            'relax',
            'release',
            'relief',
            'rely',
            'remain',
            'remember',
            'remind',
            'remove',
            'render',
            'renew',
            'rent',
            'reopen',
            'repair',
            'repeat',
            'replace',
            'report',
            'require',
            'rescue',
            'resemble',
            'resist',
            'resource',
            'response',
            'result',
            'retire',
            'retreat',
            'return',
            'reunion',
            'reveal',
            'review',
            'reward',
            'rhythm',
            'rib',
            'ribbon',
            'rice',
            'rich',
            'ride',
            'ridge',
            'rifle',
            'right',
            'rigid',
            'ring',
            'riot',
            'ripple',
            'risk',
            'ritual',
            'rival',
            'river',
            'road',
            'roast',
            'robot',
            'robust',
            'rocket',
            'romance',
            'roof',
            'rookie',
            'room',
            'rose',
            'rotate',
            'rough',
            'round',
            'route',
            'royal',
            'rubber',
            'rude',
            'rug',
            'rule',
            'run',
            'runway',
            'rural',
            'sad',
            'saddle',
            'sadness',
            'safe',
            'sail',
            'salad',
            'salmon',
            'salon',
            'salt',
            'salute',
            'same',
            'sample',
            'sand',
            'satisfy',
            'satoshi',
            'sauce',
            'sausage',
            'save',
            'say',
            'scale',
            'scan',
            'scare',
            'scatter',
            'scene',
            'scheme',
            'school',
            'science',
            'scissors',
            'scorpion',
            'scout',
            'scrap',
            'screen',
            'script',
            'scrub',
            'sea',
            'search',
            'season',
            'seat',
            'second',
            'secret',
            'section',
            'security',
            'seed',
            'seek',
            'segment',
            'select',
            'sell',
            'seminar',
            'senior',
            'sense',
            'sentence',
            'series',
            'service',
            'session',
            'settle',
            'setup',
            'seven',
            'shadow',
            'shaft',
            'shallow',
            'share',
            'shed',
            'shell',
            'sheriff',
            'shield',
            'shift',
            'shine',
            'ship',
            'shiver',
            'shock',
            'shoe',
            'shoot',
            'shop',
            'short',
            'shoulder',
            'shove',
            'shrimp',
            'shrug',
            'shuffle',
            'shy',
            'sibling',
            'sick',
            'side',
            'siege',
            'sight',
            'sign',
            'silent',
            'silk',
            'silly',
            'silver',
            'similar',
            'simple',
            'since',
            'sing',
            'siren',
            'sister',
            'situate',
            'six',
            'size',
            'skate',
            'sketch',
            'ski',
            'skill',
            'skin',
            'skirt',
            'skull',
            'slab',
            'slam',
            'sleep',
            'slender',
            'slice',
            'slide',
            'slight',
            'slim',
            'slogan',
            'slot',
            'slow',
            'slush',
            'small',
            'smart',
            'smile',
            'smoke',
            'smooth',
            'snack',
            'snake',
            'snap',
            'sniff',
            'snow',
            'soap',
            'soccer',
            'social',
            'sock',
            'soda',
            'soft',
            'solar',
            'soldier',
            'solid',
            'solution',
            'solve',
            'someone',
            'song',
            'soon',
            'sorry',
            'sort',
            'soul',
            'sound',
            'soup',
            'source',
            'south',
            'space',
            'spare',
            'spatial',
            'spawn',
            'speak',
            'special',
            'speed',
            'spell',
            'spend',
            'sphere',
            'spice',
            'spider',
            'spike',
            'spin',
            'spirit',
            'split',
            'spoil',
            'sponsor',
            'spoon',
            'sport',
            'spot',
            'spray',
            'spread',
            'spring',
            'spy',
            'square',
            'squeeze',
            'squirrel',
            'stable',
            'stadium',
            'staff',
            'stage',
            'stairs',
            'stamp',
            'stand',
            'start',
            'state',
            'stay',
            'steak',
            'steel',
            'stem',
            'step',
            'stereo',
            'stick',
            'still',
            'sting',
            'stock',
            'stomach',
            'stone',
            'stool',
            'story',
            'stove',
            'strategy',
            'street',
            'strike',
            'strong',
            'struggle',
            'student',
            'stuff',
            'stumble',
            'style',
            'subject',
            'submit',
            'subway',
            'success',
            'such',
            'sudden',
            'suffer',
            'sugar',
            'suggest',
            'suit',
            'summer',
            'sun',
            'sunny',
            'sunset',
            'super',
            'supply',
            'supreme',
            'sure',
            'surface',
            'surge',
            'surprise',
            'surround',
            'survey',
            'suspect',
            'sustain',
            'swallow',
            'swamp',
            'swap',
            'swarm',
            'swear',
            'sweet',
            'swift',
            'swim',
            'swing',
            'switch',
            'sword',
            'symbol',
            'symptom',
            'syrup',
            'system',
            'table',
            'tackle',
            'tag',
            'tail',
            'talent',
            'talk',
            'tank',
            'tape',
            'target',
            'task',
            'taste',
            'tattoo',
            'taxi',
            'teach',
            'team',
            'tell',
            'ten',
            'tenant',
            'tennis',
            'tent',
            'term',
            'test',
            'text',
            'thank',
            'that',
            'theme',
            'then',
            'theory',
            'there',
            'they',
            'thing',
            'this',
            'thought',
            'three',
            'thrive',
            'throw',
            'thumb',
            'thunder',
            'ticket',
            'tide',
            'tiger',
            'tilt',
            'timber',
            'time',
            'tiny',
            'tip',
            'tired',
            'tissue',
            'title',
            'toast',
            'tobacco',
            'today',
            'toddler',
            'toe',
            'together',
            'toilet',
            'token',
            'tomato',
            'tomorrow',
            'tone',
            'tongue',
            'tonight',
            'tool',
            'tooth',
            'top',
            'topic',
            'topple',
            'torch',
            'tornado',
            'tortoise',
            'toss',
            'total',
            'tourist',
            'toward',
            'tower',
            'town',
            'toy',
            'track',
            'trade',
            'traffic',
            'tragic',
            'train',
            'transfer',
            'trap',
            'trash',
            'travel',
            'tray',
            'treat',
            'tree',
            'trend',
            'trial',
            'tribe',
            'trick',
            'trigger',
            'trim',
            'trip',
            'trophy',
            'trouble',
            'truck',
            'true',
            'truly',
            'trumpet',
            'trust',
            'truth',
            'try',
            'tube',
            'tuition',
            'tumble',
            'tuna',
            'tunnel',
            'turkey',
            'turn',
            'turtle',
            'twelve',
            'twenty',
            'twice',
            'twin',
            'twist',
            'two',
            'type',
            'typical',
            'ugly',
            'umbrella',
            'unable',
            'unaware',
            'uncle',
            'uncover',
            'under',
            'undo',
            'unfair',
            'unfold',
            'unhappy',
            'uniform',
            'unique',
            'unit',
            'universe',
            'unknown',
            'unlock',
            'until',
            'unusual',
            'unveil',
            'update',
            'upgrade',
            'uphold',
            'upon',
            'upper',
            'upset',
            'urban',
            'urge',
            'usage',
            'use',
            'used',
            'useful',
            'useless',
            'usual',
            'utility',
            'vacant',
            'vacuum',
            'vague',
            'valid',
            'valley',
            'valve',
            'van',
            'vanish',
            'vapor',
            'various',
            'vast',
            'vault',
            'vehicle',
            'velvet',
            'vendor',
            'venture',
            'venue',
            'verb',
            'verify',
            'version',
            'very',
            'vessel',
            'veteran',
            'viable',
            'vibrant',
            'vicious',
            'victory',
            'video',
            'view',
            'village',
            'vintage',
            'violin',
            'virtual',
            'virus',
            'visa',
            'visit',
            'visual',
            'vital',
            'vivid',
            'vocal',
            'voice',
            'void',
            'volcano',
            'volume',
            'vote',
            'voyage',
            'wage',
            'wagon',
            'wait',
            'walk',
            'wall',
            'walnut',
            'want',
            'warfare',
            'warm',
            'warrior',
            'wash',
            'wasp',
            'waste',
            'water',
            'wave',
            'way',
            'wealth',
            'weapon',
            'wear',
            'weasel',
            'weather',
            'web',
            'wedding',
            'weekend',
            'weird',
            'welcome',
            'west',
            'wet',
            'whale',
            'what',
            'wheat',
            'wheel',
            'when',
            'where',
            'whip',
            'whisper',
            'wide',
            'width',
            'wife',
            'wild',
            'will',
            'win',
            'window',
            'wine',
            'wing',
            'wink',
            'winner',
            'winter',
            'wire',
            'wisdom',
            'wise',
            'wish',
            'witness',
            'wolf',
            'woman',
            'wonder',
            'wood',
            'wool',
            'word',
            'work',
            'world',
            'worry',
            'worth',
            'wrap',
            'wreck',
            'wrestle',
            'wrist',
            'write',
            'wrong',
            'yard',
            'year',
            'yellow',
            'you',
            'young',
            'youth',
            'zebra',
            'zero',
            'zone',
            'zoo',
          ];
        },
        {},
      ],
      54: [
        function (require, module, exports) {
          module.exports = [
            'abaisser',
            'abandon',
            'abdiquer',
            'abeille',
            'abolir',
            'aborder',
            'aboutir',
            'aboyer',
            'abrasif',
            'abreuver',
            'abriter',
            'abroger',
            'abrupt',
            'absence',
            'absolu',
            'absurde',
            'abusif',
            'abyssal',
            'académie',
            'acajou',
            'acarien',
            'accabler',
            'accepter',
            'acclamer',
            'accolade',
            'accroche',
            'accuser',
            'acerbe',
            'achat',
            'acheter',
            'aciduler',
            'acier',
            'acompte',
            'acquérir',
            'acronyme',
            'acteur',
            'actif',
            'actuel',
            'adepte',
            'adéquat',
            'adhésif',
            'adjectif',
            'adjuger',
            'admettre',
            'admirer',
            'adopter',
            'adorer',
            'adoucir',
            'adresse',
            'adroit',
            'adulte',
            'adverbe',
            'aérer',
            'aéronef',
            'affaire',
            'affecter',
            'affiche',
            'affreux',
            'affubler',
            'agacer',
            'agencer',
            'agile',
            'agiter',
            'agrafer',
            'agréable',
            'agrume',
            'aider',
            'aiguille',
            'ailier',
            'aimable',
            'aisance',
            'ajouter',
            'ajuster',
            'alarmer',
            'alchimie',
            'alerte',
            'algèbre',
            'algue',
            'aliéner',
            'aliment',
            'alléger',
            'alliage',
            'allouer',
            'allumer',
            'alourdir',
            'alpaga',
            'altesse',
            'alvéole',
            'amateur',
            'ambigu',
            'ambre',
            'aménager',
            'amertume',
            'amidon',
            'amiral',
            'amorcer',
            'amour',
            'amovible',
            'amphibie',
            'ampleur',
            'amusant',
            'analyse',
            'anaphore',
            'anarchie',
            'anatomie',
            'ancien',
            'anéantir',
            'angle',
            'angoisse',
            'anguleux',
            'animal',
            'annexer',
            'annonce',
            'annuel',
            'anodin',
            'anomalie',
            'anonyme',
            'anormal',
            'antenne',
            'antidote',
            'anxieux',
            'apaiser',
            'apéritif',
            'aplanir',
            'apologie',
            'appareil',
            'appeler',
            'apporter',
            'appuyer',
            'aquarium',
            'aqueduc',
            'arbitre',
            'arbuste',
            'ardeur',
            'ardoise',
            'argent',
            'arlequin',
            'armature',
            'armement',
            'armoire',
            'armure',
            'arpenter',
            'arracher',
            'arriver',
            'arroser',
            'arsenic',
            'artériel',
            'article',
            'aspect',
            'asphalte',
            'aspirer',
            'assaut',
            'asservir',
            'assiette',
            'associer',
            'assurer',
            'asticot',
            'astre',
            'astuce',
            'atelier',
            'atome',
            'atrium',
            'atroce',
            'attaque',
            'attentif',
            'attirer',
            'attraper',
            'aubaine',
            'auberge',
            'audace',
            'audible',
            'augurer',
            'aurore',
            'automne',
            'autruche',
            'avaler',
            'avancer',
            'avarice',
            'avenir',
            'averse',
            'aveugle',
            'aviateur',
            'avide',
            'avion',
            'aviser',
            'avoine',
            'avouer',
            'avril',
            'axial',
            'axiome',
            'badge',
            'bafouer',
            'bagage',
            'baguette',
            'baignade',
            'balancer',
            'balcon',
            'baleine',
            'balisage',
            'bambin',
            'bancaire',
            'bandage',
            'banlieue',
            'bannière',
            'banquier',
            'barbier',
            'baril',
            'baron',
            'barque',
            'barrage',
            'bassin',
            'bastion',
            'bataille',
            'bateau',
            'batterie',
            'baudrier',
            'bavarder',
            'belette',
            'bélier',
            'belote',
            'bénéfice',
            'berceau',
            'berger',
            'berline',
            'bermuda',
            'besace',
            'besogne',
            'bétail',
            'beurre',
            'biberon',
            'bicycle',
            'bidule',
            'bijou',
            'bilan',
            'bilingue',
            'billard',
            'binaire',
            'biologie',
            'biopsie',
            'biotype',
            'biscuit',
            'bison',
            'bistouri',
            'bitume',
            'bizarre',
            'blafard',
            'blague',
            'blanchir',
            'blessant',
            'blinder',
            'blond',
            'bloquer',
            'blouson',
            'bobard',
            'bobine',
            'boire',
            'boiser',
            'bolide',
            'bonbon',
            'bondir',
            'bonheur',
            'bonifier',
            'bonus',
            'bordure',
            'borne',
            'botte',
            'boucle',
            'boueux',
            'bougie',
            'boulon',
            'bouquin',
            'bourse',
            'boussole',
            'boutique',
            'boxeur',
            'branche',
            'brasier',
            'brave',
            'brebis',
            'brèche',
            'breuvage',
            'bricoler',
            'brigade',
            'brillant',
            'brioche',
            'brique',
            'brochure',
            'broder',
            'bronzer',
            'brousse',
            'broyeur',
            'brume',
            'brusque',
            'brutal',
            'bruyant',
            'buffle',
            'buisson',
            'bulletin',
            'bureau',
            'burin',
            'bustier',
            'butiner',
            'butoir',
            'buvable',
            'buvette',
            'cabanon',
            'cabine',
            'cachette',
            'cadeau',
            'cadre',
            'caféine',
            'caillou',
            'caisson',
            'calculer',
            'calepin',
            'calibre',
            'calmer',
            'calomnie',
            'calvaire',
            'camarade',
            'caméra',
            'camion',
            'campagne',
            'canal',
            'caneton',
            'canon',
            'cantine',
            'canular',
            'capable',
            'caporal',
            'caprice',
            'capsule',
            'capter',
            'capuche',
            'carabine',
            'carbone',
            'caresser',
            'caribou',
            'carnage',
            'carotte',
            'carreau',
            'carton',
            'cascade',
            'casier',
            'casque',
            'cassure',
            'causer',
            'caution',
            'cavalier',
            'caverne',
            'caviar',
            'cédille',
            'ceinture',
            'céleste',
            'cellule',
            'cendrier',
            'censurer',
            'central',
            'cercle',
            'cérébral',
            'cerise',
            'cerner',
            'cerveau',
            'cesser',
            'chagrin',
            'chaise',
            'chaleur',
            'chambre',
            'chance',
            'chapitre',
            'charbon',
            'chasseur',
            'chaton',
            'chausson',
            'chavirer',
            'chemise',
            'chenille',
            'chéquier',
            'chercher',
            'cheval',
            'chien',
            'chiffre',
            'chignon',
            'chimère',
            'chiot',
            'chlorure',
            'chocolat',
            'choisir',
            'chose',
            'chouette',
            'chrome',
            'chute',
            'cigare',
            'cigogne',
            'cimenter',
            'cinéma',
            'cintrer',
            'circuler',
            'cirer',
            'cirque',
            'citerne',
            'citoyen',
            'citron',
            'civil',
            'clairon',
            'clameur',
            'claquer',
            'classe',
            'clavier',
            'client',
            'cligner',
            'climat',
            'clivage',
            'cloche',
            'clonage',
            'cloporte',
            'cobalt',
            'cobra',
            'cocasse',
            'cocotier',
            'coder',
            'codifier',
            'coffre',
            'cogner',
            'cohésion',
            'coiffer',
            'coincer',
            'colère',
            'colibri',
            'colline',
            'colmater',
            'colonel',
            'combat',
            'comédie',
            'commande',
            'compact',
            'concert',
            'conduire',
            'confier',
            'congeler',
            'connoter',
            'consonne',
            'contact',
            'convexe',
            'copain',
            'copie',
            'corail',
            'corbeau',
            'cordage',
            'corniche',
            'corpus',
            'correct',
            'cortège',
            'cosmique',
            'costume',
            'coton',
            'coude',
            'coupure',
            'courage',
            'couteau',
            'couvrir',
            'coyote',
            'crabe',
            'crainte',
            'cravate',
            'crayon',
            'créature',
            'créditer',
            'crémeux',
            'creuser',
            'crevette',
            'cribler',
            'crier',
            'cristal',
            'critère',
            'croire',
            'croquer',
            'crotale',
            'crucial',
            'cruel',
            'crypter',
            'cubique',
            'cueillir',
            'cuillère',
            'cuisine',
            'cuivre',
            'culminer',
            'cultiver',
            'cumuler',
            'cupide',
            'curatif',
            'curseur',
            'cyanure',
            'cycle',
            'cylindre',
            'cynique',
            'daigner',
            'damier',
            'danger',
            'danseur',
            'dauphin',
            'débattre',
            'débiter',
            'déborder',
            'débrider',
            'débutant',
            'décaler',
            'décembre',
            'déchirer',
            'décider',
            'déclarer',
            'décorer',
            'décrire',
            'décupler',
            'dédale',
            'déductif',
            'déesse',
            'défensif',
            'défiler',
            'défrayer',
            'dégager',
            'dégivrer',
            'déglutir',
            'dégrafer',
            'déjeuner',
            'délice',
            'déloger',
            'demander',
            'demeurer',
            'démolir',
            'dénicher',
            'dénouer',
            'dentelle',
            'dénuder',
            'départ',
            'dépenser',
            'déphaser',
            'déplacer',
            'déposer',
            'déranger',
            'dérober',
            'désastre',
            'descente',
            'désert',
            'désigner',
            'désobéir',
            'dessiner',
            'destrier',
            'détacher',
            'détester',
            'détourer',
            'détresse',
            'devancer',
            'devenir',
            'deviner',
            'devoir',
            'diable',
            'dialogue',
            'diamant',
            'dicter',
            'différer',
            'digérer',
            'digital',
            'digne',
            'diluer',
            'dimanche',
            'diminuer',
            'dioxyde',
            'directif',
            'diriger',
            'discuter',
            'disposer',
            'dissiper',
            'distance',
            'divertir',
            'diviser',
            'docile',
            'docteur',
            'dogme',
            'doigt',
            'domaine',
            'domicile',
            'dompter',
            'donateur',
            'donjon',
            'donner',
            'dopamine',
            'dortoir',
            'dorure',
            'dosage',
            'doseur',
            'dossier',
            'dotation',
            'douanier',
            'double',
            'douceur',
            'douter',
            'doyen',
            'dragon',
            'draper',
            'dresser',
            'dribbler',
            'droiture',
            'duperie',
            'duplexe',
            'durable',
            'durcir',
            'dynastie',
            'éblouir',
            'écarter',
            'écharpe',
            'échelle',
            'éclairer',
            'éclipse',
            'éclore',
            'écluse',
            'école',
            'économie',
            'écorce',
            'écouter',
            'écraser',
            'écrémer',
            'écrivain',
            'écrou',
            'écume',
            'écureuil',
            'édifier',
            'éduquer',
            'effacer',
            'effectif',
            'effigie',
            'effort',
            'effrayer',
            'effusion',
            'égaliser',
            'égarer',
            'éjecter',
            'élaborer',
            'élargir',
            'électron',
            'élégant',
            'éléphant',
            'élève',
            'éligible',
            'élitisme',
            'éloge',
            'élucider',
            'éluder',
            'emballer',
            'embellir',
            'embryon',
            'émeraude',
            'émission',
            'emmener',
            'émotion',
            'émouvoir',
            'empereur',
            'employer',
            'emporter',
            'emprise',
            'émulsion',
            'encadrer',
            'enchère',
            'enclave',
            'encoche',
            'endiguer',
            'endosser',
            'endroit',
            'enduire',
            'énergie',
            'enfance',
            'enfermer',
            'enfouir',
            'engager',
            'engin',
            'englober',
            'énigme',
            'enjamber',
            'enjeu',
            'enlever',
            'ennemi',
            'ennuyeux',
            'enrichir',
            'enrobage',
            'enseigne',
            'entasser',
            'entendre',
            'entier',
            'entourer',
            'entraver',
            'énumérer',
            'envahir',
            'enviable',
            'envoyer',
            'enzyme',
            'éolien',
            'épaissir',
            'épargne',
            'épatant',
            'épaule',
            'épicerie',
            'épidémie',
            'épier',
            'épilogue',
            'épine',
            'épisode',
            'épitaphe',
            'époque',
            'épreuve',
            'éprouver',
            'épuisant',
            'équerre',
            'équipe',
            'ériger',
            'érosion',
            'erreur',
            'éruption',
            'escalier',
            'espadon',
            'espèce',
            'espiègle',
            'espoir',
            'esprit',
            'esquiver',
            'essayer',
            'essence',
            'essieu',
            'essorer',
            'estime',
            'estomac',
            'estrade',
            'étagère',
            'étaler',
            'étanche',
            'étatique',
            'éteindre',
            'étendoir',
            'éternel',
            'éthanol',
            'éthique',
            'ethnie',
            'étirer',
            'étoffer',
            'étoile',
            'étonnant',
            'étourdir',
            'étrange',
            'étroit',
            'étude',
            'euphorie',
            'évaluer',
            'évasion',
            'éventail',
            'évidence',
            'éviter',
            'évolutif',
            'évoquer',
            'exact',
            'exagérer',
            'exaucer',
            'exceller',
            'excitant',
            'exclusif',
            'excuse',
            'exécuter',
            'exemple',
            'exercer',
            'exhaler',
            'exhorter',
            'exigence',
            'exiler',
            'exister',
            'exotique',
            'expédier',
            'explorer',
            'exposer',
            'exprimer',
            'exquis',
            'extensif',
            'extraire',
            'exulter',
            'fable',
            'fabuleux',
            'facette',
            'facile',
            'facture',
            'faiblir',
            'falaise',
            'fameux',
            'famille',
            'farceur',
            'farfelu',
            'farine',
            'farouche',
            'fasciner',
            'fatal',
            'fatigue',
            'faucon',
            'fautif',
            'faveur',
            'favori',
            'fébrile',
            'féconder',
            'fédérer',
            'félin',
            'femme',
            'fémur',
            'fendoir',
            'féodal',
            'fermer',
            'féroce',
            'ferveur',
            'festival',
            'feuille',
            'feutre',
            'février',
            'fiasco',
            'ficeler',
            'fictif',
            'fidèle',
            'figure',
            'filature',
            'filetage',
            'filière',
            'filleul',
            'filmer',
            'filou',
            'filtrer',
            'financer',
            'finir',
            'fiole',
            'firme',
            'fissure',
            'fixer',
            'flairer',
            'flamme',
            'flasque',
            'flatteur',
            'fléau',
            'flèche',
            'fleur',
            'flexion',
            'flocon',
            'flore',
            'fluctuer',
            'fluide',
            'fluvial',
            'folie',
            'fonderie',
            'fongible',
            'fontaine',
            'forcer',
            'forgeron',
            'formuler',
            'fortune',
            'fossile',
            'foudre',
            'fougère',
            'fouiller',
            'foulure',
            'fourmi',
            'fragile',
            'fraise',
            'franchir',
            'frapper',
            'frayeur',
            'frégate',
            'freiner',
            'frelon',
            'frémir',
            'frénésie',
            'frère',
            'friable',
            'friction',
            'frisson',
            'frivole',
            'froid',
            'fromage',
            'frontal',
            'frotter',
            'fruit',
            'fugitif',
            'fuite',
            'fureur',
            'furieux',
            'furtif',
            'fusion',
            'futur',
            'gagner',
            'galaxie',
            'galerie',
            'gambader',
            'garantir',
            'gardien',
            'garnir',
            'garrigue',
            'gazelle',
            'gazon',
            'géant',
            'gélatine',
            'gélule',
            'gendarme',
            'général',
            'génie',
            'genou',
            'gentil',
            'géologie',
            'géomètre',
            'géranium',
            'germe',
            'gestuel',
            'geyser',
            'gibier',
            'gicler',
            'girafe',
            'givre',
            'glace',
            'glaive',
            'glisser',
            'globe',
            'gloire',
            'glorieux',
            'golfeur',
            'gomme',
            'gonfler',
            'gorge',
            'gorille',
            'goudron',
            'gouffre',
            'goulot',
            'goupille',
            'gourmand',
            'goutte',
            'graduel',
            'graffiti',
            'graine',
            'grand',
            'grappin',
            'gratuit',
            'gravir',
            'grenat',
            'griffure',
            'griller',
            'grimper',
            'grogner',
            'gronder',
            'grotte',
            'groupe',
            'gruger',
            'grutier',
            'gruyère',
            'guépard',
            'guerrier',
            'guide',
            'guimauve',
            'guitare',
            'gustatif',
            'gymnaste',
            'gyrostat',
            'habitude',
            'hachoir',
            'halte',
            'hameau',
            'hangar',
            'hanneton',
            'haricot',
            'harmonie',
            'harpon',
            'hasard',
            'hélium',
            'hématome',
            'herbe',
            'hérisson',
            'hermine',
            'héron',
            'hésiter',
            'heureux',
            'hiberner',
            'hibou',
            'hilarant',
            'histoire',
            'hiver',
            'homard',
            'hommage',
            'homogène',
            'honneur',
            'honorer',
            'honteux',
            'horde',
            'horizon',
            'horloge',
            'hormone',
            'horrible',
            'houleux',
            'housse',
            'hublot',
            'huileux',
            'humain',
            'humble',
            'humide',
            'humour',
            'hurler',
            'hydromel',
            'hygiène',
            'hymne',
            'hypnose',
            'idylle',
            'ignorer',
            'iguane',
            'illicite',
            'illusion',
            'image',
            'imbiber',
            'imiter',
            'immense',
            'immobile',
            'immuable',
            'impact',
            'impérial',
            'implorer',
            'imposer',
            'imprimer',
            'imputer',
            'incarner',
            'incendie',
            'incident',
            'incliner',
            'incolore',
            'indexer',
            'indice',
            'inductif',
            'inédit',
            'ineptie',
            'inexact',
            'infini',
            'infliger',
            'informer',
            'infusion',
            'ingérer',
            'inhaler',
            'inhiber',
            'injecter',
            'injure',
            'innocent',
            'inoculer',
            'inonder',
            'inscrire',
            'insecte',
            'insigne',
            'insolite',
            'inspirer',
            'instinct',
            'insulter',
            'intact',
            'intense',
            'intime',
            'intrigue',
            'intuitif',
            'inutile',
            'invasion',
            'inventer',
            'inviter',
            'invoquer',
            'ironique',
            'irradier',
            'irréel',
            'irriter',
            'isoler',
            'ivoire',
            'ivresse',
            'jaguar',
            'jaillir',
            'jambe',
            'janvier',
            'jardin',
            'jauger',
            'jaune',
            'javelot',
            'jetable',
            'jeton',
            'jeudi',
            'jeunesse',
            'joindre',
            'joncher',
            'jongler',
            'joueur',
            'jouissif',
            'journal',
            'jovial',
            'joyau',
            'joyeux',
            'jubiler',
            'jugement',
            'junior',
            'jupon',
            'juriste',
            'justice',
            'juteux',
            'juvénile',
            'kayak',
            'kimono',
            'kiosque',
            'label',
            'labial',
            'labourer',
            'lacérer',
            'lactose',
            'lagune',
            'laine',
            'laisser',
            'laitier',
            'lambeau',
            'lamelle',
            'lampe',
            'lanceur',
            'langage',
            'lanterne',
            'lapin',
            'largeur',
            'larme',
            'laurier',
            'lavabo',
            'lavoir',
            'lecture',
            'légal',
            'léger',
            'légume',
            'lessive',
            'lettre',
            'levier',
            'lexique',
            'lézard',
            'liasse',
            'libérer',
            'libre',
            'licence',
            'licorne',
            'liège',
            'lièvre',
            'ligature',
            'ligoter',
            'ligue',
            'limer',
            'limite',
            'limonade',
            'limpide',
            'linéaire',
            'lingot',
            'lionceau',
            'liquide',
            'lisière',
            'lister',
            'lithium',
            'litige',
            'littoral',
            'livreur',
            'logique',
            'lointain',
            'loisir',
            'lombric',
            'loterie',
            'louer',
            'lourd',
            'loutre',
            'louve',
            'loyal',
            'lubie',
            'lucide',
            'lucratif',
            'lueur',
            'lugubre',
            'luisant',
            'lumière',
            'lunaire',
            'lundi',
            'luron',
            'lutter',
            'luxueux',
            'machine',
            'magasin',
            'magenta',
            'magique',
            'maigre',
            'maillon',
            'maintien',
            'mairie',
            'maison',
            'majorer',
            'malaxer',
            'maléfice',
            'malheur',
            'malice',
            'mallette',
            'mammouth',
            'mandater',
            'maniable',
            'manquant',
            'manteau',
            'manuel',
            'marathon',
            'marbre',
            'marchand',
            'mardi',
            'maritime',
            'marqueur',
            'marron',
            'marteler',
            'mascotte',
            'massif',
            'matériel',
            'matière',
            'matraque',
            'maudire',
            'maussade',
            'mauve',
            'maximal',
            'méchant',
            'méconnu',
            'médaille',
            'médecin',
            'méditer',
            'méduse',
            'meilleur',
            'mélange',
            'mélodie',
            'membre',
            'mémoire',
            'menacer',
            'mener',
            'menhir',
            'mensonge',
            'mentor',
            'mercredi',
            'mérite',
            'merle',
            'messager',
            'mesure',
            'métal',
            'météore',
            'méthode',
            'métier',
            'meuble',
            'miauler',
            'microbe',
            'miette',
            'mignon',
            'migrer',
            'milieu',
            'million',
            'mimique',
            'mince',
            'minéral',
            'minimal',
            'minorer',
            'minute',
            'miracle',
            'miroiter',
            'missile',
            'mixte',
            'mobile',
            'moderne',
            'moelleux',
            'mondial',
            'moniteur',
            'monnaie',
            'monotone',
            'monstre',
            'montagne',
            'monument',
            'moqueur',
            'morceau',
            'morsure',
            'mortier',
            'moteur',
            'motif',
            'mouche',
            'moufle',
            'moulin',
            'mousson',
            'mouton',
            'mouvant',
            'multiple',
            'munition',
            'muraille',
            'murène',
            'murmure',
            'muscle',
            'muséum',
            'musicien',
            'mutation',
            'muter',
            'mutuel',
            'myriade',
            'myrtille',
            'mystère',
            'mythique',
            'nageur',
            'nappe',
            'narquois',
            'narrer',
            'natation',
            'nation',
            'nature',
            'naufrage',
            'nautique',
            'navire',
            'nébuleux',
            'nectar',
            'néfaste',
            'négation',
            'négliger',
            'négocier',
            'neige',
            'nerveux',
            'nettoyer',
            'neurone',
            'neutron',
            'neveu',
            'niche',
            'nickel',
            'nitrate',
            'niveau',
            'noble',
            'nocif',
            'nocturne',
            'noirceur',
            'noisette',
            'nomade',
            'nombreux',
            'nommer',
            'normatif',
            'notable',
            'notifier',
            'notoire',
            'nourrir',
            'nouveau',
            'novateur',
            'novembre',
            'novice',
            'nuage',
            'nuancer',
            'nuire',
            'nuisible',
            'numéro',
            'nuptial',
            'nuque',
            'nutritif',
            'obéir',
            'objectif',
            'obliger',
            'obscur',
            'observer',
            'obstacle',
            'obtenir',
            'obturer',
            'occasion',
            'occuper',
            'océan',
            'octobre',
            'octroyer',
            'octupler',
            'oculaire',
            'odeur',
            'odorant',
            'offenser',
            'officier',
            'offrir',
            'ogive',
            'oiseau',
            'oisillon',
            'olfactif',
            'olivier',
            'ombrage',
            'omettre',
            'onctueux',
            'onduler',
            'onéreux',
            'onirique',
            'opale',
            'opaque',
            'opérer',
            'opinion',
            'opportun',
            'opprimer',
            'opter',
            'optique',
            'orageux',
            'orange',
            'orbite',
            'ordonner',
            'oreille',
            'organe',
            'orgueil',
            'orifice',
            'ornement',
            'orque',
            'ortie',
            'osciller',
            'osmose',
            'ossature',
            'otarie',
            'ouragan',
            'ourson',
            'outil',
            'outrager',
            'ouvrage',
            'ovation',
            'oxyde',
            'oxygène',
            'ozone',
            'paisible',
            'palace',
            'palmarès',
            'palourde',
            'palper',
            'panache',
            'panda',
            'pangolin',
            'paniquer',
            'panneau',
            'panorama',
            'pantalon',
            'papaye',
            'papier',
            'papoter',
            'papyrus',
            'paradoxe',
            'parcelle',
            'paresse',
            'parfumer',
            'parler',
            'parole',
            'parrain',
            'parsemer',
            'partager',
            'parure',
            'parvenir',
            'passion',
            'pastèque',
            'paternel',
            'patience',
            'patron',
            'pavillon',
            'pavoiser',
            'payer',
            'paysage',
            'peigne',
            'peintre',
            'pelage',
            'pélican',
            'pelle',
            'pelouse',
            'peluche',
            'pendule',
            'pénétrer',
            'pénible',
            'pensif',
            'pénurie',
            'pépite',
            'péplum',
            'perdrix',
            'perforer',
            'période',
            'permuter',
            'perplexe',
            'persil',
            'perte',
            'peser',
            'pétale',
            'petit',
            'pétrir',
            'peuple',
            'pharaon',
            'phobie',
            'phoque',
            'photon',
            'phrase',
            'physique',
            'piano',
            'pictural',
            'pièce',
            'pierre',
            'pieuvre',
            'pilote',
            'pinceau',
            'pipette',
            'piquer',
            'pirogue',
            'piscine',
            'piston',
            'pivoter',
            'pixel',
            'pizza',
            'placard',
            'plafond',
            'plaisir',
            'planer',
            'plaque',
            'plastron',
            'plateau',
            'pleurer',
            'plexus',
            'pliage',
            'plomb',
            'plonger',
            'pluie',
            'plumage',
            'pochette',
            'poésie',
            'poète',
            'pointe',
            'poirier',
            'poisson',
            'poivre',
            'polaire',
            'policier',
            'pollen',
            'polygone',
            'pommade',
            'pompier',
            'ponctuel',
            'pondérer',
            'poney',
            'portique',
            'position',
            'posséder',
            'posture',
            'potager',
            'poteau',
            'potion',
            'pouce',
            'poulain',
            'poumon',
            'pourpre',
            'poussin',
            'pouvoir',
            'prairie',
            'pratique',
            'précieux',
            'prédire',
            'préfixe',
            'prélude',
            'prénom',
            'présence',
            'prétexte',
            'prévoir',
            'primitif',
            'prince',
            'prison',
            'priver',
            'problème',
            'procéder',
            'prodige',
            'profond',
            'progrès',
            'proie',
            'projeter',
            'prologue',
            'promener',
            'propre',
            'prospère',
            'protéger',
            'prouesse',
            'proverbe',
            'prudence',
            'pruneau',
            'psychose',
            'public',
            'puceron',
            'puiser',
            'pulpe',
            'pulsar',
            'punaise',
            'punitif',
            'pupitre',
            'purifier',
            'puzzle',
            'pyramide',
            'quasar',
            'querelle',
            'question',
            'quiétude',
            'quitter',
            'quotient',
            'racine',
            'raconter',
            'radieux',
            'ragondin',
            'raideur',
            'raisin',
            'ralentir',
            'rallonge',
            'ramasser',
            'rapide',
            'rasage',
            'ratisser',
            'ravager',
            'ravin',
            'rayonner',
            'réactif',
            'réagir',
            'réaliser',
            'réanimer',
            'recevoir',
            'réciter',
            'réclamer',
            'récolter',
            'recruter',
            'reculer',
            'recycler',
            'rédiger',
            'redouter',
            'refaire',
            'réflexe',
            'réformer',
            'refrain',
            'refuge',
            'régalien',
            'région',
            'réglage',
            'régulier',
            'réitérer',
            'rejeter',
            'rejouer',
            'relatif',
            'relever',
            'relief',
            'remarque',
            'remède',
            'remise',
            'remonter',
            'remplir',
            'remuer',
            'renard',
            'renfort',
            'renifler',
            'renoncer',
            'rentrer',
            'renvoi',
            'replier',
            'reporter',
            'reprise',
            'reptile',
            'requin',
            'réserve',
            'résineux',
            'résoudre',
            'respect',
            'rester',
            'résultat',
            'rétablir',
            'retenir',
            'réticule',
            'retomber',
            'retracer',
            'réunion',
            'réussir',
            'revanche',
            'revivre',
            'révolte',
            'révulsif',
            'richesse',
            'rideau',
            'rieur',
            'rigide',
            'rigoler',
            'rincer',
            'riposter',
            'risible',
            'risque',
            'rituel',
            'rival',
            'rivière',
            'rocheux',
            'romance',
            'rompre',
            'ronce',
            'rondin',
            'roseau',
            'rosier',
            'rotatif',
            'rotor',
            'rotule',
            'rouge',
            'rouille',
            'rouleau',
            'routine',
            'royaume',
            'ruban',
            'rubis',
            'ruche',
            'ruelle',
            'rugueux',
            'ruiner',
            'ruisseau',
            'ruser',
            'rustique',
            'rythme',
            'sabler',
            'saboter',
            'sabre',
            'sacoche',
            'safari',
            'sagesse',
            'saisir',
            'salade',
            'salive',
            'salon',
            'saluer',
            'samedi',
            'sanction',
            'sanglier',
            'sarcasme',
            'sardine',
            'saturer',
            'saugrenu',
            'saumon',
            'sauter',
            'sauvage',
            'savant',
            'savonner',
            'scalpel',
            'scandale',
            'scélérat',
            'scénario',
            'sceptre',
            'schéma',
            'science',
            'scinder',
            'score',
            'scrutin',
            'sculpter',
            'séance',
            'sécable',
            'sécher',
            'secouer',
            'sécréter',
            'sédatif',
            'séduire',
            'seigneur',
            'séjour',
            'sélectif',
            'semaine',
            'sembler',
            'semence',
            'séminal',
            'sénateur',
            'sensible',
            'sentence',
            'séparer',
            'séquence',
            'serein',
            'sergent',
            'sérieux',
            'serrure',
            'sérum',
            'service',
            'sésame',
            'sévir',
            'sevrage',
            'sextuple',
            'sidéral',
            'siècle',
            'siéger',
            'siffler',
            'sigle',
            'signal',
            'silence',
            'silicium',
            'simple',
            'sincère',
            'sinistre',
            'siphon',
            'sirop',
            'sismique',
            'situer',
            'skier',
            'social',
            'socle',
            'sodium',
            'soigneux',
            'soldat',
            'soleil',
            'solitude',
            'soluble',
            'sombre',
            'sommeil',
            'somnoler',
            'sonde',
            'songeur',
            'sonnette',
            'sonore',
            'sorcier',
            'sortir',
            'sosie',
            'sottise',
            'soucieux',
            'soudure',
            'souffle',
            'soulever',
            'soupape',
            'source',
            'soutirer',
            'souvenir',
            'spacieux',
            'spatial',
            'spécial',
            'sphère',
            'spiral',
            'stable',
            'station',
            'sternum',
            'stimulus',
            'stipuler',
            'strict',
            'studieux',
            'stupeur',
            'styliste',
            'sublime',
            'substrat',
            'subtil',
            'subvenir',
            'succès',
            'sucre',
            'suffixe',
            'suggérer',
            'suiveur',
            'sulfate',
            'superbe',
            'supplier',
            'surface',
            'suricate',
            'surmener',
            'surprise',
            'sursaut',
            'survie',
            'suspect',
            'syllabe',
            'symbole',
            'symétrie',
            'synapse',
            'syntaxe',
            'système',
            'tabac',
            'tablier',
            'tactile',
            'tailler',
            'talent',
            'talisman',
            'talonner',
            'tambour',
            'tamiser',
            'tangible',
            'tapis',
            'taquiner',
            'tarder',
            'tarif',
            'tartine',
            'tasse',
            'tatami',
            'tatouage',
            'taupe',
            'taureau',
            'taxer',
            'témoin',
            'temporel',
            'tenaille',
            'tendre',
            'teneur',
            'tenir',
            'tension',
            'terminer',
            'terne',
            'terrible',
            'tétine',
            'texte',
            'thème',
            'théorie',
            'thérapie',
            'thorax',
            'tibia',
            'tiède',
            'timide',
            'tirelire',
            'tiroir',
            'tissu',
            'titane',
            'titre',
            'tituber',
            'toboggan',
            'tolérant',
            'tomate',
            'tonique',
            'tonneau',
            'toponyme',
            'torche',
            'tordre',
            'tornade',
            'torpille',
            'torrent',
            'torse',
            'tortue',
            'totem',
            'toucher',
            'tournage',
            'tousser',
            'toxine',
            'traction',
            'trafic',
            'tragique',
            'trahir',
            'train',
            'trancher',
            'travail',
            'trèfle',
            'tremper',
            'trésor',
            'treuil',
            'triage',
            'tribunal',
            'tricoter',
            'trilogie',
            'triomphe',
            'tripler',
            'triturer',
            'trivial',
            'trombone',
            'tronc',
            'tropical',
            'troupeau',
            'tuile',
            'tulipe',
            'tumulte',
            'tunnel',
            'turbine',
            'tuteur',
            'tutoyer',
            'tuyau',
            'tympan',
            'typhon',
            'typique',
            'tyran',
            'ubuesque',
            'ultime',
            'ultrason',
            'unanime',
            'unifier',
            'union',
            'unique',
            'unitaire',
            'univers',
            'uranium',
            'urbain',
            'urticant',
            'usage',
            'usine',
            'usuel',
            'usure',
            'utile',
            'utopie',
            'vacarme',
            'vaccin',
            'vagabond',
            'vague',
            'vaillant',
            'vaincre',
            'vaisseau',
            'valable',
            'valise',
            'vallon',
            'valve',
            'vampire',
            'vanille',
            'vapeur',
            'varier',
            'vaseux',
            'vassal',
            'vaste',
            'vecteur',
            'vedette',
            'végétal',
            'véhicule',
            'veinard',
            'véloce',
            'vendredi',
            'vénérer',
            'venger',
            'venimeux',
            'ventouse',
            'verdure',
            'vérin',
            'vernir',
            'verrou',
            'verser',
            'vertu',
            'veston',
            'vétéran',
            'vétuste',
            'vexant',
            'vexer',
            'viaduc',
            'viande',
            'victoire',
            'vidange',
            'vidéo',
            'vignette',
            'vigueur',
            'vilain',
            'village',
            'vinaigre',
            'violon',
            'vipère',
            'virement',
            'virtuose',
            'virus',
            'visage',
            'viseur',
            'vision',
            'visqueux',
            'visuel',
            'vital',
            'vitesse',
            'viticole',
            'vitrine',
            'vivace',
            'vivipare',
            'vocation',
            'voguer',
            'voile',
            'voisin',
            'voiture',
            'volaille',
            'volcan',
            'voltiger',
            'volume',
            'vorace',
            'vortex',
            'voter',
            'vouloir',
            'voyage',
            'voyelle',
            'wagon',
            'xénon',
            'yacht',
            'zèbre',
            'zénith',
            'zeste',
            'zoologie',
          ];
        },
        {},
      ],
      55: [
        function (require, module, exports) {
          module.exports = [
            'abaco',
            'abbaglio',
            'abbinato',
            'abete',
            'abisso',
            'abolire',
            'abrasivo',
            'abrogato',
            'accadere',
            'accenno',
            'accusato',
            'acetone',
            'achille',
            'acido',
            'acqua',
            'acre',
            'acrilico',
            'acrobata',
            'acuto',
            'adagio',
            'addebito',
            'addome',
            'adeguato',
            'aderire',
            'adipe',
            'adottare',
            'adulare',
            'affabile',
            'affetto',
            'affisso',
            'affranto',
            'aforisma',
            'afoso',
            'africano',
            'agave',
            'agente',
            'agevole',
            'aggancio',
            'agire',
            'agitare',
            'agonismo',
            'agricolo',
            'agrumeto',
            'aguzzo',
            'alabarda',
            'alato',
            'albatro',
            'alberato',
            'albo',
            'albume',
            'alce',
            'alcolico',
            'alettone',
            'alfa',
            'algebra',
            'aliante',
            'alibi',
            'alimento',
            'allagato',
            'allegro',
            'allievo',
            'allodola',
            'allusivo',
            'almeno',
            'alogeno',
            'alpaca',
            'alpestre',
            'altalena',
            'alterno',
            'alticcio',
            'altrove',
            'alunno',
            'alveolo',
            'alzare',
            'amalgama',
            'amanita',
            'amarena',
            'ambito',
            'ambrato',
            'ameba',
            'america',
            'ametista',
            'amico',
            'ammasso',
            'ammenda',
            'ammirare',
            'ammonito',
            'amore',
            'ampio',
            'ampliare',
            'amuleto',
            'anacardo',
            'anagrafe',
            'analista',
            'anarchia',
            'anatra',
            'anca',
            'ancella',
            'ancora',
            'andare',
            'andrea',
            'anello',
            'angelo',
            'angolare',
            'angusto',
            'anima',
            'annegare',
            'annidato',
            'anno',
            'annuncio',
            'anonimo',
            'anticipo',
            'anzi',
            'apatico',
            'apertura',
            'apode',
            'apparire',
            'appetito',
            'appoggio',
            'approdo',
            'appunto',
            'aprile',
            'arabica',
            'arachide',
            'aragosta',
            'araldica',
            'arancio',
            'aratura',
            'arazzo',
            'arbitro',
            'archivio',
            'ardito',
            'arenile',
            'argento',
            'argine',
            'arguto',
            'aria',
            'armonia',
            'arnese',
            'arredato',
            'arringa',
            'arrosto',
            'arsenico',
            'arso',
            'artefice',
            'arzillo',
            'asciutto',
            'ascolto',
            'asepsi',
            'asettico',
            'asfalto',
            'asino',
            'asola',
            'aspirato',
            'aspro',
            'assaggio',
            'asse',
            'assoluto',
            'assurdo',
            'asta',
            'astenuto',
            'astice',
            'astratto',
            'atavico',
            'ateismo',
            'atomico',
            'atono',
            'attesa',
            'attivare',
            'attorno',
            'attrito',
            'attuale',
            'ausilio',
            'austria',
            'autista',
            'autonomo',
            'autunno',
            'avanzato',
            'avere',
            'avvenire',
            'avviso',
            'avvolgere',
            'azione',
            'azoto',
            'azzimo',
            'azzurro',
            'babele',
            'baccano',
            'bacino',
            'baco',
            'badessa',
            'badilata',
            'bagnato',
            'baita',
            'balcone',
            'baldo',
            'balena',
            'ballata',
            'balzano',
            'bambino',
            'bandire',
            'baraonda',
            'barbaro',
            'barca',
            'baritono',
            'barlume',
            'barocco',
            'basilico',
            'basso',
            'batosta',
            'battuto',
            'baule',
            'bava',
            'bavosa',
            'becco',
            'beffa',
            'belgio',
            'belva',
            'benda',
            'benevole',
            'benigno',
            'benzina',
            'bere',
            'berlina',
            'beta',
            'bibita',
            'bici',
            'bidone',
            'bifido',
            'biga',
            'bilancia',
            'bimbo',
            'binocolo',
            'biologo',
            'bipede',
            'bipolare',
            'birbante',
            'birra',
            'biscotto',
            'bisesto',
            'bisnonno',
            'bisonte',
            'bisturi',
            'bizzarro',
            'blando',
            'blatta',
            'bollito',
            'bonifico',
            'bordo',
            'bosco',
            'botanico',
            'bottino',
            'bozzolo',
            'braccio',
            'bradipo',
            'brama',
            'branca',
            'bravura',
            'bretella',
            'brevetto',
            'brezza',
            'briglia',
            'brillante',
            'brindare',
            'broccolo',
            'brodo',
            'bronzina',
            'brullo',
            'bruno',
            'bubbone',
            'buca',
            'budino',
            'buffone',
            'buio',
            'bulbo',
            'buono',
            'burlone',
            'burrasca',
            'bussola',
            'busta',
            'cadetto',
            'caduco',
            'calamaro',
            'calcolo',
            'calesse',
            'calibro',
            'calmo',
            'caloria',
            'cambusa',
            'camerata',
            'camicia',
            'cammino',
            'camola',
            'campale',
            'canapa',
            'candela',
            'cane',
            'canino',
            'canotto',
            'cantina',
            'capace',
            'capello',
            'capitolo',
            'capogiro',
            'cappero',
            'capra',
            'capsula',
            'carapace',
            'carcassa',
            'cardo',
            'carisma',
            'carovana',
            'carretto',
            'cartolina',
            'casaccio',
            'cascata',
            'caserma',
            'caso',
            'cassone',
            'castello',
            'casuale',
            'catasta',
            'catena',
            'catrame',
            'cauto',
            'cavillo',
            'cedibile',
            'cedrata',
            'cefalo',
            'celebre',
            'cellulare',
            'cena',
            'cenone',
            'centesimo',
            'ceramica',
            'cercare',
            'certo',
            'cerume',
            'cervello',
            'cesoia',
            'cespo',
            'ceto',
            'chela',
            'chiaro',
            'chicca',
            'chiedere',
            'chimera',
            'china',
            'chirurgo',
            'chitarra',
            'ciao',
            'ciclismo',
            'cifrare',
            'cigno',
            'cilindro',
            'ciottolo',
            'circa',
            'cirrosi',
            'citrico',
            'cittadino',
            'ciuffo',
            'civetta',
            'civile',
            'classico',
            'clinica',
            'cloro',
            'cocco',
            'codardo',
            'codice',
            'coerente',
            'cognome',
            'collare',
            'colmato',
            'colore',
            'colposo',
            'coltivato',
            'colza',
            'coma',
            'cometa',
            'commando',
            'comodo',
            'computer',
            'comune',
            'conciso',
            'condurre',
            'conferma',
            'congelare',
            'coniuge',
            'connesso',
            'conoscere',
            'consumo',
            'continuo',
            'convegno',
            'coperto',
            'copione',
            'coppia',
            'copricapo',
            'corazza',
            'cordata',
            'coricato',
            'cornice',
            'corolla',
            'corpo',
            'corredo',
            'corsia',
            'cortese',
            'cosmico',
            'costante',
            'cottura',
            'covato',
            'cratere',
            'cravatta',
            'creato',
            'credere',
            'cremoso',
            'crescita',
            'creta',
            'criceto',
            'crinale',
            'crisi',
            'critico',
            'croce',
            'cronaca',
            'crostata',
            'cruciale',
            'crusca',
            'cucire',
            'cuculo',
            'cugino',
            'cullato',
            'cupola',
            'curatore',
            'cursore',
            'curvo',
            'cuscino',
            'custode',
            'dado',
            'daino',
            'dalmata',
            'damerino',
            'daniela',
            'dannoso',
            'danzare',
            'datato',
            'davanti',
            'davvero',
            'debutto',
            'decennio',
            'deciso',
            'declino',
            'decollo',
            'decreto',
            'dedicato',
            'definito',
            'deforme',
            'degno',
            'delegare',
            'delfino',
            'delirio',
            'delta',
            'demenza',
            'denotato',
            'dentro',
            'deposito',
            'derapata',
            'derivare',
            'deroga',
            'descritto',
            'deserto',
            'desiderio',
            'desumere',
            'detersivo',
            'devoto',
            'diametro',
            'dicembre',
            'diedro',
            'difeso',
            'diffuso',
            'digerire',
            'digitale',
            'diluvio',
            'dinamico',
            'dinnanzi',
            'dipinto',
            'diploma',
            'dipolo',
            'diradare',
            'dire',
            'dirotto',
            'dirupo',
            'disagio',
            'discreto',
            'disfare',
            'disgelo',
            'disposto',
            'distanza',
            'disumano',
            'dito',
            'divano',
            'divelto',
            'dividere',
            'divorato',
            'doblone',
            'docente',
            'doganale',
            'dogma',
            'dolce',
            'domato',
            'domenica',
            'dominare',
            'dondolo',
            'dono',
            'dormire',
            'dote',
            'dottore',
            'dovuto',
            'dozzina',
            'drago',
            'druido',
            'dubbio',
            'dubitare',
            'ducale',
            'duna',
            'duomo',
            'duplice',
            'duraturo',
            'ebano',
            'eccesso',
            'ecco',
            'eclissi',
            'economia',
            'edera',
            'edicola',
            'edile',
            'editoria',
            'educare',
            'egemonia',
            'egli',
            'egoismo',
            'egregio',
            'elaborato',
            'elargire',
            'elegante',
            'elencato',
            'eletto',
            'elevare',
            'elfico',
            'elica',
            'elmo',
            'elsa',
            'eluso',
            'emanato',
            'emblema',
            'emesso',
            'emiro',
            'emotivo',
            'emozione',
            'empirico',
            'emulo',
            'endemico',
            'enduro',
            'energia',
            'enfasi',
            'enoteca',
            'entrare',
            'enzima',
            'epatite',
            'epilogo',
            'episodio',
            'epocale',
            'eppure',
            'equatore',
            'erario',
            'erba',
            'erboso',
            'erede',
            'eremita',
            'erigere',
            'ermetico',
            'eroe',
            'erosivo',
            'errante',
            'esagono',
            'esame',
            'esanime',
            'esaudire',
            'esca',
            'esempio',
            'esercito',
            'esibito',
            'esigente',
            'esistere',
            'esito',
            'esofago',
            'esortato',
            'esoso',
            'espanso',
            'espresso',
            'essenza',
            'esso',
            'esteso',
            'estimare',
            'estonia',
            'estroso',
            'esultare',
            'etilico',
            'etnico',
            'etrusco',
            'etto',
            'euclideo',
            'europa',
            'evaso',
            'evidenza',
            'evitato',
            'evoluto',
            'evviva',
            'fabbrica',
            'faccenda',
            'fachiro',
            'falco',
            'famiglia',
            'fanale',
            'fanfara',
            'fango',
            'fantasma',
            'fare',
            'farfalla',
            'farinoso',
            'farmaco',
            'fascia',
            'fastoso',
            'fasullo',
            'faticare',
            'fato',
            'favoloso',
            'febbre',
            'fecola',
            'fede',
            'fegato',
            'felpa',
            'feltro',
            'femmina',
            'fendere',
            'fenomeno',
            'fermento',
            'ferro',
            'fertile',
            'fessura',
            'festivo',
            'fetta',
            'feudo',
            'fiaba',
            'fiducia',
            'fifa',
            'figurato',
            'filo',
            'finanza',
            'finestra',
            'finire',
            'fiore',
            'fiscale',
            'fisico',
            'fiume',
            'flacone',
            'flamenco',
            'flebo',
            'flemma',
            'florido',
            'fluente',
            'fluoro',
            'fobico',
            'focaccia',
            'focoso',
            'foderato',
            'foglio',
            'folata',
            'folclore',
            'folgore',
            'fondente',
            'fonetico',
            'fonia',
            'fontana',
            'forbito',
            'forchetta',
            'foresta',
            'formica',
            'fornaio',
            'foro',
            'fortezza',
            'forzare',
            'fosfato',
            'fosso',
            'fracasso',
            'frana',
            'frassino',
            'fratello',
            'freccetta',
            'frenata',
            'fresco',
            'frigo',
            'frollino',
            'fronde',
            'frugale',
            'frutta',
            'fucilata',
            'fucsia',
            'fuggente',
            'fulmine',
            'fulvo',
            'fumante',
            'fumetto',
            'fumoso',
            'fune',
            'funzione',
            'fuoco',
            'furbo',
            'furgone',
            'furore',
            'fuso',
            'futile',
            'gabbiano',
            'gaffe',
            'galateo',
            'gallina',
            'galoppo',
            'gambero',
            'gamma',
            'garanzia',
            'garbo',
            'garofano',
            'garzone',
            'gasdotto',
            'gasolio',
            'gastrico',
            'gatto',
            'gaudio',
            'gazebo',
            'gazzella',
            'geco',
            'gelatina',
            'gelso',
            'gemello',
            'gemmato',
            'gene',
            'genitore',
            'gennaio',
            'genotipo',
            'gergo',
            'ghepardo',
            'ghiaccio',
            'ghisa',
            'giallo',
            'gilda',
            'ginepro',
            'giocare',
            'gioiello',
            'giorno',
            'giove',
            'girato',
            'girone',
            'gittata',
            'giudizio',
            'giurato',
            'giusto',
            'globulo',
            'glutine',
            'gnomo',
            'gobba',
            'golf',
            'gomito',
            'gommone',
            'gonfio',
            'gonna',
            'governo',
            'gracile',
            'grado',
            'grafico',
            'grammo',
            'grande',
            'grattare',
            'gravoso',
            'grazia',
            'greca',
            'gregge',
            'grifone',
            'grigio',
            'grinza',
            'grotta',
            'gruppo',
            'guadagno',
            'guaio',
            'guanto',
            'guardare',
            'gufo',
            'guidare',
            'ibernato',
            'icona',
            'identico',
            'idillio',
            'idolo',
            'idra',
            'idrico',
            'idrogeno',
            'igiene',
            'ignaro',
            'ignorato',
            'ilare',
            'illeso',
            'illogico',
            'illudere',
            'imballo',
            'imbevuto',
            'imbocco',
            'imbuto',
            'immane',
            'immerso',
            'immolato',
            'impacco',
            'impeto',
            'impiego',
            'importo',
            'impronta',
            'inalare',
            'inarcare',
            'inattivo',
            'incanto',
            'incendio',
            'inchino',
            'incisivo',
            'incluso',
            'incontro',
            'incrocio',
            'incubo',
            'indagine',
            'india',
            'indole',
            'inedito',
            'infatti',
            'infilare',
            'inflitto',
            'ingaggio',
            'ingegno',
            'inglese',
            'ingordo',
            'ingrosso',
            'innesco',
            'inodore',
            'inoltrare',
            'inondato',
            'insano',
            'insetto',
            'insieme',
            'insonnia',
            'insulina',
            'intasato',
            'intero',
            'intonaco',
            'intuito',
            'inumidire',
            'invalido',
            'invece',
            'invito',
            'iperbole',
            'ipnotico',
            'ipotesi',
            'ippica',
            'iride',
            'irlanda',
            'ironico',
            'irrigato',
            'irrorare',
            'isolato',
            'isotopo',
            'isterico',
            'istituto',
            'istrice',
            'italia',
            'iterare',
            'labbro',
            'labirinto',
            'lacca',
            'lacerato',
            'lacrima',
            'lacuna',
            'laddove',
            'lago',
            'lampo',
            'lancetta',
            'lanterna',
            'lardoso',
            'larga',
            'laringe',
            'lastra',
            'latenza',
            'latino',
            'lattuga',
            'lavagna',
            'lavoro',
            'legale',
            'leggero',
            'lembo',
            'lentezza',
            'lenza',
            'leone',
            'lepre',
            'lesivo',
            'lessato',
            'lesto',
            'letterale',
            'leva',
            'levigato',
            'libero',
            'lido',
            'lievito',
            'lilla',
            'limatura',
            'limitare',
            'limpido',
            'lineare',
            'lingua',
            'liquido',
            'lira',
            'lirica',
            'lisca',
            'lite',
            'litigio',
            'livrea',
            'locanda',
            'lode',
            'logica',
            'lombare',
            'londra',
            'longevo',
            'loquace',
            'lorenzo',
            'loto',
            'lotteria',
            'luce',
            'lucidato',
            'lumaca',
            'luminoso',
            'lungo',
            'lupo',
            'luppolo',
            'lusinga',
            'lusso',
            'lutto',
            'macabro',
            'macchina',
            'macero',
            'macinato',
            'madama',
            'magico',
            'maglia',
            'magnete',
            'magro',
            'maiolica',
            'malafede',
            'malgrado',
            'malinteso',
            'malsano',
            'malto',
            'malumore',
            'mana',
            'mancia',
            'mandorla',
            'mangiare',
            'manifesto',
            'mannaro',
            'manovra',
            'mansarda',
            'mantide',
            'manubrio',
            'mappa',
            'maratona',
            'marcire',
            'maretta',
            'marmo',
            'marsupio',
            'maschera',
            'massaia',
            'mastino',
            'materasso',
            'matricola',
            'mattone',
            'maturo',
            'mazurca',
            'meandro',
            'meccanico',
            'mecenate',
            'medesimo',
            'meditare',
            'mega',
            'melassa',
            'melis',
            'melodia',
            'meninge',
            'meno',
            'mensola',
            'mercurio',
            'merenda',
            'merlo',
            'meschino',
            'mese',
            'messere',
            'mestolo',
            'metallo',
            'metodo',
            'mettere',
            'miagolare',
            'mica',
            'micelio',
            'michele',
            'microbo',
            'midollo',
            'miele',
            'migliore',
            'milano',
            'milite',
            'mimosa',
            'minerale',
            'mini',
            'minore',
            'mirino',
            'mirtillo',
            'miscela',
            'missiva',
            'misto',
            'misurare',
            'mitezza',
            'mitigare',
            'mitra',
            'mittente',
            'mnemonico',
            'modello',
            'modifica',
            'modulo',
            'mogano',
            'mogio',
            'mole',
            'molosso',
            'monastero',
            'monco',
            'mondina',
            'monetario',
            'monile',
            'monotono',
            'monsone',
            'montato',
            'monviso',
            'mora',
            'mordere',
            'morsicato',
            'mostro',
            'motivato',
            'motosega',
            'motto',
            'movenza',
            'movimento',
            'mozzo',
            'mucca',
            'mucosa',
            'muffa',
            'mughetto',
            'mugnaio',
            'mulatto',
            'mulinello',
            'multiplo',
            'mummia',
            'munto',
            'muovere',
            'murale',
            'musa',
            'muscolo',
            'musica',
            'mutevole',
            'muto',
            'nababbo',
            'nafta',
            'nanometro',
            'narciso',
            'narice',
            'narrato',
            'nascere',
            'nastrare',
            'naturale',
            'nautica',
            'naviglio',
            'nebulosa',
            'necrosi',
            'negativo',
            'negozio',
            'nemmeno',
            'neofita',
            'neretto',
            'nervo',
            'nessuno',
            'nettuno',
            'neutrale',
            'neve',
            'nevrotico',
            'nicchia',
            'ninfa',
            'nitido',
            'nobile',
            'nocivo',
            'nodo',
            'nome',
            'nomina',
            'nordico',
            'normale',
            'norvegese',
            'nostrano',
            'notare',
            'notizia',
            'notturno',
            'novella',
            'nucleo',
            'nulla',
            'numero',
            'nuovo',
            'nutrire',
            'nuvola',
            'nuziale',
            'oasi',
            'obbedire',
            'obbligo',
            'obelisco',
            'oblio',
            'obolo',
            'obsoleto',
            'occasione',
            'occhio',
            'occidente',
            'occorrere',
            'occultare',
            'ocra',
            'oculato',
            'odierno',
            'odorare',
            'offerta',
            'offrire',
            'offuscato',
            'oggetto',
            'oggi',
            'ognuno',
            'olandese',
            'olfatto',
            'oliato',
            'oliva',
            'ologramma',
            'oltre',
            'omaggio',
            'ombelico',
            'ombra',
            'omega',
            'omissione',
            'ondoso',
            'onere',
            'onice',
            'onnivoro',
            'onorevole',
            'onta',
            'operato',
            'opinione',
            'opposto',
            'oracolo',
            'orafo',
            'ordine',
            'orecchino',
            'orefice',
            'orfano',
            'organico',
            'origine',
            'orizzonte',
            'orma',
            'ormeggio',
            'ornativo',
            'orologio',
            'orrendo',
            'orribile',
            'ortensia',
            'ortica',
            'orzata',
            'orzo',
            'osare',
            'oscurare',
            'osmosi',
            'ospedale',
            'ospite',
            'ossa',
            'ossidare',
            'ostacolo',
            'oste',
            'otite',
            'otre',
            'ottagono',
            'ottimo',
            'ottobre',
            'ovale',
            'ovest',
            'ovino',
            'oviparo',
            'ovocito',
            'ovunque',
            'ovviare',
            'ozio',
            'pacchetto',
            'pace',
            'pacifico',
            'padella',
            'padrone',
            'paese',
            'paga',
            'pagina',
            'palazzina',
            'palesare',
            'pallido',
            'palo',
            'palude',
            'pandoro',
            'pannello',
            'paolo',
            'paonazzo',
            'paprica',
            'parabola',
            'parcella',
            'parere',
            'pargolo',
            'pari',
            'parlato',
            'parola',
            'partire',
            'parvenza',
            'parziale',
            'passivo',
            'pasticca',
            'patacca',
            'patologia',
            'pattume',
            'pavone',
            'peccato',
            'pedalare',
            'pedonale',
            'peggio',
            'peloso',
            'penare',
            'pendice',
            'penisola',
            'pennuto',
            'penombra',
            'pensare',
            'pentola',
            'pepe',
            'pepita',
            'perbene',
            'percorso',
            'perdonato',
            'perforare',
            'pergamena',
            'periodo',
            'permesso',
            'perno',
            'perplesso',
            'persuaso',
            'pertugio',
            'pervaso',
            'pesatore',
            'pesista',
            'peso',
            'pestifero',
            'petalo',
            'pettine',
            'petulante',
            'pezzo',
            'piacere',
            'pianta',
            'piattino',
            'piccino',
            'picozza',
            'piega',
            'pietra',
            'piffero',
            'pigiama',
            'pigolio',
            'pigro',
            'pila',
            'pilifero',
            'pillola',
            'pilota',
            'pimpante',
            'pineta',
            'pinna',
            'pinolo',
            'pioggia',
            'piombo',
            'piramide',
            'piretico',
            'pirite',
            'pirolisi',
            'pitone',
            'pizzico',
            'placebo',
            'planare',
            'plasma',
            'platano',
            'plenario',
            'pochezza',
            'poderoso',
            'podismo',
            'poesia',
            'poggiare',
            'polenta',
            'poligono',
            'pollice',
            'polmonite',
            'polpetta',
            'polso',
            'poltrona',
            'polvere',
            'pomice',
            'pomodoro',
            'ponte',
            'popoloso',
            'porfido',
            'poroso',
            'porpora',
            'porre',
            'portata',
            'posa',
            'positivo',
            'possesso',
            'postulato',
            'potassio',
            'potere',
            'pranzo',
            'prassi',
            'pratica',
            'precluso',
            'predica',
            'prefisso',
            'pregiato',
            'prelievo',
            'premere',
            'prenotare',
            'preparato',
            'presenza',
            'pretesto',
            'prevalso',
            'prima',
            'principe',
            'privato',
            'problema',
            'procura',
            'produrre',
            'profumo',
            'progetto',
            'prolunga',
            'promessa',
            'pronome',
            'proposta',
            'proroga',
            'proteso',
            'prova',
            'prudente',
            'prugna',
            'prurito',
            'psiche',
            'pubblico',
            'pudica',
            'pugilato',
            'pugno',
            'pulce',
            'pulito',
            'pulsante',
            'puntare',
            'pupazzo',
            'pupilla',
            'puro',
            'quadro',
            'qualcosa',
            'quasi',
            'querela',
            'quota',
            'raccolto',
            'raddoppio',
            'radicale',
            'radunato',
            'raffica',
            'ragazzo',
            'ragione',
            'ragno',
            'ramarro',
            'ramingo',
            'ramo',
            'randagio',
            'rantolare',
            'rapato',
            'rapina',
            'rappreso',
            'rasatura',
            'raschiato',
            'rasente',
            'rassegna',
            'rastrello',
            'rata',
            'ravveduto',
            'reale',
            'recepire',
            'recinto',
            'recluta',
            'recondito',
            'recupero',
            'reddito',
            'redimere',
            'regalato',
            'registro',
            'regola',
            'regresso',
            'relazione',
            'remare',
            'remoto',
            'renna',
            'replica',
            'reprimere',
            'reputare',
            'resa',
            'residente',
            'responso',
            'restauro',
            'rete',
            'retina',
            'retorica',
            'rettifica',
            'revocato',
            'riassunto',
            'ribadire',
            'ribelle',
            'ribrezzo',
            'ricarica',
            'ricco',
            'ricevere',
            'riciclato',
            'ricordo',
            'ricreduto',
            'ridicolo',
            'ridurre',
            'rifasare',
            'riflesso',
            'riforma',
            'rifugio',
            'rigare',
            'rigettato',
            'righello',
            'rilassato',
            'rilevato',
            'rimanere',
            'rimbalzo',
            'rimedio',
            'rimorchio',
            'rinascita',
            'rincaro',
            'rinforzo',
            'rinnovo',
            'rinomato',
            'rinsavito',
            'rintocco',
            'rinuncia',
            'rinvenire',
            'riparato',
            'ripetuto',
            'ripieno',
            'riportare',
            'ripresa',
            'ripulire',
            'risata',
            'rischio',
            'riserva',
            'risibile',
            'riso',
            'rispetto',
            'ristoro',
            'risultato',
            'risvolto',
            'ritardo',
            'ritegno',
            'ritmico',
            'ritrovo',
            'riunione',
            'riva',
            'riverso',
            'rivincita',
            'rivolto',
            'rizoma',
            'roba',
            'robotico',
            'robusto',
            'roccia',
            'roco',
            'rodaggio',
            'rodere',
            'roditore',
            'rogito',
            'rollio',
            'romantico',
            'rompere',
            'ronzio',
            'rosolare',
            'rospo',
            'rotante',
            'rotondo',
            'rotula',
            'rovescio',
            'rubizzo',
            'rubrica',
            'ruga',
            'rullino',
            'rumine',
            'rumoroso',
            'ruolo',
            'rupe',
            'russare',
            'rustico',
            'sabato',
            'sabbiare',
            'sabotato',
            'sagoma',
            'salasso',
            'saldatura',
            'salgemma',
            'salivare',
            'salmone',
            'salone',
            'saltare',
            'saluto',
            'salvo',
            'sapere',
            'sapido',
            'saporito',
            'saraceno',
            'sarcasmo',
            'sarto',
            'sassoso',
            'satellite',
            'satira',
            'satollo',
            'saturno',
            'savana',
            'savio',
            'saziato',
            'sbadiglio',
            'sbalzo',
            'sbancato',
            'sbarra',
            'sbattere',
            'sbavare',
            'sbendare',
            'sbirciare',
            'sbloccato',
            'sbocciato',
            'sbrinare',
            'sbruffone',
            'sbuffare',
            'scabroso',
            'scadenza',
            'scala',
            'scambiare',
            'scandalo',
            'scapola',
            'scarso',
            'scatenare',
            'scavato',
            'scelto',
            'scenico',
            'scettro',
            'scheda',
            'schiena',
            'sciarpa',
            'scienza',
            'scindere',
            'scippo',
            'sciroppo',
            'scivolo',
            'sclerare',
            'scodella',
            'scolpito',
            'scomparto',
            'sconforto',
            'scoprire',
            'scorta',
            'scossone',
            'scozzese',
            'scriba',
            'scrollare',
            'scrutinio',
            'scuderia',
            'scultore',
            'scuola',
            'scuro',
            'scusare',
            'sdebitare',
            'sdoganare',
            'seccatura',
            'secondo',
            'sedano',
            'seggiola',
            'segnalato',
            'segregato',
            'seguito',
            'selciato',
            'selettivo',
            'sella',
            'selvaggio',
            'semaforo',
            'sembrare',
            'seme',
            'seminato',
            'sempre',
            'senso',
            'sentire',
            'sepolto',
            'sequenza',
            'serata',
            'serbato',
            'sereno',
            'serio',
            'serpente',
            'serraglio',
            'servire',
            'sestina',
            'setola',
            'settimana',
            'sfacelo',
            'sfaldare',
            'sfamato',
            'sfarzoso',
            'sfaticato',
            'sfera',
            'sfida',
            'sfilato',
            'sfinge',
            'sfocato',
            'sfoderare',
            'sfogo',
            'sfoltire',
            'sforzato',
            'sfratto',
            'sfruttato',
            'sfuggito',
            'sfumare',
            'sfuso',
            'sgabello',
            'sgarbato',
            'sgonfiare',
            'sgorbio',
            'sgrassato',
            'sguardo',
            'sibilo',
            'siccome',
            'sierra',
            'sigla',
            'signore',
            'silenzio',
            'sillaba',
            'simbolo',
            'simpatico',
            'simulato',
            'sinfonia',
            'singolo',
            'sinistro',
            'sino',
            'sintesi',
            'sinusoide',
            'sipario',
            'sisma',
            'sistole',
            'situato',
            'slitta',
            'slogatura',
            'sloveno',
            'smarrito',
            'smemorato',
            'smentito',
            'smeraldo',
            'smilzo',
            'smontare',
            'smottato',
            'smussato',
            'snellire',
            'snervato',
            'snodo',
            'sobbalzo',
            'sobrio',
            'soccorso',
            'sociale',
            'sodale',
            'soffitto',
            'sogno',
            'soldato',
            'solenne',
            'solido',
            'sollazzo',
            'solo',
            'solubile',
            'solvente',
            'somatico',
            'somma',
            'sonda',
            'sonetto',
            'sonnifero',
            'sopire',
            'soppeso',
            'sopra',
            'sorgere',
            'sorpasso',
            'sorriso',
            'sorso',
            'sorteggio',
            'sorvolato',
            'sospiro',
            'sosta',
            'sottile',
            'spada',
            'spalla',
            'spargere',
            'spatola',
            'spavento',
            'spazzola',
            'specie',
            'spedire',
            'spegnere',
            'spelatura',
            'speranza',
            'spessore',
            'spettrale',
            'spezzato',
            'spia',
            'spigoloso',
            'spillato',
            'spinoso',
            'spirale',
            'splendido',
            'sportivo',
            'sposo',
            'spranga',
            'sprecare',
            'spronato',
            'spruzzo',
            'spuntino',
            'squillo',
            'sradicare',
            'srotolato',
            'stabile',
            'stacco',
            'staffa',
            'stagnare',
            'stampato',
            'stantio',
            'starnuto',
            'stasera',
            'statuto',
            'stelo',
            'steppa',
            'sterzo',
            'stiletto',
            'stima',
            'stirpe',
            'stivale',
            'stizzoso',
            'stonato',
            'storico',
            'strappo',
            'stregato',
            'stridulo',
            'strozzare',
            'strutto',
            'stuccare',
            'stufo',
            'stupendo',
            'subentro',
            'succoso',
            'sudore',
            'suggerito',
            'sugo',
            'sultano',
            'suonare',
            'superbo',
            'supporto',
            'surgelato',
            'surrogato',
            'sussurro',
            'sutura',
            'svagare',
            'svedese',
            'sveglio',
            'svelare',
            'svenuto',
            'svezia',
            'sviluppo',
            'svista',
            'svizzera',
            'svolta',
            'svuotare',
            'tabacco',
            'tabulato',
            'tacciare',
            'taciturno',
            'tale',
            'talismano',
            'tampone',
            'tannino',
            'tara',
            'tardivo',
            'targato',
            'tariffa',
            'tarpare',
            'tartaruga',
            'tasto',
            'tattico',
            'taverna',
            'tavolata',
            'tazza',
            'teca',
            'tecnico',
            'telefono',
            'temerario',
            'tempo',
            'temuto',
            'tendone',
            'tenero',
            'tensione',
            'tentacolo',
            'teorema',
            'terme',
            'terrazzo',
            'terzetto',
            'tesi',
            'tesserato',
            'testato',
            'tetro',
            'tettoia',
            'tifare',
            'tigella',
            'timbro',
            'tinto',
            'tipico',
            'tipografo',
            'tiraggio',
            'tiro',
            'titanio',
            'titolo',
            'titubante',
            'tizio',
            'tizzone',
            'toccare',
            'tollerare',
            'tolto',
            'tombola',
            'tomo',
            'tonfo',
            'tonsilla',
            'topazio',
            'topologia',
            'toppa',
            'torba',
            'tornare',
            'torrone',
            'tortora',
            'toscano',
            'tossire',
            'tostatura',
            'totano',
            'trabocco',
            'trachea',
            'trafila',
            'tragedia',
            'tralcio',
            'tramonto',
            'transito',
            'trapano',
            'trarre',
            'trasloco',
            'trattato',
            'trave',
            'treccia',
            'tremolio',
            'trespolo',
            'tributo',
            'tricheco',
            'trifoglio',
            'trillo',
            'trincea',
            'trio',
            'tristezza',
            'triturato',
            'trivella',
            'tromba',
            'trono',
            'troppo',
            'trottola',
            'trovare',
            'truccato',
            'tubatura',
            'tuffato',
            'tulipano',
            'tumulto',
            'tunisia',
            'turbare',
            'turchino',
            'tuta',
            'tutela',
            'ubicato',
            'uccello',
            'uccisore',
            'udire',
            'uditivo',
            'uffa',
            'ufficio',
            'uguale',
            'ulisse',
            'ultimato',
            'umano',
            'umile',
            'umorismo',
            'uncinetto',
            'ungere',
            'ungherese',
            'unicorno',
            'unificato',
            'unisono',
            'unitario',
            'unte',
            'uovo',
            'upupa',
            'uragano',
            'urgenza',
            'urlo',
            'usanza',
            'usato',
            'uscito',
            'usignolo',
            'usuraio',
            'utensile',
            'utilizzo',
            'utopia',
            'vacante',
            'vaccinato',
            'vagabondo',
            'vagliato',
            'valanga',
            'valgo',
            'valico',
            'valletta',
            'valoroso',
            'valutare',
            'valvola',
            'vampata',
            'vangare',
            'vanitoso',
            'vano',
            'vantaggio',
            'vanvera',
            'vapore',
            'varano',
            'varcato',
            'variante',
            'vasca',
            'vedetta',
            'vedova',
            'veduto',
            'vegetale',
            'veicolo',
            'velcro',
            'velina',
            'velluto',
            'veloce',
            'venato',
            'vendemmia',
            'vento',
            'verace',
            'verbale',
            'vergogna',
            'verifica',
            'vero',
            'verruca',
            'verticale',
            'vescica',
            'vessillo',
            'vestale',
            'veterano',
            'vetrina',
            'vetusto',
            'viandante',
            'vibrante',
            'vicenda',
            'vichingo',
            'vicinanza',
            'vidimare',
            'vigilia',
            'vigneto',
            'vigore',
            'vile',
            'villano',
            'vimini',
            'vincitore',
            'viola',
            'vipera',
            'virgola',
            'virologo',
            'virulento',
            'viscoso',
            'visione',
            'vispo',
            'vissuto',
            'visura',
            'vita',
            'vitello',
            'vittima',
            'vivanda',
            'vivido',
            'viziare',
            'voce',
            'voga',
            'volatile',
            'volere',
            'volpe',
            'voragine',
            'vulcano',
            'zampogna',
            'zanna',
            'zappato',
            'zattera',
            'zavorra',
            'zefiro',
            'zelante',
            'zelo',
            'zenzero',
            'zerbino',
            'zibetto',
            'zinco',
            'zircone',
            'zitto',
            'zolla',
            'zotico',
            'zucchero',
            'zufolo',
            'zulu',
            'zuppa',
          ];
        },
        {},
      ],
      56: [
        function (require, module, exports) {
          module.exports = [
            'あいこくしん',
            'あいさつ',
            'あいだ',
            'あおぞら',
            'あかちゃん',
            'あきる',
            'あけがた',
            'あける',
            'あこがれる',
            'あさい',
            'あさひ',
            'あしあと',
            'あじわう',
            'あずかる',
            'あずき',
            'あそぶ',
            'あたえる',
            'あたためる',
            'あたりまえ',
            'あたる',
            'あつい',
            'あつかう',
            'あっしゅく',
            'あつまり',
            'あつめる',
            'あてな',
            'あてはまる',
            'あひる',
            'あぶら',
            'あぶる',
            'あふれる',
            'あまい',
            'あまど',
            'あまやかす',
            'あまり',
            'あみもの',
            'あめりか',
            'あやまる',
            'あゆむ',
            'あらいぐま',
            'あらし',
            'あらすじ',
            'あらためる',
            'あらゆる',
            'あらわす',
            'ありがとう',
            'あわせる',
            'あわてる',
            'あんい',
            'あんがい',
            'あんこ',
            'あんぜん',
            'あんてい',
            'あんない',
            'あんまり',
            'いいだす',
            'いおん',
            'いがい',
            'いがく',
            'いきおい',
            'いきなり',
            'いきもの',
            'いきる',
            'いくじ',
            'いくぶん',
            'いけばな',
            'いけん',
            'いこう',
            'いこく',
            'いこつ',
            'いさましい',
            'いさん',
            'いしき',
            'いじゅう',
            'いじょう',
            'いじわる',
            'いずみ',
            'いずれ',
            'いせい',
            'いせえび',
            'いせかい',
            'いせき',
            'いぜん',
            'いそうろう',
            'いそがしい',
            'いだい',
            'いだく',
            'いたずら',
            'いたみ',
            'いたりあ',
            'いちおう',
            'いちじ',
            'いちど',
            'いちば',
            'いちぶ',
            'いちりゅう',
            'いつか',
            'いっしゅん',
            'いっせい',
            'いっそう',
            'いったん',
            'いっち',
            'いってい',
            'いっぽう',
            'いてざ',
            'いてん',
            'いどう',
            'いとこ',
            'いない',
            'いなか',
            'いねむり',
            'いのち',
            'いのる',
            'いはつ',
            'いばる',
            'いはん',
            'いびき',
            'いひん',
            'いふく',
            'いへん',
            'いほう',
            'いみん',
            'いもうと',
            'いもたれ',
            'いもり',
            'いやがる',
            'いやす',
            'いよかん',
            'いよく',
            'いらい',
            'いらすと',
            'いりぐち',
            'いりょう',
            'いれい',
            'いれもの',
            'いれる',
            'いろえんぴつ',
            'いわい',
            'いわう',
            'いわかん',
            'いわば',
            'いわゆる',
            'いんげんまめ',
            'いんさつ',
            'いんしょう',
            'いんよう',
            'うえき',
            'うえる',
            'うおざ',
            'うがい',
            'うかぶ',
            'うかべる',
            'うきわ',
            'うくらいな',
            'うくれれ',
            'うけたまわる',
            'うけつけ',
            'うけとる',
            'うけもつ',
            'うける',
            'うごかす',
            'うごく',
            'うこん',
            'うさぎ',
            'うしなう',
            'うしろがみ',
            'うすい',
            'うすぎ',
            'うすぐらい',
            'うすめる',
            'うせつ',
            'うちあわせ',
            'うちがわ',
            'うちき',
            'うちゅう',
            'うっかり',
            'うつくしい',
            'うったえる',
            'うつる',
            'うどん',
            'うなぎ',
            'うなじ',
            'うなずく',
            'うなる',
            'うねる',
            'うのう',
            'うぶげ',
            'うぶごえ',
            'うまれる',
            'うめる',
            'うもう',
            'うやまう',
            'うよく',
            'うらがえす',
            'うらぐち',
            'うらない',
            'うりあげ',
            'うりきれ',
            'うるさい',
            'うれしい',
            'うれゆき',
            'うれる',
            'うろこ',
            'うわき',
            'うわさ',
            'うんこう',
            'うんちん',
            'うんてん',
            'うんどう',
            'えいえん',
            'えいが',
            'えいきょう',
            'えいご',
            'えいせい',
            'えいぶん',
            'えいよう',
            'えいわ',
            'えおり',
            'えがお',
            'えがく',
            'えきたい',
            'えくせる',
            'えしゃく',
            'えすて',
            'えつらん',
            'えのぐ',
            'えほうまき',
            'えほん',
            'えまき',
            'えもじ',
            'えもの',
            'えらい',
            'えらぶ',
            'えりあ',
            'えんえん',
            'えんかい',
            'えんぎ',
            'えんげき',
            'えんしゅう',
            'えんぜつ',
            'えんそく',
            'えんちょう',
            'えんとつ',
            'おいかける',
            'おいこす',
            'おいしい',
            'おいつく',
            'おうえん',
            'おうさま',
            'おうじ',
            'おうせつ',
            'おうたい',
            'おうふく',
            'おうべい',
            'おうよう',
            'おえる',
            'おおい',
            'おおう',
            'おおどおり',
            'おおや',
            'おおよそ',
            'おかえり',
            'おかず',
            'おがむ',
            'おかわり',
            'おぎなう',
            'おきる',
            'おくさま',
            'おくじょう',
            'おくりがな',
            'おくる',
            'おくれる',
            'おこす',
            'おこなう',
            'おこる',
            'おさえる',
            'おさない',
            'おさめる',
            'おしいれ',
            'おしえる',
            'おじぎ',
            'おじさん',
            'おしゃれ',
            'おそらく',
            'おそわる',
            'おたがい',
            'おたく',
            'おだやか',
            'おちつく',
            'おっと',
            'おつり',
            'おでかけ',
            'おとしもの',
            'おとなしい',
            'おどり',
            'おどろかす',
            'おばさん',
            'おまいり',
            'おめでとう',
            'おもいで',
            'おもう',
            'おもたい',
            'おもちゃ',
            'おやつ',
            'おやゆび',
            'およぼす',
            'おらんだ',
            'おろす',
            'おんがく',
            'おんけい',
            'おんしゃ',
            'おんせん',
            'おんだん',
            'おんちゅう',
            'おんどけい',
            'かあつ',
            'かいが',
            'がいき',
            'がいけん',
            'がいこう',
            'かいさつ',
            'かいしゃ',
            'かいすいよく',
            'かいぜん',
            'かいぞうど',
            'かいつう',
            'かいてん',
            'かいとう',
            'かいふく',
            'がいへき',
            'かいほう',
            'かいよう',
            'がいらい',
            'かいわ',
            'かえる',
            'かおり',
            'かかえる',
            'かがく',
            'かがし',
            'かがみ',
            'かくご',
            'かくとく',
            'かざる',
            'がぞう',
            'かたい',
            'かたち',
            'がちょう',
            'がっきゅう',
            'がっこう',
            'がっさん',
            'がっしょう',
            'かなざわし',
            'かのう',
            'がはく',
            'かぶか',
            'かほう',
            'かほご',
            'かまう',
            'かまぼこ',
            'かめれおん',
            'かゆい',
            'かようび',
            'からい',
            'かるい',
            'かろう',
            'かわく',
            'かわら',
            'がんか',
            'かんけい',
            'かんこう',
            'かんしゃ',
            'かんそう',
            'かんたん',
            'かんち',
            'がんばる',
            'きあい',
            'きあつ',
            'きいろ',
            'ぎいん',
            'きうい',
            'きうん',
            'きえる',
            'きおう',
            'きおく',
            'きおち',
            'きおん',
            'きかい',
            'きかく',
            'きかんしゃ',
            'ききて',
            'きくばり',
            'きくらげ',
            'きけんせい',
            'きこう',
            'きこえる',
            'きこく',
            'きさい',
            'きさく',
            'きさま',
            'きさらぎ',
            'ぎじかがく',
            'ぎしき',
            'ぎじたいけん',
            'ぎじにってい',
            'ぎじゅつしゃ',
            'きすう',
            'きせい',
            'きせき',
            'きせつ',
            'きそう',
            'きぞく',
            'きぞん',
            'きたえる',
            'きちょう',
            'きつえん',
            'ぎっちり',
            'きつつき',
            'きつね',
            'きてい',
            'きどう',
            'きどく',
            'きない',
            'きなが',
            'きなこ',
            'きぬごし',
            'きねん',
            'きのう',
            'きのした',
            'きはく',
            'きびしい',
            'きひん',
            'きふく',
            'きぶん',
            'きぼう',
            'きほん',
            'きまる',
            'きみつ',
            'きむずかしい',
            'きめる',
            'きもだめし',
            'きもち',
            'きもの',
            'きゃく',
            'きやく',
            'ぎゅうにく',
            'きよう',
            'きょうりゅう',
            'きらい',
            'きらく',
            'きりん',
            'きれい',
            'きれつ',
            'きろく',
            'ぎろん',
            'きわめる',
            'ぎんいろ',
            'きんかくじ',
            'きんじょ',
            'きんようび',
            'ぐあい',
            'くいず',
            'くうかん',
            'くうき',
            'くうぐん',
            'くうこう',
            'ぐうせい',
            'くうそう',
            'ぐうたら',
            'くうふく',
            'くうぼ',
            'くかん',
            'くきょう',
            'くげん',
            'ぐこう',
            'くさい',
            'くさき',
            'くさばな',
            'くさる',
            'くしゃみ',
            'くしょう',
            'くすのき',
            'くすりゆび',
            'くせげ',
            'くせん',
            'ぐたいてき',
            'くださる',
            'くたびれる',
            'くちこみ',
            'くちさき',
            'くつした',
            'ぐっすり',
            'くつろぐ',
            'くとうてん',
            'くどく',
            'くなん',
            'くねくね',
            'くのう',
            'くふう',
            'くみあわせ',
            'くみたてる',
            'くめる',
            'くやくしょ',
            'くらす',
            'くらべる',
            'くるま',
            'くれる',
            'くろう',
            'くわしい',
            'ぐんかん',
            'ぐんしょく',
            'ぐんたい',
            'ぐんて',
            'けあな',
            'けいかく',
            'けいけん',
            'けいこ',
            'けいさつ',
            'げいじゅつ',
            'けいたい',
            'げいのうじん',
            'けいれき',
            'けいろ',
            'けおとす',
            'けおりもの',
            'げきか',
            'げきげん',
            'げきだん',
            'げきちん',
            'げきとつ',
            'げきは',
            'げきやく',
            'げこう',
            'げこくじょう',
            'げざい',
            'けさき',
            'げざん',
            'けしき',
            'けしごむ',
            'けしょう',
            'げすと',
            'けたば',
            'けちゃっぷ',
            'けちらす',
            'けつあつ',
            'けつい',
            'けつえき',
            'けっこん',
            'けつじょ',
            'けっせき',
            'けってい',
            'けつまつ',
            'げつようび',
            'げつれい',
            'けつろん',
            'げどく',
            'けとばす',
            'けとる',
            'けなげ',
            'けなす',
            'けなみ',
            'けぬき',
            'げねつ',
            'けねん',
            'けはい',
            'げひん',
            'けぶかい',
            'げぼく',
            'けまり',
            'けみかる',
            'けむし',
            'けむり',
            'けもの',
            'けらい',
            'けろけろ',
            'けわしい',
            'けんい',
            'けんえつ',
            'けんお',
            'けんか',
            'げんき',
            'けんげん',
            'けんこう',
            'けんさく',
            'けんしゅう',
            'けんすう',
            'げんそう',
            'けんちく',
            'けんてい',
            'けんとう',
            'けんない',
            'けんにん',
            'げんぶつ',
            'けんま',
            'けんみん',
            'けんめい',
            'けんらん',
            'けんり',
            'こあくま',
            'こいぬ',
            'こいびと',
            'ごうい',
            'こうえん',
            'こうおん',
            'こうかん',
            'ごうきゅう',
            'ごうけい',
            'こうこう',
            'こうさい',
            'こうじ',
            'こうすい',
            'ごうせい',
            'こうそく',
            'こうたい',
            'こうちゃ',
            'こうつう',
            'こうてい',
            'こうどう',
            'こうない',
            'こうはい',
            'ごうほう',
            'ごうまん',
            'こうもく',
            'こうりつ',
            'こえる',
            'こおり',
            'ごかい',
            'ごがつ',
            'ごかん',
            'こくご',
            'こくさい',
            'こくとう',
            'こくない',
            'こくはく',
            'こぐま',
            'こけい',
            'こける',
            'ここのか',
            'こころ',
            'こさめ',
            'こしつ',
            'こすう',
            'こせい',
            'こせき',
            'こぜん',
            'こそだて',
            'こたい',
            'こたえる',
            'こたつ',
            'こちょう',
            'こっか',
            'こつこつ',
            'こつばん',
            'こつぶ',
            'こてい',
            'こてん',
            'ことがら',
            'ことし',
            'ことば',
            'ことり',
            'こなごな',
            'こねこね',
            'このまま',
            'このみ',
            'このよ',
            'ごはん',
            'こひつじ',
            'こふう',
            'こふん',
            'こぼれる',
            'ごまあぶら',
            'こまかい',
            'ごますり',
            'こまつな',
            'こまる',
            'こむぎこ',
            'こもじ',
            'こもち',
            'こもの',
            'こもん',
            'こやく',
            'こやま',
            'こゆう',
            'こゆび',
            'こよい',
            'こよう',
            'こりる',
            'これくしょん',
            'ころっけ',
            'こわもて',
            'こわれる',
            'こんいん',
            'こんかい',
            'こんき',
            'こんしゅう',
            'こんすい',
            'こんだて',
            'こんとん',
            'こんなん',
            'こんびに',
            'こんぽん',
            'こんまけ',
            'こんや',
            'こんれい',
            'こんわく',
            'ざいえき',
            'さいかい',
            'さいきん',
            'ざいげん',
            'ざいこ',
            'さいしょ',
            'さいせい',
            'ざいたく',
            'ざいちゅう',
            'さいてき',
            'ざいりょう',
            'さうな',
            'さかいし',
            'さがす',
            'さかな',
            'さかみち',
            'さがる',
            'さぎょう',
            'さくし',
            'さくひん',
            'さくら',
            'さこく',
            'さこつ',
            'さずかる',
            'ざせき',
            'さたん',
            'さつえい',
            'ざつおん',
            'ざっか',
            'ざつがく',
            'さっきょく',
            'ざっし',
            'さつじん',
            'ざっそう',
            'さつたば',
            'さつまいも',
            'さてい',
            'さといも',
            'さとう',
            'さとおや',
            'さとし',
            'さとる',
            'さのう',
            'さばく',
            'さびしい',
            'さべつ',
            'さほう',
            'さほど',
            'さます',
            'さみしい',
            'さみだれ',
            'さむけ',
            'さめる',
            'さやえんどう',
            'さゆう',
            'さよう',
            'さよく',
            'さらだ',
            'ざるそば',
            'さわやか',
            'さわる',
            'さんいん',
            'さんか',
            'さんきゃく',
            'さんこう',
            'さんさい',
            'ざんしょ',
            'さんすう',
            'さんせい',
            'さんそ',
            'さんち',
            'さんま',
            'さんみ',
            'さんらん',
            'しあい',
            'しあげ',
            'しあさって',
            'しあわせ',
            'しいく',
            'しいん',
            'しうち',
            'しえい',
            'しおけ',
            'しかい',
            'しかく',
            'じかん',
            'しごと',
            'しすう',
            'じだい',
            'したうけ',
            'したぎ',
            'したて',
            'したみ',
            'しちょう',
            'しちりん',
            'しっかり',
            'しつじ',
            'しつもん',
            'してい',
            'してき',
            'してつ',
            'じてん',
            'じどう',
            'しなぎれ',
            'しなもの',
            'しなん',
            'しねま',
            'しねん',
            'しのぐ',
            'しのぶ',
            'しはい',
            'しばかり',
            'しはつ',
            'しはらい',
            'しはん',
            'しひょう',
            'しふく',
            'じぶん',
            'しへい',
            'しほう',
            'しほん',
            'しまう',
            'しまる',
            'しみん',
            'しむける',
            'じむしょ',
            'しめい',
            'しめる',
            'しもん',
            'しゃいん',
            'しゃうん',
            'しゃおん',
            'じゃがいも',
            'しやくしょ',
            'しゃくほう',
            'しゃけん',
            'しゃこ',
            'しゃざい',
            'しゃしん',
            'しゃせん',
            'しゃそう',
            'しゃたい',
            'しゃちょう',
            'しゃっきん',
            'じゃま',
            'しゃりん',
            'しゃれい',
            'じゆう',
            'じゅうしょ',
            'しゅくはく',
            'じゅしん',
            'しゅっせき',
            'しゅみ',
            'しゅらば',
            'じゅんばん',
            'しょうかい',
            'しょくたく',
            'しょっけん',
            'しょどう',
            'しょもつ',
            'しらせる',
            'しらべる',
            'しんか',
            'しんこう',
            'じんじゃ',
            'しんせいじ',
            'しんちく',
            'しんりん',
            'すあげ',
            'すあし',
            'すあな',
            'ずあん',
            'すいえい',
            'すいか',
            'すいとう',
            'ずいぶん',
            'すいようび',
            'すうがく',
            'すうじつ',
            'すうせん',
            'すおどり',
            'すきま',
            'すくう',
            'すくない',
            'すける',
            'すごい',
            'すこし',
            'ずさん',
            'すずしい',
            'すすむ',
            'すすめる',
            'すっかり',
            'ずっしり',
            'ずっと',
            'すてき',
            'すてる',
            'すねる',
            'すのこ',
            'すはだ',
            'すばらしい',
            'ずひょう',
            'ずぶぬれ',
            'すぶり',
            'すふれ',
            'すべて',
            'すべる',
            'ずほう',
            'すぼん',
            'すまい',
            'すめし',
            'すもう',
            'すやき',
            'すらすら',
            'するめ',
            'すれちがう',
            'すろっと',
            'すわる',
            'すんぜん',
            'すんぽう',
            'せあぶら',
            'せいかつ',
            'せいげん',
            'せいじ',
            'せいよう',
            'せおう',
            'せかいかん',
            'せきにん',
            'せきむ',
            'せきゆ',
            'せきらんうん',
            'せけん',
            'せこう',
            'せすじ',
            'せたい',
            'せたけ',
            'せっかく',
            'せっきゃく',
            'ぜっく',
            'せっけん',
            'せっこつ',
            'せっさたくま',
            'せつぞく',
            'せつだん',
            'せつでん',
            'せっぱん',
            'せつび',
            'せつぶん',
            'せつめい',
            'せつりつ',
            'せなか',
            'せのび',
            'せはば',
            'せびろ',
            'せぼね',
            'せまい',
            'せまる',
            'せめる',
            'せもたれ',
            'せりふ',
            'ぜんあく',
            'せんい',
            'せんえい',
            'せんか',
            'せんきょ',
            'せんく',
            'せんげん',
            'ぜんご',
            'せんさい',
            'せんしゅ',
            'せんすい',
            'せんせい',
            'せんぞ',
            'せんたく',
            'せんちょう',
            'せんてい',
            'せんとう',
            'せんぬき',
            'せんねん',
            'せんぱい',
            'ぜんぶ',
            'ぜんぽう',
            'せんむ',
            'せんめんじょ',
            'せんもん',
            'せんやく',
            'せんゆう',
            'せんよう',
            'ぜんら',
            'ぜんりゃく',
            'せんれい',
            'せんろ',
            'そあく',
            'そいとげる',
            'そいね',
            'そうがんきょう',
            'そうき',
            'そうご',
            'そうしん',
            'そうだん',
            'そうなん',
            'そうび',
            'そうめん',
            'そうり',
            'そえもの',
            'そえん',
            'そがい',
            'そげき',
            'そこう',
            'そこそこ',
            'そざい',
            'そしな',
            'そせい',
            'そせん',
            'そそぐ',
            'そだてる',
            'そつう',
            'そつえん',
            'そっかん',
            'そつぎょう',
            'そっけつ',
            'そっこう',
            'そっせん',
            'そっと',
            'そとがわ',
            'そとづら',
            'そなえる',
            'そなた',
            'そふぼ',
            'そぼく',
            'そぼろ',
            'そまつ',
            'そまる',
            'そむく',
            'そむりえ',
            'そめる',
            'そもそも',
            'そよかぜ',
            'そらまめ',
            'そろう',
            'そんかい',
            'そんけい',
            'そんざい',
            'そんしつ',
            'そんぞく',
            'そんちょう',
            'ぞんび',
            'ぞんぶん',
            'そんみん',
            'たあい',
            'たいいん',
            'たいうん',
            'たいえき',
            'たいおう',
            'だいがく',
            'たいき',
            'たいぐう',
            'たいけん',
            'たいこ',
            'たいざい',
            'だいじょうぶ',
            'だいすき',
            'たいせつ',
            'たいそう',
            'だいたい',
            'たいちょう',
            'たいてい',
            'だいどころ',
            'たいない',
            'たいねつ',
            'たいのう',
            'たいはん',
            'だいひょう',
            'たいふう',
            'たいへん',
            'たいほ',
            'たいまつばな',
            'たいみんぐ',
            'たいむ',
            'たいめん',
            'たいやき',
            'たいよう',
            'たいら',
            'たいりょく',
            'たいる',
            'たいわん',
            'たうえ',
            'たえる',
            'たおす',
            'たおる',
            'たおれる',
            'たかい',
            'たかね',
            'たきび',
            'たくさん',
            'たこく',
            'たこやき',
            'たさい',
            'たしざん',
            'だじゃれ',
            'たすける',
            'たずさわる',
            'たそがれ',
            'たたかう',
            'たたく',
            'ただしい',
            'たたみ',
            'たちばな',
            'だっかい',
            'だっきゃく',
            'だっこ',
            'だっしゅつ',
            'だったい',
            'たてる',
            'たとえる',
            'たなばた',
            'たにん',
            'たぬき',
            'たのしみ',
            'たはつ',
            'たぶん',
            'たべる',
            'たぼう',
            'たまご',
            'たまる',
            'だむる',
            'ためいき',
            'ためす',
            'ためる',
            'たもつ',
            'たやすい',
            'たよる',
            'たらす',
            'たりきほんがん',
            'たりょう',
            'たりる',
            'たると',
            'たれる',
            'たれんと',
            'たろっと',
            'たわむれる',
            'だんあつ',
            'たんい',
            'たんおん',
            'たんか',
            'たんき',
            'たんけん',
            'たんご',
            'たんさん',
            'たんじょうび',
            'だんせい',
            'たんそく',
            'たんたい',
            'だんち',
            'たんてい',
            'たんとう',
            'だんな',
            'たんにん',
            'だんねつ',
            'たんのう',
            'たんぴん',
            'だんぼう',
            'たんまつ',
            'たんめい',
            'だんれつ',
            'だんろ',
            'だんわ',
            'ちあい',
            'ちあん',
            'ちいき',
            'ちいさい',
            'ちえん',
            'ちかい',
            'ちから',
            'ちきゅう',
            'ちきん',
            'ちけいず',
            'ちけん',
            'ちこく',
            'ちさい',
            'ちしき',
            'ちしりょう',
            'ちせい',
            'ちそう',
            'ちたい',
            'ちたん',
            'ちちおや',
            'ちつじょ',
            'ちてき',
            'ちてん',
            'ちぬき',
            'ちぬり',
            'ちのう',
            'ちひょう',
            'ちへいせん',
            'ちほう',
            'ちまた',
            'ちみつ',
            'ちみどろ',
            'ちめいど',
            'ちゃんこなべ',
            'ちゅうい',
            'ちゆりょく',
            'ちょうし',
            'ちょさくけん',
            'ちらし',
            'ちらみ',
            'ちりがみ',
            'ちりょう',
            'ちるど',
            'ちわわ',
            'ちんたい',
            'ちんもく',
            'ついか',
            'ついたち',
            'つうか',
            'つうじょう',
            'つうはん',
            'つうわ',
            'つかう',
            'つかれる',
            'つくね',
            'つくる',
            'つけね',
            'つける',
            'つごう',
            'つたえる',
            'つづく',
            'つつじ',
            'つつむ',
            'つとめる',
            'つながる',
            'つなみ',
            'つねづね',
            'つのる',
            'つぶす',
            'つまらない',
            'つまる',
            'つみき',
            'つめたい',
            'つもり',
            'つもる',
            'つよい',
            'つるぼ',
            'つるみく',
            'つわもの',
            'つわり',
            'てあし',
            'てあて',
            'てあみ',
            'ていおん',
            'ていか',
            'ていき',
            'ていけい',
            'ていこく',
            'ていさつ',
            'ていし',
            'ていせい',
            'ていたい',
            'ていど',
            'ていねい',
            'ていひょう',
            'ていへん',
            'ていぼう',
            'てうち',
            'ておくれ',
            'てきとう',
            'てくび',
            'でこぼこ',
            'てさぎょう',
            'てさげ',
            'てすり',
            'てそう',
            'てちがい',
            'てちょう',
            'てつがく',
            'てつづき',
            'でっぱ',
            'てつぼう',
            'てつや',
            'でぬかえ',
            'てぬき',
            'てぬぐい',
            'てのひら',
            'てはい',
            'てぶくろ',
            'てふだ',
            'てほどき',
            'てほん',
            'てまえ',
            'てまきずし',
            'てみじか',
            'てみやげ',
            'てらす',
            'てれび',
            'てわけ',
            'てわたし',
            'でんあつ',
            'てんいん',
            'てんかい',
            'てんき',
            'てんぐ',
            'てんけん',
            'てんごく',
            'てんさい',
            'てんし',
            'てんすう',
            'でんち',
            'てんてき',
            'てんとう',
            'てんない',
            'てんぷら',
            'てんぼうだい',
            'てんめつ',
            'てんらんかい',
            'でんりょく',
            'でんわ',
            'どあい',
            'といれ',
            'どうかん',
            'とうきゅう',
            'どうぐ',
            'とうし',
            'とうむぎ',
            'とおい',
            'とおか',
            'とおく',
            'とおす',
            'とおる',
            'とかい',
            'とかす',
            'ときおり',
            'ときどき',
            'とくい',
            'とくしゅう',
            'とくてん',
            'とくに',
            'とくべつ',
            'とけい',
            'とける',
            'とこや',
            'とさか',
            'としょかん',
            'とそう',
            'とたん',
            'とちゅう',
            'とっきゅう',
            'とっくん',
            'とつぜん',
            'とつにゅう',
            'とどける',
            'ととのえる',
            'とない',
            'となえる',
            'となり',
            'とのさま',
            'とばす',
            'どぶがわ',
            'とほう',
            'とまる',
            'とめる',
            'ともだち',
            'ともる',
            'どようび',
            'とらえる',
            'とんかつ',
            'どんぶり',
            'ないかく',
            'ないこう',
            'ないしょ',
            'ないす',
            'ないせん',
            'ないそう',
            'なおす',
            'ながい',
            'なくす',
            'なげる',
            'なこうど',
            'なさけ',
            'なたでここ',
            'なっとう',
            'なつやすみ',
            'ななおし',
            'なにごと',
            'なにもの',
            'なにわ',
            'なのか',
            'なふだ',
            'なまいき',
            'なまえ',
            'なまみ',
            'なみだ',
            'なめらか',
            'なめる',
            'なやむ',
            'ならう',
            'ならび',
            'ならぶ',
            'なれる',
            'なわとび',
            'なわばり',
            'にあう',
            'にいがた',
            'にうけ',
            'におい',
            'にかい',
            'にがて',
            'にきび',
            'にくしみ',
            'にくまん',
            'にげる',
            'にさんかたんそ',
            'にしき',
            'にせもの',
            'にちじょう',
            'にちようび',
            'にっか',
            'にっき',
            'にっけい',
            'にっこう',
            'にっさん',
            'にっしょく',
            'にっすう',
            'にっせき',
            'にってい',
            'になう',
            'にほん',
            'にまめ',
            'にもつ',
            'にやり',
            'にゅういん',
            'にりんしゃ',
            'にわとり',
            'にんい',
            'にんか',
            'にんき',
            'にんげん',
            'にんしき',
            'にんずう',
            'にんそう',
            'にんたい',
            'にんち',
            'にんてい',
            'にんにく',
            'にんぷ',
            'にんまり',
            'にんむ',
            'にんめい',
            'にんよう',
            'ぬいくぎ',
            'ぬかす',
            'ぬぐいとる',
            'ぬぐう',
            'ぬくもり',
            'ぬすむ',
            'ぬまえび',
            'ぬめり',
            'ぬらす',
            'ぬんちゃく',
            'ねあげ',
            'ねいき',
            'ねいる',
            'ねいろ',
            'ねぐせ',
            'ねくたい',
            'ねくら',
            'ねこぜ',
            'ねこむ',
            'ねさげ',
            'ねすごす',
            'ねそべる',
            'ねだん',
            'ねつい',
            'ねっしん',
            'ねつぞう',
            'ねったいぎょ',
            'ねぶそく',
            'ねふだ',
            'ねぼう',
            'ねほりはほり',
            'ねまき',
            'ねまわし',
            'ねみみ',
            'ねむい',
            'ねむたい',
            'ねもと',
            'ねらう',
            'ねわざ',
            'ねんいり',
            'ねんおし',
            'ねんかん',
            'ねんきん',
            'ねんぐ',
            'ねんざ',
            'ねんし',
            'ねんちゃく',
            'ねんど',
            'ねんぴ',
            'ねんぶつ',
            'ねんまつ',
            'ねんりょう',
            'ねんれい',
            'のいず',
            'のおづま',
            'のがす',
            'のきなみ',
            'のこぎり',
            'のこす',
            'のこる',
            'のせる',
            'のぞく',
            'のぞむ',
            'のたまう',
            'のちほど',
            'のっく',
            'のばす',
            'のはら',
            'のべる',
            'のぼる',
            'のみもの',
            'のやま',
            'のらいぬ',
            'のらねこ',
            'のりもの',
            'のりゆき',
            'のれん',
            'のんき',
            'ばあい',
            'はあく',
            'ばあさん',
            'ばいか',
            'ばいく',
            'はいけん',
            'はいご',
            'はいしん',
            'はいすい',
            'はいせん',
            'はいそう',
            'はいち',
            'ばいばい',
            'はいれつ',
            'はえる',
            'はおる',
            'はかい',
            'ばかり',
            'はかる',
            'はくしゅ',
            'はけん',
            'はこぶ',
            'はさみ',
            'はさん',
            'はしご',
            'ばしょ',
            'はしる',
            'はせる',
            'ぱそこん',
            'はそん',
            'はたん',
            'はちみつ',
            'はつおん',
            'はっかく',
            'はづき',
            'はっきり',
            'はっくつ',
            'はっけん',
            'はっこう',
            'はっさん',
            'はっしん',
            'はったつ',
            'はっちゅう',
            'はってん',
            'はっぴょう',
            'はっぽう',
            'はなす',
            'はなび',
            'はにかむ',
            'はぶらし',
            'はみがき',
            'はむかう',
            'はめつ',
            'はやい',
            'はやし',
            'はらう',
            'はろうぃん',
            'はわい',
            'はんい',
            'はんえい',
            'はんおん',
            'はんかく',
            'はんきょう',
            'ばんぐみ',
            'はんこ',
            'はんしゃ',
            'はんすう',
            'はんだん',
            'ぱんち',
            'ぱんつ',
            'はんてい',
            'はんとし',
            'はんのう',
            'はんぱ',
            'はんぶん',
            'はんぺん',
            'はんぼうき',
            'はんめい',
            'はんらん',
            'はんろん',
            'ひいき',
            'ひうん',
            'ひえる',
            'ひかく',
            'ひかり',
            'ひかる',
            'ひかん',
            'ひくい',
            'ひけつ',
            'ひこうき',
            'ひこく',
            'ひさい',
            'ひさしぶり',
            'ひさん',
            'びじゅつかん',
            'ひしょ',
            'ひそか',
            'ひそむ',
            'ひたむき',
            'ひだり',
            'ひたる',
            'ひつぎ',
            'ひっこし',
            'ひっし',
            'ひつじゅひん',
            'ひっす',
            'ひつぜん',
            'ぴったり',
            'ぴっちり',
            'ひつよう',
            'ひてい',
            'ひとごみ',
            'ひなまつり',
            'ひなん',
            'ひねる',
            'ひはん',
            'ひびく',
            'ひひょう',
            'ひほう',
            'ひまわり',
            'ひまん',
            'ひみつ',
            'ひめい',
            'ひめじし',
            'ひやけ',
            'ひやす',
            'ひよう',
            'びょうき',
            'ひらがな',
            'ひらく',
            'ひりつ',
            'ひりょう',
            'ひるま',
            'ひるやすみ',
            'ひれい',
            'ひろい',
            'ひろう',
            'ひろき',
            'ひろゆき',
            'ひんかく',
            'ひんけつ',
            'ひんこん',
            'ひんしゅ',
            'ひんそう',
            'ぴんち',
            'ひんぱん',
            'びんぼう',
            'ふあん',
            'ふいうち',
            'ふうけい',
            'ふうせん',
            'ぷうたろう',
            'ふうとう',
            'ふうふ',
            'ふえる',
            'ふおん',
            'ふかい',
            'ふきん',
            'ふくざつ',
            'ふくぶくろ',
            'ふこう',
            'ふさい',
            'ふしぎ',
            'ふじみ',
            'ふすま',
            'ふせい',
            'ふせぐ',
            'ふそく',
            'ぶたにく',
            'ふたん',
            'ふちょう',
            'ふつう',
            'ふつか',
            'ふっかつ',
            'ふっき',
            'ふっこく',
            'ぶどう',
            'ふとる',
            'ふとん',
            'ふのう',
            'ふはい',
            'ふひょう',
            'ふへん',
            'ふまん',
            'ふみん',
            'ふめつ',
            'ふめん',
            'ふよう',
            'ふりこ',
            'ふりる',
            'ふるい',
            'ふんいき',
            'ぶんがく',
            'ぶんぐ',
            'ふんしつ',
            'ぶんせき',
            'ふんそう',
            'ぶんぽう',
            'へいあん',
            'へいおん',
            'へいがい',
            'へいき',
            'へいげん',
            'へいこう',
            'へいさ',
            'へいしゃ',
            'へいせつ',
            'へいそ',
            'へいたく',
            'へいてん',
            'へいねつ',
            'へいわ',
            'へきが',
            'へこむ',
            'べにいろ',
            'べにしょうが',
            'へらす',
            'へんかん',
            'べんきょう',
            'べんごし',
            'へんさい',
            'へんたい',
            'べんり',
            'ほあん',
            'ほいく',
            'ぼうぎょ',
            'ほうこく',
            'ほうそう',
            'ほうほう',
            'ほうもん',
            'ほうりつ',
            'ほえる',
            'ほおん',
            'ほかん',
            'ほきょう',
            'ぼきん',
            'ほくろ',
            'ほけつ',
            'ほけん',
            'ほこう',
            'ほこる',
            'ほしい',
            'ほしつ',
            'ほしゅ',
            'ほしょう',
            'ほせい',
            'ほそい',
            'ほそく',
            'ほたて',
            'ほたる',
            'ぽちぶくろ',
            'ほっきょく',
            'ほっさ',
            'ほったん',
            'ほとんど',
            'ほめる',
            'ほんい',
            'ほんき',
            'ほんけ',
            'ほんしつ',
            'ほんやく',
            'まいにち',
            'まかい',
            'まかせる',
            'まがる',
            'まける',
            'まこと',
            'まさつ',
            'まじめ',
            'ますく',
            'まぜる',
            'まつり',
            'まとめ',
            'まなぶ',
            'まぬけ',
            'まねく',
            'まほう',
            'まもる',
            'まゆげ',
            'まよう',
            'まろやか',
            'まわす',
            'まわり',
            'まわる',
            'まんが',
            'まんきつ',
            'まんぞく',
            'まんなか',
            'みいら',
            'みうち',
            'みえる',
            'みがく',
            'みかた',
            'みかん',
            'みけん',
            'みこん',
            'みじかい',
            'みすい',
            'みすえる',
            'みせる',
            'みっか',
            'みつかる',
            'みつける',
            'みてい',
            'みとめる',
            'みなと',
            'みなみかさい',
            'みねらる',
            'みのう',
            'みのがす',
            'みほん',
            'みもと',
            'みやげ',
            'みらい',
            'みりょく',
            'みわく',
            'みんか',
            'みんぞく',
            'むいか',
            'むえき',
            'むえん',
            'むかい',
            'むかう',
            'むかえ',
            'むかし',
            'むぎちゃ',
            'むける',
            'むげん',
            'むさぼる',
            'むしあつい',
            'むしば',
            'むじゅん',
            'むしろ',
            'むすう',
            'むすこ',
            'むすぶ',
            'むすめ',
            'むせる',
            'むせん',
            'むちゅう',
            'むなしい',
            'むのう',
            'むやみ',
            'むよう',
            'むらさき',
            'むりょう',
            'むろん',
            'めいあん',
            'めいうん',
            'めいえん',
            'めいかく',
            'めいきょく',
            'めいさい',
            'めいし',
            'めいそう',
            'めいぶつ',
            'めいれい',
            'めいわく',
            'めぐまれる',
            'めざす',
            'めした',
            'めずらしい',
            'めだつ',
            'めまい',
            'めやす',
            'めんきょ',
            'めんせき',
            'めんどう',
            'もうしあげる',
            'もうどうけん',
            'もえる',
            'もくし',
            'もくてき',
            'もくようび',
            'もちろん',
            'もどる',
            'もらう',
            'もんく',
            'もんだい',
            'やおや',
            'やける',
            'やさい',
            'やさしい',
            'やすい',
            'やすたろう',
            'やすみ',
            'やせる',
            'やそう',
            'やたい',
            'やちん',
            'やっと',
            'やっぱり',
            'やぶる',
            'やめる',
            'ややこしい',
            'やよい',
            'やわらかい',
            'ゆうき',
            'ゆうびんきょく',
            'ゆうべ',
            'ゆうめい',
            'ゆけつ',
            'ゆしゅつ',
            'ゆせん',
            'ゆそう',
            'ゆたか',
            'ゆちゃく',
            'ゆでる',
            'ゆにゅう',
            'ゆびわ',
            'ゆらい',
            'ゆれる',
            'ようい',
            'ようか',
            'ようきゅう',
            'ようじ',
            'ようす',
            'ようちえん',
            'よかぜ',
            'よかん',
            'よきん',
            'よくせい',
            'よくぼう',
            'よけい',
            'よごれる',
            'よさん',
            'よしゅう',
            'よそう',
            'よそく',
            'よっか',
            'よてい',
            'よどがわく',
            'よねつ',
            'よやく',
            'よゆう',
            'よろこぶ',
            'よろしい',
            'らいう',
            'らくがき',
            'らくご',
            'らくさつ',
            'らくだ',
            'らしんばん',
            'らせん',
            'らぞく',
            'らたい',
            'らっか',
            'られつ',
            'りえき',
            'りかい',
            'りきさく',
            'りきせつ',
            'りくぐん',
            'りくつ',
            'りけん',
            'りこう',
            'りせい',
            'りそう',
            'りそく',
            'りてん',
            'りねん',
            'りゆう',
            'りゅうがく',
            'りよう',
            'りょうり',
            'りょかん',
            'りょくちゃ',
            'りょこう',
            'りりく',
            'りれき',
            'りろん',
            'りんご',
            'るいけい',
            'るいさい',
            'るいじ',
            'るいせき',
            'るすばん',
            'るりがわら',
            'れいかん',
            'れいぎ',
            'れいせい',
            'れいぞうこ',
            'れいとう',
            'れいぼう',
            'れきし',
            'れきだい',
            'れんあい',
            'れんけい',
            'れんこん',
            'れんさい',
            'れんしゅう',
            'れんぞく',
            'れんらく',
            'ろうか',
            'ろうご',
            'ろうじん',
            'ろうそく',
            'ろくが',
            'ろこつ',
            'ろじうら',
            'ろしゅつ',
            'ろせん',
            'ろてん',
            'ろめん',
            'ろれつ',
            'ろんぎ',
            'ろんぱ',
            'ろんぶん',
            'ろんり',
            'わかす',
            'わかめ',
            'わかやま',
            'わかれる',
            'わしつ',
            'わじまし',
            'わすれもの',
            'わらう',
            'われる',
          ];
        },
        {},
      ],
      57: [
        function (require, module, exports) {
          module.exports = [
            '가격',
            '가끔',
            '가난',
            '가능',
            '가득',
            '가르침',
            '가뭄',
            '가방',
            '가상',
            '가슴',
            '가운데',
            '가을',
            '가이드',
            '가입',
            '가장',
            '가정',
            '가족',
            '가죽',
            '각오',
            '각자',
            '간격',
            '간부',
            '간섭',
            '간장',
            '간접',
            '간판',
            '갈등',
            '갈비',
            '갈색',
            '갈증',
            '감각',
            '감기',
            '감소',
            '감수성',
            '감자',
            '감정',
            '갑자기',
            '강남',
            '강당',
            '강도',
            '강력히',
            '강변',
            '강북',
            '강사',
            '강수량',
            '강아지',
            '강원도',
            '강의',
            '강제',
            '강조',
            '같이',
            '개구리',
            '개나리',
            '개방',
            '개별',
            '개선',
            '개성',
            '개인',
            '객관적',
            '거실',
            '거액',
            '거울',
            '거짓',
            '거품',
            '걱정',
            '건강',
            '건물',
            '건설',
            '건조',
            '건축',
            '걸음',
            '검사',
            '검토',
            '게시판',
            '게임',
            '겨울',
            '견해',
            '결과',
            '결국',
            '결론',
            '결석',
            '결승',
            '결심',
            '결정',
            '결혼',
            '경계',
            '경고',
            '경기',
            '경력',
            '경복궁',
            '경비',
            '경상도',
            '경영',
            '경우',
            '경쟁',
            '경제',
            '경주',
            '경찰',
            '경치',
            '경향',
            '경험',
            '계곡',
            '계단',
            '계란',
            '계산',
            '계속',
            '계약',
            '계절',
            '계층',
            '계획',
            '고객',
            '고구려',
            '고궁',
            '고급',
            '고등학생',
            '고무신',
            '고민',
            '고양이',
            '고장',
            '고전',
            '고집',
            '고춧가루',
            '고통',
            '고향',
            '곡식',
            '골목',
            '골짜기',
            '골프',
            '공간',
            '공개',
            '공격',
            '공군',
            '공급',
            '공기',
            '공동',
            '공무원',
            '공부',
            '공사',
            '공식',
            '공업',
            '공연',
            '공원',
            '공장',
            '공짜',
            '공책',
            '공통',
            '공포',
            '공항',
            '공휴일',
            '과목',
            '과일',
            '과장',
            '과정',
            '과학',
            '관객',
            '관계',
            '관광',
            '관념',
            '관람',
            '관련',
            '관리',
            '관습',
            '관심',
            '관점',
            '관찰',
            '광경',
            '광고',
            '광장',
            '광주',
            '괴로움',
            '굉장히',
            '교과서',
            '교문',
            '교복',
            '교실',
            '교양',
            '교육',
            '교장',
            '교직',
            '교통',
            '교환',
            '교훈',
            '구경',
            '구름',
            '구멍',
            '구별',
            '구분',
            '구석',
            '구성',
            '구속',
            '구역',
            '구입',
            '구청',
            '구체적',
            '국가',
            '국기',
            '국내',
            '국립',
            '국물',
            '국민',
            '국수',
            '국어',
            '국왕',
            '국적',
            '국제',
            '국회',
            '군대',
            '군사',
            '군인',
            '궁극적',
            '권리',
            '권위',
            '권투',
            '귀국',
            '귀신',
            '규정',
            '규칙',
            '균형',
            '그날',
            '그냥',
            '그늘',
            '그러나',
            '그룹',
            '그릇',
            '그림',
            '그제서야',
            '그토록',
            '극복',
            '극히',
            '근거',
            '근교',
            '근래',
            '근로',
            '근무',
            '근본',
            '근원',
            '근육',
            '근처',
            '글씨',
            '글자',
            '금강산',
            '금고',
            '금년',
            '금메달',
            '금액',
            '금연',
            '금요일',
            '금지',
            '긍정적',
            '기간',
            '기관',
            '기념',
            '기능',
            '기독교',
            '기둥',
            '기록',
            '기름',
            '기법',
            '기본',
            '기분',
            '기쁨',
            '기숙사',
            '기술',
            '기억',
            '기업',
            '기온',
            '기운',
            '기원',
            '기적',
            '기준',
            '기침',
            '기혼',
            '기획',
            '긴급',
            '긴장',
            '길이',
            '김밥',
            '김치',
            '김포공항',
            '깍두기',
            '깜빡',
            '깨달음',
            '깨소금',
            '껍질',
            '꼭대기',
            '꽃잎',
            '나들이',
            '나란히',
            '나머지',
            '나물',
            '나침반',
            '나흘',
            '낙엽',
            '난방',
            '날개',
            '날씨',
            '날짜',
            '남녀',
            '남대문',
            '남매',
            '남산',
            '남자',
            '남편',
            '남학생',
            '낭비',
            '낱말',
            '내년',
            '내용',
            '내일',
            '냄비',
            '냄새',
            '냇물',
            '냉동',
            '냉면',
            '냉방',
            '냉장고',
            '넥타이',
            '넷째',
            '노동',
            '노란색',
            '노력',
            '노인',
            '녹음',
            '녹차',
            '녹화',
            '논리',
            '논문',
            '논쟁',
            '놀이',
            '농구',
            '농담',
            '농민',
            '농부',
            '농업',
            '농장',
            '농촌',
            '높이',
            '눈동자',
            '눈물',
            '눈썹',
            '뉴욕',
            '느낌',
            '늑대',
            '능동적',
            '능력',
            '다방',
            '다양성',
            '다음',
            '다이어트',
            '다행',
            '단계',
            '단골',
            '단독',
            '단맛',
            '단순',
            '단어',
            '단위',
            '단점',
            '단체',
            '단추',
            '단편',
            '단풍',
            '달걀',
            '달러',
            '달력',
            '달리',
            '닭고기',
            '담당',
            '담배',
            '담요',
            '담임',
            '답변',
            '답장',
            '당근',
            '당분간',
            '당연히',
            '당장',
            '대규모',
            '대낮',
            '대단히',
            '대답',
            '대도시',
            '대략',
            '대량',
            '대륙',
            '대문',
            '대부분',
            '대신',
            '대응',
            '대장',
            '대전',
            '대접',
            '대중',
            '대책',
            '대출',
            '대충',
            '대통령',
            '대학',
            '대한민국',
            '대합실',
            '대형',
            '덩어리',
            '데이트',
            '도대체',
            '도덕',
            '도둑',
            '도망',
            '도서관',
            '도심',
            '도움',
            '도입',
            '도자기',
            '도저히',
            '도전',
            '도중',
            '도착',
            '독감',
            '독립',
            '독서',
            '독일',
            '독창적',
            '동화책',
            '뒷모습',
            '뒷산',
            '딸아이',
            '마누라',
            '마늘',
            '마당',
            '마라톤',
            '마련',
            '마무리',
            '마사지',
            '마약',
            '마요네즈',
            '마을',
            '마음',
            '마이크',
            '마중',
            '마지막',
            '마찬가지',
            '마찰',
            '마흔',
            '막걸리',
            '막내',
            '막상',
            '만남',
            '만두',
            '만세',
            '만약',
            '만일',
            '만점',
            '만족',
            '만화',
            '많이',
            '말기',
            '말씀',
            '말투',
            '맘대로',
            '망원경',
            '매년',
            '매달',
            '매력',
            '매번',
            '매스컴',
            '매일',
            '매장',
            '맥주',
            '먹이',
            '먼저',
            '먼지',
            '멀리',
            '메일',
            '며느리',
            '며칠',
            '면담',
            '멸치',
            '명단',
            '명령',
            '명예',
            '명의',
            '명절',
            '명칭',
            '명함',
            '모금',
            '모니터',
            '모델',
            '모든',
            '모범',
            '모습',
            '모양',
            '모임',
            '모조리',
            '모집',
            '모퉁이',
            '목걸이',
            '목록',
            '목사',
            '목소리',
            '목숨',
            '목적',
            '목표',
            '몰래',
            '몸매',
            '몸무게',
            '몸살',
            '몸속',
            '몸짓',
            '몸통',
            '몹시',
            '무관심',
            '무궁화',
            '무더위',
            '무덤',
            '무릎',
            '무슨',
            '무엇',
            '무역',
            '무용',
            '무조건',
            '무지개',
            '무척',
            '문구',
            '문득',
            '문법',
            '문서',
            '문제',
            '문학',
            '문화',
            '물가',
            '물건',
            '물결',
            '물고기',
            '물론',
            '물리학',
            '물음',
            '물질',
            '물체',
            '미국',
            '미디어',
            '미사일',
            '미술',
            '미역',
            '미용실',
            '미움',
            '미인',
            '미팅',
            '미혼',
            '민간',
            '민족',
            '민주',
            '믿음',
            '밀가루',
            '밀리미터',
            '밑바닥',
            '바가지',
            '바구니',
            '바나나',
            '바늘',
            '바닥',
            '바닷가',
            '바람',
            '바이러스',
            '바탕',
            '박물관',
            '박사',
            '박수',
            '반대',
            '반드시',
            '반말',
            '반발',
            '반성',
            '반응',
            '반장',
            '반죽',
            '반지',
            '반찬',
            '받침',
            '발가락',
            '발걸음',
            '발견',
            '발달',
            '발레',
            '발목',
            '발바닥',
            '발생',
            '발음',
            '발자국',
            '발전',
            '발톱',
            '발표',
            '밤하늘',
            '밥그릇',
            '밥맛',
            '밥상',
            '밥솥',
            '방금',
            '방면',
            '방문',
            '방바닥',
            '방법',
            '방송',
            '방식',
            '방안',
            '방울',
            '방지',
            '방학',
            '방해',
            '방향',
            '배경',
            '배꼽',
            '배달',
            '배드민턴',
            '백두산',
            '백색',
            '백성',
            '백인',
            '백제',
            '백화점',
            '버릇',
            '버섯',
            '버튼',
            '번개',
            '번역',
            '번지',
            '번호',
            '벌금',
            '벌레',
            '벌써',
            '범위',
            '범인',
            '범죄',
            '법률',
            '법원',
            '법적',
            '법칙',
            '베이징',
            '벨트',
            '변경',
            '변동',
            '변명',
            '변신',
            '변호사',
            '변화',
            '별도',
            '별명',
            '별일',
            '병실',
            '병아리',
            '병원',
            '보관',
            '보너스',
            '보라색',
            '보람',
            '보름',
            '보상',
            '보안',
            '보자기',
            '보장',
            '보전',
            '보존',
            '보통',
            '보편적',
            '보험',
            '복도',
            '복사',
            '복숭아',
            '복습',
            '볶음',
            '본격적',
            '본래',
            '본부',
            '본사',
            '본성',
            '본인',
            '본질',
            '볼펜',
            '봉사',
            '봉지',
            '봉투',
            '부근',
            '부끄러움',
            '부담',
            '부동산',
            '부문',
            '부분',
            '부산',
            '부상',
            '부엌',
            '부인',
            '부작용',
            '부장',
            '부정',
            '부족',
            '부지런히',
            '부친',
            '부탁',
            '부품',
            '부회장',
            '북부',
            '북한',
            '분노',
            '분량',
            '분리',
            '분명',
            '분석',
            '분야',
            '분위기',
            '분필',
            '분홍색',
            '불고기',
            '불과',
            '불교',
            '불꽃',
            '불만',
            '불법',
            '불빛',
            '불안',
            '불이익',
            '불행',
            '브랜드',
            '비극',
            '비난',
            '비닐',
            '비둘기',
            '비디오',
            '비로소',
            '비만',
            '비명',
            '비밀',
            '비바람',
            '비빔밥',
            '비상',
            '비용',
            '비율',
            '비중',
            '비타민',
            '비판',
            '빌딩',
            '빗물',
            '빗방울',
            '빗줄기',
            '빛깔',
            '빨간색',
            '빨래',
            '빨리',
            '사건',
            '사계절',
            '사나이',
            '사냥',
            '사람',
            '사랑',
            '사립',
            '사모님',
            '사물',
            '사방',
            '사상',
            '사생활',
            '사설',
            '사슴',
            '사실',
            '사업',
            '사용',
            '사월',
            '사장',
            '사전',
            '사진',
            '사촌',
            '사춘기',
            '사탕',
            '사투리',
            '사흘',
            '산길',
            '산부인과',
            '산업',
            '산책',
            '살림',
            '살인',
            '살짝',
            '삼계탕',
            '삼국',
            '삼십',
            '삼월',
            '삼촌',
            '상관',
            '상금',
            '상대',
            '상류',
            '상반기',
            '상상',
            '상식',
            '상업',
            '상인',
            '상자',
            '상점',
            '상처',
            '상추',
            '상태',
            '상표',
            '상품',
            '상황',
            '새벽',
            '색깔',
            '색연필',
            '생각',
            '생명',
            '생물',
            '생방송',
            '생산',
            '생선',
            '생신',
            '생일',
            '생활',
            '서랍',
            '서른',
            '서명',
            '서민',
            '서비스',
            '서양',
            '서울',
            '서적',
            '서점',
            '서쪽',
            '서클',
            '석사',
            '석유',
            '선거',
            '선물',
            '선배',
            '선생',
            '선수',
            '선원',
            '선장',
            '선전',
            '선택',
            '선풍기',
            '설거지',
            '설날',
            '설렁탕',
            '설명',
            '설문',
            '설사',
            '설악산',
            '설치',
            '설탕',
            '섭씨',
            '성공',
            '성당',
            '성명',
            '성별',
            '성인',
            '성장',
            '성적',
            '성질',
            '성함',
            '세금',
            '세미나',
            '세상',
            '세월',
            '세종대왕',
            '세탁',
            '센터',
            '센티미터',
            '셋째',
            '소규모',
            '소극적',
            '소금',
            '소나기',
            '소년',
            '소득',
            '소망',
            '소문',
            '소설',
            '소속',
            '소아과',
            '소용',
            '소원',
            '소음',
            '소중히',
            '소지품',
            '소질',
            '소풍',
            '소형',
            '속담',
            '속도',
            '속옷',
            '손가락',
            '손길',
            '손녀',
            '손님',
            '손등',
            '손목',
            '손뼉',
            '손실',
            '손질',
            '손톱',
            '손해',
            '솔직히',
            '솜씨',
            '송아지',
            '송이',
            '송편',
            '쇠고기',
            '쇼핑',
            '수건',
            '수년',
            '수단',
            '수돗물',
            '수동적',
            '수면',
            '수명',
            '수박',
            '수상',
            '수석',
            '수술',
            '수시로',
            '수업',
            '수염',
            '수영',
            '수입',
            '수준',
            '수집',
            '수출',
            '수컷',
            '수필',
            '수학',
            '수험생',
            '수화기',
            '숙녀',
            '숙소',
            '숙제',
            '순간',
            '순서',
            '순수',
            '순식간',
            '순위',
            '숟가락',
            '술병',
            '술집',
            '숫자',
            '스님',
            '스물',
            '스스로',
            '스승',
            '스웨터',
            '스위치',
            '스케이트',
            '스튜디오',
            '스트레스',
            '스포츠',
            '슬쩍',
            '슬픔',
            '습관',
            '습기',
            '승객',
            '승리',
            '승부',
            '승용차',
            '승진',
            '시각',
            '시간',
            '시골',
            '시금치',
            '시나리오',
            '시댁',
            '시리즈',
            '시멘트',
            '시민',
            '시부모',
            '시선',
            '시설',
            '시스템',
            '시아버지',
            '시어머니',
            '시월',
            '시인',
            '시일',
            '시작',
            '시장',
            '시절',
            '시점',
            '시중',
            '시즌',
            '시집',
            '시청',
            '시합',
            '시험',
            '식구',
            '식기',
            '식당',
            '식량',
            '식료품',
            '식물',
            '식빵',
            '식사',
            '식생활',
            '식초',
            '식탁',
            '식품',
            '신고',
            '신규',
            '신념',
            '신문',
            '신발',
            '신비',
            '신사',
            '신세',
            '신용',
            '신제품',
            '신청',
            '신체',
            '신화',
            '실감',
            '실내',
            '실력',
            '실례',
            '실망',
            '실수',
            '실습',
            '실시',
            '실장',
            '실정',
            '실질적',
            '실천',
            '실체',
            '실컷',
            '실태',
            '실패',
            '실험',
            '실현',
            '심리',
            '심부름',
            '심사',
            '심장',
            '심정',
            '심판',
            '쌍둥이',
            '씨름',
            '씨앗',
            '아가씨',
            '아나운서',
            '아드님',
            '아들',
            '아쉬움',
            '아스팔트',
            '아시아',
            '아울러',
            '아저씨',
            '아줌마',
            '아직',
            '아침',
            '아파트',
            '아프리카',
            '아픔',
            '아홉',
            '아흔',
            '악기',
            '악몽',
            '악수',
            '안개',
            '안경',
            '안과',
            '안내',
            '안녕',
            '안동',
            '안방',
            '안부',
            '안주',
            '알루미늄',
            '알코올',
            '암시',
            '암컷',
            '압력',
            '앞날',
            '앞문',
            '애인',
            '애정',
            '액수',
            '앨범',
            '야간',
            '야단',
            '야옹',
            '약간',
            '약국',
            '약속',
            '약수',
            '약점',
            '약품',
            '약혼녀',
            '양념',
            '양력',
            '양말',
            '양배추',
            '양주',
            '양파',
            '어둠',
            '어려움',
            '어른',
            '어젯밤',
            '어쨌든',
            '어쩌다가',
            '어쩐지',
            '언니',
            '언덕',
            '언론',
            '언어',
            '얼굴',
            '얼른',
            '얼음',
            '얼핏',
            '엄마',
            '업무',
            '업종',
            '업체',
            '엉덩이',
            '엉망',
            '엉터리',
            '엊그제',
            '에너지',
            '에어컨',
            '엔진',
            '여건',
            '여고생',
            '여관',
            '여군',
            '여권',
            '여대생',
            '여덟',
            '여동생',
            '여든',
            '여론',
            '여름',
            '여섯',
            '여성',
            '여왕',
            '여인',
            '여전히',
            '여직원',
            '여학생',
            '여행',
            '역사',
            '역시',
            '역할',
            '연결',
            '연구',
            '연극',
            '연기',
            '연락',
            '연설',
            '연세',
            '연속',
            '연습',
            '연애',
            '연예인',
            '연인',
            '연장',
            '연주',
            '연출',
            '연필',
            '연합',
            '연휴',
            '열기',
            '열매',
            '열쇠',
            '열심히',
            '열정',
            '열차',
            '열흘',
            '염려',
            '엽서',
            '영국',
            '영남',
            '영상',
            '영양',
            '영역',
            '영웅',
            '영원히',
            '영하',
            '영향',
            '영혼',
            '영화',
            '옆구리',
            '옆방',
            '옆집',
            '예감',
            '예금',
            '예방',
            '예산',
            '예상',
            '예선',
            '예술',
            '예습',
            '예식장',
            '예약',
            '예전',
            '예절',
            '예정',
            '예컨대',
            '옛날',
            '오늘',
            '오락',
            '오랫동안',
            '오렌지',
            '오로지',
            '오른발',
            '오븐',
            '오십',
            '오염',
            '오월',
            '오전',
            '오직',
            '오징어',
            '오페라',
            '오피스텔',
            '오히려',
            '옥상',
            '옥수수',
            '온갖',
            '온라인',
            '온몸',
            '온종일',
            '온통',
            '올가을',
            '올림픽',
            '올해',
            '옷차림',
            '와이셔츠',
            '와인',
            '완성',
            '완전',
            '왕비',
            '왕자',
            '왜냐하면',
            '왠지',
            '외갓집',
            '외국',
            '외로움',
            '외삼촌',
            '외출',
            '외침',
            '외할머니',
            '왼발',
            '왼손',
            '왼쪽',
            '요금',
            '요일',
            '요즘',
            '요청',
            '용기',
            '용서',
            '용어',
            '우산',
            '우선',
            '우승',
            '우연히',
            '우정',
            '우체국',
            '우편',
            '운동',
            '운명',
            '운반',
            '운전',
            '운행',
            '울산',
            '울음',
            '움직임',
            '웃어른',
            '웃음',
            '워낙',
            '원고',
            '원래',
            '원서',
            '원숭이',
            '원인',
            '원장',
            '원피스',
            '월급',
            '월드컵',
            '월세',
            '월요일',
            '웨이터',
            '위반',
            '위법',
            '위성',
            '위원',
            '위험',
            '위협',
            '윗사람',
            '유난히',
            '유럽',
            '유명',
            '유물',
            '유산',
            '유적',
            '유치원',
            '유학',
            '유행',
            '유형',
            '육군',
            '육상',
            '육십',
            '육체',
            '은행',
            '음력',
            '음료',
            '음반',
            '음성',
            '음식',
            '음악',
            '음주',
            '의견',
            '의논',
            '의문',
            '의복',
            '의식',
            '의심',
            '의외로',
            '의욕',
            '의원',
            '의학',
            '이것',
            '이곳',
            '이념',
            '이놈',
            '이달',
            '이대로',
            '이동',
            '이렇게',
            '이력서',
            '이론적',
            '이름',
            '이민',
            '이발소',
            '이별',
            '이불',
            '이빨',
            '이상',
            '이성',
            '이슬',
            '이야기',
            '이용',
            '이웃',
            '이월',
            '이윽고',
            '이익',
            '이전',
            '이중',
            '이튿날',
            '이틀',
            '이혼',
            '인간',
            '인격',
            '인공',
            '인구',
            '인근',
            '인기',
            '인도',
            '인류',
            '인물',
            '인생',
            '인쇄',
            '인연',
            '인원',
            '인재',
            '인종',
            '인천',
            '인체',
            '인터넷',
            '인하',
            '인형',
            '일곱',
            '일기',
            '일단',
            '일대',
            '일등',
            '일반',
            '일본',
            '일부',
            '일상',
            '일생',
            '일손',
            '일요일',
            '일월',
            '일정',
            '일종',
            '일주일',
            '일찍',
            '일체',
            '일치',
            '일행',
            '일회용',
            '임금',
            '임무',
            '입대',
            '입력',
            '입맛',
            '입사',
            '입술',
            '입시',
            '입원',
            '입장',
            '입학',
            '자가용',
            '자격',
            '자극',
            '자동',
            '자랑',
            '자부심',
            '자식',
            '자신',
            '자연',
            '자원',
            '자율',
            '자전거',
            '자정',
            '자존심',
            '자판',
            '작가',
            '작년',
            '작성',
            '작업',
            '작용',
            '작은딸',
            '작품',
            '잔디',
            '잔뜩',
            '잔치',
            '잘못',
            '잠깐',
            '잠수함',
            '잠시',
            '잠옷',
            '잠자리',
            '잡지',
            '장관',
            '장군',
            '장기간',
            '장래',
            '장례',
            '장르',
            '장마',
            '장면',
            '장모',
            '장미',
            '장비',
            '장사',
            '장소',
            '장식',
            '장애인',
            '장인',
            '장점',
            '장차',
            '장학금',
            '재능',
            '재빨리',
            '재산',
            '재생',
            '재작년',
            '재정',
            '재채기',
            '재판',
            '재학',
            '재활용',
            '저것',
            '저고리',
            '저곳',
            '저녁',
            '저런',
            '저렇게',
            '저번',
            '저울',
            '저절로',
            '저축',
            '적극',
            '적당히',
            '적성',
            '적용',
            '적응',
            '전개',
            '전공',
            '전기',
            '전달',
            '전라도',
            '전망',
            '전문',
            '전반',
            '전부',
            '전세',
            '전시',
            '전용',
            '전자',
            '전쟁',
            '전주',
            '전철',
            '전체',
            '전통',
            '전혀',
            '전후',
            '절대',
            '절망',
            '절반',
            '절약',
            '절차',
            '점검',
            '점수',
            '점심',
            '점원',
            '점점',
            '점차',
            '접근',
            '접시',
            '접촉',
            '젓가락',
            '정거장',
            '정도',
            '정류장',
            '정리',
            '정말',
            '정면',
            '정문',
            '정반대',
            '정보',
            '정부',
            '정비',
            '정상',
            '정성',
            '정오',
            '정원',
            '정장',
            '정지',
            '정치',
            '정확히',
            '제공',
            '제과점',
            '제대로',
            '제목',
            '제발',
            '제법',
            '제삿날',
            '제안',
            '제일',
            '제작',
            '제주도',
            '제출',
            '제품',
            '제한',
            '조각',
            '조건',
            '조금',
            '조깅',
            '조명',
            '조미료',
            '조상',
            '조선',
            '조용히',
            '조절',
            '조정',
            '조직',
            '존댓말',
            '존재',
            '졸업',
            '졸음',
            '종교',
            '종로',
            '종류',
            '종소리',
            '종업원',
            '종종',
            '종합',
            '좌석',
            '죄인',
            '주관적',
            '주름',
            '주말',
            '주머니',
            '주먹',
            '주문',
            '주민',
            '주방',
            '주변',
            '주식',
            '주인',
            '주일',
            '주장',
            '주전자',
            '주택',
            '준비',
            '줄거리',
            '줄기',
            '줄무늬',
            '중간',
            '중계방송',
            '중국',
            '중년',
            '중단',
            '중독',
            '중반',
            '중부',
            '중세',
            '중소기업',
            '중순',
            '중앙',
            '중요',
            '중학교',
            '즉석',
            '즉시',
            '즐거움',
            '증가',
            '증거',
            '증권',
            '증상',
            '증세',
            '지각',
            '지갑',
            '지경',
            '지극히',
            '지금',
            '지급',
            '지능',
            '지름길',
            '지리산',
            '지방',
            '지붕',
            '지식',
            '지역',
            '지우개',
            '지원',
            '지적',
            '지점',
            '지진',
            '지출',
            '직선',
            '직업',
            '직원',
            '직장',
            '진급',
            '진동',
            '진로',
            '진료',
            '진리',
            '진짜',
            '진찰',
            '진출',
            '진통',
            '진행',
            '질문',
            '질병',
            '질서',
            '짐작',
            '집단',
            '집안',
            '집중',
            '짜증',
            '찌꺼기',
            '차남',
            '차라리',
            '차량',
            '차림',
            '차별',
            '차선',
            '차츰',
            '착각',
            '찬물',
            '찬성',
            '참가',
            '참기름',
            '참새',
            '참석',
            '참여',
            '참외',
            '참조',
            '찻잔',
            '창가',
            '창고',
            '창구',
            '창문',
            '창밖',
            '창작',
            '창조',
            '채널',
            '채점',
            '책가방',
            '책방',
            '책상',
            '책임',
            '챔피언',
            '처벌',
            '처음',
            '천국',
            '천둥',
            '천장',
            '천재',
            '천천히',
            '철도',
            '철저히',
            '철학',
            '첫날',
            '첫째',
            '청년',
            '청바지',
            '청소',
            '청춘',
            '체계',
            '체력',
            '체온',
            '체육',
            '체중',
            '체험',
            '초등학생',
            '초반',
            '초밥',
            '초상화',
            '초순',
            '초여름',
            '초원',
            '초저녁',
            '초점',
            '초청',
            '초콜릿',
            '촛불',
            '총각',
            '총리',
            '총장',
            '촬영',
            '최근',
            '최상',
            '최선',
            '최신',
            '최악',
            '최종',
            '추석',
            '추억',
            '추진',
            '추천',
            '추측',
            '축구',
            '축소',
            '축제',
            '축하',
            '출근',
            '출발',
            '출산',
            '출신',
            '출연',
            '출입',
            '출장',
            '출판',
            '충격',
            '충고',
            '충돌',
            '충분히',
            '충청도',
            '취업',
            '취직',
            '취향',
            '치약',
            '친구',
            '친척',
            '칠십',
            '칠월',
            '칠판',
            '침대',
            '침묵',
            '침실',
            '칫솔',
            '칭찬',
            '카메라',
            '카운터',
            '칼국수',
            '캐릭터',
            '캠퍼스',
            '캠페인',
            '커튼',
            '컨디션',
            '컬러',
            '컴퓨터',
            '코끼리',
            '코미디',
            '콘서트',
            '콜라',
            '콤플렉스',
            '콩나물',
            '쾌감',
            '쿠데타',
            '크림',
            '큰길',
            '큰딸',
            '큰소리',
            '큰아들',
            '큰어머니',
            '큰일',
            '큰절',
            '클래식',
            '클럽',
            '킬로',
            '타입',
            '타자기',
            '탁구',
            '탁자',
            '탄생',
            '태권도',
            '태양',
            '태풍',
            '택시',
            '탤런트',
            '터널',
            '터미널',
            '테니스',
            '테스트',
            '테이블',
            '텔레비전',
            '토론',
            '토마토',
            '토요일',
            '통계',
            '통과',
            '통로',
            '통신',
            '통역',
            '통일',
            '통장',
            '통제',
            '통증',
            '통합',
            '통화',
            '퇴근',
            '퇴원',
            '퇴직금',
            '튀김',
            '트럭',
            '특급',
            '특별',
            '특성',
            '특수',
            '특징',
            '특히',
            '튼튼히',
            '티셔츠',
            '파란색',
            '파일',
            '파출소',
            '판결',
            '판단',
            '판매',
            '판사',
            '팔십',
            '팔월',
            '팝송',
            '패션',
            '팩스',
            '팩시밀리',
            '팬티',
            '퍼센트',
            '페인트',
            '편견',
            '편의',
            '편지',
            '편히',
            '평가',
            '평균',
            '평생',
            '평소',
            '평양',
            '평일',
            '평화',
            '포스터',
            '포인트',
            '포장',
            '포함',
            '표면',
            '표정',
            '표준',
            '표현',
            '품목',
            '품질',
            '풍경',
            '풍속',
            '풍습',
            '프랑스',
            '프린터',
            '플라스틱',
            '피곤',
            '피망',
            '피아노',
            '필름',
            '필수',
            '필요',
            '필자',
            '필통',
            '핑계',
            '하느님',
            '하늘',
            '하드웨어',
            '하룻밤',
            '하반기',
            '하숙집',
            '하순',
            '하여튼',
            '하지만',
            '하천',
            '하품',
            '하필',
            '학과',
            '학교',
            '학급',
            '학기',
            '학년',
            '학력',
            '학번',
            '학부모',
            '학비',
            '학생',
            '학술',
            '학습',
            '학용품',
            '학원',
            '학위',
            '학자',
            '학점',
            '한계',
            '한글',
            '한꺼번에',
            '한낮',
            '한눈',
            '한동안',
            '한때',
            '한라산',
            '한마디',
            '한문',
            '한번',
            '한복',
            '한식',
            '한여름',
            '한쪽',
            '할머니',
            '할아버지',
            '할인',
            '함께',
            '함부로',
            '합격',
            '합리적',
            '항공',
            '항구',
            '항상',
            '항의',
            '해결',
            '해군',
            '해답',
            '해당',
            '해물',
            '해석',
            '해설',
            '해수욕장',
            '해안',
            '핵심',
            '핸드백',
            '햄버거',
            '햇볕',
            '햇살',
            '행동',
            '행복',
            '행사',
            '행운',
            '행위',
            '향기',
            '향상',
            '향수',
            '허락',
            '허용',
            '헬기',
            '현관',
            '현금',
            '현대',
            '현상',
            '현실',
            '현장',
            '현재',
            '현지',
            '혈액',
            '협력',
            '형부',
            '형사',
            '형수',
            '형식',
            '형제',
            '형태',
            '형편',
            '혜택',
            '호기심',
            '호남',
            '호랑이',
            '호박',
            '호텔',
            '호흡',
            '혹시',
            '홀로',
            '홈페이지',
            '홍보',
            '홍수',
            '홍차',
            '화면',
            '화분',
            '화살',
            '화요일',
            '화장',
            '화학',
            '확보',
            '확인',
            '확장',
            '확정',
            '환갑',
            '환경',
            '환영',
            '환율',
            '환자',
            '활기',
            '활동',
            '활발히',
            '활용',
            '활짝',
            '회견',
            '회관',
            '회복',
            '회색',
            '회원',
            '회장',
            '회전',
            '횟수',
            '횡단보도',
            '효율적',
            '후반',
            '후춧가루',
            '훈련',
            '훨씬',
            '휴식',
            '휴일',
            '흉내',
            '흐름',
            '흑백',
            '흑인',
            '흔적',
            '흔히',
            '흥미',
            '흥분',
            '희곡',
            '희망',
            '희생',
            '흰색',
            '힘껏',
          ];
        },
        {},
      ],
      58: [
        function (require, module, exports) {
          module.exports = [
            'abacate',
            'abaixo',
            'abalar',
            'abater',
            'abduzir',
            'abelha',
            'aberto',
            'abismo',
            'abotoar',
            'abranger',
            'abreviar',
            'abrigar',
            'abrupto',
            'absinto',
            'absoluto',
            'absurdo',
            'abutre',
            'acabado',
            'acalmar',
            'acampar',
            'acanhar',
            'acaso',
            'aceitar',
            'acelerar',
            'acenar',
            'acervo',
            'acessar',
            'acetona',
            'achatar',
            'acidez',
            'acima',
            'acionado',
            'acirrar',
            'aclamar',
            'aclive',
            'acolhida',
            'acomodar',
            'acoplar',
            'acordar',
            'acumular',
            'acusador',
            'adaptar',
            'adega',
            'adentro',
            'adepto',
            'adequar',
            'aderente',
            'adesivo',
            'adeus',
            'adiante',
            'aditivo',
            'adjetivo',
            'adjunto',
            'admirar',
            'adorar',
            'adquirir',
            'adubo',
            'adverso',
            'advogado',
            'aeronave',
            'afastar',
            'aferir',
            'afetivo',
            'afinador',
            'afivelar',
            'aflito',
            'afluente',
            'afrontar',
            'agachar',
            'agarrar',
            'agasalho',
            'agenciar',
            'agilizar',
            'agiota',
            'agitado',
            'agora',
            'agradar',
            'agreste',
            'agrupar',
            'aguardar',
            'agulha',
            'ajoelhar',
            'ajudar',
            'ajustar',
            'alameda',
            'alarme',
            'alastrar',
            'alavanca',
            'albergue',
            'albino',
            'alcatra',
            'aldeia',
            'alecrim',
            'alegria',
            'alertar',
            'alface',
            'alfinete',
            'algum',
            'alheio',
            'aliar',
            'alicate',
            'alienar',
            'alinhar',
            'aliviar',
            'almofada',
            'alocar',
            'alpiste',
            'alterar',
            'altitude',
            'alucinar',
            'alugar',
            'aluno',
            'alusivo',
            'alvo',
            'amaciar',
            'amador',
            'amarelo',
            'amassar',
            'ambas',
            'ambiente',
            'ameixa',
            'amenizar',
            'amido',
            'amistoso',
            'amizade',
            'amolador',
            'amontoar',
            'amoroso',
            'amostra',
            'amparar',
            'ampliar',
            'ampola',
            'anagrama',
            'analisar',
            'anarquia',
            'anatomia',
            'andaime',
            'anel',
            'anexo',
            'angular',
            'animar',
            'anjo',
            'anomalia',
            'anotado',
            'ansioso',
            'anterior',
            'anuidade',
            'anunciar',
            'anzol',
            'apagador',
            'apalpar',
            'apanhado',
            'apego',
            'apelido',
            'apertada',
            'apesar',
            'apetite',
            'apito',
            'aplauso',
            'aplicada',
            'apoio',
            'apontar',
            'aposta',
            'aprendiz',
            'aprovar',
            'aquecer',
            'arame',
            'aranha',
            'arara',
            'arcada',
            'ardente',
            'areia',
            'arejar',
            'arenito',
            'aresta',
            'argiloso',
            'argola',
            'arma',
            'arquivo',
            'arraial',
            'arrebate',
            'arriscar',
            'arroba',
            'arrumar',
            'arsenal',
            'arterial',
            'artigo',
            'arvoredo',
            'asfaltar',
            'asilado',
            'aspirar',
            'assador',
            'assinar',
            'assoalho',
            'assunto',
            'astral',
            'atacado',
            'atadura',
            'atalho',
            'atarefar',
            'atear',
            'atender',
            'aterro',
            'ateu',
            'atingir',
            'atirador',
            'ativo',
            'atoleiro',
            'atracar',
            'atrevido',
            'atriz',
            'atual',
            'atum',
            'auditor',
            'aumentar',
            'aura',
            'aurora',
            'autismo',
            'autoria',
            'autuar',
            'avaliar',
            'avante',
            'avaria',
            'avental',
            'avesso',
            'aviador',
            'avisar',
            'avulso',
            'axila',
            'azarar',
            'azedo',
            'azeite',
            'azulejo',
            'babar',
            'babosa',
            'bacalhau',
            'bacharel',
            'bacia',
            'bagagem',
            'baiano',
            'bailar',
            'baioneta',
            'bairro',
            'baixista',
            'bajular',
            'baleia',
            'baliza',
            'balsa',
            'banal',
            'bandeira',
            'banho',
            'banir',
            'banquete',
            'barato',
            'barbado',
            'baronesa',
            'barraca',
            'barulho',
            'baseado',
            'bastante',
            'batata',
            'batedor',
            'batida',
            'batom',
            'batucar',
            'baunilha',
            'beber',
            'beijo',
            'beirada',
            'beisebol',
            'beldade',
            'beleza',
            'belga',
            'beliscar',
            'bendito',
            'bengala',
            'benzer',
            'berimbau',
            'berlinda',
            'berro',
            'besouro',
            'bexiga',
            'bezerro',
            'bico',
            'bicudo',
            'bienal',
            'bifocal',
            'bifurcar',
            'bigorna',
            'bilhete',
            'bimestre',
            'bimotor',
            'biologia',
            'biombo',
            'biosfera',
            'bipolar',
            'birrento',
            'biscoito',
            'bisneto',
            'bispo',
            'bissexto',
            'bitola',
            'bizarro',
            'blindado',
            'bloco',
            'bloquear',
            'boato',
            'bobagem',
            'bocado',
            'bocejo',
            'bochecha',
            'boicotar',
            'bolada',
            'boletim',
            'bolha',
            'bolo',
            'bombeiro',
            'bonde',
            'boneco',
            'bonita',
            'borbulha',
            'borda',
            'boreal',
            'borracha',
            'bovino',
            'boxeador',
            'branco',
            'brasa',
            'braveza',
            'breu',
            'briga',
            'brilho',
            'brincar',
            'broa',
            'brochura',
            'bronzear',
            'broto',
            'bruxo',
            'bucha',
            'budismo',
            'bufar',
            'bule',
            'buraco',
            'busca',
            'busto',
            'buzina',
            'cabana',
            'cabelo',
            'cabide',
            'cabo',
            'cabrito',
            'cacau',
            'cacetada',
            'cachorro',
            'cacique',
            'cadastro',
            'cadeado',
            'cafezal',
            'caiaque',
            'caipira',
            'caixote',
            'cajado',
            'caju',
            'calafrio',
            'calcular',
            'caldeira',
            'calibrar',
            'calmante',
            'calota',
            'camada',
            'cambista',
            'camisa',
            'camomila',
            'campanha',
            'camuflar',
            'canavial',
            'cancelar',
            'caneta',
            'canguru',
            'canhoto',
            'canivete',
            'canoa',
            'cansado',
            'cantar',
            'canudo',
            'capacho',
            'capela',
            'capinar',
            'capotar',
            'capricho',
            'captador',
            'capuz',
            'caracol',
            'carbono',
            'cardeal',
            'careca',
            'carimbar',
            'carneiro',
            'carpete',
            'carreira',
            'cartaz',
            'carvalho',
            'casaco',
            'casca',
            'casebre',
            'castelo',
            'casulo',
            'catarata',
            'cativar',
            'caule',
            'causador',
            'cautelar',
            'cavalo',
            'caverna',
            'cebola',
            'cedilha',
            'cegonha',
            'celebrar',
            'celular',
            'cenoura',
            'censo',
            'centeio',
            'cercar',
            'cerrado',
            'certeiro',
            'cerveja',
            'cetim',
            'cevada',
            'chacota',
            'chaleira',
            'chamado',
            'chapada',
            'charme',
            'chatice',
            'chave',
            'chefe',
            'chegada',
            'cheiro',
            'cheque',
            'chicote',
            'chifre',
            'chinelo',
            'chocalho',
            'chover',
            'chumbo',
            'chutar',
            'chuva',
            'cicatriz',
            'ciclone',
            'cidade',
            'cidreira',
            'ciente',
            'cigana',
            'cimento',
            'cinto',
            'cinza',
            'ciranda',
            'circuito',
            'cirurgia',
            'citar',
            'clareza',
            'clero',
            'clicar',
            'clone',
            'clube',
            'coado',
            'coagir',
            'cobaia',
            'cobertor',
            'cobrar',
            'cocada',
            'coelho',
            'coentro',
            'coeso',
            'cogumelo',
            'coibir',
            'coifa',
            'coiote',
            'colar',
            'coleira',
            'colher',
            'colidir',
            'colmeia',
            'colono',
            'coluna',
            'comando',
            'combinar',
            'comentar',
            'comitiva',
            'comover',
            'complexo',
            'comum',
            'concha',
            'condor',
            'conectar',
            'confuso',
            'congelar',
            'conhecer',
            'conjugar',
            'consumir',
            'contrato',
            'convite',
            'cooperar',
            'copeiro',
            'copiador',
            'copo',
            'coquetel',
            'coragem',
            'cordial',
            'corneta',
            'coronha',
            'corporal',
            'correio',
            'cortejo',
            'coruja',
            'corvo',
            'cosseno',
            'costela',
            'cotonete',
            'couro',
            'couve',
            'covil',
            'cozinha',
            'cratera',
            'cravo',
            'creche',
            'credor',
            'creme',
            'crer',
            'crespo',
            'criada',
            'criminal',
            'crioulo',
            'crise',
            'criticar',
            'crosta',
            'crua',
            'cruzeiro',
            'cubano',
            'cueca',
            'cuidado',
            'cujo',
            'culatra',
            'culminar',
            'culpar',
            'cultura',
            'cumprir',
            'cunhado',
            'cupido',
            'curativo',
            'curral',
            'cursar',
            'curto',
            'cuspir',
            'custear',
            'cutelo',
            'damasco',
            'datar',
            'debater',
            'debitar',
            'deboche',
            'debulhar',
            'decalque',
            'decimal',
            'declive',
            'decote',
            'decretar',
            'dedal',
            'dedicado',
            'deduzir',
            'defesa',
            'defumar',
            'degelo',
            'degrau',
            'degustar',
            'deitado',
            'deixar',
            'delator',
            'delegado',
            'delinear',
            'delonga',
            'demanda',
            'demitir',
            'demolido',
            'dentista',
            'depenado',
            'depilar',
            'depois',
            'depressa',
            'depurar',
            'deriva',
            'derramar',
            'desafio',
            'desbotar',
            'descanso',
            'desenho',
            'desfiado',
            'desgaste',
            'desigual',
            'deslize',
            'desmamar',
            'desova',
            'despesa',
            'destaque',
            'desviar',
            'detalhar',
            'detentor',
            'detonar',
            'detrito',
            'deusa',
            'dever',
            'devido',
            'devotado',
            'dezena',
            'diagrama',
            'dialeto',
            'didata',
            'difuso',
            'digitar',
            'dilatado',
            'diluente',
            'diminuir',
            'dinastia',
            'dinheiro',
            'diocese',
            'direto',
            'discreta',
            'disfarce',
            'disparo',
            'disquete',
            'dissipar',
            'distante',
            'ditador',
            'diurno',
            'diverso',
            'divisor',
            'divulgar',
            'dizer',
            'dobrador',
            'dolorido',
            'domador',
            'dominado',
            'donativo',
            'donzela',
            'dormente',
            'dorsal',
            'dosagem',
            'dourado',
            'doutor',
            'drenagem',
            'drible',
            'drogaria',
            'duelar',
            'duende',
            'dueto',
            'duplo',
            'duquesa',
            'durante',
            'duvidoso',
            'eclodir',
            'ecoar',
            'ecologia',
            'edificar',
            'edital',
            'educado',
            'efeito',
            'efetivar',
            'ejetar',
            'elaborar',
            'eleger',
            'eleitor',
            'elenco',
            'elevador',
            'eliminar',
            'elogiar',
            'embargo',
            'embolado',
            'embrulho',
            'embutido',
            'emenda',
            'emergir',
            'emissor',
            'empatia',
            'empenho',
            'empinado',
            'empolgar',
            'emprego',
            'empurrar',
            'emulador',
            'encaixe',
            'encenado',
            'enchente',
            'encontro',
            'endeusar',
            'endossar',
            'enfaixar',
            'enfeite',
            'enfim',
            'engajado',
            'engenho',
            'englobar',
            'engomado',
            'engraxar',
            'enguia',
            'enjoar',
            'enlatar',
            'enquanto',
            'enraizar',
            'enrolado',
            'enrugar',
            'ensaio',
            'enseada',
            'ensino',
            'ensopado',
            'entanto',
            'enteado',
            'entidade',
            'entortar',
            'entrada',
            'entulho',
            'envergar',
            'enviado',
            'envolver',
            'enxame',
            'enxerto',
            'enxofre',
            'enxuto',
            'epiderme',
            'equipar',
            'ereto',
            'erguido',
            'errata',
            'erva',
            'ervilha',
            'esbanjar',
            'esbelto',
            'escama',
            'escola',
            'escrita',
            'escuta',
            'esfinge',
            'esfolar',
            'esfregar',
            'esfumado',
            'esgrima',
            'esmalte',
            'espanto',
            'espelho',
            'espiga',
            'esponja',
            'espreita',
            'espumar',
            'esquerda',
            'estaca',
            'esteira',
            'esticar',
            'estofado',
            'estrela',
            'estudo',
            'esvaziar',
            'etanol',
            'etiqueta',
            'euforia',
            'europeu',
            'evacuar',
            'evaporar',
            'evasivo',
            'eventual',
            'evidente',
            'evoluir',
            'exagero',
            'exalar',
            'examinar',
            'exato',
            'exausto',
            'excesso',
            'excitar',
            'exclamar',
            'executar',
            'exemplo',
            'exibir',
            'exigente',
            'exonerar',
            'expandir',
            'expelir',
            'expirar',
            'explanar',
            'exposto',
            'expresso',
            'expulsar',
            'externo',
            'extinto',
            'extrato',
            'fabricar',
            'fabuloso',
            'faceta',
            'facial',
            'fada',
            'fadiga',
            'faixa',
            'falar',
            'falta',
            'familiar',
            'fandango',
            'fanfarra',
            'fantoche',
            'fardado',
            'farelo',
            'farinha',
            'farofa',
            'farpa',
            'fartura',
            'fatia',
            'fator',
            'favorita',
            'faxina',
            'fazenda',
            'fechado',
            'feijoada',
            'feirante',
            'felino',
            'feminino',
            'fenda',
            'feno',
            'fera',
            'feriado',
            'ferrugem',
            'ferver',
            'festejar',
            'fetal',
            'feudal',
            'fiapo',
            'fibrose',
            'ficar',
            'ficheiro',
            'figurado',
            'fileira',
            'filho',
            'filme',
            'filtrar',
            'firmeza',
            'fisgada',
            'fissura',
            'fita',
            'fivela',
            'fixador',
            'fixo',
            'flacidez',
            'flamingo',
            'flanela',
            'flechada',
            'flora',
            'flutuar',
            'fluxo',
            'focal',
            'focinho',
            'fofocar',
            'fogo',
            'foguete',
            'foice',
            'folgado',
            'folheto',
            'forjar',
            'formiga',
            'forno',
            'forte',
            'fosco',
            'fossa',
            'fragata',
            'fralda',
            'frango',
            'frasco',
            'fraterno',
            'freira',
            'frente',
            'fretar',
            'frieza',
            'friso',
            'fritura',
            'fronha',
            'frustrar',
            'fruteira',
            'fugir',
            'fulano',
            'fuligem',
            'fundar',
            'fungo',
            'funil',
            'furador',
            'furioso',
            'futebol',
            'gabarito',
            'gabinete',
            'gado',
            'gaiato',
            'gaiola',
            'gaivota',
            'galega',
            'galho',
            'galinha',
            'galocha',
            'ganhar',
            'garagem',
            'garfo',
            'gargalo',
            'garimpo',
            'garoupa',
            'garrafa',
            'gasoduto',
            'gasto',
            'gata',
            'gatilho',
            'gaveta',
            'gazela',
            'gelado',
            'geleia',
            'gelo',
            'gemada',
            'gemer',
            'gemido',
            'generoso',
            'gengiva',
            'genial',
            'genoma',
            'genro',
            'geologia',
            'gerador',
            'germinar',
            'gesso',
            'gestor',
            'ginasta',
            'gincana',
            'gingado',
            'girafa',
            'girino',
            'glacial',
            'glicose',
            'global',
            'glorioso',
            'goela',
            'goiaba',
            'golfe',
            'golpear',
            'gordura',
            'gorjeta',
            'gorro',
            'gostoso',
            'goteira',
            'governar',
            'gracejo',
            'gradual',
            'grafite',
            'gralha',
            'grampo',
            'granada',
            'gratuito',
            'graveto',
            'graxa',
            'grego',
            'grelhar',
            'greve',
            'grilo',
            'grisalho',
            'gritaria',
            'grosso',
            'grotesco',
            'grudado',
            'grunhido',
            'gruta',
            'guache',
            'guarani',
            'guaxinim',
            'guerrear',
            'guiar',
            'guincho',
            'guisado',
            'gula',
            'guloso',
            'guru',
            'habitar',
            'harmonia',
            'haste',
            'haver',
            'hectare',
            'herdar',
            'heresia',
            'hesitar',
            'hiato',
            'hibernar',
            'hidratar',
            'hiena',
            'hino',
            'hipismo',
            'hipnose',
            'hipoteca',
            'hoje',
            'holofote',
            'homem',
            'honesto',
            'honrado',
            'hormonal',
            'hospedar',
            'humorado',
            'iate',
            'ideia',
            'idoso',
            'ignorado',
            'igreja',
            'iguana',
            'ileso',
            'ilha',
            'iludido',
            'iluminar',
            'ilustrar',
            'imagem',
            'imediato',
            'imenso',
            'imersivo',
            'iminente',
            'imitador',
            'imortal',
            'impacto',
            'impedir',
            'implante',
            'impor',
            'imprensa',
            'impune',
            'imunizar',
            'inalador',
            'inapto',
            'inativo',
            'incenso',
            'inchar',
            'incidir',
            'incluir',
            'incolor',
            'indeciso',
            'indireto',
            'indutor',
            'ineficaz',
            'inerente',
            'infantil',
            'infestar',
            'infinito',
            'inflamar',
            'informal',
            'infrator',
            'ingerir',
            'inibido',
            'inicial',
            'inimigo',
            'injetar',
            'inocente',
            'inodoro',
            'inovador',
            'inox',
            'inquieto',
            'inscrito',
            'inseto',
            'insistir',
            'inspetor',
            'instalar',
            'insulto',
            'intacto',
            'integral',
            'intimar',
            'intocado',
            'intriga',
            'invasor',
            'inverno',
            'invicto',
            'invocar',
            'iogurte',
            'iraniano',
            'ironizar',
            'irreal',
            'irritado',
            'isca',
            'isento',
            'isolado',
            'isqueiro',
            'italiano',
            'janeiro',
            'jangada',
            'janta',
            'jararaca',
            'jardim',
            'jarro',
            'jasmim',
            'jato',
            'javali',
            'jazida',
            'jejum',
            'joaninha',
            'joelhada',
            'jogador',
            'joia',
            'jornal',
            'jorrar',
            'jovem',
            'juba',
            'judeu',
            'judoca',
            'juiz',
            'julgador',
            'julho',
            'jurado',
            'jurista',
            'juro',
            'justa',
            'labareda',
            'laboral',
            'lacre',
            'lactante',
            'ladrilho',
            'lagarta',
            'lagoa',
            'laje',
            'lamber',
            'lamentar',
            'laminar',
            'lampejo',
            'lanche',
            'lapidar',
            'lapso',
            'laranja',
            'lareira',
            'largura',
            'lasanha',
            'lastro',
            'lateral',
            'latido',
            'lavanda',
            'lavoura',
            'lavrador',
            'laxante',
            'lazer',
            'lealdade',
            'lebre',
            'legado',
            'legendar',
            'legista',
            'leigo',
            'leiloar',
            'leitura',
            'lembrete',
            'leme',
            'lenhador',
            'lentilha',
            'leoa',
            'lesma',
            'leste',
            'letivo',
            'letreiro',
            'levar',
            'leveza',
            'levitar',
            'liberal',
            'libido',
            'liderar',
            'ligar',
            'ligeiro',
            'limitar',
            'limoeiro',
            'limpador',
            'linda',
            'linear',
            'linhagem',
            'liquidez',
            'listagem',
            'lisura',
            'litoral',
            'livro',
            'lixa',
            'lixeira',
            'locador',
            'locutor',
            'lojista',
            'lombo',
            'lona',
            'longe',
            'lontra',
            'lorde',
            'lotado',
            'loteria',
            'loucura',
            'lousa',
            'louvar',
            'luar',
            'lucidez',
            'lucro',
            'luneta',
            'lustre',
            'lutador',
            'luva',
            'macaco',
            'macete',
            'machado',
            'macio',
            'madeira',
            'madrinha',
            'magnata',
            'magreza',
            'maior',
            'mais',
            'malandro',
            'malha',
            'malote',
            'maluco',
            'mamilo',
            'mamoeiro',
            'mamute',
            'manada',
            'mancha',
            'mandato',
            'manequim',
            'manhoso',
            'manivela',
            'manobrar',
            'mansa',
            'manter',
            'manusear',
            'mapeado',
            'maquinar',
            'marcador',
            'maresia',
            'marfim',
            'margem',
            'marinho',
            'marmita',
            'maroto',
            'marquise',
            'marreco',
            'martelo',
            'marujo',
            'mascote',
            'masmorra',
            'massagem',
            'mastigar',
            'matagal',
            'materno',
            'matinal',
            'matutar',
            'maxilar',
            'medalha',
            'medida',
            'medusa',
            'megafone',
            'meiga',
            'melancia',
            'melhor',
            'membro',
            'memorial',
            'menino',
            'menos',
            'mensagem',
            'mental',
            'merecer',
            'mergulho',
            'mesada',
            'mesclar',
            'mesmo',
            'mesquita',
            'mestre',
            'metade',
            'meteoro',
            'metragem',
            'mexer',
            'mexicano',
            'micro',
            'migalha',
            'migrar',
            'milagre',
            'milenar',
            'milhar',
            'mimado',
            'minerar',
            'minhoca',
            'ministro',
            'minoria',
            'miolo',
            'mirante',
            'mirtilo',
            'misturar',
            'mocidade',
            'moderno',
            'modular',
            'moeda',
            'moer',
            'moinho',
            'moita',
            'moldura',
            'moleza',
            'molho',
            'molinete',
            'molusco',
            'montanha',
            'moqueca',
            'morango',
            'morcego',
            'mordomo',
            'morena',
            'mosaico',
            'mosquete',
            'mostarda',
            'motel',
            'motim',
            'moto',
            'motriz',
            'muda',
            'muito',
            'mulata',
            'mulher',
            'multar',
            'mundial',
            'munido',
            'muralha',
            'murcho',
            'muscular',
            'museu',
            'musical',
            'nacional',
            'nadador',
            'naja',
            'namoro',
            'narina',
            'narrado',
            'nascer',
            'nativa',
            'natureza',
            'navalha',
            'navegar',
            'navio',
            'neblina',
            'nebuloso',
            'negativa',
            'negociar',
            'negrito',
            'nervoso',
            'neta',
            'neural',
            'nevasca',
            'nevoeiro',
            'ninar',
            'ninho',
            'nitidez',
            'nivelar',
            'nobreza',
            'noite',
            'noiva',
            'nomear',
            'nominal',
            'nordeste',
            'nortear',
            'notar',
            'noticiar',
            'noturno',
            'novelo',
            'novilho',
            'novo',
            'nublado',
            'nudez',
            'numeral',
            'nupcial',
            'nutrir',
            'nuvem',
            'obcecado',
            'obedecer',
            'objetivo',
            'obrigado',
            'obscuro',
            'obstetra',
            'obter',
            'obturar',
            'ocidente',
            'ocioso',
            'ocorrer',
            'oculista',
            'ocupado',
            'ofegante',
            'ofensiva',
            'oferenda',
            'oficina',
            'ofuscado',
            'ogiva',
            'olaria',
            'oleoso',
            'olhar',
            'oliveira',
            'ombro',
            'omelete',
            'omisso',
            'omitir',
            'ondulado',
            'oneroso',
            'ontem',
            'opcional',
            'operador',
            'oponente',
            'oportuno',
            'oposto',
            'orar',
            'orbitar',
            'ordem',
            'ordinal',
            'orfanato',
            'orgasmo',
            'orgulho',
            'oriental',
            'origem',
            'oriundo',
            'orla',
            'ortodoxo',
            'orvalho',
            'oscilar',
            'ossada',
            'osso',
            'ostentar',
            'otimismo',
            'ousadia',
            'outono',
            'outubro',
            'ouvido',
            'ovelha',
            'ovular',
            'oxidar',
            'oxigenar',
            'pacato',
            'paciente',
            'pacote',
            'pactuar',
            'padaria',
            'padrinho',
            'pagar',
            'pagode',
            'painel',
            'pairar',
            'paisagem',
            'palavra',
            'palestra',
            'palheta',
            'palito',
            'palmada',
            'palpitar',
            'pancada',
            'panela',
            'panfleto',
            'panqueca',
            'pantanal',
            'papagaio',
            'papelada',
            'papiro',
            'parafina',
            'parcial',
            'pardal',
            'parede',
            'partida',
            'pasmo',
            'passado',
            'pastel',
            'patamar',
            'patente',
            'patinar',
            'patrono',
            'paulada',
            'pausar',
            'peculiar',
            'pedalar',
            'pedestre',
            'pediatra',
            'pedra',
            'pegada',
            'peitoral',
            'peixe',
            'pele',
            'pelicano',
            'penca',
            'pendurar',
            'peneira',
            'penhasco',
            'pensador',
            'pente',
            'perceber',
            'perfeito',
            'pergunta',
            'perito',
            'permitir',
            'perna',
            'perplexo',
            'persiana',
            'pertence',
            'peruca',
            'pescado',
            'pesquisa',
            'pessoa',
            'petiscar',
            'piada',
            'picado',
            'piedade',
            'pigmento',
            'pilastra',
            'pilhado',
            'pilotar',
            'pimenta',
            'pincel',
            'pinguim',
            'pinha',
            'pinote',
            'pintar',
            'pioneiro',
            'pipoca',
            'piquete',
            'piranha',
            'pires',
            'pirueta',
            'piscar',
            'pistola',
            'pitanga',
            'pivete',
            'planta',
            'plaqueta',
            'platina',
            'plebeu',
            'plumagem',
            'pluvial',
            'pneu',
            'poda',
            'poeira',
            'poetisa',
            'polegada',
            'policiar',
            'poluente',
            'polvilho',
            'pomar',
            'pomba',
            'ponderar',
            'pontaria',
            'populoso',
            'porta',
            'possuir',
            'postal',
            'pote',
            'poupar',
            'pouso',
            'povoar',
            'praia',
            'prancha',
            'prato',
            'praxe',
            'prece',
            'predador',
            'prefeito',
            'premiar',
            'prensar',
            'preparar',
            'presilha',
            'pretexto',
            'prevenir',
            'prezar',
            'primata',
            'princesa',
            'prisma',
            'privado',
            'processo',
            'produto',
            'profeta',
            'proibido',
            'projeto',
            'prometer',
            'propagar',
            'prosa',
            'protetor',
            'provador',
            'publicar',
            'pudim',
            'pular',
            'pulmonar',
            'pulseira',
            'punhal',
            'punir',
            'pupilo',
            'pureza',
            'puxador',
            'quadra',
            'quantia',
            'quarto',
            'quase',
            'quebrar',
            'queda',
            'queijo',
            'quente',
            'querido',
            'quimono',
            'quina',
            'quiosque',
            'rabanada',
            'rabisco',
            'rachar',
            'racionar',
            'radial',
            'raiar',
            'rainha',
            'raio',
            'raiva',
            'rajada',
            'ralado',
            'ramal',
            'ranger',
            'ranhura',
            'rapadura',
            'rapel',
            'rapidez',
            'raposa',
            'raquete',
            'raridade',
            'rasante',
            'rascunho',
            'rasgar',
            'raspador',
            'rasteira',
            'rasurar',
            'ratazana',
            'ratoeira',
            'realeza',
            'reanimar',
            'reaver',
            'rebaixar',
            'rebelde',
            'rebolar',
            'recado',
            'recente',
            'recheio',
            'recibo',
            'recordar',
            'recrutar',
            'recuar',
            'rede',
            'redimir',
            'redonda',
            'reduzida',
            'reenvio',
            'refinar',
            'refletir',
            'refogar',
            'refresco',
            'refugiar',
            'regalia',
            'regime',
            'regra',
            'reinado',
            'reitor',
            'rejeitar',
            'relativo',
            'remador',
            'remendo',
            'remorso',
            'renovado',
            'reparo',
            'repelir',
            'repleto',
            'repolho',
            'represa',
            'repudiar',
            'requerer',
            'resenha',
            'resfriar',
            'resgatar',
            'residir',
            'resolver',
            'respeito',
            'ressaca',
            'restante',
            'resumir',
            'retalho',
            'reter',
            'retirar',
            'retomada',
            'retratar',
            'revelar',
            'revisor',
            'revolta',
            'riacho',
            'rica',
            'rigidez',
            'rigoroso',
            'rimar',
            'ringue',
            'risada',
            'risco',
            'risonho',
            'robalo',
            'rochedo',
            'rodada',
            'rodeio',
            'rodovia',
            'roedor',
            'roleta',
            'romano',
            'roncar',
            'rosado',
            'roseira',
            'rosto',
            'rota',
            'roteiro',
            'rotina',
            'rotular',
            'rouco',
            'roupa',
            'roxo',
            'rubro',
            'rugido',
            'rugoso',
            'ruivo',
            'rumo',
            'rupestre',
            'russo',
            'sabor',
            'saciar',
            'sacola',
            'sacudir',
            'sadio',
            'safira',
            'saga',
            'sagrada',
            'saibro',
            'salada',
            'saleiro',
            'salgado',
            'saliva',
            'salpicar',
            'salsicha',
            'saltar',
            'salvador',
            'sambar',
            'samurai',
            'sanar',
            'sanfona',
            'sangue',
            'sanidade',
            'sapato',
            'sarda',
            'sargento',
            'sarjeta',
            'saturar',
            'saudade',
            'saxofone',
            'sazonal',
            'secar',
            'secular',
            'seda',
            'sedento',
            'sediado',
            'sedoso',
            'sedutor',
            'segmento',
            'segredo',
            'segundo',
            'seiva',
            'seleto',
            'selvagem',
            'semanal',
            'semente',
            'senador',
            'senhor',
            'sensual',
            'sentado',
            'separado',
            'sereia',
            'seringa',
            'serra',
            'servo',
            'setembro',
            'setor',
            'sigilo',
            'silhueta',
            'silicone',
            'simetria',
            'simpatia',
            'simular',
            'sinal',
            'sincero',
            'singular',
            'sinopse',
            'sintonia',
            'sirene',
            'siri',
            'situado',
            'soberano',
            'sobra',
            'socorro',
            'sogro',
            'soja',
            'solda',
            'soletrar',
            'solteiro',
            'sombrio',
            'sonata',
            'sondar',
            'sonegar',
            'sonhador',
            'sono',
            'soprano',
            'soquete',
            'sorrir',
            'sorteio',
            'sossego',
            'sotaque',
            'soterrar',
            'sovado',
            'sozinho',
            'suavizar',
            'subida',
            'submerso',
            'subsolo',
            'subtrair',
            'sucata',
            'sucesso',
            'suco',
            'sudeste',
            'sufixo',
            'sugador',
            'sugerir',
            'sujeito',
            'sulfato',
            'sumir',
            'suor',
            'superior',
            'suplicar',
            'suposto',
            'suprimir',
            'surdina',
            'surfista',
            'surpresa',
            'surreal',
            'surtir',
            'suspiro',
            'sustento',
            'tabela',
            'tablete',
            'tabuada',
            'tacho',
            'tagarela',
            'talher',
            'talo',
            'talvez',
            'tamanho',
            'tamborim',
            'tampa',
            'tangente',
            'tanto',
            'tapar',
            'tapioca',
            'tardio',
            'tarefa',
            'tarja',
            'tarraxa',
            'tatuagem',
            'taurino',
            'taxativo',
            'taxista',
            'teatral',
            'tecer',
            'tecido',
            'teclado',
            'tedioso',
            'teia',
            'teimar',
            'telefone',
            'telhado',
            'tempero',
            'tenente',
            'tensor',
            'tentar',
            'termal',
            'terno',
            'terreno',
            'tese',
            'tesoura',
            'testado',
            'teto',
            'textura',
            'texugo',
            'tiara',
            'tigela',
            'tijolo',
            'timbrar',
            'timidez',
            'tingido',
            'tinteiro',
            'tiragem',
            'titular',
            'toalha',
            'tocha',
            'tolerar',
            'tolice',
            'tomada',
            'tomilho',
            'tonel',
            'tontura',
            'topete',
            'tora',
            'torcido',
            'torneio',
            'torque',
            'torrada',
            'torto',
            'tostar',
            'touca',
            'toupeira',
            'toxina',
            'trabalho',
            'tracejar',
            'tradutor',
            'trafegar',
            'trajeto',
            'trama',
            'trancar',
            'trapo',
            'traseiro',
            'tratador',
            'travar',
            'treino',
            'tremer',
            'trepidar',
            'trevo',
            'triagem',
            'tribo',
            'triciclo',
            'tridente',
            'trilogia',
            'trindade',
            'triplo',
            'triturar',
            'triunfal',
            'trocar',
            'trombeta',
            'trova',
            'trunfo',
            'truque',
            'tubular',
            'tucano',
            'tudo',
            'tulipa',
            'tupi',
            'turbo',
            'turma',
            'turquesa',
            'tutelar',
            'tutorial',
            'uivar',
            'umbigo',
            'unha',
            'unidade',
            'uniforme',
            'urologia',
            'urso',
            'urtiga',
            'urubu',
            'usado',
            'usina',
            'usufruir',
            'vacina',
            'vadiar',
            'vagaroso',
            'vaidoso',
            'vala',
            'valente',
            'validade',
            'valores',
            'vantagem',
            'vaqueiro',
            'varanda',
            'vareta',
            'varrer',
            'vascular',
            'vasilha',
            'vassoura',
            'vazar',
            'vazio',
            'veado',
            'vedar',
            'vegetar',
            'veicular',
            'veleiro',
            'velhice',
            'veludo',
            'vencedor',
            'vendaval',
            'venerar',
            'ventre',
            'verbal',
            'verdade',
            'vereador',
            'vergonha',
            'vermelho',
            'verniz',
            'versar',
            'vertente',
            'vespa',
            'vestido',
            'vetorial',
            'viaduto',
            'viagem',
            'viajar',
            'viatura',
            'vibrador',
            'videira',
            'vidraria',
            'viela',
            'viga',
            'vigente',
            'vigiar',
            'vigorar',
            'vilarejo',
            'vinco',
            'vinheta',
            'vinil',
            'violeta',
            'virada',
            'virtude',
            'visitar',
            'visto',
            'vitral',
            'viveiro',
            'vizinho',
            'voador',
            'voar',
            'vogal',
            'volante',
            'voleibol',
            'voltagem',
            'volumoso',
            'vontade',
            'vulto',
            'vuvuzela',
            'xadrez',
            'xarope',
            'xeque',
            'xeretar',
            'xerife',
            'xingar',
            'zangado',
            'zarpar',
            'zebu',
            'zelador',
            'zombar',
            'zoologia',
            'zumbido',
          ];
        },
        {},
      ],
      59: [
        function (require, module, exports) {
          module.exports = [
            'ábaco',
            'abdomen',
            'abeja',
            'abierto',
            'abogado',
            'abono',
            'aborto',
            'abrazo',
            'abrir',
            'abuelo',
            'abuso',
            'acabar',
            'academia',
            'acceso',
            'acción',
            'aceite',
            'acelga',
            'acento',
            'aceptar',
            'ácido',
            'aclarar',
            'acné',
            'acoger',
            'acoso',
            'activo',
            'acto',
            'actriz',
            'actuar',
            'acudir',
            'acuerdo',
            'acusar',
            'adicto',
            'admitir',
            'adoptar',
            'adorno',
            'aduana',
            'adulto',
            'aéreo',
            'afectar',
            'afición',
            'afinar',
            'afirmar',
            'ágil',
            'agitar',
            'agonía',
            'agosto',
            'agotar',
            'agregar',
            'agrio',
            'agua',
            'agudo',
            'águila',
            'aguja',
            'ahogo',
            'ahorro',
            'aire',
            'aislar',
            'ajedrez',
            'ajeno',
            'ajuste',
            'alacrán',
            'alambre',
            'alarma',
            'alba',
            'álbum',
            'alcalde',
            'aldea',
            'alegre',
            'alejar',
            'alerta',
            'aleta',
            'alfiler',
            'alga',
            'algodón',
            'aliado',
            'aliento',
            'alivio',
            'alma',
            'almeja',
            'almíbar',
            'altar',
            'alteza',
            'altivo',
            'alto',
            'altura',
            'alumno',
            'alzar',
            'amable',
            'amante',
            'amapola',
            'amargo',
            'amasar',
            'ámbar',
            'ámbito',
            'ameno',
            'amigo',
            'amistad',
            'amor',
            'amparo',
            'amplio',
            'ancho',
            'anciano',
            'ancla',
            'andar',
            'andén',
            'anemia',
            'ángulo',
            'anillo',
            'ánimo',
            'anís',
            'anotar',
            'antena',
            'antiguo',
            'antojo',
            'anual',
            'anular',
            'anuncio',
            'añadir',
            'añejo',
            'año',
            'apagar',
            'aparato',
            'apetito',
            'apio',
            'aplicar',
            'apodo',
            'aporte',
            'apoyo',
            'aprender',
            'aprobar',
            'apuesta',
            'apuro',
            'arado',
            'araña',
            'arar',
            'árbitro',
            'árbol',
            'arbusto',
            'archivo',
            'arco',
            'arder',
            'ardilla',
            'arduo',
            'área',
            'árido',
            'aries',
            'armonía',
            'arnés',
            'aroma',
            'arpa',
            'arpón',
            'arreglo',
            'arroz',
            'arruga',
            'arte',
            'artista',
            'asa',
            'asado',
            'asalto',
            'ascenso',
            'asegurar',
            'aseo',
            'asesor',
            'asiento',
            'asilo',
            'asistir',
            'asno',
            'asombro',
            'áspero',
            'astilla',
            'astro',
            'astuto',
            'asumir',
            'asunto',
            'atajo',
            'ataque',
            'atar',
            'atento',
            'ateo',
            'ático',
            'atleta',
            'átomo',
            'atraer',
            'atroz',
            'atún',
            'audaz',
            'audio',
            'auge',
            'aula',
            'aumento',
            'ausente',
            'autor',
            'aval',
            'avance',
            'avaro',
            'ave',
            'avellana',
            'avena',
            'avestruz',
            'avión',
            'aviso',
            'ayer',
            'ayuda',
            'ayuno',
            'azafrán',
            'azar',
            'azote',
            'azúcar',
            'azufre',
            'azul',
            'baba',
            'babor',
            'bache',
            'bahía',
            'baile',
            'bajar',
            'balanza',
            'balcón',
            'balde',
            'bambú',
            'banco',
            'banda',
            'baño',
            'barba',
            'barco',
            'barniz',
            'barro',
            'báscula',
            'bastón',
            'basura',
            'batalla',
            'batería',
            'batir',
            'batuta',
            'baúl',
            'bazar',
            'bebé',
            'bebida',
            'bello',
            'besar',
            'beso',
            'bestia',
            'bicho',
            'bien',
            'bingo',
            'blanco',
            'bloque',
            'blusa',
            'boa',
            'bobina',
            'bobo',
            'boca',
            'bocina',
            'boda',
            'bodega',
            'boina',
            'bola',
            'bolero',
            'bolsa',
            'bomba',
            'bondad',
            'bonito',
            'bono',
            'bonsái',
            'borde',
            'borrar',
            'bosque',
            'bote',
            'botín',
            'bóveda',
            'bozal',
            'bravo',
            'brazo',
            'brecha',
            'breve',
            'brillo',
            'brinco',
            'brisa',
            'broca',
            'broma',
            'bronce',
            'brote',
            'bruja',
            'brusco',
            'bruto',
            'buceo',
            'bucle',
            'bueno',
            'buey',
            'bufanda',
            'bufón',
            'búho',
            'buitre',
            'bulto',
            'burbuja',
            'burla',
            'burro',
            'buscar',
            'butaca',
            'buzón',
            'caballo',
            'cabeza',
            'cabina',
            'cabra',
            'cacao',
            'cadáver',
            'cadena',
            'caer',
            'café',
            'caída',
            'caimán',
            'caja',
            'cajón',
            'cal',
            'calamar',
            'calcio',
            'caldo',
            'calidad',
            'calle',
            'calma',
            'calor',
            'calvo',
            'cama',
            'cambio',
            'camello',
            'camino',
            'campo',
            'cáncer',
            'candil',
            'canela',
            'canguro',
            'canica',
            'canto',
            'caña',
            'cañón',
            'caoba',
            'caos',
            'capaz',
            'capitán',
            'capote',
            'captar',
            'capucha',
            'cara',
            'carbón',
            'cárcel',
            'careta',
            'carga',
            'cariño',
            'carne',
            'carpeta',
            'carro',
            'carta',
            'casa',
            'casco',
            'casero',
            'caspa',
            'castor',
            'catorce',
            'catre',
            'caudal',
            'causa',
            'cazo',
            'cebolla',
            'ceder',
            'cedro',
            'celda',
            'célebre',
            'celoso',
            'célula',
            'cemento',
            'ceniza',
            'centro',
            'cerca',
            'cerdo',
            'cereza',
            'cero',
            'cerrar',
            'certeza',
            'césped',
            'cetro',
            'chacal',
            'chaleco',
            'champú',
            'chancla',
            'chapa',
            'charla',
            'chico',
            'chiste',
            'chivo',
            'choque',
            'choza',
            'chuleta',
            'chupar',
            'ciclón',
            'ciego',
            'cielo',
            'cien',
            'cierto',
            'cifra',
            'cigarro',
            'cima',
            'cinco',
            'cine',
            'cinta',
            'ciprés',
            'circo',
            'ciruela',
            'cisne',
            'cita',
            'ciudad',
            'clamor',
            'clan',
            'claro',
            'clase',
            'clave',
            'cliente',
            'clima',
            'clínica',
            'cobre',
            'cocción',
            'cochino',
            'cocina',
            'coco',
            'código',
            'codo',
            'cofre',
            'coger',
            'cohete',
            'cojín',
            'cojo',
            'cola',
            'colcha',
            'colegio',
            'colgar',
            'colina',
            'collar',
            'colmo',
            'columna',
            'combate',
            'comer',
            'comida',
            'cómodo',
            'compra',
            'conde',
            'conejo',
            'conga',
            'conocer',
            'consejo',
            'contar',
            'copa',
            'copia',
            'corazón',
            'corbata',
            'corcho',
            'cordón',
            'corona',
            'correr',
            'coser',
            'cosmos',
            'costa',
            'cráneo',
            'cráter',
            'crear',
            'crecer',
            'creído',
            'crema',
            'cría',
            'crimen',
            'cripta',
            'crisis',
            'cromo',
            'crónica',
            'croqueta',
            'crudo',
            'cruz',
            'cuadro',
            'cuarto',
            'cuatro',
            'cubo',
            'cubrir',
            'cuchara',
            'cuello',
            'cuento',
            'cuerda',
            'cuesta',
            'cueva',
            'cuidar',
            'culebra',
            'culpa',
            'culto',
            'cumbre',
            'cumplir',
            'cuna',
            'cuneta',
            'cuota',
            'cupón',
            'cúpula',
            'curar',
            'curioso',
            'curso',
            'curva',
            'cutis',
            'dama',
            'danza',
            'dar',
            'dardo',
            'dátil',
            'deber',
            'débil',
            'década',
            'decir',
            'dedo',
            'defensa',
            'definir',
            'dejar',
            'delfín',
            'delgado',
            'delito',
            'demora',
            'denso',
            'dental',
            'deporte',
            'derecho',
            'derrota',
            'desayuno',
            'deseo',
            'desfile',
            'desnudo',
            'destino',
            'desvío',
            'detalle',
            'detener',
            'deuda',
            'día',
            'diablo',
            'diadema',
            'diamante',
            'diana',
            'diario',
            'dibujo',
            'dictar',
            'diente',
            'dieta',
            'diez',
            'difícil',
            'digno',
            'dilema',
            'diluir',
            'dinero',
            'directo',
            'dirigir',
            'disco',
            'diseño',
            'disfraz',
            'diva',
            'divino',
            'doble',
            'doce',
            'dolor',
            'domingo',
            'don',
            'donar',
            'dorado',
            'dormir',
            'dorso',
            'dos',
            'dosis',
            'dragón',
            'droga',
            'ducha',
            'duda',
            'duelo',
            'dueño',
            'dulce',
            'dúo',
            'duque',
            'durar',
            'dureza',
            'duro',
            'ébano',
            'ebrio',
            'echar',
            'eco',
            'ecuador',
            'edad',
            'edición',
            'edificio',
            'editor',
            'educar',
            'efecto',
            'eficaz',
            'eje',
            'ejemplo',
            'elefante',
            'elegir',
            'elemento',
            'elevar',
            'elipse',
            'élite',
            'elixir',
            'elogio',
            'eludir',
            'embudo',
            'emitir',
            'emoción',
            'empate',
            'empeño',
            'empleo',
            'empresa',
            'enano',
            'encargo',
            'enchufe',
            'encía',
            'enemigo',
            'enero',
            'enfado',
            'enfermo',
            'engaño',
            'enigma',
            'enlace',
            'enorme',
            'enredo',
            'ensayo',
            'enseñar',
            'entero',
            'entrar',
            'envase',
            'envío',
            'época',
            'equipo',
            'erizo',
            'escala',
            'escena',
            'escolar',
            'escribir',
            'escudo',
            'esencia',
            'esfera',
            'esfuerzo',
            'espada',
            'espejo',
            'espía',
            'esposa',
            'espuma',
            'esquí',
            'estar',
            'este',
            'estilo',
            'estufa',
            'etapa',
            'eterno',
            'ética',
            'etnia',
            'evadir',
            'evaluar',
            'evento',
            'evitar',
            'exacto',
            'examen',
            'exceso',
            'excusa',
            'exento',
            'exigir',
            'exilio',
            'existir',
            'éxito',
            'experto',
            'explicar',
            'exponer',
            'extremo',
            'fábrica',
            'fábula',
            'fachada',
            'fácil',
            'factor',
            'faena',
            'faja',
            'falda',
            'fallo',
            'falso',
            'faltar',
            'fama',
            'familia',
            'famoso',
            'faraón',
            'farmacia',
            'farol',
            'farsa',
            'fase',
            'fatiga',
            'fauna',
            'favor',
            'fax',
            'febrero',
            'fecha',
            'feliz',
            'feo',
            'feria',
            'feroz',
            'fértil',
            'fervor',
            'festín',
            'fiable',
            'fianza',
            'fiar',
            'fibra',
            'ficción',
            'ficha',
            'fideo',
            'fiebre',
            'fiel',
            'fiera',
            'fiesta',
            'figura',
            'fijar',
            'fijo',
            'fila',
            'filete',
            'filial',
            'filtro',
            'fin',
            'finca',
            'fingir',
            'finito',
            'firma',
            'flaco',
            'flauta',
            'flecha',
            'flor',
            'flota',
            'fluir',
            'flujo',
            'flúor',
            'fobia',
            'foca',
            'fogata',
            'fogón',
            'folio',
            'folleto',
            'fondo',
            'forma',
            'forro',
            'fortuna',
            'forzar',
            'fosa',
            'foto',
            'fracaso',
            'frágil',
            'franja',
            'frase',
            'fraude',
            'freír',
            'freno',
            'fresa',
            'frío',
            'frito',
            'fruta',
            'fuego',
            'fuente',
            'fuerza',
            'fuga',
            'fumar',
            'función',
            'funda',
            'furgón',
            'furia',
            'fusil',
            'fútbol',
            'futuro',
            'gacela',
            'gafas',
            'gaita',
            'gajo',
            'gala',
            'galería',
            'gallo',
            'gamba',
            'ganar',
            'gancho',
            'ganga',
            'ganso',
            'garaje',
            'garza',
            'gasolina',
            'gastar',
            'gato',
            'gavilán',
            'gemelo',
            'gemir',
            'gen',
            'género',
            'genio',
            'gente',
            'geranio',
            'gerente',
            'germen',
            'gesto',
            'gigante',
            'gimnasio',
            'girar',
            'giro',
            'glaciar',
            'globo',
            'gloria',
            'gol',
            'golfo',
            'goloso',
            'golpe',
            'goma',
            'gordo',
            'gorila',
            'gorra',
            'gota',
            'goteo',
            'gozar',
            'grada',
            'gráfico',
            'grano',
            'grasa',
            'gratis',
            'grave',
            'grieta',
            'grillo',
            'gripe',
            'gris',
            'grito',
            'grosor',
            'grúa',
            'grueso',
            'grumo',
            'grupo',
            'guante',
            'guapo',
            'guardia',
            'guerra',
            'guía',
            'guiño',
            'guion',
            'guiso',
            'guitarra',
            'gusano',
            'gustar',
            'haber',
            'hábil',
            'hablar',
            'hacer',
            'hacha',
            'hada',
            'hallar',
            'hamaca',
            'harina',
            'haz',
            'hazaña',
            'hebilla',
            'hebra',
            'hecho',
            'helado',
            'helio',
            'hembra',
            'herir',
            'hermano',
            'héroe',
            'hervir',
            'hielo',
            'hierro',
            'hígado',
            'higiene',
            'hijo',
            'himno',
            'historia',
            'hocico',
            'hogar',
            'hoguera',
            'hoja',
            'hombre',
            'hongo',
            'honor',
            'honra',
            'hora',
            'hormiga',
            'horno',
            'hostil',
            'hoyo',
            'hueco',
            'huelga',
            'huerta',
            'hueso',
            'huevo',
            'huida',
            'huir',
            'humano',
            'húmedo',
            'humilde',
            'humo',
            'hundir',
            'huracán',
            'hurto',
            'icono',
            'ideal',
            'idioma',
            'ídolo',
            'iglesia',
            'iglú',
            'igual',
            'ilegal',
            'ilusión',
            'imagen',
            'imán',
            'imitar',
            'impar',
            'imperio',
            'imponer',
            'impulso',
            'incapaz',
            'índice',
            'inerte',
            'infiel',
            'informe',
            'ingenio',
            'inicio',
            'inmenso',
            'inmune',
            'innato',
            'insecto',
            'instante',
            'interés',
            'íntimo',
            'intuir',
            'inútil',
            'invierno',
            'ira',
            'iris',
            'ironía',
            'isla',
            'islote',
            'jabalí',
            'jabón',
            'jamón',
            'jarabe',
            'jardín',
            'jarra',
            'jaula',
            'jazmín',
            'jefe',
            'jeringa',
            'jinete',
            'jornada',
            'joroba',
            'joven',
            'joya',
            'juerga',
            'jueves',
            'juez',
            'jugador',
            'jugo',
            'juguete',
            'juicio',
            'junco',
            'jungla',
            'junio',
            'juntar',
            'júpiter',
            'jurar',
            'justo',
            'juvenil',
            'juzgar',
            'kilo',
            'koala',
            'labio',
            'lacio',
            'lacra',
            'lado',
            'ladrón',
            'lagarto',
            'lágrima',
            'laguna',
            'laico',
            'lamer',
            'lámina',
            'lámpara',
            'lana',
            'lancha',
            'langosta',
            'lanza',
            'lápiz',
            'largo',
            'larva',
            'lástima',
            'lata',
            'látex',
            'latir',
            'laurel',
            'lavar',
            'lazo',
            'leal',
            'lección',
            'leche',
            'lector',
            'leer',
            'legión',
            'legumbre',
            'lejano',
            'lengua',
            'lento',
            'leña',
            'león',
            'leopardo',
            'lesión',
            'letal',
            'letra',
            'leve',
            'leyenda',
            'libertad',
            'libro',
            'licor',
            'líder',
            'lidiar',
            'lienzo',
            'liga',
            'ligero',
            'lima',
            'límite',
            'limón',
            'limpio',
            'lince',
            'lindo',
            'línea',
            'lingote',
            'lino',
            'linterna',
            'líquido',
            'liso',
            'lista',
            'litera',
            'litio',
            'litro',
            'llaga',
            'llama',
            'llanto',
            'llave',
            'llegar',
            'llenar',
            'llevar',
            'llorar',
            'llover',
            'lluvia',
            'lobo',
            'loción',
            'loco',
            'locura',
            'lógica',
            'logro',
            'lombriz',
            'lomo',
            'lonja',
            'lote',
            'lucha',
            'lucir',
            'lugar',
            'lujo',
            'luna',
            'lunes',
            'lupa',
            'lustro',
            'luto',
            'luz',
            'maceta',
            'macho',
            'madera',
            'madre',
            'maduro',
            'maestro',
            'mafia',
            'magia',
            'mago',
            'maíz',
            'maldad',
            'maleta',
            'malla',
            'malo',
            'mamá',
            'mambo',
            'mamut',
            'manco',
            'mando',
            'manejar',
            'manga',
            'maniquí',
            'manjar',
            'mano',
            'manso',
            'manta',
            'mañana',
            'mapa',
            'máquina',
            'mar',
            'marco',
            'marea',
            'marfil',
            'margen',
            'marido',
            'mármol',
            'marrón',
            'martes',
            'marzo',
            'masa',
            'máscara',
            'masivo',
            'matar',
            'materia',
            'matiz',
            'matriz',
            'máximo',
            'mayor',
            'mazorca',
            'mecha',
            'medalla',
            'medio',
            'médula',
            'mejilla',
            'mejor',
            'melena',
            'melón',
            'memoria',
            'menor',
            'mensaje',
            'mente',
            'menú',
            'mercado',
            'merengue',
            'mérito',
            'mes',
            'mesón',
            'meta',
            'meter',
            'método',
            'metro',
            'mezcla',
            'miedo',
            'miel',
            'miembro',
            'miga',
            'mil',
            'milagro',
            'militar',
            'millón',
            'mimo',
            'mina',
            'minero',
            'mínimo',
            'minuto',
            'miope',
            'mirar',
            'misa',
            'miseria',
            'misil',
            'mismo',
            'mitad',
            'mito',
            'mochila',
            'moción',
            'moda',
            'modelo',
            'moho',
            'mojar',
            'molde',
            'moler',
            'molino',
            'momento',
            'momia',
            'monarca',
            'moneda',
            'monja',
            'monto',
            'moño',
            'morada',
            'morder',
            'moreno',
            'morir',
            'morro',
            'morsa',
            'mortal',
            'mosca',
            'mostrar',
            'motivo',
            'mover',
            'móvil',
            'mozo',
            'mucho',
            'mudar',
            'mueble',
            'muela',
            'muerte',
            'muestra',
            'mugre',
            'mujer',
            'mula',
            'muleta',
            'multa',
            'mundo',
            'muñeca',
            'mural',
            'muro',
            'músculo',
            'museo',
            'musgo',
            'música',
            'muslo',
            'nácar',
            'nación',
            'nadar',
            'naipe',
            'naranja',
            'nariz',
            'narrar',
            'nasal',
            'natal',
            'nativo',
            'natural',
            'náusea',
            'naval',
            'nave',
            'navidad',
            'necio',
            'néctar',
            'negar',
            'negocio',
            'negro',
            'neón',
            'nervio',
            'neto',
            'neutro',
            'nevar',
            'nevera',
            'nicho',
            'nido',
            'niebla',
            'nieto',
            'niñez',
            'niño',
            'nítido',
            'nivel',
            'nobleza',
            'noche',
            'nómina',
            'noria',
            'norma',
            'norte',
            'nota',
            'noticia',
            'novato',
            'novela',
            'novio',
            'nube',
            'nuca',
            'núcleo',
            'nudillo',
            'nudo',
            'nuera',
            'nueve',
            'nuez',
            'nulo',
            'número',
            'nutria',
            'oasis',
            'obeso',
            'obispo',
            'objeto',
            'obra',
            'obrero',
            'observar',
            'obtener',
            'obvio',
            'oca',
            'ocaso',
            'océano',
            'ochenta',
            'ocho',
            'ocio',
            'ocre',
            'octavo',
            'octubre',
            'oculto',
            'ocupar',
            'ocurrir',
            'odiar',
            'odio',
            'odisea',
            'oeste',
            'ofensa',
            'oferta',
            'oficio',
            'ofrecer',
            'ogro',
            'oído',
            'oír',
            'ojo',
            'ola',
            'oleada',
            'olfato',
            'olivo',
            'olla',
            'olmo',
            'olor',
            'olvido',
            'ombligo',
            'onda',
            'onza',
            'opaco',
            'opción',
            'ópera',
            'opinar',
            'oponer',
            'optar',
            'óptica',
            'opuesto',
            'oración',
            'orador',
            'oral',
            'órbita',
            'orca',
            'orden',
            'oreja',
            'órgano',
            'orgía',
            'orgullo',
            'oriente',
            'origen',
            'orilla',
            'oro',
            'orquesta',
            'oruga',
            'osadía',
            'oscuro',
            'osezno',
            'oso',
            'ostra',
            'otoño',
            'otro',
            'oveja',
            'óvulo',
            'óxido',
            'oxígeno',
            'oyente',
            'ozono',
            'pacto',
            'padre',
            'paella',
            'página',
            'pago',
            'país',
            'pájaro',
            'palabra',
            'palco',
            'paleta',
            'pálido',
            'palma',
            'paloma',
            'palpar',
            'pan',
            'panal',
            'pánico',
            'pantera',
            'pañuelo',
            'papá',
            'papel',
            'papilla',
            'paquete',
            'parar',
            'parcela',
            'pared',
            'parir',
            'paro',
            'párpado',
            'parque',
            'párrafo',
            'parte',
            'pasar',
            'paseo',
            'pasión',
            'paso',
            'pasta',
            'pata',
            'patio',
            'patria',
            'pausa',
            'pauta',
            'pavo',
            'payaso',
            'peatón',
            'pecado',
            'pecera',
            'pecho',
            'pedal',
            'pedir',
            'pegar',
            'peine',
            'pelar',
            'peldaño',
            'pelea',
            'peligro',
            'pellejo',
            'pelo',
            'peluca',
            'pena',
            'pensar',
            'peñón',
            'peón',
            'peor',
            'pepino',
            'pequeño',
            'pera',
            'percha',
            'perder',
            'pereza',
            'perfil',
            'perico',
            'perla',
            'permiso',
            'perro',
            'persona',
            'pesa',
            'pesca',
            'pésimo',
            'pestaña',
            'pétalo',
            'petróleo',
            'pez',
            'pezuña',
            'picar',
            'pichón',
            'pie',
            'piedra',
            'pierna',
            'pieza',
            'pijama',
            'pilar',
            'piloto',
            'pimienta',
            'pino',
            'pintor',
            'pinza',
            'piña',
            'piojo',
            'pipa',
            'pirata',
            'pisar',
            'piscina',
            'piso',
            'pista',
            'pitón',
            'pizca',
            'placa',
            'plan',
            'plata',
            'playa',
            'plaza',
            'pleito',
            'pleno',
            'plomo',
            'pluma',
            'plural',
            'pobre',
            'poco',
            'poder',
            'podio',
            'poema',
            'poesía',
            'poeta',
            'polen',
            'policía',
            'pollo',
            'polvo',
            'pomada',
            'pomelo',
            'pomo',
            'pompa',
            'poner',
            'porción',
            'portal',
            'posada',
            'poseer',
            'posible',
            'poste',
            'potencia',
            'potro',
            'pozo',
            'prado',
            'precoz',
            'pregunta',
            'premio',
            'prensa',
            'preso',
            'previo',
            'primo',
            'príncipe',
            'prisión',
            'privar',
            'proa',
            'probar',
            'proceso',
            'producto',
            'proeza',
            'profesor',
            'programa',
            'prole',
            'promesa',
            'pronto',
            'propio',
            'próximo',
            'prueba',
            'público',
            'puchero',
            'pudor',
            'pueblo',
            'puerta',
            'puesto',
            'pulga',
            'pulir',
            'pulmón',
            'pulpo',
            'pulso',
            'puma',
            'punto',
            'puñal',
            'puño',
            'pupa',
            'pupila',
            'puré',
            'quedar',
            'queja',
            'quemar',
            'querer',
            'queso',
            'quieto',
            'química',
            'quince',
            'quitar',
            'rábano',
            'rabia',
            'rabo',
            'ración',
            'radical',
            'raíz',
            'rama',
            'rampa',
            'rancho',
            'rango',
            'rapaz',
            'rápido',
            'rapto',
            'rasgo',
            'raspa',
            'rato',
            'rayo',
            'raza',
            'razón',
            'reacción',
            'realidad',
            'rebaño',
            'rebote',
            'recaer',
            'receta',
            'rechazo',
            'recoger',
            'recreo',
            'recto',
            'recurso',
            'red',
            'redondo',
            'reducir',
            'reflejo',
            'reforma',
            'refrán',
            'refugio',
            'regalo',
            'regir',
            'regla',
            'regreso',
            'rehén',
            'reino',
            'reír',
            'reja',
            'relato',
            'relevo',
            'relieve',
            'relleno',
            'reloj',
            'remar',
            'remedio',
            'remo',
            'rencor',
            'rendir',
            'renta',
            'reparto',
            'repetir',
            'reposo',
            'reptil',
            'res',
            'rescate',
            'resina',
            'respeto',
            'resto',
            'resumen',
            'retiro',
            'retorno',
            'retrato',
            'reunir',
            'revés',
            'revista',
            'rey',
            'rezar',
            'rico',
            'riego',
            'rienda',
            'riesgo',
            'rifa',
            'rígido',
            'rigor',
            'rincón',
            'riñón',
            'río',
            'riqueza',
            'risa',
            'ritmo',
            'rito',
            'rizo',
            'roble',
            'roce',
            'rociar',
            'rodar',
            'rodeo',
            'rodilla',
            'roer',
            'rojizo',
            'rojo',
            'romero',
            'romper',
            'ron',
            'ronco',
            'ronda',
            'ropa',
            'ropero',
            'rosa',
            'rosca',
            'rostro',
            'rotar',
            'rubí',
            'rubor',
            'rudo',
            'rueda',
            'rugir',
            'ruido',
            'ruina',
            'ruleta',
            'rulo',
            'rumbo',
            'rumor',
            'ruptura',
            'ruta',
            'rutina',
            'sábado',
            'saber',
            'sabio',
            'sable',
            'sacar',
            'sagaz',
            'sagrado',
            'sala',
            'saldo',
            'salero',
            'salir',
            'salmón',
            'salón',
            'salsa',
            'salto',
            'salud',
            'salvar',
            'samba',
            'sanción',
            'sandía',
            'sanear',
            'sangre',
            'sanidad',
            'sano',
            'santo',
            'sapo',
            'saque',
            'sardina',
            'sartén',
            'sastre',
            'satán',
            'sauna',
            'saxofón',
            'sección',
            'seco',
            'secreto',
            'secta',
            'sed',
            'seguir',
            'seis',
            'sello',
            'selva',
            'semana',
            'semilla',
            'senda',
            'sensor',
            'señal',
            'señor',
            'separar',
            'sepia',
            'sequía',
            'ser',
            'serie',
            'sermón',
            'servir',
            'sesenta',
            'sesión',
            'seta',
            'setenta',
            'severo',
            'sexo',
            'sexto',
            'sidra',
            'siesta',
            'siete',
            'siglo',
            'signo',
            'sílaba',
            'silbar',
            'silencio',
            'silla',
            'símbolo',
            'simio',
            'sirena',
            'sistema',
            'sitio',
            'situar',
            'sobre',
            'socio',
            'sodio',
            'sol',
            'solapa',
            'soldado',
            'soledad',
            'sólido',
            'soltar',
            'solución',
            'sombra',
            'sondeo',
            'sonido',
            'sonoro',
            'sonrisa',
            'sopa',
            'soplar',
            'soporte',
            'sordo',
            'sorpresa',
            'sorteo',
            'sostén',
            'sótano',
            'suave',
            'subir',
            'suceso',
            'sudor',
            'suegra',
            'suelo',
            'sueño',
            'suerte',
            'sufrir',
            'sujeto',
            'sultán',
            'sumar',
            'superar',
            'suplir',
            'suponer',
            'supremo',
            'sur',
            'surco',
            'sureño',
            'surgir',
            'susto',
            'sutil',
            'tabaco',
            'tabique',
            'tabla',
            'tabú',
            'taco',
            'tacto',
            'tajo',
            'talar',
            'talco',
            'talento',
            'talla',
            'talón',
            'tamaño',
            'tambor',
            'tango',
            'tanque',
            'tapa',
            'tapete',
            'tapia',
            'tapón',
            'taquilla',
            'tarde',
            'tarea',
            'tarifa',
            'tarjeta',
            'tarot',
            'tarro',
            'tarta',
            'tatuaje',
            'tauro',
            'taza',
            'tazón',
            'teatro',
            'techo',
            'tecla',
            'técnica',
            'tejado',
            'tejer',
            'tejido',
            'tela',
            'teléfono',
            'tema',
            'temor',
            'templo',
            'tenaz',
            'tender',
            'tener',
            'tenis',
            'tenso',
            'teoría',
            'terapia',
            'terco',
            'término',
            'ternura',
            'terror',
            'tesis',
            'tesoro',
            'testigo',
            'tetera',
            'texto',
            'tez',
            'tibio',
            'tiburón',
            'tiempo',
            'tienda',
            'tierra',
            'tieso',
            'tigre',
            'tijera',
            'tilde',
            'timbre',
            'tímido',
            'timo',
            'tinta',
            'tío',
            'típico',
            'tipo',
            'tira',
            'tirón',
            'titán',
            'títere',
            'título',
            'tiza',
            'toalla',
            'tobillo',
            'tocar',
            'tocino',
            'todo',
            'toga',
            'toldo',
            'tomar',
            'tono',
            'tonto',
            'topar',
            'tope',
            'toque',
            'tórax',
            'torero',
            'tormenta',
            'torneo',
            'toro',
            'torpedo',
            'torre',
            'torso',
            'tortuga',
            'tos',
            'tosco',
            'toser',
            'tóxico',
            'trabajo',
            'tractor',
            'traer',
            'tráfico',
            'trago',
            'traje',
            'tramo',
            'trance',
            'trato',
            'trauma',
            'trazar',
            'trébol',
            'tregua',
            'treinta',
            'tren',
            'trepar',
            'tres',
            'tribu',
            'trigo',
            'tripa',
            'triste',
            'triunfo',
            'trofeo',
            'trompa',
            'tronco',
            'tropa',
            'trote',
            'trozo',
            'truco',
            'trueno',
            'trufa',
            'tubería',
            'tubo',
            'tuerto',
            'tumba',
            'tumor',
            'túnel',
            'túnica',
            'turbina',
            'turismo',
            'turno',
            'tutor',
            'ubicar',
            'úlcera',
            'umbral',
            'unidad',
            'unir',
            'universo',
            'uno',
            'untar',
            'uña',
            'urbano',
            'urbe',
            'urgente',
            'urna',
            'usar',
            'usuario',
            'útil',
            'utopía',
            'uva',
            'vaca',
            'vacío',
            'vacuna',
            'vagar',
            'vago',
            'vaina',
            'vajilla',
            'vale',
            'válido',
            'valle',
            'valor',
            'válvula',
            'vampiro',
            'vara',
            'variar',
            'varón',
            'vaso',
            'vecino',
            'vector',
            'vehículo',
            'veinte',
            'vejez',
            'vela',
            'velero',
            'veloz',
            'vena',
            'vencer',
            'venda',
            'veneno',
            'vengar',
            'venir',
            'venta',
            'venus',
            'ver',
            'verano',
            'verbo',
            'verde',
            'vereda',
            'verja',
            'verso',
            'verter',
            'vía',
            'viaje',
            'vibrar',
            'vicio',
            'víctima',
            'vida',
            'vídeo',
            'vidrio',
            'viejo',
            'viernes',
            'vigor',
            'vil',
            'villa',
            'vinagre',
            'vino',
            'viñedo',
            'violín',
            'viral',
            'virgo',
            'virtud',
            'visor',
            'víspera',
            'vista',
            'vitamina',
            'viudo',
            'vivaz',
            'vivero',
            'vivir',
            'vivo',
            'volcán',
            'volumen',
            'volver',
            'voraz',
            'votar',
            'voto',
            'voz',
            'vuelo',
            'vulgar',
            'yacer',
            'yate',
            'yegua',
            'yema',
            'yerno',
            'yeso',
            'yodo',
            'yoga',
            'yogur',
            'zafiro',
            'zanja',
            'zapato',
            'zarza',
            'zona',
            'zorro',
            'zumo',
            'zurdo',
          ];
        },
        {},
      ],
      60: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.toOutputScript =
                exports.fromOutputScript =
                exports.toBech32 =
                exports.toBase58Check =
                exports.fromBech32 =
                exports.fromBase58Check =
                  void 0;
              const networks = require('./networks');
              const payments = require('./payments');
              const bscript = require('./script');
              const types = require('./types');
              const bech32_1 = require('bech32');
              const bs58check = require('bs58check');
              const { typeforce } = types;
              const FUTURE_SEGWIT_MAX_SIZE = 40;
              const FUTURE_SEGWIT_MIN_SIZE = 2;
              const FUTURE_SEGWIT_MAX_VERSION = 16;
              const FUTURE_SEGWIT_MIN_VERSION = 1;
              const FUTURE_SEGWIT_VERSION_DIFF = 0x50;
              const FUTURE_SEGWIT_VERSION_WARNING =
                'WARNING: Sending to a future segwit version address can lead to loss of funds. ' +
                'End users MUST be warned carefully in the GUI and asked if they wish to proceed ' +
                'with caution. Wallets should verify the segwit version from the output of fromBech32, ' +
                'then decide when it is safe to use which version of segwit.';
              function _toFutureSegwitAddress(output, network) {
                const data = output.slice(2);
                if (
                  data.length < FUTURE_SEGWIT_MIN_SIZE ||
                  data.length > FUTURE_SEGWIT_MAX_SIZE
                )
                  throw new TypeError(
                    'Invalid program length for segwit address'
                  );
                const version = output[0] - FUTURE_SEGWIT_VERSION_DIFF;
                if (
                  version < FUTURE_SEGWIT_MIN_VERSION ||
                  version > FUTURE_SEGWIT_MAX_VERSION
                )
                  throw new TypeError('Invalid version for segwit address');
                if (output[1] !== data.length)
                  throw new TypeError('Invalid script for segwit address');
                console.warn(FUTURE_SEGWIT_VERSION_WARNING);
                return toBech32(data, version, network.bech32);
              }
              function fromBase58Check(address) {
                const payload = bs58check.decode(address);
                // TODO: 4.0.0, move to "toOutputScript"
                if (payload.length < 21)
                  throw new TypeError(address + ' is too short');
                if (payload.length > 21)
                  throw new TypeError(address + ' is too long');
                const version = payload.readUInt8(0);
                const hash = payload.slice(1);
                return { version, hash };
              }
              exports.fromBase58Check = fromBase58Check;
              function fromBech32(address) {
                let result;
                let version;
                try {
                  result = bech32_1.bech32.decode(address);
                } catch (e) {}
                if (result) {
                  version = result.words[0];
                  if (version !== 0)
                    throw new TypeError(address + ' uses wrong encoding');
                } else {
                  result = bech32_1.bech32m.decode(address);
                  version = result.words[0];
                  if (version === 0)
                    throw new TypeError(address + ' uses wrong encoding');
                }
                const data = bech32_1.bech32.fromWords(result.words.slice(1));
                return {
                  version,
                  prefix: result.prefix,
                  data: Buffer.from(data),
                };
              }
              exports.fromBech32 = fromBech32;
              function toBase58Check(hash, version) {
                typeforce(
                  types.tuple(types.Hash160bit, types.UInt8),
                  arguments
                );
                const payload = Buffer.allocUnsafe(21);
                payload.writeUInt8(version, 0);
                hash.copy(payload, 1);
                return bs58check.encode(payload);
              }
              exports.toBase58Check = toBase58Check;
              function toBech32(data, version, prefix) {
                const words = bech32_1.bech32.toWords(data);
                words.unshift(version);
                return version === 0
                  ? bech32_1.bech32.encode(prefix, words)
                  : bech32_1.bech32m.encode(prefix, words);
              }
              exports.toBech32 = toBech32;
              function fromOutputScript(output, network) {
                // TODO: Network
                network = network || networks.bitcoin;
                try {
                  return payments.p2pkh({ output, network }).address;
                } catch (e) {}
                try {
                  return payments.p2sh({ output, network }).address;
                } catch (e) {}
                try {
                  return payments.p2wpkh({ output, network }).address;
                } catch (e) {}
                try {
                  return payments.p2wsh({ output, network }).address;
                } catch (e) {}
                try {
                  return _toFutureSegwitAddress(output, network);
                } catch (e) {}
                throw new Error(
                  bscript.toASM(output) + ' has no matching Address'
                );
              }
              exports.fromOutputScript = fromOutputScript;
              function toOutputScript(address, network) {
                network = network || networks.bitcoin;
                let decodeBase58;
                let decodeBech32;
                try {
                  decodeBase58 = fromBase58Check(address);
                } catch (e) {}
                if (decodeBase58) {
                  if (decodeBase58.version === network.pubKeyHash)
                    return payments.p2pkh({ hash: decodeBase58.hash }).output;
                  if (decodeBase58.version === network.scriptHash)
                    return payments.p2sh({ hash: decodeBase58.hash }).output;
                } else {
                  try {
                    decodeBech32 = fromBech32(address);
                  } catch (e) {}
                  if (decodeBech32) {
                    if (decodeBech32.prefix !== network.bech32)
                      throw new Error(address + ' has an invalid prefix');
                    if (decodeBech32.version === 0) {
                      if (decodeBech32.data.length === 20)
                        return payments.p2wpkh({ hash: decodeBech32.data })
                          .output;
                      if (decodeBech32.data.length === 32)
                        return payments.p2wsh({ hash: decodeBech32.data })
                          .output;
                    } else if (
                      decodeBech32.version >= FUTURE_SEGWIT_MIN_VERSION &&
                      decodeBech32.version <= FUTURE_SEGWIT_MAX_VERSION &&
                      decodeBech32.data.length >= FUTURE_SEGWIT_MIN_SIZE &&
                      decodeBech32.data.length <= FUTURE_SEGWIT_MAX_SIZE
                    ) {
                      console.warn(FUTURE_SEGWIT_VERSION_WARNING);
                      return bscript.compile([
                        decodeBech32.version + FUTURE_SEGWIT_VERSION_DIFF,
                        decodeBech32.data,
                      ]);
                    }
                  }
                }
                throw new Error(address + ' has no matching Script');
              }
              exports.toOutputScript = toOutputScript;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './networks': 67,
          './payments': 70,
          './script': 80,
          './types': 84,
          bech32: 2,
          bs58check: 89,
          buffer: 183,
        },
      ],
      61: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              // Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
              // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
              // NOTE: SIGHASH byte ignored AND restricted, truncate before use
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.encode = exports.decode = exports.check = void 0;
              function check(buffer) {
                if (buffer.length < 8) return false;
                if (buffer.length > 72) return false;
                if (buffer[0] !== 0x30) return false;
                if (buffer[1] !== buffer.length - 2) return false;
                if (buffer[2] !== 0x02) return false;
                const lenR = buffer[3];
                if (lenR === 0) return false;
                if (5 + lenR >= buffer.length) return false;
                if (buffer[4 + lenR] !== 0x02) return false;
                const lenS = buffer[5 + lenR];
                if (lenS === 0) return false;
                if (6 + lenR + lenS !== buffer.length) return false;
                if (buffer[4] & 0x80) return false;
                if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80))
                  return false;
                if (buffer[lenR + 6] & 0x80) return false;
                if (
                  lenS > 1 &&
                  buffer[lenR + 6] === 0x00 &&
                  !(buffer[lenR + 7] & 0x80)
                )
                  return false;
                return true;
              }
              exports.check = check;
              function decode(buffer) {
                if (buffer.length < 8)
                  throw new Error('DER sequence length is too short');
                if (buffer.length > 72)
                  throw new Error('DER sequence length is too long');
                if (buffer[0] !== 0x30)
                  throw new Error('Expected DER sequence');
                if (buffer[1] !== buffer.length - 2)
                  throw new Error('DER sequence length is invalid');
                if (buffer[2] !== 0x02) throw new Error('Expected DER integer');
                const lenR = buffer[3];
                if (lenR === 0) throw new Error('R length is zero');
                if (5 + lenR >= buffer.length)
                  throw new Error('R length is too long');
                if (buffer[4 + lenR] !== 0x02)
                  throw new Error('Expected DER integer (2)');
                const lenS = buffer[5 + lenR];
                if (lenS === 0) throw new Error('S length is zero');
                if (6 + lenR + lenS !== buffer.length)
                  throw new Error('S length is invalid');
                if (buffer[4] & 0x80) throw new Error('R value is negative');
                if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80))
                  throw new Error('R value excessively padded');
                if (buffer[lenR + 6] & 0x80)
                  throw new Error('S value is negative');
                if (
                  lenS > 1 &&
                  buffer[lenR + 6] === 0x00 &&
                  !(buffer[lenR + 7] & 0x80)
                )
                  throw new Error('S value excessively padded');
                // non-BIP66 - extract R, S values
                return {
                  r: buffer.slice(4, 4 + lenR),
                  s: buffer.slice(6 + lenR),
                };
              }
              exports.decode = decode;
              /*
               * Expects r and s to be positive DER integers.
               *
               * The DER format uses the most significant bit as a sign bit (& 0x80).
               * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
               *
               * Examples:
               *
               *      0 =>     0x00
               *      1 =>     0x01
               *     -1 =>     0xff
               *    127 =>     0x7f
               *   -127 =>     0x81
               *    128 =>   0x0080
               *   -128 =>     0x80
               *    255 =>   0x00ff
               *   -255 =>   0xff01
               *  16300 =>   0x3fac
               * -16300 =>   0xc054
               *  62300 => 0x00f35c
               * -62300 => 0xff0ca4
               */
              function encode(r, s) {
                const lenR = r.length;
                const lenS = s.length;
                if (lenR === 0) throw new Error('R length is zero');
                if (lenS === 0) throw new Error('S length is zero');
                if (lenR > 33) throw new Error('R length is too long');
                if (lenS > 33) throw new Error('S length is too long');
                if (r[0] & 0x80) throw new Error('R value is negative');
                if (s[0] & 0x80) throw new Error('S value is negative');
                if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80))
                  throw new Error('R value excessively padded');
                if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80))
                  throw new Error('S value excessively padded');
                const signature = Buffer.allocUnsafe(6 + lenR + lenS);
                // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
                signature[0] = 0x30;
                signature[1] = signature.length - 2;
                signature[2] = 0x02;
                signature[3] = r.length;
                r.copy(signature, 4);
                signature[4 + lenR] = 0x02;
                signature[5 + lenR] = s.length;
                s.copy(signature, 6 + lenR);
                return signature;
              }
              exports.encode = encode;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      62: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.Block = void 0;
              const bufferutils_1 = require('./bufferutils');
              const bcrypto = require('./crypto');
              const merkle_1 = require('./merkle');
              const transaction_1 = require('./transaction');
              const types = require('./types');
              const { typeforce } = types;
              const errorMerkleNoTxes = new TypeError(
                'Cannot compute merkle root for zero transactions'
              );
              const errorWitnessNotSegwit = new TypeError(
                'Cannot compute witness commit for non-segwit block'
              );
              class Block {
                constructor() {
                  this.version = 1;
                  this.prevHash = undefined;
                  this.merkleRoot = undefined;
                  this.timestamp = 0;
                  this.witnessCommit = undefined;
                  this.bits = 0;
                  this.nonce = 0;
                  this.transactions = undefined;
                }
                static fromBuffer(buffer) {
                  if (buffer.length < 80)
                    throw new Error('Buffer too small (< 80 bytes)');
                  const bufferReader = new bufferutils_1.BufferReader(buffer);
                  const block = new Block();
                  block.version = bufferReader.readInt32();
                  block.prevHash = bufferReader.readSlice(32);
                  block.merkleRoot = bufferReader.readSlice(32);
                  block.timestamp = bufferReader.readUInt32();
                  block.bits = bufferReader.readUInt32();
                  block.nonce = bufferReader.readUInt32();
                  if (buffer.length === 80) return block;
                  const readTransaction = () => {
                    const tx = transaction_1.Transaction.fromBuffer(
                      bufferReader.buffer.slice(bufferReader.offset),
                      true
                    );
                    bufferReader.offset += tx.byteLength();
                    return tx;
                  };
                  const nTransactions = bufferReader.readVarInt();
                  block.transactions = [];
                  for (let i = 0; i < nTransactions; ++i) {
                    const tx = readTransaction();
                    block.transactions.push(tx);
                  }
                  const witnessCommit = block.getWitnessCommit();
                  // This Block contains a witness commit
                  if (witnessCommit) block.witnessCommit = witnessCommit;
                  return block;
                }
                static fromHex(hex) {
                  return Block.fromBuffer(Buffer.from(hex, 'hex'));
                }
                static calculateTarget(bits) {
                  const exponent = ((bits & 0xff000000) >> 24) - 3;
                  const mantissa = bits & 0x007fffff;
                  const target = Buffer.alloc(32, 0);
                  target.writeUIntBE(mantissa, 29 - exponent, 3);
                  return target;
                }
                static calculateMerkleRoot(transactions, forWitness) {
                  typeforce([{ getHash: types.Function }], transactions);
                  if (transactions.length === 0) throw errorMerkleNoTxes;
                  if (forWitness && !txesHaveWitnessCommit(transactions))
                    throw errorWitnessNotSegwit;
                  const hashes = transactions.map((transaction) =>
                    transaction.getHash(forWitness)
                  );
                  const rootHash = (0, merkle_1.fastMerkleRoot)(
                    hashes,
                    bcrypto.hash256
                  );
                  return forWitness
                    ? bcrypto.hash256(
                        Buffer.concat([
                          rootHash,
                          transactions[0].ins[0].witness[0],
                        ])
                      )
                    : rootHash;
                }
                getWitnessCommit() {
                  if (!txesHaveWitnessCommit(this.transactions)) return null;
                  // The merkle root for the witness data is in an OP_RETURN output.
                  // There is no rule for the index of the output, so use filter to find it.
                  // The root is prepended with 0xaa21a9ed so check for 0x6a24aa21a9ed
                  // If multiple commits are found, the output with highest index is assumed.
                  const witnessCommits = this.transactions[0].outs
                    .filter((out) =>
                      out.script
                        .slice(0, 6)
                        .equals(Buffer.from('6a24aa21a9ed', 'hex'))
                    )
                    .map((out) => out.script.slice(6, 38));
                  if (witnessCommits.length === 0) return null;
                  // Use the commit with the highest output (should only be one though)
                  const result = witnessCommits[witnessCommits.length - 1];
                  if (!(result instanceof Buffer && result.length === 32))
                    return null;
                  return result;
                }
                hasWitnessCommit() {
                  if (
                    this.witnessCommit instanceof Buffer &&
                    this.witnessCommit.length === 32
                  )
                    return true;
                  if (this.getWitnessCommit() !== null) return true;
                  return false;
                }
                hasWitness() {
                  return anyTxHasWitness(this.transactions);
                }
                weight() {
                  const base = this.byteLength(false, false);
                  const total = this.byteLength(false, true);
                  return base * 3 + total;
                }
                byteLength(headersOnly, allowWitness = true) {
                  if (headersOnly || !this.transactions) return 80;
                  return (
                    80 +
                    bufferutils_1.varuint.encodingLength(
                      this.transactions.length
                    ) +
                    this.transactions.reduce(
                      (a, x) => a + x.byteLength(allowWitness),
                      0
                    )
                  );
                }
                getHash() {
                  return bcrypto.hash256(this.toBuffer(true));
                }
                getId() {
                  return (0, bufferutils_1.reverseBuffer)(
                    this.getHash()
                  ).toString('hex');
                }
                getUTCDate() {
                  const date = new Date(0); // epoch
                  date.setUTCSeconds(this.timestamp);
                  return date;
                }
                // TODO: buffer, offset compatibility
                toBuffer(headersOnly) {
                  const buffer = Buffer.allocUnsafe(
                    this.byteLength(headersOnly)
                  );
                  const bufferWriter = new bufferutils_1.BufferWriter(buffer);
                  bufferWriter.writeInt32(this.version);
                  bufferWriter.writeSlice(this.prevHash);
                  bufferWriter.writeSlice(this.merkleRoot);
                  bufferWriter.writeUInt32(this.timestamp);
                  bufferWriter.writeUInt32(this.bits);
                  bufferWriter.writeUInt32(this.nonce);
                  if (headersOnly || !this.transactions) return buffer;
                  bufferutils_1.varuint.encode(
                    this.transactions.length,
                    buffer,
                    bufferWriter.offset
                  );
                  bufferWriter.offset += bufferutils_1.varuint.encode.bytes;
                  this.transactions.forEach((tx) => {
                    const txSize = tx.byteLength(); // TODO: extract from toBuffer?
                    tx.toBuffer(buffer, bufferWriter.offset);
                    bufferWriter.offset += txSize;
                  });
                  return buffer;
                }
                toHex(headersOnly) {
                  return this.toBuffer(headersOnly).toString('hex');
                }
                checkTxRoots() {
                  // If the Block has segwit transactions but no witness commit,
                  // there's no way it can be valid, so fail the check.
                  const hasWitnessCommit = this.hasWitnessCommit();
                  if (!hasWitnessCommit && this.hasWitness()) return false;
                  return (
                    this.__checkMerkleRoot() &&
                    (hasWitnessCommit ? this.__checkWitnessCommit() : true)
                  );
                }
                checkProofOfWork() {
                  const hash = (0, bufferutils_1.reverseBuffer)(this.getHash());
                  const target = Block.calculateTarget(this.bits);
                  return hash.compare(target) <= 0;
                }
                __checkMerkleRoot() {
                  if (!this.transactions) throw errorMerkleNoTxes;
                  const actualMerkleRoot = Block.calculateMerkleRoot(
                    this.transactions
                  );
                  return this.merkleRoot.compare(actualMerkleRoot) === 0;
                }
                __checkWitnessCommit() {
                  if (!this.transactions) throw errorMerkleNoTxes;
                  if (!this.hasWitnessCommit()) throw errorWitnessNotSegwit;
                  const actualWitnessCommit = Block.calculateMerkleRoot(
                    this.transactions,
                    true
                  );
                  return this.witnessCommit.compare(actualWitnessCommit) === 0;
                }
              }
              exports.Block = Block;
              function txesHaveWitnessCommit(transactions) {
                return (
                  transactions instanceof Array &&
                  transactions[0] &&
                  transactions[0].ins &&
                  transactions[0].ins instanceof Array &&
                  transactions[0].ins[0] &&
                  transactions[0].ins[0].witness &&
                  transactions[0].ins[0].witness instanceof Array &&
                  transactions[0].ins[0].witness.length > 0
                );
              }
              function anyTxHasWitness(transactions) {
                return (
                  transactions instanceof Array &&
                  transactions.some(
                    (tx) =>
                      typeof tx === 'object' &&
                      tx.ins instanceof Array &&
                      tx.ins.some(
                        (input) =>
                          typeof input === 'object' &&
                          input.witness instanceof Array &&
                          input.witness.length > 0
                      )
                  )
                );
              }
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './bufferutils': 63,
          './crypto': 64,
          './merkle': 66,
          './transaction': 83,
          './types': 84,
          buffer: 183,
        },
      ],
      63: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.BufferReader =
                exports.BufferWriter =
                exports.cloneBuffer =
                exports.reverseBuffer =
                exports.writeUInt64LE =
                exports.readUInt64LE =
                exports.varuint =
                  void 0;
              const types = require('./types');
              const { typeforce } = types;
              const varuint = require('varuint-bitcoin');
              exports.varuint = varuint;
              // https://github.com/feross/buffer/blob/master/index.js#L1127
              function verifuint(value, max) {
                if (typeof value !== 'number')
                  throw new Error('cannot write a non-number as a number');
                if (value < 0)
                  throw new Error(
                    'specified a negative value for writing an unsigned value'
                  );
                if (value > max)
                  throw new Error('RangeError: value out of range');
                if (Math.floor(value) !== value)
                  throw new Error('value has a fractional component');
              }
              function readUInt64LE(buffer, offset) {
                const a = buffer.readUInt32LE(offset);
                let b = buffer.readUInt32LE(offset + 4);
                b *= 0x100000000;
                verifuint(b + a, 0x001fffffffffffff);
                return b + a;
              }
              exports.readUInt64LE = readUInt64LE;
              function writeUInt64LE(buffer, value, offset) {
                verifuint(value, 0x001fffffffffffff);
                buffer.writeInt32LE(value & -1, offset);
                buffer.writeUInt32LE(
                  Math.floor(value / 0x100000000),
                  offset + 4
                );
                return offset + 8;
              }
              exports.writeUInt64LE = writeUInt64LE;
              function reverseBuffer(buffer) {
                if (buffer.length < 1) return buffer;
                let j = buffer.length - 1;
                let tmp = 0;
                for (let i = 0; i < buffer.length / 2; i++) {
                  tmp = buffer[i];
                  buffer[i] = buffer[j];
                  buffer[j] = tmp;
                  j--;
                }
                return buffer;
              }
              exports.reverseBuffer = reverseBuffer;
              function cloneBuffer(buffer) {
                const clone = Buffer.allocUnsafe(buffer.length);
                buffer.copy(clone);
                return clone;
              }
              exports.cloneBuffer = cloneBuffer;
              /**
               * Helper class for serialization of bitcoin data types into a pre-allocated buffer.
               */
              class BufferWriter {
                constructor(buffer, offset = 0) {
                  this.buffer = buffer;
                  this.offset = offset;
                  typeforce(types.tuple(types.Buffer, types.UInt32), [
                    buffer,
                    offset,
                  ]);
                }
                static withCapacity(size) {
                  return new BufferWriter(Buffer.alloc(size));
                }
                writeUInt8(i) {
                  this.offset = this.buffer.writeUInt8(i, this.offset);
                }
                writeInt32(i) {
                  this.offset = this.buffer.writeInt32LE(i, this.offset);
                }
                writeUInt32(i) {
                  this.offset = this.buffer.writeUInt32LE(i, this.offset);
                }
                writeUInt64(i) {
                  this.offset = writeUInt64LE(this.buffer, i, this.offset);
                }
                writeVarInt(i) {
                  varuint.encode(i, this.buffer, this.offset);
                  this.offset += varuint.encode.bytes;
                }
                writeSlice(slice) {
                  if (this.buffer.length < this.offset + slice.length) {
                    throw new Error('Cannot write slice out of bounds');
                  }
                  this.offset += slice.copy(this.buffer, this.offset);
                }
                writeVarSlice(slice) {
                  this.writeVarInt(slice.length);
                  this.writeSlice(slice);
                }
                writeVector(vector) {
                  this.writeVarInt(vector.length);
                  vector.forEach((buf) => this.writeVarSlice(buf));
                }
                end() {
                  if (this.buffer.length === this.offset) {
                    return this.buffer;
                  }
                  throw new Error(
                    `buffer size ${this.buffer.length}, offset ${this.offset}`
                  );
                }
              }
              exports.BufferWriter = BufferWriter;
              /**
               * Helper class for reading of bitcoin data types from a buffer.
               */
              class BufferReader {
                constructor(buffer, offset = 0) {
                  this.buffer = buffer;
                  this.offset = offset;
                  typeforce(types.tuple(types.Buffer, types.UInt32), [
                    buffer,
                    offset,
                  ]);
                }
                readUInt8() {
                  const result = this.buffer.readUInt8(this.offset);
                  this.offset++;
                  return result;
                }
                readInt32() {
                  const result = this.buffer.readInt32LE(this.offset);
                  this.offset += 4;
                  return result;
                }
                readUInt32() {
                  const result = this.buffer.readUInt32LE(this.offset);
                  this.offset += 4;
                  return result;
                }
                readUInt64() {
                  const result = readUInt64LE(this.buffer, this.offset);
                  this.offset += 8;
                  return result;
                }
                readVarInt() {
                  const vi = varuint.decode(this.buffer, this.offset);
                  this.offset += varuint.decode.bytes;
                  return vi;
                }
                readSlice(n) {
                  if (this.buffer.length < this.offset + n) {
                    throw new Error('Cannot read slice out of bounds');
                  }
                  const result = this.buffer.slice(
                    this.offset,
                    this.offset + n
                  );
                  this.offset += n;
                  return result;
                }
                readVarSlice() {
                  return this.readSlice(this.readVarInt());
                }
                readVector() {
                  const count = this.readVarInt();
                  const vector = [];
                  for (let i = 0; i < count; i++)
                    vector.push(this.readVarSlice());
                  return vector;
                }
              }
              exports.BufferReader = BufferReader;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { './types': 84, buffer: 183, 'varuint-bitcoin': 175 },
      ],
      64: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.taggedHash =
                exports.hash256 =
                exports.hash160 =
                exports.sha256 =
                exports.sha1 =
                exports.ripemd160 =
                  void 0;
              const createHash = require('create-hash');
              function ripemd160(buffer) {
                try {
                  return createHash('rmd160').update(buffer).digest();
                } catch (err) {
                  return createHash('ripemd160').update(buffer).digest();
                }
              }
              exports.ripemd160 = ripemd160;
              function sha1(buffer) {
                return createHash('sha1').update(buffer).digest();
              }
              exports.sha1 = sha1;
              function sha256(buffer) {
                return createHash('sha256').update(buffer).digest();
              }
              exports.sha256 = sha256;
              function hash160(buffer) {
                return ripemd160(sha256(buffer));
              }
              exports.hash160 = hash160;
              function hash256(buffer) {
                return sha256(sha256(buffer));
              }
              exports.hash256 = hash256;
              const TAGS = [
                'BIP0340/challenge',
                'BIP0340/aux',
                'BIP0340/nonce',
                'TapLeaf',
                'TapBranch',
                'TapSighash',
                'TapTweak',
                'KeyAgg list',
                'KeyAgg coefficient',
              ];
              /** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */
              const TAGGED_HASH_PREFIXES = Object.fromEntries(
                TAGS.map((tag) => {
                  const tagHash = sha256(Buffer.from(tag));
                  return [tag, Buffer.concat([tagHash, tagHash])];
                })
              );
              function taggedHash(prefix, data) {
                return sha256(
                  Buffer.concat([TAGGED_HASH_PREFIXES[prefix], data])
                );
              }
              exports.taggedHash = taggedHash;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183, 'create-hash': 91 },
      ],
      65: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.Transaction =
            exports.opcodes =
            exports.Psbt =
            exports.Block =
            exports.script =
            exports.payments =
            exports.networks =
            exports.crypto =
            exports.address =
              void 0;
          const address = require('./address');
          exports.address = address;
          const crypto = require('./crypto');
          exports.crypto = crypto;
          const networks = require('./networks');
          exports.networks = networks;
          const payments = require('./payments');
          exports.payments = payments;
          const script = require('./script');
          exports.script = script;
          var block_1 = require('./block');
          Object.defineProperty(exports, 'Block', {
            enumerable: true,
            get: function () {
              return block_1.Block;
            },
          });
          var psbt_1 = require('./psbt');
          Object.defineProperty(exports, 'Psbt', {
            enumerable: true,
            get: function () {
              return psbt_1.Psbt;
            },
          });
          var ops_1 = require('./ops');
          Object.defineProperty(exports, 'opcodes', {
            enumerable: true,
            get: function () {
              return ops_1.OPS;
            },
          });
          var transaction_1 = require('./transaction');
          Object.defineProperty(exports, 'Transaction', {
            enumerable: true,
            get: function () {
              return transaction_1.Transaction;
            },
          });
        },
        {
          './address': 60,
          './block': 62,
          './crypto': 64,
          './networks': 67,
          './ops': 68,
          './payments': 70,
          './psbt': 78,
          './script': 80,
          './transaction': 83,
        },
      ],
      66: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.fastMerkleRoot = void 0;
              function fastMerkleRoot(values, digestFn) {
                if (!Array.isArray(values))
                  throw TypeError('Expected values Array');
                if (typeof digestFn !== 'function')
                  throw TypeError('Expected digest Function');
                let length = values.length;
                const results = values.concat();
                while (length > 1) {
                  let j = 0;
                  for (let i = 0; i < length; i += 2, ++j) {
                    const left = results[i];
                    const right = i + 1 === length ? left : results[i + 1];
                    const data = Buffer.concat([left, right]);
                    results[j] = digestFn(data);
                  }
                  length = j;
                }
                return results[0];
              }
              exports.fastMerkleRoot = fastMerkleRoot;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      67: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.testnet = exports.regtest = exports.bitcoin = void 0;
          exports.bitcoin = {
            messagePrefix: '\x18Bitcoin Signed Message:\n',
            bech32: 'bc',
            bip32: {
              public: 0x0488b21e,
              private: 0x0488ade4,
            },
            pubKeyHash: 0x00,
            scriptHash: 0x05,
            wif: 0x80,
          };
          exports.regtest = {
            messagePrefix: '\x18Bitcoin Signed Message:\n',
            bech32: 'bcrt',
            bip32: {
              public: 0x043587cf,
              private: 0x04358394,
            },
            pubKeyHash: 0x6f,
            scriptHash: 0xc4,
            wif: 0xef,
          };
          exports.testnet = {
            messagePrefix: '\x18Bitcoin Signed Message:\n',
            bech32: 'tb',
            bip32: {
              public: 0x043587cf,
              private: 0x04358394,
            },
            pubKeyHash: 0x6f,
            scriptHash: 0xc4,
            wif: 0xef,
          };
        },
        {},
      ],
      68: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.REVERSE_OPS = exports.OPS = void 0;
          const OPS = {
            OP_FALSE: 0,
            OP_0: 0,
            OP_PUSHDATA1: 76,
            OP_PUSHDATA2: 77,
            OP_PUSHDATA4: 78,
            OP_1NEGATE: 79,
            OP_RESERVED: 80,
            OP_TRUE: 81,
            OP_1: 81,
            OP_2: 82,
            OP_3: 83,
            OP_4: 84,
            OP_5: 85,
            OP_6: 86,
            OP_7: 87,
            OP_8: 88,
            OP_9: 89,
            OP_10: 90,
            OP_11: 91,
            OP_12: 92,
            OP_13: 93,
            OP_14: 94,
            OP_15: 95,
            OP_16: 96,
            OP_NOP: 97,
            OP_VER: 98,
            OP_IF: 99,
            OP_NOTIF: 100,
            OP_VERIF: 101,
            OP_VERNOTIF: 102,
            OP_ELSE: 103,
            OP_ENDIF: 104,
            OP_VERIFY: 105,
            OP_RETURN: 106,
            OP_TOALTSTACK: 107,
            OP_FROMALTSTACK: 108,
            OP_2DROP: 109,
            OP_2DUP: 110,
            OP_3DUP: 111,
            OP_2OVER: 112,
            OP_2ROT: 113,
            OP_2SWAP: 114,
            OP_IFDUP: 115,
            OP_DEPTH: 116,
            OP_DROP: 117,
            OP_DUP: 118,
            OP_NIP: 119,
            OP_OVER: 120,
            OP_PICK: 121,
            OP_ROLL: 122,
            OP_ROT: 123,
            OP_SWAP: 124,
            OP_TUCK: 125,
            OP_CAT: 126,
            OP_SUBSTR: 127,
            OP_LEFT: 128,
            OP_RIGHT: 129,
            OP_SIZE: 130,
            OP_INVERT: 131,
            OP_AND: 132,
            OP_OR: 133,
            OP_XOR: 134,
            OP_EQUAL: 135,
            OP_EQUALVERIFY: 136,
            OP_RESERVED1: 137,
            OP_RESERVED2: 138,
            OP_1ADD: 139,
            OP_1SUB: 140,
            OP_2MUL: 141,
            OP_2DIV: 142,
            OP_NEGATE: 143,
            OP_ABS: 144,
            OP_NOT: 145,
            OP_0NOTEQUAL: 146,
            OP_ADD: 147,
            OP_SUB: 148,
            OP_MUL: 149,
            OP_DIV: 150,
            OP_MOD: 151,
            OP_LSHIFT: 152,
            OP_RSHIFT: 153,
            OP_BOOLAND: 154,
            OP_BOOLOR: 155,
            OP_NUMEQUAL: 156,
            OP_NUMEQUALVERIFY: 157,
            OP_NUMNOTEQUAL: 158,
            OP_LESSTHAN: 159,
            OP_GREATERTHAN: 160,
            OP_LESSTHANOREQUAL: 161,
            OP_GREATERTHANOREQUAL: 162,
            OP_MIN: 163,
            OP_MAX: 164,
            OP_WITHIN: 165,
            OP_RIPEMD160: 166,
            OP_SHA1: 167,
            OP_SHA256: 168,
            OP_HASH160: 169,
            OP_HASH256: 170,
            OP_CODESEPARATOR: 171,
            OP_CHECKSIG: 172,
            OP_CHECKSIGVERIFY: 173,
            OP_CHECKMULTISIG: 174,
            OP_CHECKMULTISIGVERIFY: 175,
            OP_NOP1: 176,
            OP_NOP2: 177,
            OP_CHECKLOCKTIMEVERIFY: 177,
            OP_NOP3: 178,
            OP_CHECKSEQUENCEVERIFY: 178,
            OP_NOP4: 179,
            OP_NOP5: 180,
            OP_NOP6: 181,
            OP_NOP7: 182,
            OP_NOP8: 183,
            OP_NOP9: 184,
            OP_NOP10: 185,
            OP_PUBKEYHASH: 253,
            OP_PUBKEY: 254,
            OP_INVALIDOPCODE: 255,
          };
          exports.OPS = OPS;
          const REVERSE_OPS = {};
          exports.REVERSE_OPS = REVERSE_OPS;
          for (const op of Object.keys(OPS)) {
            const code = OPS[op];
            REVERSE_OPS[code] = op;
          }
        },
        {},
      ],
      69: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.p2data = void 0;
          const networks_1 = require('../networks');
          const bscript = require('../script');
          const types_1 = require('../types');
          const lazy = require('./lazy');
          const OPS = bscript.OPS;
          function stacksEqual(a, b) {
            if (a.length !== b.length) return false;
            return a.every((x, i) => {
              return x.equals(b[i]);
            });
          }
          // output: OP_RETURN ...
          function p2data(a, opts) {
            if (!a.data && !a.output) throw new TypeError('Not enough data');
            opts = Object.assign({ validate: true }, opts || {});
            (0, types_1.typeforce)(
              {
                network: types_1.typeforce.maybe(types_1.typeforce.Object),
                output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                data: types_1.typeforce.maybe(
                  types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
                ),
              },
              a
            );
            const network = a.network || networks_1.bitcoin;
            const o = { name: 'embed', network };
            lazy.prop(o, 'output', () => {
              if (!a.data) return;
              return bscript.compile([OPS.OP_RETURN].concat(a.data));
            });
            lazy.prop(o, 'data', () => {
              if (!a.output) return;
              return bscript.decompile(a.output).slice(1);
            });
            // extended validation
            if (opts.validate) {
              if (a.output) {
                const chunks = bscript.decompile(a.output);
                if (chunks[0] !== OPS.OP_RETURN)
                  throw new TypeError('Output is invalid');
                if (!chunks.slice(1).every(types_1.typeforce.Buffer))
                  throw new TypeError('Output is invalid');
                if (a.data && !stacksEqual(a.data, o.data))
                  throw new TypeError('Data mismatch');
              }
            }
            return Object.assign(o, a);
          }
          exports.p2data = p2data;
        },
        { '../networks': 67, '../script': 80, '../types': 84, './lazy': 71 },
      ],
      70: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.p2wsh =
            exports.p2wpkh =
            exports.p2sh =
            exports.p2pkh =
            exports.p2pk =
            exports.p2ms =
            exports.embed =
              void 0;
          const embed_1 = require('./embed');
          Object.defineProperty(exports, 'embed', {
            enumerable: true,
            get: function () {
              return embed_1.p2data;
            },
          });
          const p2ms_1 = require('./p2ms');
          Object.defineProperty(exports, 'p2ms', {
            enumerable: true,
            get: function () {
              return p2ms_1.p2ms;
            },
          });
          const p2pk_1 = require('./p2pk');
          Object.defineProperty(exports, 'p2pk', {
            enumerable: true,
            get: function () {
              return p2pk_1.p2pk;
            },
          });
          const p2pkh_1 = require('./p2pkh');
          Object.defineProperty(exports, 'p2pkh', {
            enumerable: true,
            get: function () {
              return p2pkh_1.p2pkh;
            },
          });
          const p2sh_1 = require('./p2sh');
          Object.defineProperty(exports, 'p2sh', {
            enumerable: true,
            get: function () {
              return p2sh_1.p2sh;
            },
          });
          const p2wpkh_1 = require('./p2wpkh');
          Object.defineProperty(exports, 'p2wpkh', {
            enumerable: true,
            get: function () {
              return p2wpkh_1.p2wpkh;
            },
          });
          const p2wsh_1 = require('./p2wsh');
          Object.defineProperty(exports, 'p2wsh', {
            enumerable: true,
            get: function () {
              return p2wsh_1.p2wsh;
            },
          });
          // TODO
          // witness commitment
        },
        {
          './embed': 69,
          './p2ms': 72,
          './p2pk': 73,
          './p2pkh': 74,
          './p2sh': 75,
          './p2wpkh': 76,
          './p2wsh': 77,
        },
      ],
      71: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.value = exports.prop = void 0;
          function prop(object, name, f) {
            Object.defineProperty(object, name, {
              configurable: true,
              enumerable: true,
              get() {
                const _value = f.call(this);
                this[name] = _value;
                return _value;
              },
              set(_value) {
                Object.defineProperty(this, name, {
                  configurable: true,
                  enumerable: true,
                  value: _value,
                  writable: true,
                });
              },
            });
          }
          exports.prop = prop;
          function value(f) {
            let _value;
            return () => {
              if (_value !== undefined) return _value;
              _value = f();
              return _value;
            };
          }
          exports.value = value;
        },
        {},
      ],
      72: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.p2ms = void 0;
          const networks_1 = require('../networks');
          const bscript = require('../script');
          const types_1 = require('../types');
          const lazy = require('./lazy');
          const OPS = bscript.OPS;
          const OP_INT_BASE = OPS.OP_RESERVED; // OP_1 - 1
          function stacksEqual(a, b) {
            if (a.length !== b.length) return false;
            return a.every((x, i) => {
              return x.equals(b[i]);
            });
          }
          // input: OP_0 [signatures ...]
          // output: m [pubKeys ...] n OP_CHECKMULTISIG
          function p2ms(a, opts) {
            if (
              !a.input &&
              !a.output &&
              !(a.pubkeys && a.m !== undefined) &&
              !a.signatures
            )
              throw new TypeError('Not enough data');
            opts = Object.assign({ validate: true }, opts || {});
            function isAcceptableSignature(x) {
              return (
                bscript.isCanonicalScriptSignature(x) ||
                (opts.allowIncomplete && x === OPS.OP_0) !== undefined
              );
            }
            (0, types_1.typeforce)(
              {
                network: types_1.typeforce.maybe(types_1.typeforce.Object),
                m: types_1.typeforce.maybe(types_1.typeforce.Number),
                n: types_1.typeforce.maybe(types_1.typeforce.Number),
                output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                pubkeys: types_1.typeforce.maybe(
                  types_1.typeforce.arrayOf(types_1.isPoint)
                ),
                signatures: types_1.typeforce.maybe(
                  types_1.typeforce.arrayOf(isAcceptableSignature)
                ),
                input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              },
              a
            );
            const network = a.network || networks_1.bitcoin;
            const o = { network };
            let chunks = [];
            let decoded = false;
            function decode(output) {
              if (decoded) return;
              decoded = true;
              chunks = bscript.decompile(output);
              o.m = chunks[0] - OP_INT_BASE;
              o.n = chunks[chunks.length - 2] - OP_INT_BASE;
              o.pubkeys = chunks.slice(1, -2);
            }
            lazy.prop(o, 'output', () => {
              if (!a.m) return;
              if (!o.n) return;
              if (!a.pubkeys) return;
              return bscript.compile(
                [].concat(
                  OP_INT_BASE + a.m,
                  a.pubkeys,
                  OP_INT_BASE + o.n,
                  OPS.OP_CHECKMULTISIG
                )
              );
            });
            lazy.prop(o, 'm', () => {
              if (!o.output) return;
              decode(o.output);
              return o.m;
            });
            lazy.prop(o, 'n', () => {
              if (!o.pubkeys) return;
              return o.pubkeys.length;
            });
            lazy.prop(o, 'pubkeys', () => {
              if (!a.output) return;
              decode(a.output);
              return o.pubkeys;
            });
            lazy.prop(o, 'signatures', () => {
              if (!a.input) return;
              return bscript.decompile(a.input).slice(1);
            });
            lazy.prop(o, 'input', () => {
              if (!a.signatures) return;
              return bscript.compile([OPS.OP_0].concat(a.signatures));
            });
            lazy.prop(o, 'witness', () => {
              if (!o.input) return;
              return [];
            });
            lazy.prop(o, 'name', () => {
              if (!o.m || !o.n) return;
              return `p2ms(${o.m} of ${o.n})`;
            });
            // extended validation
            if (opts.validate) {
              if (a.output) {
                decode(a.output);
                if (!types_1.typeforce.Number(chunks[0]))
                  throw new TypeError('Output is invalid');
                if (!types_1.typeforce.Number(chunks[chunks.length - 2]))
                  throw new TypeError('Output is invalid');
                if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG)
                  throw new TypeError('Output is invalid');
                if (
                  o.m <= 0 ||
                  o.n > 16 ||
                  o.m > o.n ||
                  o.n !== chunks.length - 3
                )
                  throw new TypeError('Output is invalid');
                if (!o.pubkeys.every((x) => (0, types_1.isPoint)(x)))
                  throw new TypeError('Output is invalid');
                if (a.m !== undefined && a.m !== o.m)
                  throw new TypeError('m mismatch');
                if (a.n !== undefined && a.n !== o.n)
                  throw new TypeError('n mismatch');
                if (a.pubkeys && !stacksEqual(a.pubkeys, o.pubkeys))
                  throw new TypeError('Pubkeys mismatch');
              }
              if (a.pubkeys) {
                if (a.n !== undefined && a.n !== a.pubkeys.length)
                  throw new TypeError('Pubkey count mismatch');
                o.n = a.pubkeys.length;
                if (o.n < o.m)
                  throw new TypeError('Pubkey count cannot be less than m');
              }
              if (a.signatures) {
                if (a.signatures.length < o.m)
                  throw new TypeError('Not enough signatures provided');
                if (a.signatures.length > o.m)
                  throw new TypeError('Too many signatures provided');
              }
              if (a.input) {
                if (a.input[0] !== OPS.OP_0)
                  throw new TypeError('Input is invalid');
                if (
                  o.signatures.length === 0 ||
                  !o.signatures.every(isAcceptableSignature)
                )
                  throw new TypeError('Input has invalid signature(s)');
                if (a.signatures && !stacksEqual(a.signatures, o.signatures))
                  throw new TypeError('Signature mismatch');
                if (a.m !== undefined && a.m !== a.signatures.length)
                  throw new TypeError('Signature count mismatch');
              }
            }
            return Object.assign(o, a);
          }
          exports.p2ms = p2ms;
        },
        { '../networks': 67, '../script': 80, '../types': 84, './lazy': 71 },
      ],
      73: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.p2pk = void 0;
          const networks_1 = require('../networks');
          const bscript = require('../script');
          const types_1 = require('../types');
          const lazy = require('./lazy');
          const OPS = bscript.OPS;
          // input: {signature}
          // output: {pubKey} OP_CHECKSIG
          function p2pk(a, opts) {
            if (!a.input && !a.output && !a.pubkey && !a.input && !a.signature)
              throw new TypeError('Not enough data');
            opts = Object.assign({ validate: true }, opts || {});
            (0, types_1.typeforce)(
              {
                network: types_1.typeforce.maybe(types_1.typeforce.Object),
                output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                pubkey: types_1.typeforce.maybe(types_1.isPoint),
                signature: types_1.typeforce.maybe(
                  bscript.isCanonicalScriptSignature
                ),
                input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              },
              a
            );
            const _chunks = lazy.value(() => {
              return bscript.decompile(a.input);
            });
            const network = a.network || networks_1.bitcoin;
            const o = { name: 'p2pk', network };
            lazy.prop(o, 'output', () => {
              if (!a.pubkey) return;
              return bscript.compile([a.pubkey, OPS.OP_CHECKSIG]);
            });
            lazy.prop(o, 'pubkey', () => {
              if (!a.output) return;
              return a.output.slice(1, -1);
            });
            lazy.prop(o, 'signature', () => {
              if (!a.input) return;
              return _chunks()[0];
            });
            lazy.prop(o, 'input', () => {
              if (!a.signature) return;
              return bscript.compile([a.signature]);
            });
            lazy.prop(o, 'witness', () => {
              if (!o.input) return;
              return [];
            });
            // extended validation
            if (opts.validate) {
              if (a.output) {
                if (a.output[a.output.length - 1] !== OPS.OP_CHECKSIG)
                  throw new TypeError('Output is invalid');
                if (!(0, types_1.isPoint)(o.pubkey))
                  throw new TypeError('Output pubkey is invalid');
                if (a.pubkey && !a.pubkey.equals(o.pubkey))
                  throw new TypeError('Pubkey mismatch');
              }
              if (a.signature) {
                if (a.input && !a.input.equals(o.input))
                  throw new TypeError('Signature mismatch');
              }
              if (a.input) {
                if (_chunks().length !== 1)
                  throw new TypeError('Input is invalid');
                if (!bscript.isCanonicalScriptSignature(o.signature))
                  throw new TypeError('Input has invalid signature');
              }
            }
            return Object.assign(o, a);
          }
          exports.p2pk = p2pk;
        },
        { '../networks': 67, '../script': 80, '../types': 84, './lazy': 71 },
      ],
      74: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.p2pkh = void 0;
              const bcrypto = require('../crypto');
              const networks_1 = require('../networks');
              const bscript = require('../script');
              const types_1 = require('../types');
              const lazy = require('./lazy');
              const bs58check = require('bs58check');
              const OPS = bscript.OPS;
              // input: {signature} {pubkey}
              // output: OP_DUP OP_HASH160 {hash160(pubkey)} OP_EQUALVERIFY OP_CHECKSIG
              function p2pkh(a, opts) {
                if (!a.address && !a.hash && !a.output && !a.pubkey && !a.input)
                  throw new TypeError('Not enough data');
                opts = Object.assign({ validate: true }, opts || {});
                (0, types_1.typeforce)(
                  {
                    network: types_1.typeforce.maybe(types_1.typeforce.Object),
                    address: types_1.typeforce.maybe(types_1.typeforce.String),
                    hash: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(20)
                    ),
                    output: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(25)
                    ),
                    pubkey: types_1.typeforce.maybe(types_1.isPoint),
                    signature: types_1.typeforce.maybe(
                      bscript.isCanonicalScriptSignature
                    ),
                    input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                  },
                  a
                );
                const _address = lazy.value(() => {
                  const payload = bs58check.decode(a.address);
                  const version = payload.readUInt8(0);
                  const hash = payload.slice(1);
                  return { version, hash };
                });
                const _chunks = lazy.value(() => {
                  return bscript.decompile(a.input);
                });
                const network = a.network || networks_1.bitcoin;
                const o = { name: 'p2pkh', network };
                lazy.prop(o, 'address', () => {
                  if (!o.hash) return;
                  const payload = Buffer.allocUnsafe(21);
                  payload.writeUInt8(network.pubKeyHash, 0);
                  o.hash.copy(payload, 1);
                  return bs58check.encode(payload);
                });
                lazy.prop(o, 'hash', () => {
                  if (a.output) return a.output.slice(3, 23);
                  if (a.address) return _address().hash;
                  if (a.pubkey || o.pubkey)
                    return bcrypto.hash160(a.pubkey || o.pubkey);
                });
                lazy.prop(o, 'output', () => {
                  if (!o.hash) return;
                  return bscript.compile([
                    OPS.OP_DUP,
                    OPS.OP_HASH160,
                    o.hash,
                    OPS.OP_EQUALVERIFY,
                    OPS.OP_CHECKSIG,
                  ]);
                });
                lazy.prop(o, 'pubkey', () => {
                  if (!a.input) return;
                  return _chunks()[1];
                });
                lazy.prop(o, 'signature', () => {
                  if (!a.input) return;
                  return _chunks()[0];
                });
                lazy.prop(o, 'input', () => {
                  if (!a.pubkey) return;
                  if (!a.signature) return;
                  return bscript.compile([a.signature, a.pubkey]);
                });
                lazy.prop(o, 'witness', () => {
                  if (!o.input) return;
                  return [];
                });
                // extended validation
                if (opts.validate) {
                  let hash = Buffer.from([]);
                  if (a.address) {
                    if (_address().version !== network.pubKeyHash)
                      throw new TypeError(
                        'Invalid version or Network mismatch'
                      );
                    if (_address().hash.length !== 20)
                      throw new TypeError('Invalid address');
                    hash = _address().hash;
                  }
                  if (a.hash) {
                    if (hash.length > 0 && !hash.equals(a.hash))
                      throw new TypeError('Hash mismatch');
                    else hash = a.hash;
                  }
                  if (a.output) {
                    if (
                      a.output.length !== 25 ||
                      a.output[0] !== OPS.OP_DUP ||
                      a.output[1] !== OPS.OP_HASH160 ||
                      a.output[2] !== 0x14 ||
                      a.output[23] !== OPS.OP_EQUALVERIFY ||
                      a.output[24] !== OPS.OP_CHECKSIG
                    )
                      throw new TypeError('Output is invalid');
                    const hash2 = a.output.slice(3, 23);
                    if (hash.length > 0 && !hash.equals(hash2))
                      throw new TypeError('Hash mismatch');
                    else hash = hash2;
                  }
                  if (a.pubkey) {
                    const pkh = bcrypto.hash160(a.pubkey);
                    if (hash.length > 0 && !hash.equals(pkh))
                      throw new TypeError('Hash mismatch');
                    else hash = pkh;
                  }
                  if (a.input) {
                    const chunks = _chunks();
                    if (chunks.length !== 2)
                      throw new TypeError('Input is invalid');
                    if (!bscript.isCanonicalScriptSignature(chunks[0]))
                      throw new TypeError('Input has invalid signature');
                    if (!(0, types_1.isPoint)(chunks[1]))
                      throw new TypeError('Input has invalid pubkey');
                    if (a.signature && !a.signature.equals(chunks[0]))
                      throw new TypeError('Signature mismatch');
                    if (a.pubkey && !a.pubkey.equals(chunks[1]))
                      throw new TypeError('Pubkey mismatch');
                    const pkh = bcrypto.hash160(chunks[1]);
                    if (hash.length > 0 && !hash.equals(pkh))
                      throw new TypeError('Hash mismatch');
                  }
                }
                return Object.assign(o, a);
              }
              exports.p2pkh = p2pkh;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          '../crypto': 64,
          '../networks': 67,
          '../script': 80,
          '../types': 84,
          './lazy': 71,
          bs58check: 89,
          buffer: 183,
        },
      ],
      75: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.p2sh = void 0;
              const bcrypto = require('../crypto');
              const networks_1 = require('../networks');
              const bscript = require('../script');
              const types_1 = require('../types');
              const lazy = require('./lazy');
              const bs58check = require('bs58check');
              const OPS = bscript.OPS;
              function stacksEqual(a, b) {
                if (a.length !== b.length) return false;
                return a.every((x, i) => {
                  return x.equals(b[i]);
                });
              }
              // input: [redeemScriptSig ...] {redeemScript}
              // witness: <?>
              // output: OP_HASH160 {hash160(redeemScript)} OP_EQUAL
              function p2sh(a, opts) {
                if (!a.address && !a.hash && !a.output && !a.redeem && !a.input)
                  throw new TypeError('Not enough data');
                opts = Object.assign({ validate: true }, opts || {});
                (0, types_1.typeforce)(
                  {
                    network: types_1.typeforce.maybe(types_1.typeforce.Object),
                    address: types_1.typeforce.maybe(types_1.typeforce.String),
                    hash: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(20)
                    ),
                    output: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(23)
                    ),
                    redeem: types_1.typeforce.maybe({
                      network: types_1.typeforce.maybe(
                        types_1.typeforce.Object
                      ),
                      output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                      input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                      witness: types_1.typeforce.maybe(
                        types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
                      ),
                    }),
                    input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                    witness: types_1.typeforce.maybe(
                      types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
                    ),
                  },
                  a
                );
                let network = a.network;
                if (!network) {
                  network =
                    (a.redeem && a.redeem.network) || networks_1.bitcoin;
                }
                const o = { network };
                const _address = lazy.value(() => {
                  const payload = bs58check.decode(a.address);
                  const version = payload.readUInt8(0);
                  const hash = payload.slice(1);
                  return { version, hash };
                });
                const _chunks = lazy.value(() => {
                  return bscript.decompile(a.input);
                });
                const _redeem = lazy.value(() => {
                  const chunks = _chunks();
                  return {
                    network,
                    output: chunks[chunks.length - 1],
                    input: bscript.compile(chunks.slice(0, -1)),
                    witness: a.witness || [],
                  };
                });
                // output dependents
                lazy.prop(o, 'address', () => {
                  if (!o.hash) return;
                  const payload = Buffer.allocUnsafe(21);
                  payload.writeUInt8(o.network.scriptHash, 0);
                  o.hash.copy(payload, 1);
                  return bs58check.encode(payload);
                });
                lazy.prop(o, 'hash', () => {
                  // in order of least effort
                  if (a.output) return a.output.slice(2, 22);
                  if (a.address) return _address().hash;
                  if (o.redeem && o.redeem.output)
                    return bcrypto.hash160(o.redeem.output);
                });
                lazy.prop(o, 'output', () => {
                  if (!o.hash) return;
                  return bscript.compile([
                    OPS.OP_HASH160,
                    o.hash,
                    OPS.OP_EQUAL,
                  ]);
                });
                // input dependents
                lazy.prop(o, 'redeem', () => {
                  if (!a.input) return;
                  return _redeem();
                });
                lazy.prop(o, 'input', () => {
                  if (!a.redeem || !a.redeem.input || !a.redeem.output) return;
                  return bscript.compile(
                    [].concat(
                      bscript.decompile(a.redeem.input),
                      a.redeem.output
                    )
                  );
                });
                lazy.prop(o, 'witness', () => {
                  if (o.redeem && o.redeem.witness) return o.redeem.witness;
                  if (o.input) return [];
                });
                lazy.prop(o, 'name', () => {
                  const nameParts = ['p2sh'];
                  if (o.redeem !== undefined && o.redeem.name !== undefined)
                    nameParts.push(o.redeem.name);
                  return nameParts.join('-');
                });
                if (opts.validate) {
                  let hash = Buffer.from([]);
                  if (a.address) {
                    if (_address().version !== network.scriptHash)
                      throw new TypeError(
                        'Invalid version or Network mismatch'
                      );
                    if (_address().hash.length !== 20)
                      throw new TypeError('Invalid address');
                    hash = _address().hash;
                  }
                  if (a.hash) {
                    if (hash.length > 0 && !hash.equals(a.hash))
                      throw new TypeError('Hash mismatch');
                    else hash = a.hash;
                  }
                  if (a.output) {
                    if (
                      a.output.length !== 23 ||
                      a.output[0] !== OPS.OP_HASH160 ||
                      a.output[1] !== 0x14 ||
                      a.output[22] !== OPS.OP_EQUAL
                    )
                      throw new TypeError('Output is invalid');
                    const hash2 = a.output.slice(2, 22);
                    if (hash.length > 0 && !hash.equals(hash2))
                      throw new TypeError('Hash mismatch');
                    else hash = hash2;
                  }
                  // inlined to prevent 'no-inner-declarations' failing
                  const checkRedeem = (redeem) => {
                    // is the redeem output empty/invalid?
                    if (redeem.output) {
                      const decompile = bscript.decompile(redeem.output);
                      if (!decompile || decompile.length < 1)
                        throw new TypeError('Redeem.output too short');
                      // match hash against other sources
                      const hash2 = bcrypto.hash160(redeem.output);
                      if (hash.length > 0 && !hash.equals(hash2))
                        throw new TypeError('Hash mismatch');
                      else hash = hash2;
                    }
                    if (redeem.input) {
                      const hasInput = redeem.input.length > 0;
                      const hasWitness =
                        redeem.witness && redeem.witness.length > 0;
                      if (!hasInput && !hasWitness)
                        throw new TypeError('Empty input');
                      if (hasInput && hasWitness)
                        throw new TypeError('Input and witness provided');
                      if (hasInput) {
                        const richunks = bscript.decompile(redeem.input);
                        if (!bscript.isPushOnly(richunks))
                          throw new TypeError('Non push-only scriptSig');
                      }
                    }
                  };
                  if (a.input) {
                    const chunks = _chunks();
                    if (!chunks || chunks.length < 1)
                      throw new TypeError('Input too short');
                    if (!Buffer.isBuffer(_redeem().output))
                      throw new TypeError('Input is invalid');
                    checkRedeem(_redeem());
                  }
                  if (a.redeem) {
                    if (a.redeem.network && a.redeem.network !== network)
                      throw new TypeError('Network mismatch');
                    if (a.input) {
                      const redeem = _redeem();
                      if (
                        a.redeem.output &&
                        !a.redeem.output.equals(redeem.output)
                      )
                        throw new TypeError('Redeem.output mismatch');
                      if (
                        a.redeem.input &&
                        !a.redeem.input.equals(redeem.input)
                      )
                        throw new TypeError('Redeem.input mismatch');
                    }
                    checkRedeem(a.redeem);
                  }
                  if (a.witness) {
                    if (
                      a.redeem &&
                      a.redeem.witness &&
                      !stacksEqual(a.redeem.witness, a.witness)
                    )
                      throw new TypeError(
                        'Witness and redeem.witness mismatch'
                      );
                  }
                }
                return Object.assign(o, a);
              }
              exports.p2sh = p2sh;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          '../crypto': 64,
          '../networks': 67,
          '../script': 80,
          '../types': 84,
          './lazy': 71,
          bs58check: 89,
          buffer: 183,
        },
      ],
      76: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.p2wpkh = void 0;
              const bcrypto = require('../crypto');
              const networks_1 = require('../networks');
              const bscript = require('../script');
              const types_1 = require('../types');
              const lazy = require('./lazy');
              const bech32_1 = require('bech32');
              const OPS = bscript.OPS;
              const EMPTY_BUFFER = Buffer.alloc(0);
              // witness: {signature} {pubKey}
              // input: <>
              // output: OP_0 {pubKeyHash}
              function p2wpkh(a, opts) {
                if (
                  !a.address &&
                  !a.hash &&
                  !a.output &&
                  !a.pubkey &&
                  !a.witness
                )
                  throw new TypeError('Not enough data');
                opts = Object.assign({ validate: true }, opts || {});
                (0, types_1.typeforce)(
                  {
                    address: types_1.typeforce.maybe(types_1.typeforce.String),
                    hash: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(20)
                    ),
                    input: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(0)
                    ),
                    network: types_1.typeforce.maybe(types_1.typeforce.Object),
                    output: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(22)
                    ),
                    pubkey: types_1.typeforce.maybe(types_1.isPoint),
                    signature: types_1.typeforce.maybe(
                      bscript.isCanonicalScriptSignature
                    ),
                    witness: types_1.typeforce.maybe(
                      types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
                    ),
                  },
                  a
                );
                const _address = lazy.value(() => {
                  const result = bech32_1.bech32.decode(a.address);
                  const version = result.words.shift();
                  const data = bech32_1.bech32.fromWords(result.words);
                  return {
                    version,
                    prefix: result.prefix,
                    data: Buffer.from(data),
                  };
                });
                const network = a.network || networks_1.bitcoin;
                const o = { name: 'p2wpkh', network };
                lazy.prop(o, 'address', () => {
                  if (!o.hash) return;
                  const words = bech32_1.bech32.toWords(o.hash);
                  words.unshift(0x00);
                  return bech32_1.bech32.encode(network.bech32, words);
                });
                lazy.prop(o, 'hash', () => {
                  if (a.output) return a.output.slice(2, 22);
                  if (a.address) return _address().data;
                  if (a.pubkey || o.pubkey)
                    return bcrypto.hash160(a.pubkey || o.pubkey);
                });
                lazy.prop(o, 'output', () => {
                  if (!o.hash) return;
                  return bscript.compile([OPS.OP_0, o.hash]);
                });
                lazy.prop(o, 'pubkey', () => {
                  if (a.pubkey) return a.pubkey;
                  if (!a.witness) return;
                  return a.witness[1];
                });
                lazy.prop(o, 'signature', () => {
                  if (!a.witness) return;
                  return a.witness[0];
                });
                lazy.prop(o, 'input', () => {
                  if (!o.witness) return;
                  return EMPTY_BUFFER;
                });
                lazy.prop(o, 'witness', () => {
                  if (!a.pubkey) return;
                  if (!a.signature) return;
                  return [a.signature, a.pubkey];
                });
                // extended validation
                if (opts.validate) {
                  let hash = Buffer.from([]);
                  if (a.address) {
                    if (network && network.bech32 !== _address().prefix)
                      throw new TypeError('Invalid prefix or Network mismatch');
                    if (_address().version !== 0x00)
                      throw new TypeError('Invalid address version');
                    if (_address().data.length !== 20)
                      throw new TypeError('Invalid address data');
                    hash = _address().data;
                  }
                  if (a.hash) {
                    if (hash.length > 0 && !hash.equals(a.hash))
                      throw new TypeError('Hash mismatch');
                    else hash = a.hash;
                  }
                  if (a.output) {
                    if (
                      a.output.length !== 22 ||
                      a.output[0] !== OPS.OP_0 ||
                      a.output[1] !== 0x14
                    )
                      throw new TypeError('Output is invalid');
                    if (hash.length > 0 && !hash.equals(a.output.slice(2)))
                      throw new TypeError('Hash mismatch');
                    else hash = a.output.slice(2);
                  }
                  if (a.pubkey) {
                    const pkh = bcrypto.hash160(a.pubkey);
                    if (hash.length > 0 && !hash.equals(pkh))
                      throw new TypeError('Hash mismatch');
                    else hash = pkh;
                    if (
                      !(0, types_1.isPoint)(a.pubkey) ||
                      a.pubkey.length !== 33
                    )
                      throw new TypeError('Invalid pubkey for p2wpkh');
                  }
                  if (a.witness) {
                    if (a.witness.length !== 2)
                      throw new TypeError('Witness is invalid');
                    if (!bscript.isCanonicalScriptSignature(a.witness[0]))
                      throw new TypeError('Witness has invalid signature');
                    if (
                      !(0, types_1.isPoint)(a.witness[1]) ||
                      a.witness[1].length !== 33
                    )
                      throw new TypeError('Witness has invalid pubkey');
                    if (a.signature && !a.signature.equals(a.witness[0]))
                      throw new TypeError('Signature mismatch');
                    if (a.pubkey && !a.pubkey.equals(a.witness[1]))
                      throw new TypeError('Pubkey mismatch');
                    const pkh = bcrypto.hash160(a.witness[1]);
                    if (hash.length > 0 && !hash.equals(pkh))
                      throw new TypeError('Hash mismatch');
                  }
                }
                return Object.assign(o, a);
              }
              exports.p2wpkh = p2wpkh;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          '../crypto': 64,
          '../networks': 67,
          '../script': 80,
          '../types': 84,
          './lazy': 71,
          bech32: 2,
          buffer: 183,
        },
      ],
      77: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.p2wsh = void 0;
              const bcrypto = require('../crypto');
              const networks_1 = require('../networks');
              const bscript = require('../script');
              const types_1 = require('../types');
              const lazy = require('./lazy');
              const bech32_1 = require('bech32');
              const OPS = bscript.OPS;
              const EMPTY_BUFFER = Buffer.alloc(0);
              function stacksEqual(a, b) {
                if (a.length !== b.length) return false;
                return a.every((x, i) => {
                  return x.equals(b[i]);
                });
              }
              function chunkHasUncompressedPubkey(chunk) {
                if (
                  Buffer.isBuffer(chunk) &&
                  chunk.length === 65 &&
                  chunk[0] === 0x04 &&
                  (0, types_1.isPoint)(chunk)
                ) {
                  return true;
                } else {
                  return false;
                }
              }
              // input: <>
              // witness: [redeemScriptSig ...] {redeemScript}
              // output: OP_0 {sha256(redeemScript)}
              function p2wsh(a, opts) {
                if (
                  !a.address &&
                  !a.hash &&
                  !a.output &&
                  !a.redeem &&
                  !a.witness
                )
                  throw new TypeError('Not enough data');
                opts = Object.assign({ validate: true }, opts || {});
                (0, types_1.typeforce)(
                  {
                    network: types_1.typeforce.maybe(types_1.typeforce.Object),
                    address: types_1.typeforce.maybe(types_1.typeforce.String),
                    hash: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(32)
                    ),
                    output: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(34)
                    ),
                    redeem: types_1.typeforce.maybe({
                      input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                      network: types_1.typeforce.maybe(
                        types_1.typeforce.Object
                      ),
                      output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
                      witness: types_1.typeforce.maybe(
                        types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
                      ),
                    }),
                    input: types_1.typeforce.maybe(
                      types_1.typeforce.BufferN(0)
                    ),
                    witness: types_1.typeforce.maybe(
                      types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
                    ),
                  },
                  a
                );
                const _address = lazy.value(() => {
                  const result = bech32_1.bech32.decode(a.address);
                  const version = result.words.shift();
                  const data = bech32_1.bech32.fromWords(result.words);
                  return {
                    version,
                    prefix: result.prefix,
                    data: Buffer.from(data),
                  };
                });
                const _rchunks = lazy.value(() => {
                  return bscript.decompile(a.redeem.input);
                });
                let network = a.network;
                if (!network) {
                  network =
                    (a.redeem && a.redeem.network) || networks_1.bitcoin;
                }
                const o = { network };
                lazy.prop(o, 'address', () => {
                  if (!o.hash) return;
                  const words = bech32_1.bech32.toWords(o.hash);
                  words.unshift(0x00);
                  return bech32_1.bech32.encode(network.bech32, words);
                });
                lazy.prop(o, 'hash', () => {
                  if (a.output) return a.output.slice(2);
                  if (a.address) return _address().data;
                  if (o.redeem && o.redeem.output)
                    return bcrypto.sha256(o.redeem.output);
                });
                lazy.prop(o, 'output', () => {
                  if (!o.hash) return;
                  return bscript.compile([OPS.OP_0, o.hash]);
                });
                lazy.prop(o, 'redeem', () => {
                  if (!a.witness) return;
                  return {
                    output: a.witness[a.witness.length - 1],
                    input: EMPTY_BUFFER,
                    witness: a.witness.slice(0, -1),
                  };
                });
                lazy.prop(o, 'input', () => {
                  if (!o.witness) return;
                  return EMPTY_BUFFER;
                });
                lazy.prop(o, 'witness', () => {
                  // transform redeem input to witness stack?
                  if (
                    a.redeem &&
                    a.redeem.input &&
                    a.redeem.input.length > 0 &&
                    a.redeem.output &&
                    a.redeem.output.length > 0
                  ) {
                    const stack = bscript.toStack(_rchunks());
                    // assign, and blank the existing input
                    o.redeem = Object.assign({ witness: stack }, a.redeem);
                    o.redeem.input = EMPTY_BUFFER;
                    return [].concat(stack, a.redeem.output);
                  }
                  if (!a.redeem) return;
                  if (!a.redeem.output) return;
                  if (!a.redeem.witness) return;
                  return [].concat(a.redeem.witness, a.redeem.output);
                });
                lazy.prop(o, 'name', () => {
                  const nameParts = ['p2wsh'];
                  if (o.redeem !== undefined && o.redeem.name !== undefined)
                    nameParts.push(o.redeem.name);
                  return nameParts.join('-');
                });
                // extended validation
                if (opts.validate) {
                  let hash = Buffer.from([]);
                  if (a.address) {
                    if (_address().prefix !== network.bech32)
                      throw new TypeError('Invalid prefix or Network mismatch');
                    if (_address().version !== 0x00)
                      throw new TypeError('Invalid address version');
                    if (_address().data.length !== 32)
                      throw new TypeError('Invalid address data');
                    hash = _address().data;
                  }
                  if (a.hash) {
                    if (hash.length > 0 && !hash.equals(a.hash))
                      throw new TypeError('Hash mismatch');
                    else hash = a.hash;
                  }
                  if (a.output) {
                    if (
                      a.output.length !== 34 ||
                      a.output[0] !== OPS.OP_0 ||
                      a.output[1] !== 0x20
                    )
                      throw new TypeError('Output is invalid');
                    const hash2 = a.output.slice(2);
                    if (hash.length > 0 && !hash.equals(hash2))
                      throw new TypeError('Hash mismatch');
                    else hash = hash2;
                  }
                  if (a.redeem) {
                    if (a.redeem.network && a.redeem.network !== network)
                      throw new TypeError('Network mismatch');
                    // is there two redeem sources?
                    if (
                      a.redeem.input &&
                      a.redeem.input.length > 0 &&
                      a.redeem.witness &&
                      a.redeem.witness.length > 0
                    )
                      throw new TypeError('Ambiguous witness source');
                    // is the redeem output non-empty?
                    if (a.redeem.output) {
                      if (bscript.decompile(a.redeem.output).length === 0)
                        throw new TypeError('Redeem.output is invalid');
                      // match hash against other sources
                      const hash2 = bcrypto.sha256(a.redeem.output);
                      if (hash.length > 0 && !hash.equals(hash2))
                        throw new TypeError('Hash mismatch');
                      else hash = hash2;
                    }
                    if (a.redeem.input && !bscript.isPushOnly(_rchunks()))
                      throw new TypeError('Non push-only scriptSig');
                    if (
                      a.witness &&
                      a.redeem.witness &&
                      !stacksEqual(a.witness, a.redeem.witness)
                    )
                      throw new TypeError(
                        'Witness and redeem.witness mismatch'
                      );
                    if (
                      (a.redeem.input &&
                        _rchunks().some(chunkHasUncompressedPubkey)) ||
                      (a.redeem.output &&
                        (bscript.decompile(a.redeem.output) || []).some(
                          chunkHasUncompressedPubkey
                        ))
                    ) {
                      throw new TypeError(
                        'redeem.input or redeem.output contains uncompressed pubkey'
                      );
                    }
                  }
                  if (a.witness && a.witness.length > 0) {
                    const wScript = a.witness[a.witness.length - 1];
                    if (
                      a.redeem &&
                      a.redeem.output &&
                      !a.redeem.output.equals(wScript)
                    )
                      throw new TypeError('Witness and redeem.output mismatch');
                    if (
                      a.witness.some(chunkHasUncompressedPubkey) ||
                      (bscript.decompile(wScript) || []).some(
                        chunkHasUncompressedPubkey
                      )
                    )
                      throw new TypeError(
                        'Witness contains uncompressed pubkey'
                      );
                  }
                }
                return Object.assign(o, a);
              }
              exports.p2wsh = p2wsh;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          '../crypto': 64,
          '../networks': 67,
          '../script': 80,
          '../types': 84,
          './lazy': 71,
          bech32: 2,
          buffer: 183,
        },
      ],
      78: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.Psbt = void 0;
              const bip174_1 = require('bip174');
              const varuint = require('bip174/src/lib/converter/varint');
              const utils_1 = require('bip174/src/lib/utils');
              const address_1 = require('./address');
              const bufferutils_1 = require('./bufferutils');
              const crypto_1 = require('./crypto');
              const networks_1 = require('./networks');
              const payments = require('./payments');
              const bscript = require('./script');
              const transaction_1 = require('./transaction');
              /**
               * These are the default arguments for a Psbt instance.
               */
              const DEFAULT_OPTS = {
                /**
                 * A bitcoinjs Network object. This is only used if you pass an `address`
                 * parameter to addOutput. Otherwise it is not needed and can be left default.
                 */
                network: networks_1.bitcoin,
                /**
                 * When extractTransaction is called, the fee rate is checked.
                 * THIS IS NOT TO BE RELIED ON.
                 * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
                 */
                maximumFeeRate: 5000, // satoshi per byte
              };
              /**
               * Psbt class can parse and generate a PSBT binary based off of the BIP174.
               * There are 6 roles that this class fulfills. (Explained in BIP174)
               *
               * Creator: This can be done with `new Psbt()`
               * Updater: This can be done with `psbt.addInput(input)`, `psbt.addInputs(inputs)`,
               *   `psbt.addOutput(output)`, `psbt.addOutputs(outputs)` when you are looking to
               *   add new inputs and outputs to the PSBT, and `psbt.updateGlobal(itemObject)`,
               *   `psbt.updateInput(itemObject)`, `psbt.updateOutput(itemObject)`
               *   addInput requires hash: Buffer | string; and index: number; as attributes
               *   and can also include any attributes that are used in updateInput method.
               *   addOutput requires script: Buffer; and value: number; and likewise can include
               *   data for updateOutput.
               *   For a list of what attributes should be what types. Check the bip174 library.
               *   Also, check the integration tests for some examples of usage.
               * Signer: There are a few methods. signAllInputs and signAllInputsAsync, which will search all input
               *   information for your pubkey or pubkeyhash, and only sign inputs where it finds
               *   your info. Or you can explicitly sign a specific input with signInput and
               *   signInputAsync. For the async methods you can create a SignerAsync object
               *   and use something like a hardware wallet to sign with. (You must implement this)
               * Combiner: psbts can be combined easily with `psbt.combine(psbt2, psbt3, psbt4 ...)`
               *   the psbt calling combine will always have precedence when a conflict occurs.
               *   Combine checks if the internal bitcoin transaction is the same, so be sure that
               *   all sequences, version, locktime, etc. are the same before combining.
               * Input Finalizer: This role is fairly important. Not only does it need to construct
               *   the input scriptSigs and witnesses, but it SHOULD verify the signatures etc.
               *   Before running `psbt.finalizeAllInputs()` please run `psbt.validateSignaturesOfAllInputs()`
               *   Running any finalize method will delete any data in the input(s) that are no longer
               *   needed due to the finalized scripts containing the information.
               * Transaction Extractor: This role will perform some checks before returning a
               *   Transaction object. Such as fee rate not being larger than maximumFeeRate etc.
               */
              class Psbt {
                constructor(
                  opts = {},
                  data = new bip174_1.Psbt(new PsbtTransaction())
                ) {
                  this.data = data;
                  // set defaults
                  this.opts = Object.assign({}, DEFAULT_OPTS, opts);
                  this.__CACHE = {
                    __NON_WITNESS_UTXO_TX_CACHE: [],
                    __NON_WITNESS_UTXO_BUF_CACHE: [],
                    __TX_IN_CACHE: {},
                    __TX: this.data.globalMap.unsignedTx.tx,
                    // Psbt's predecesor (TransactionBuilder - now removed) behavior
                    // was to not confirm input values  before signing.
                    // Even though we highly encourage people to get
                    // the full parent transaction to verify values, the ability to
                    // sign non-segwit inputs without the full transaction was often
                    // requested. So the only way to activate is to use @ts-ignore.
                    // We will disable exporting the Psbt when unsafe sign is active.
                    // because it is not BIP174 compliant.
                    __UNSAFE_SIGN_NONSEGWIT: false,
                  };
                  if (this.data.inputs.length === 0) this.setVersion(2);
                  // Make data hidden when enumerating
                  const dpew = (obj, attr, enumerable, writable) =>
                    Object.defineProperty(obj, attr, {
                      enumerable,
                      writable,
                    });
                  dpew(this, '__CACHE', false, true);
                  dpew(this, 'opts', false, true);
                }
                static fromBase64(data, opts = {}) {
                  const buffer = Buffer.from(data, 'base64');
                  return this.fromBuffer(buffer, opts);
                }
                static fromHex(data, opts = {}) {
                  const buffer = Buffer.from(data, 'hex');
                  return this.fromBuffer(buffer, opts);
                }
                static fromBuffer(buffer, opts = {}) {
                  const psbtBase = bip174_1.Psbt.fromBuffer(
                    buffer,
                    transactionFromBuffer
                  );
                  const psbt = new Psbt(opts, psbtBase);
                  checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);
                  return psbt;
                }
                get inputCount() {
                  return this.data.inputs.length;
                }
                get version() {
                  return this.__CACHE.__TX.version;
                }
                set version(version) {
                  this.setVersion(version);
                }
                get locktime() {
                  return this.__CACHE.__TX.locktime;
                }
                set locktime(locktime) {
                  this.setLocktime(locktime);
                }
                get txInputs() {
                  return this.__CACHE.__TX.ins.map((input) => ({
                    hash: (0, bufferutils_1.cloneBuffer)(input.hash),
                    index: input.index,
                    sequence: input.sequence,
                  }));
                }
                get txOutputs() {
                  return this.__CACHE.__TX.outs.map((output) => {
                    let address;
                    try {
                      address = (0, address_1.fromOutputScript)(
                        output.script,
                        this.opts.network
                      );
                    } catch (_) {}
                    return {
                      script: (0, bufferutils_1.cloneBuffer)(output.script),
                      value: output.value,
                      address,
                    };
                  });
                }
                combine(...those) {
                  this.data.combine(...those.map((o) => o.data));
                  return this;
                }
                clone() {
                  // TODO: more efficient cloning
                  const res = Psbt.fromBuffer(this.data.toBuffer());
                  res.opts = JSON.parse(JSON.stringify(this.opts));
                  return res;
                }
                setMaximumFeeRate(satoshiPerByte) {
                  check32Bit(satoshiPerByte); // 42.9 BTC per byte IS excessive... so throw
                  this.opts.maximumFeeRate = satoshiPerByte;
                }
                setVersion(version) {
                  check32Bit(version);
                  checkInputsForPartialSig(this.data.inputs, 'setVersion');
                  const c = this.__CACHE;
                  c.__TX.version = version;
                  c.__EXTRACTED_TX = undefined;
                  return this;
                }
                setLocktime(locktime) {
                  check32Bit(locktime);
                  checkInputsForPartialSig(this.data.inputs, 'setLocktime');
                  const c = this.__CACHE;
                  c.__TX.locktime = locktime;
                  c.__EXTRACTED_TX = undefined;
                  return this;
                }
                setInputSequence(inputIndex, sequence) {
                  check32Bit(sequence);
                  checkInputsForPartialSig(
                    this.data.inputs,
                    'setInputSequence'
                  );
                  const c = this.__CACHE;
                  if (c.__TX.ins.length <= inputIndex) {
                    throw new Error('Input index too high');
                  }
                  c.__TX.ins[inputIndex].sequence = sequence;
                  c.__EXTRACTED_TX = undefined;
                  return this;
                }
                addInputs(inputDatas) {
                  inputDatas.forEach((inputData) => this.addInput(inputData));
                  return this;
                }
                addInput(inputData) {
                  if (
                    arguments.length > 1 ||
                    !inputData ||
                    inputData.hash === undefined ||
                    inputData.index === undefined
                  ) {
                    throw new Error(
                      `Invalid arguments for Psbt.addInput. ` +
                        `Requires single object with at least [hash] and [index]`
                    );
                  }
                  checkInputsForPartialSig(this.data.inputs, 'addInput');
                  if (inputData.witnessScript)
                    checkInvalidP2WSH(inputData.witnessScript);
                  const c = this.__CACHE;
                  this.data.addInput(inputData);
                  const txIn = c.__TX.ins[c.__TX.ins.length - 1];
                  checkTxInputCache(c, txIn);
                  const inputIndex = this.data.inputs.length - 1;
                  const input = this.data.inputs[inputIndex];
                  if (input.nonWitnessUtxo) {
                    addNonWitnessTxCache(this.__CACHE, input, inputIndex);
                  }
                  c.__FEE = undefined;
                  c.__FEE_RATE = undefined;
                  c.__EXTRACTED_TX = undefined;
                  return this;
                }
                addOutputs(outputDatas) {
                  outputDatas.forEach((outputData) =>
                    this.addOutput(outputData)
                  );
                  return this;
                }
                addOutput(outputData) {
                  if (
                    arguments.length > 1 ||
                    !outputData ||
                    outputData.value === undefined ||
                    (outputData.address === undefined &&
                      outputData.script === undefined)
                  ) {
                    throw new Error(
                      `Invalid arguments for Psbt.addOutput. ` +
                        `Requires single object with at least [script or address] and [value]`
                    );
                  }
                  checkInputsForPartialSig(this.data.inputs, 'addOutput');
                  const { address } = outputData;
                  if (typeof address === 'string') {
                    const { network } = this.opts;
                    const script = (0, address_1.toOutputScript)(
                      address,
                      network
                    );
                    outputData = Object.assign(outputData, { script });
                  }
                  const c = this.__CACHE;
                  this.data.addOutput(outputData);
                  c.__FEE = undefined;
                  c.__FEE_RATE = undefined;
                  c.__EXTRACTED_TX = undefined;
                  return this;
                }
                extractTransaction(disableFeeCheck) {
                  if (!this.data.inputs.every(isFinalized))
                    throw new Error('Not finalized');
                  const c = this.__CACHE;
                  if (!disableFeeCheck) {
                    checkFees(this, c, this.opts);
                  }
                  if (c.__EXTRACTED_TX) return c.__EXTRACTED_TX;
                  const tx = c.__TX.clone();
                  inputFinalizeGetAmts(this.data.inputs, tx, c, true);
                  return tx;
                }
                getFeeRate() {
                  return getTxCacheValue(
                    '__FEE_RATE',
                    'fee rate',
                    this.data.inputs,
                    this.__CACHE
                  );
                }
                getFee() {
                  return getTxCacheValue(
                    '__FEE',
                    'fee',
                    this.data.inputs,
                    this.__CACHE
                  );
                }
                finalizeAllInputs() {
                  (0, utils_1.checkForInput)(this.data.inputs, 0); // making sure we have at least one
                  range(this.data.inputs.length).forEach((idx) =>
                    this.finalizeInput(idx)
                  );
                  return this;
                }
                finalizeInput(inputIndex, finalScriptsFunc = getFinalScripts) {
                  const input = (0, utils_1.checkForInput)(
                    this.data.inputs,
                    inputIndex
                  );
                  const { script, isP2SH, isP2WSH, isSegwit } =
                    getScriptFromInput(inputIndex, input, this.__CACHE);
                  if (!script)
                    throw new Error(`No script found for input #${inputIndex}`);
                  checkPartialSigSighashes(input);
                  const { finalScriptSig, finalScriptWitness } =
                    finalScriptsFunc(
                      inputIndex,
                      input,
                      script,
                      isSegwit,
                      isP2SH,
                      isP2WSH
                    );
                  if (finalScriptSig)
                    this.data.updateInput(inputIndex, { finalScriptSig });
                  if (finalScriptWitness)
                    this.data.updateInput(inputIndex, { finalScriptWitness });
                  if (!finalScriptSig && !finalScriptWitness)
                    throw new Error(
                      `Unknown error finalizing input #${inputIndex}`
                    );
                  this.data.clearFinalizedInput(inputIndex);
                  return this;
                }
                getInputType(inputIndex) {
                  const input = (0, utils_1.checkForInput)(
                    this.data.inputs,
                    inputIndex
                  );
                  const script = getScriptFromUtxo(
                    inputIndex,
                    input,
                    this.__CACHE
                  );
                  const result = getMeaningfulScript(
                    script,
                    inputIndex,
                    'input',
                    input.redeemScript ||
                      redeemFromFinalScriptSig(input.finalScriptSig),
                    input.witnessScript ||
                      redeemFromFinalWitnessScript(input.finalScriptWitness)
                  );
                  const type = result.type === 'raw' ? '' : result.type + '-';
                  const mainType = classifyScript(result.meaningfulScript);
                  return type + mainType;
                }
                inputHasPubkey(inputIndex, pubkey) {
                  const input = (0, utils_1.checkForInput)(
                    this.data.inputs,
                    inputIndex
                  );
                  return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);
                }
                inputHasHDKey(inputIndex, root) {
                  const input = (0, utils_1.checkForInput)(
                    this.data.inputs,
                    inputIndex
                  );
                  const derivationIsMine = bip32DerivationIsMine(root);
                  return (
                    !!input.bip32Derivation &&
                    input.bip32Derivation.some(derivationIsMine)
                  );
                }
                outputHasPubkey(outputIndex, pubkey) {
                  const output = (0, utils_1.checkForOutput)(
                    this.data.outputs,
                    outputIndex
                  );
                  return pubkeyInOutput(
                    pubkey,
                    output,
                    outputIndex,
                    this.__CACHE
                  );
                }
                outputHasHDKey(outputIndex, root) {
                  const output = (0, utils_1.checkForOutput)(
                    this.data.outputs,
                    outputIndex
                  );
                  const derivationIsMine = bip32DerivationIsMine(root);
                  return (
                    !!output.bip32Derivation &&
                    output.bip32Derivation.some(derivationIsMine)
                  );
                }
                validateSignaturesOfAllInputs(validator) {
                  (0, utils_1.checkForInput)(this.data.inputs, 0); // making sure we have at least one
                  const results = range(this.data.inputs.length).map((idx) =>
                    this.validateSignaturesOfInput(idx, validator)
                  );
                  return results.reduce(
                    (final, res) => res === true && final,
                    true
                  );
                }
                validateSignaturesOfInput(inputIndex, validator, pubkey) {
                  const input = this.data.inputs[inputIndex];
                  const partialSig = (input || {}).partialSig;
                  if (!input || !partialSig || partialSig.length < 1)
                    throw new Error('No signatures to validate');
                  if (typeof validator !== 'function')
                    throw new Error(
                      'Need validator function to validate signatures'
                    );
                  const mySigs = pubkey
                    ? partialSig.filter((sig) => sig.pubkey.equals(pubkey))
                    : partialSig;
                  if (mySigs.length < 1)
                    throw new Error('No signatures for this pubkey');
                  const results = [];
                  let hashCache;
                  let scriptCache;
                  let sighashCache;
                  for (const pSig of mySigs) {
                    const sig = bscript.signature.decode(pSig.signature);
                    const { hash, script } =
                      sighashCache !== sig.hashType
                        ? getHashForSig(
                            inputIndex,
                            Object.assign({}, input, {
                              sighashType: sig.hashType,
                            }),
                            this.__CACHE,
                            true
                          )
                        : { hash: hashCache, script: scriptCache };
                    sighashCache = sig.hashType;
                    hashCache = hash;
                    scriptCache = script;
                    checkScriptForPubkey(pSig.pubkey, script, 'verify');
                    results.push(validator(pSig.pubkey, hash, sig.signature));
                  }
                  return results.every((res) => res === true);
                }
                signAllInputsHD(
                  hdKeyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  if (
                    !hdKeyPair ||
                    !hdKeyPair.publicKey ||
                    !hdKeyPair.fingerprint
                  ) {
                    throw new Error('Need HDSigner to sign input');
                  }
                  const results = [];
                  for (const i of range(this.data.inputs.length)) {
                    try {
                      this.signInputHD(i, hdKeyPair, sighashTypes);
                      results.push(true);
                    } catch (err) {
                      results.push(false);
                    }
                  }
                  if (results.every((v) => v === false)) {
                    throw new Error('No inputs were signed');
                  }
                  return this;
                }
                signAllInputsHDAsync(
                  hdKeyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  return new Promise((resolve, reject) => {
                    if (
                      !hdKeyPair ||
                      !hdKeyPair.publicKey ||
                      !hdKeyPair.fingerprint
                    ) {
                      return reject(new Error('Need HDSigner to sign input'));
                    }
                    const results = [];
                    const promises = [];
                    for (const i of range(this.data.inputs.length)) {
                      promises.push(
                        this.signInputHDAsync(i, hdKeyPair, sighashTypes).then(
                          () => {
                            results.push(true);
                          },
                          () => {
                            results.push(false);
                          }
                        )
                      );
                    }
                    return Promise.all(promises).then(() => {
                      if (results.every((v) => v === false)) {
                        return reject(new Error('No inputs were signed'));
                      }
                      resolve();
                    });
                  });
                }
                signInputHD(
                  inputIndex,
                  hdKeyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  if (
                    !hdKeyPair ||
                    !hdKeyPair.publicKey ||
                    !hdKeyPair.fingerprint
                  ) {
                    throw new Error('Need HDSigner to sign input');
                  }
                  const signers = getSignersFromHD(
                    inputIndex,
                    this.data.inputs,
                    hdKeyPair
                  );
                  signers.forEach((signer) =>
                    this.signInput(inputIndex, signer, sighashTypes)
                  );
                  return this;
                }
                signInputHDAsync(
                  inputIndex,
                  hdKeyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  return new Promise((resolve, reject) => {
                    if (
                      !hdKeyPair ||
                      !hdKeyPair.publicKey ||
                      !hdKeyPair.fingerprint
                    ) {
                      return reject(new Error('Need HDSigner to sign input'));
                    }
                    const signers = getSignersFromHD(
                      inputIndex,
                      this.data.inputs,
                      hdKeyPair
                    );
                    const promises = signers.map((signer) =>
                      this.signInputAsync(inputIndex, signer, sighashTypes)
                    );
                    return Promise.all(promises)
                      .then(() => {
                        resolve();
                      })
                      .catch(reject);
                  });
                }
                signAllInputs(
                  keyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  if (!keyPair || !keyPair.publicKey)
                    throw new Error('Need Signer to sign input');
                  // TODO: Add a pubkey/pubkeyhash cache to each input
                  // as input information is added, then eventually
                  // optimize this method.
                  const results = [];
                  for (const i of range(this.data.inputs.length)) {
                    try {
                      this.signInput(i, keyPair, sighashTypes);
                      results.push(true);
                    } catch (err) {
                      results.push(false);
                    }
                  }
                  if (results.every((v) => v === false)) {
                    throw new Error('No inputs were signed');
                  }
                  return this;
                }
                signAllInputsAsync(
                  keyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  return new Promise((resolve, reject) => {
                    if (!keyPair || !keyPair.publicKey)
                      return reject(new Error('Need Signer to sign input'));
                    // TODO: Add a pubkey/pubkeyhash cache to each input
                    // as input information is added, then eventually
                    // optimize this method.
                    const results = [];
                    const promises = [];
                    for (const [i] of this.data.inputs.entries()) {
                      promises.push(
                        this.signInputAsync(i, keyPair, sighashTypes).then(
                          () => {
                            results.push(true);
                          },
                          () => {
                            results.push(false);
                          }
                        )
                      );
                    }
                    return Promise.all(promises).then(() => {
                      if (results.every((v) => v === false)) {
                        return reject(new Error('No inputs were signed'));
                      }
                      resolve();
                    });
                  });
                }
                signInput(
                  inputIndex,
                  keyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  if (!keyPair || !keyPair.publicKey)
                    throw new Error('Need Signer to sign input');
                  const { hash, sighashType } = getHashAndSighashType(
                    this.data.inputs,
                    inputIndex,
                    keyPair.publicKey,
                    this.__CACHE,
                    sighashTypes
                  );
                  const partialSig = [
                    {
                      pubkey: keyPair.publicKey,
                      signature: bscript.signature.encode(
                        keyPair.sign(hash),
                        sighashType
                      ),
                    },
                  ];
                  this.data.updateInput(inputIndex, { partialSig });
                  return this;
                }
                signInputAsync(
                  inputIndex,
                  keyPair,
                  sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]
                ) {
                  return Promise.resolve().then(() => {
                    if (!keyPair || !keyPair.publicKey)
                      throw new Error('Need Signer to sign input');
                    const { hash, sighashType } = getHashAndSighashType(
                      this.data.inputs,
                      inputIndex,
                      keyPair.publicKey,
                      this.__CACHE,
                      sighashTypes
                    );
                    return Promise.resolve(keyPair.sign(hash)).then(
                      (signature) => {
                        const partialSig = [
                          {
                            pubkey: keyPair.publicKey,
                            signature: bscript.signature.encode(
                              signature,
                              sighashType
                            ),
                          },
                        ];
                        this.data.updateInput(inputIndex, { partialSig });
                      }
                    );
                  });
                }
                toBuffer() {
                  checkCache(this.__CACHE);
                  return this.data.toBuffer();
                }
                toHex() {
                  checkCache(this.__CACHE);
                  return this.data.toHex();
                }
                toBase64() {
                  checkCache(this.__CACHE);
                  return this.data.toBase64();
                }
                updateGlobal(updateData) {
                  this.data.updateGlobal(updateData);
                  return this;
                }
                updateInput(inputIndex, updateData) {
                  if (updateData.witnessScript)
                    checkInvalidP2WSH(updateData.witnessScript);
                  this.data.updateInput(inputIndex, updateData);
                  if (updateData.nonWitnessUtxo) {
                    addNonWitnessTxCache(
                      this.__CACHE,
                      this.data.inputs[inputIndex],
                      inputIndex
                    );
                  }
                  return this;
                }
                updateOutput(outputIndex, updateData) {
                  this.data.updateOutput(outputIndex, updateData);
                  return this;
                }
                addUnknownKeyValToGlobal(keyVal) {
                  this.data.addUnknownKeyValToGlobal(keyVal);
                  return this;
                }
                addUnknownKeyValToInput(inputIndex, keyVal) {
                  this.data.addUnknownKeyValToInput(inputIndex, keyVal);
                  return this;
                }
                addUnknownKeyValToOutput(outputIndex, keyVal) {
                  this.data.addUnknownKeyValToOutput(outputIndex, keyVal);
                  return this;
                }
                clearFinalizedInput(inputIndex) {
                  this.data.clearFinalizedInput(inputIndex);
                  return this;
                }
              }
              exports.Psbt = Psbt;
              /**
               * This function is needed to pass to the bip174 base class's fromBuffer.
               * It takes the "transaction buffer" portion of the psbt buffer and returns a
               * Transaction (From the bip174 library) interface.
               */
              const transactionFromBuffer = (buffer) =>
                new PsbtTransaction(buffer);
              /**
               * This class implements the Transaction interface from bip174 library.
               * It contains a bitcoinjs-lib Transaction object.
               */
              class PsbtTransaction {
                constructor(
                  buffer = Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])
                ) {
                  this.tx = transaction_1.Transaction.fromBuffer(buffer);
                  checkTxEmpty(this.tx);
                  Object.defineProperty(this, 'tx', {
                    enumerable: false,
                    writable: true,
                  });
                }
                getInputOutputCounts() {
                  return {
                    inputCount: this.tx.ins.length,
                    outputCount: this.tx.outs.length,
                  };
                }
                addInput(input) {
                  if (
                    input.hash === undefined ||
                    input.index === undefined ||
                    (!Buffer.isBuffer(input.hash) &&
                      typeof input.hash !== 'string') ||
                    typeof input.index !== 'number'
                  ) {
                    throw new Error('Error adding input.');
                  }
                  const hash =
                    typeof input.hash === 'string'
                      ? (0, bufferutils_1.reverseBuffer)(
                          Buffer.from(input.hash, 'hex')
                        )
                      : input.hash;
                  this.tx.addInput(hash, input.index, input.sequence);
                }
                addOutput(output) {
                  if (
                    output.script === undefined ||
                    output.value === undefined ||
                    !Buffer.isBuffer(output.script) ||
                    typeof output.value !== 'number'
                  ) {
                    throw new Error('Error adding output.');
                  }
                  this.tx.addOutput(output.script, output.value);
                }
                toBuffer() {
                  return this.tx.toBuffer();
                }
              }
              function canFinalize(input, script, scriptType) {
                switch (scriptType) {
                  case 'pubkey':
                  case 'pubkeyhash':
                  case 'witnesspubkeyhash':
                    return hasSigs(1, input.partialSig);
                  case 'multisig':
                    const p2ms = payments.p2ms({ output: script });
                    return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);
                  default:
                    return false;
                }
              }
              function checkCache(cache) {
                if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {
                  throw new Error('Not BIP174 compliant, can not export');
                }
              }
              function hasSigs(neededSigs, partialSig, pubkeys) {
                if (!partialSig) return false;
                let sigs;
                if (pubkeys) {
                  sigs = pubkeys
                    .map((pkey) => {
                      const pubkey = compressPubkey(pkey);
                      return partialSig.find((pSig) =>
                        pSig.pubkey.equals(pubkey)
                      );
                    })
                    .filter((v) => !!v);
                } else {
                  sigs = partialSig;
                }
                if (sigs.length > neededSigs)
                  throw new Error('Too many signatures');
                return sigs.length === neededSigs;
              }
              function isFinalized(input) {
                return !!input.finalScriptSig || !!input.finalScriptWitness;
              }
              function isPaymentFactory(payment) {
                return (script) => {
                  try {
                    payment({ output: script });
                    return true;
                  } catch (err) {
                    return false;
                  }
                };
              }
              const isP2MS = isPaymentFactory(payments.p2ms);
              const isP2PK = isPaymentFactory(payments.p2pk);
              const isP2PKH = isPaymentFactory(payments.p2pkh);
              const isP2WPKH = isPaymentFactory(payments.p2wpkh);
              const isP2WSHScript = isPaymentFactory(payments.p2wsh);
              const isP2SHScript = isPaymentFactory(payments.p2sh);
              function bip32DerivationIsMine(root) {
                return (d) => {
                  if (!d.masterFingerprint.equals(root.fingerprint))
                    return false;
                  if (!root.derivePath(d.path).publicKey.equals(d.pubkey))
                    return false;
                  return true;
                };
              }
              function check32Bit(num) {
                if (
                  typeof num !== 'number' ||
                  num !== Math.floor(num) ||
                  num > 0xffffffff ||
                  num < 0
                ) {
                  throw new Error('Invalid 32 bit integer');
                }
              }
              function checkFees(psbt, cache, opts) {
                const feeRate = cache.__FEE_RATE || psbt.getFeeRate();
                const vsize = cache.__EXTRACTED_TX.virtualSize();
                const satoshis = feeRate * vsize;
                if (feeRate >= opts.maximumFeeRate) {
                  throw new Error(
                    `Warning: You are paying around ${(satoshis / 1e8).toFixed(
                      8
                    )} in ` +
                      `fees, which is ${feeRate} satoshi per byte for a transaction ` +
                      `with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per ` +
                      `byte). Use setMaximumFeeRate method to raise your threshold, or ` +
                      `pass true to the first arg of extractTransaction.`
                  );
                }
              }
              function checkInputsForPartialSig(inputs, action) {
                inputs.forEach((input) => {
                  let throws = false;
                  let pSigs = [];
                  if ((input.partialSig || []).length === 0) {
                    if (!input.finalScriptSig && !input.finalScriptWitness)
                      return;
                    pSigs = getPsigsFromInputFinalScripts(input);
                  } else {
                    pSigs = input.partialSig;
                  }
                  pSigs.forEach((pSig) => {
                    const { hashType } = bscript.signature.decode(
                      pSig.signature
                    );
                    const whitelist = [];
                    const isAnyoneCanPay =
                      hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY;
                    if (isAnyoneCanPay) whitelist.push('addInput');
                    const hashMod = hashType & 0x1f;
                    switch (hashMod) {
                      case transaction_1.Transaction.SIGHASH_ALL:
                        break;
                      case transaction_1.Transaction.SIGHASH_SINGLE:
                      case transaction_1.Transaction.SIGHASH_NONE:
                        whitelist.push('addOutput');
                        whitelist.push('setInputSequence');
                        break;
                    }
                    if (whitelist.indexOf(action) === -1) {
                      throws = true;
                    }
                  });
                  if (throws) {
                    throw new Error(
                      'Can not modify transaction, signatures exist.'
                    );
                  }
                });
              }
              function checkPartialSigSighashes(input) {
                if (!input.sighashType || !input.partialSig) return;
                const { partialSig, sighashType } = input;
                partialSig.forEach((pSig) => {
                  const { hashType } = bscript.signature.decode(pSig.signature);
                  if (sighashType !== hashType) {
                    throw new Error(
                      'Signature sighash does not match input sighash type'
                    );
                  }
                });
              }
              function checkScriptForPubkey(pubkey, script, action) {
                if (!pubkeyInScript(pubkey, script)) {
                  throw new Error(
                    `Can not ${action} for this input with the key ${pubkey.toString(
                      'hex'
                    )}`
                  );
                }
              }
              function checkTxEmpty(tx) {
                const isEmpty = tx.ins.every(
                  (input) =>
                    input.script &&
                    input.script.length === 0 &&
                    input.witness &&
                    input.witness.length === 0
                );
                if (!isEmpty) {
                  throw new Error(
                    'Format Error: Transaction ScriptSigs are not empty'
                  );
                }
              }
              function checkTxForDupeIns(tx, cache) {
                tx.ins.forEach((input) => {
                  checkTxInputCache(cache, input);
                });
              }
              function checkTxInputCache(cache, input) {
                const key =
                  (0, bufferutils_1.reverseBuffer)(
                    Buffer.from(input.hash)
                  ).toString('hex') +
                  ':' +
                  input.index;
                if (cache.__TX_IN_CACHE[key])
                  throw new Error('Duplicate input detected.');
                cache.__TX_IN_CACHE[key] = 1;
              }
              function scriptCheckerFactory(payment, paymentScriptName) {
                return (inputIndex, scriptPubKey, redeemScript, ioType) => {
                  const redeemScriptOutput = payment({
                    redeem: { output: redeemScript },
                  }).output;
                  if (!scriptPubKey.equals(redeemScriptOutput)) {
                    throw new Error(
                      `${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`
                    );
                  }
                };
              }
              const checkRedeemScript = scriptCheckerFactory(
                payments.p2sh,
                'Redeem script'
              );
              const checkWitnessScript = scriptCheckerFactory(
                payments.p2wsh,
                'Witness script'
              );
              function getTxCacheValue(key, name, inputs, c) {
                if (!inputs.every(isFinalized))
                  throw new Error(
                    `PSBT must be finalized to calculate ${name}`
                  );
                if (key === '__FEE_RATE' && c.__FEE_RATE) return c.__FEE_RATE;
                if (key === '__FEE' && c.__FEE) return c.__FEE;
                let tx;
                let mustFinalize = true;
                if (c.__EXTRACTED_TX) {
                  tx = c.__EXTRACTED_TX;
                  mustFinalize = false;
                } else {
                  tx = c.__TX.clone();
                }
                inputFinalizeGetAmts(inputs, tx, c, mustFinalize);
                if (key === '__FEE_RATE') return c.__FEE_RATE;
                else if (key === '__FEE') return c.__FEE;
              }
              function getFinalScripts(
                inputIndex,
                input,
                script,
                isSegwit,
                isP2SH,
                isP2WSH
              ) {
                const scriptType = classifyScript(script);
                if (!canFinalize(input, script, scriptType))
                  throw new Error(`Can not finalize input #${inputIndex}`);
                return prepareFinalScripts(
                  script,
                  scriptType,
                  input.partialSig,
                  isSegwit,
                  isP2SH,
                  isP2WSH
                );
              }
              function prepareFinalScripts(
                script,
                scriptType,
                partialSig,
                isSegwit,
                isP2SH,
                isP2WSH
              ) {
                let finalScriptSig;
                let finalScriptWitness;
                // Wow, the payments API is very handy
                const payment = getPayment(script, scriptType, partialSig);
                const p2wsh = !isP2WSH
                  ? null
                  : payments.p2wsh({ redeem: payment });
                const p2sh = !isP2SH
                  ? null
                  : payments.p2sh({ redeem: p2wsh || payment });
                if (isSegwit) {
                  if (p2wsh) {
                    finalScriptWitness = witnessStackToScriptWitness(
                      p2wsh.witness
                    );
                  } else {
                    finalScriptWitness = witnessStackToScriptWitness(
                      payment.witness
                    );
                  }
                  if (p2sh) {
                    finalScriptSig = p2sh.input;
                  }
                } else {
                  if (p2sh) {
                    finalScriptSig = p2sh.input;
                  } else {
                    finalScriptSig = payment.input;
                  }
                }
                return {
                  finalScriptSig,
                  finalScriptWitness,
                };
              }
              function getHashAndSighashType(
                inputs,
                inputIndex,
                pubkey,
                cache,
                sighashTypes
              ) {
                const input = (0, utils_1.checkForInput)(inputs, inputIndex);
                const { hash, sighashType, script } = getHashForSig(
                  inputIndex,
                  input,
                  cache,
                  false,
                  sighashTypes
                );
                checkScriptForPubkey(pubkey, script, 'sign');
                return {
                  hash,
                  sighashType,
                };
              }
              function getHashForSig(
                inputIndex,
                input,
                cache,
                forValidate,
                sighashTypes
              ) {
                const unsignedTx = cache.__TX;
                const sighashType =
                  input.sighashType || transaction_1.Transaction.SIGHASH_ALL;
                if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {
                  const str = sighashTypeToString(sighashType);
                  throw new Error(
                    `Sighash type is not allowed. Retry the sign method passing the ` +
                      `sighashTypes array of whitelisted types. Sighash type: ${str}`
                  );
                }
                let hash;
                let prevout;
                if (input.nonWitnessUtxo) {
                  const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
                    cache,
                    input,
                    inputIndex
                  );
                  const prevoutHash = unsignedTx.ins[inputIndex].hash;
                  const utxoHash = nonWitnessUtxoTx.getHash();
                  // If a non-witness UTXO is provided, its hash must match the hash specified in the prevout
                  if (!prevoutHash.equals(utxoHash)) {
                    throw new Error(
                      `Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`
                    );
                  }
                  const prevoutIndex = unsignedTx.ins[inputIndex].index;
                  prevout = nonWitnessUtxoTx.outs[prevoutIndex];
                } else if (input.witnessUtxo) {
                  prevout = input.witnessUtxo;
                } else {
                  throw new Error('Need a Utxo input item for signing');
                }
                const { meaningfulScript, type } = getMeaningfulScript(
                  prevout.script,
                  inputIndex,
                  'input',
                  input.redeemScript,
                  input.witnessScript
                );
                if (['p2sh-p2wsh', 'p2wsh'].indexOf(type) >= 0) {
                  hash = unsignedTx.hashForWitnessV0(
                    inputIndex,
                    meaningfulScript,
                    prevout.value,
                    sighashType
                  );
                } else if (isP2WPKH(meaningfulScript)) {
                  // P2WPKH uses the P2PKH template for prevoutScript when signing
                  const signingScript = payments.p2pkh({
                    hash: meaningfulScript.slice(2),
                  }).output;
                  hash = unsignedTx.hashForWitnessV0(
                    inputIndex,
                    signingScript,
                    prevout.value,
                    sighashType
                  );
                } else {
                  // non-segwit
                  if (
                    input.nonWitnessUtxo === undefined &&
                    cache.__UNSAFE_SIGN_NONSEGWIT === false
                  )
                    throw new Error(
                      `Input #${inputIndex} has witnessUtxo but non-segwit script: ` +
                        `${meaningfulScript.toString('hex')}`
                    );
                  if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false)
                    console.warn(
                      'Warning: Signing non-segwit inputs without the full parent transaction ' +
                        'means there is a chance that a miner could feed you incorrect information ' +
                        "to trick you into paying large fees. This behavior is the same as Psbt's predecesor " +
                        '(TransactionBuilder - now removed) when signing non-segwit scripts. You are not ' +
                        'able to export this Psbt with toBuffer|toBase64|toHex since it is not ' +
                        'BIP174 compliant.\n*********************\nPROCEED WITH CAUTION!\n' +
                        '*********************'
                    );
                  hash = unsignedTx.hashForSignature(
                    inputIndex,
                    meaningfulScript,
                    sighashType
                  );
                }
                return {
                  script: meaningfulScript,
                  sighashType,
                  hash,
                };
              }
              function getPayment(script, scriptType, partialSig) {
                let payment;
                switch (scriptType) {
                  case 'multisig':
                    const sigs = getSortedSigs(script, partialSig);
                    payment = payments.p2ms({
                      output: script,
                      signatures: sigs,
                    });
                    break;
                  case 'pubkey':
                    payment = payments.p2pk({
                      output: script,
                      signature: partialSig[0].signature,
                    });
                    break;
                  case 'pubkeyhash':
                    payment = payments.p2pkh({
                      output: script,
                      pubkey: partialSig[0].pubkey,
                      signature: partialSig[0].signature,
                    });
                    break;
                  case 'witnesspubkeyhash':
                    payment = payments.p2wpkh({
                      output: script,
                      pubkey: partialSig[0].pubkey,
                      signature: partialSig[0].signature,
                    });
                    break;
                }
                return payment;
              }
              function getPsigsFromInputFinalScripts(input) {
                const scriptItems = !input.finalScriptSig
                  ? []
                  : bscript.decompile(input.finalScriptSig) || [];
                const witnessItems = !input.finalScriptWitness
                  ? []
                  : bscript.decompile(input.finalScriptWitness) || [];
                return scriptItems
                  .concat(witnessItems)
                  .filter((item) => {
                    return (
                      Buffer.isBuffer(item) &&
                      bscript.isCanonicalScriptSignature(item)
                    );
                  })
                  .map((sig) => ({ signature: sig }));
              }
              function getScriptFromInput(inputIndex, input, cache) {
                const unsignedTx = cache.__TX;
                const res = {
                  script: null,
                  isSegwit: false,
                  isP2SH: false,
                  isP2WSH: false,
                };
                res.isP2SH = !!input.redeemScript;
                res.isP2WSH = !!input.witnessScript;
                if (input.witnessScript) {
                  res.script = input.witnessScript;
                } else if (input.redeemScript) {
                  res.script = input.redeemScript;
                } else {
                  if (input.nonWitnessUtxo) {
                    const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
                      cache,
                      input,
                      inputIndex
                    );
                    const prevoutIndex = unsignedTx.ins[inputIndex].index;
                    res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;
                  } else if (input.witnessUtxo) {
                    res.script = input.witnessUtxo.script;
                  }
                }
                if (input.witnessScript || isP2WPKH(res.script)) {
                  res.isSegwit = true;
                }
                return res;
              }
              function getSignersFromHD(inputIndex, inputs, hdKeyPair) {
                const input = (0, utils_1.checkForInput)(inputs, inputIndex);
                if (
                  !input.bip32Derivation ||
                  input.bip32Derivation.length === 0
                ) {
                  throw new Error('Need bip32Derivation to sign with HD');
                }
                const myDerivations = input.bip32Derivation
                  .map((bipDv) => {
                    if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {
                      return bipDv;
                    } else {
                      return;
                    }
                  })
                  .filter((v) => !!v);
                if (myDerivations.length === 0) {
                  throw new Error(
                    'Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint'
                  );
                }
                const signers = myDerivations.map((bipDv) => {
                  const node = hdKeyPair.derivePath(bipDv.path);
                  if (!bipDv.pubkey.equals(node.publicKey)) {
                    throw new Error('pubkey did not match bip32Derivation');
                  }
                  return node;
                });
                return signers;
              }
              function getSortedSigs(script, partialSig) {
                const p2ms = payments.p2ms({ output: script });
                // for each pubkey in order of p2ms script
                return p2ms.pubkeys
                  .map((pk) => {
                    // filter partialSig array by pubkey being equal
                    return (
                      partialSig.filter((ps) => {
                        return ps.pubkey.equals(pk);
                      })[0] || {}
                    ).signature;
                    // Any pubkey without a match will return undefined
                    // this last filter removes all the undefined items in the array.
                  })
                  .filter((v) => !!v);
              }
              function scriptWitnessToWitnessStack(buffer) {
                let offset = 0;
                function readSlice(n) {
                  offset += n;
                  return buffer.slice(offset - n, offset);
                }
                function readVarInt() {
                  const vi = varuint.decode(buffer, offset);
                  offset += varuint.decode.bytes;
                  return vi;
                }
                function readVarSlice() {
                  return readSlice(readVarInt());
                }
                function readVector() {
                  const count = readVarInt();
                  const vector = [];
                  for (let i = 0; i < count; i++) vector.push(readVarSlice());
                  return vector;
                }
                return readVector();
              }
              function sighashTypeToString(sighashType) {
                let text =
                  sighashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY
                    ? 'SIGHASH_ANYONECANPAY | '
                    : '';
                const sigMod = sighashType & 0x1f;
                switch (sigMod) {
                  case transaction_1.Transaction.SIGHASH_ALL:
                    text += 'SIGHASH_ALL';
                    break;
                  case transaction_1.Transaction.SIGHASH_SINGLE:
                    text += 'SIGHASH_SINGLE';
                    break;
                  case transaction_1.Transaction.SIGHASH_NONE:
                    text += 'SIGHASH_NONE';
                    break;
                }
                return text;
              }
              function witnessStackToScriptWitness(witness) {
                let buffer = Buffer.allocUnsafe(0);
                function writeSlice(slice) {
                  buffer = Buffer.concat([buffer, Buffer.from(slice)]);
                }
                function writeVarInt(i) {
                  const currentLen = buffer.length;
                  const varintLen = varuint.encodingLength(i);
                  buffer = Buffer.concat([
                    buffer,
                    Buffer.allocUnsafe(varintLen),
                  ]);
                  varuint.encode(i, buffer, currentLen);
                }
                function writeVarSlice(slice) {
                  writeVarInt(slice.length);
                  writeSlice(slice);
                }
                function writeVector(vector) {
                  writeVarInt(vector.length);
                  vector.forEach(writeVarSlice);
                }
                writeVector(witness);
                return buffer;
              }
              function addNonWitnessTxCache(cache, input, inputIndex) {
                cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] =
                  input.nonWitnessUtxo;
                const tx = transaction_1.Transaction.fromBuffer(
                  input.nonWitnessUtxo
                );
                cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;
                const self = cache;
                const selfIndex = inputIndex;
                delete input.nonWitnessUtxo;
                Object.defineProperty(input, 'nonWitnessUtxo', {
                  enumerable: true,
                  get() {
                    const buf = self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];
                    const txCache = self.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];
                    if (buf !== undefined) {
                      return buf;
                    } else {
                      const newBuf = txCache.toBuffer();
                      self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;
                      return newBuf;
                    }
                  },
                  set(data) {
                    self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;
                  },
                });
              }
              function inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {
                let inputAmount = 0;
                inputs.forEach((input, idx) => {
                  if (mustFinalize && input.finalScriptSig)
                    tx.ins[idx].script = input.finalScriptSig;
                  if (mustFinalize && input.finalScriptWitness) {
                    tx.ins[idx].witness = scriptWitnessToWitnessStack(
                      input.finalScriptWitness
                    );
                  }
                  if (input.witnessUtxo) {
                    inputAmount += input.witnessUtxo.value;
                  } else if (input.nonWitnessUtxo) {
                    const nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);
                    const vout = tx.ins[idx].index;
                    const out = nwTx.outs[vout];
                    inputAmount += out.value;
                  }
                });
                const outputAmount = tx.outs.reduce(
                  (total, o) => total + o.value,
                  0
                );
                const fee = inputAmount - outputAmount;
                if (fee < 0) {
                  throw new Error('Outputs are spending more than Inputs');
                }
                const bytes = tx.virtualSize();
                cache.__FEE = fee;
                cache.__EXTRACTED_TX = tx;
                cache.__FEE_RATE = Math.floor(fee / bytes);
              }
              function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {
                const c = cache.__NON_WITNESS_UTXO_TX_CACHE;
                if (!c[inputIndex]) {
                  addNonWitnessTxCache(cache, input, inputIndex);
                }
                return c[inputIndex];
              }
              function getScriptFromUtxo(inputIndex, input, cache) {
                if (input.witnessUtxo !== undefined) {
                  return input.witnessUtxo.script;
                } else if (input.nonWitnessUtxo !== undefined) {
                  const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
                    cache,
                    input,
                    inputIndex
                  );
                  return nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index]
                    .script;
                } else {
                  throw new Error(
                    "Can't find pubkey in input without Utxo data"
                  );
                }
              }
              function pubkeyInInput(pubkey, input, inputIndex, cache) {
                const script = getScriptFromUtxo(inputIndex, input, cache);
                const { meaningfulScript } = getMeaningfulScript(
                  script,
                  inputIndex,
                  'input',
                  input.redeemScript,
                  input.witnessScript
                );
                return pubkeyInScript(pubkey, meaningfulScript);
              }
              function pubkeyInOutput(pubkey, output, outputIndex, cache) {
                const script = cache.__TX.outs[outputIndex].script;
                const { meaningfulScript } = getMeaningfulScript(
                  script,
                  outputIndex,
                  'output',
                  output.redeemScript,
                  output.witnessScript
                );
                return pubkeyInScript(pubkey, meaningfulScript);
              }
              function redeemFromFinalScriptSig(finalScript) {
                if (!finalScript) return;
                const decomp = bscript.decompile(finalScript);
                if (!decomp) return;
                const lastItem = decomp[decomp.length - 1];
                if (
                  !Buffer.isBuffer(lastItem) ||
                  isPubkeyLike(lastItem) ||
                  isSigLike(lastItem)
                )
                  return;
                const sDecomp = bscript.decompile(lastItem);
                if (!sDecomp) return;
                return lastItem;
              }
              function redeemFromFinalWitnessScript(finalScript) {
                if (!finalScript) return;
                const decomp = scriptWitnessToWitnessStack(finalScript);
                const lastItem = decomp[decomp.length - 1];
                if (isPubkeyLike(lastItem)) return;
                const sDecomp = bscript.decompile(lastItem);
                if (!sDecomp) return;
                return lastItem;
              }
              function compressPubkey(pubkey) {
                if (pubkey.length === 65) {
                  const parity = pubkey[64] & 1;
                  const newKey = pubkey.slice(0, 33);
                  newKey[0] = 2 | parity;
                  return newKey;
                }
                return pubkey.slice();
              }
              function isPubkeyLike(buf) {
                return buf.length === 33 && bscript.isCanonicalPubKey(buf);
              }
              function isSigLike(buf) {
                return bscript.isCanonicalScriptSignature(buf);
              }
              function getMeaningfulScript(
                script,
                index,
                ioType,
                redeemScript,
                witnessScript
              ) {
                const isP2SH = isP2SHScript(script);
                const isP2SHP2WSH =
                  isP2SH && redeemScript && isP2WSHScript(redeemScript);
                const isP2WSH = isP2WSHScript(script);
                if (isP2SH && redeemScript === undefined)
                  throw new Error(
                    'scriptPubkey is P2SH but redeemScript missing'
                  );
                if ((isP2WSH || isP2SHP2WSH) && witnessScript === undefined)
                  throw new Error(
                    'scriptPubkey or redeemScript is P2WSH but witnessScript missing'
                  );
                let meaningfulScript;
                if (isP2SHP2WSH) {
                  meaningfulScript = witnessScript;
                  checkRedeemScript(index, script, redeemScript, ioType);
                  checkWitnessScript(
                    index,
                    redeemScript,
                    witnessScript,
                    ioType
                  );
                  checkInvalidP2WSH(meaningfulScript);
                } else if (isP2WSH) {
                  meaningfulScript = witnessScript;
                  checkWitnessScript(index, script, witnessScript, ioType);
                  checkInvalidP2WSH(meaningfulScript);
                } else if (isP2SH) {
                  meaningfulScript = redeemScript;
                  checkRedeemScript(index, script, redeemScript, ioType);
                } else {
                  meaningfulScript = script;
                }
                return {
                  meaningfulScript,
                  type: isP2SHP2WSH
                    ? 'p2sh-p2wsh'
                    : isP2SH
                    ? 'p2sh'
                    : isP2WSH
                    ? 'p2wsh'
                    : 'raw',
                };
              }
              function checkInvalidP2WSH(script) {
                if (isP2WPKH(script) || isP2SHScript(script)) {
                  throw new Error(
                    'P2WPKH or P2SH can not be contained within P2WSH'
                  );
                }
              }
              function pubkeyInScript(pubkey, script) {
                const pubkeyHash = (0, crypto_1.hash160)(pubkey);
                const decompiled = bscript.decompile(script);
                if (decompiled === null)
                  throw new Error('Unknown script error');
                return decompiled.some((element) => {
                  if (typeof element === 'number') return false;
                  return element.equals(pubkey) || element.equals(pubkeyHash);
                });
              }
              function classifyScript(script) {
                if (isP2WPKH(script)) return 'witnesspubkeyhash';
                if (isP2PKH(script)) return 'pubkeyhash';
                if (isP2MS(script)) return 'multisig';
                if (isP2PK(script)) return 'pubkey';
                return 'nonstandard';
              }
              function range(n) {
                return [...Array(n).keys()];
              }
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './address': 60,
          './bufferutils': 63,
          './crypto': 64,
          './networks': 67,
          './payments': 70,
          './script': 80,
          './transaction': 83,
          bip174: 41,
          'bip174/src/lib/converter/varint': 37,
          'bip174/src/lib/utils': 43,
          buffer: 183,
        },
      ],
      79: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.decode = exports.encode = exports.encodingLength = void 0;
          const ops_1 = require('./ops');
          function encodingLength(i) {
            return i < ops_1.OPS.OP_PUSHDATA1
              ? 1
              : i <= 0xff
              ? 2
              : i <= 0xffff
              ? 3
              : 5;
          }
          exports.encodingLength = encodingLength;
          function encode(buffer, num, offset) {
            const size = encodingLength(num);
            // ~6 bit
            if (size === 1) {
              buffer.writeUInt8(num, offset);
              // 8 bit
            } else if (size === 2) {
              buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA1, offset);
              buffer.writeUInt8(num, offset + 1);
              // 16 bit
            } else if (size === 3) {
              buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA2, offset);
              buffer.writeUInt16LE(num, offset + 1);
              // 32 bit
            } else {
              buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA4, offset);
              buffer.writeUInt32LE(num, offset + 1);
            }
            return size;
          }
          exports.encode = encode;
          function decode(buffer, offset) {
            const opcode = buffer.readUInt8(offset);
            let num;
            let size;
            // ~6 bit
            if (opcode < ops_1.OPS.OP_PUSHDATA1) {
              num = opcode;
              size = 1;
              // 8 bit
            } else if (opcode === ops_1.OPS.OP_PUSHDATA1) {
              if (offset + 2 > buffer.length) return null;
              num = buffer.readUInt8(offset + 1);
              size = 2;
              // 16 bit
            } else if (opcode === ops_1.OPS.OP_PUSHDATA2) {
              if (offset + 3 > buffer.length) return null;
              num = buffer.readUInt16LE(offset + 1);
              size = 3;
              // 32 bit
            } else {
              if (offset + 5 > buffer.length) return null;
              if (opcode !== ops_1.OPS.OP_PUSHDATA4)
                throw new Error('Unexpected opcode');
              num = buffer.readUInt32LE(offset + 1);
              size = 5;
            }
            return {
              opcode,
              number: num,
              size,
            };
          }
          exports.decode = decode;
        },
        { './ops': 68 },
      ],
      80: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.signature =
                exports.number =
                exports.isCanonicalScriptSignature =
                exports.isDefinedHashType =
                exports.isCanonicalPubKey =
                exports.toStack =
                exports.fromASM =
                exports.toASM =
                exports.decompile =
                exports.compile =
                exports.isPushOnly =
                exports.OPS =
                  void 0;
              const bip66 = require('./bip66');
              const ops_1 = require('./ops');
              Object.defineProperty(exports, 'OPS', {
                enumerable: true,
                get: function () {
                  return ops_1.OPS;
                },
              });
              const pushdata = require('./push_data');
              const scriptNumber = require('./script_number');
              const scriptSignature = require('./script_signature');
              const types = require('./types');
              const { typeforce } = types;
              const OP_INT_BASE = ops_1.OPS.OP_RESERVED; // OP_1 - 1
              function isOPInt(value) {
                return (
                  types.Number(value) &&
                  (value === ops_1.OPS.OP_0 ||
                    (value >= ops_1.OPS.OP_1 && value <= ops_1.OPS.OP_16) ||
                    value === ops_1.OPS.OP_1NEGATE)
                );
              }
              function isPushOnlyChunk(value) {
                return types.Buffer(value) || isOPInt(value);
              }
              function isPushOnly(value) {
                return types.Array(value) && value.every(isPushOnlyChunk);
              }
              exports.isPushOnly = isPushOnly;
              function asMinimalOP(buffer) {
                if (buffer.length === 0) return ops_1.OPS.OP_0;
                if (buffer.length !== 1) return;
                if (buffer[0] >= 1 && buffer[0] <= 16)
                  return OP_INT_BASE + buffer[0];
                if (buffer[0] === 0x81) return ops_1.OPS.OP_1NEGATE;
              }
              function chunksIsBuffer(buf) {
                return Buffer.isBuffer(buf);
              }
              function chunksIsArray(buf) {
                return types.Array(buf);
              }
              function singleChunkIsBuffer(buf) {
                return Buffer.isBuffer(buf);
              }
              function compile(chunks) {
                // TODO: remove me
                if (chunksIsBuffer(chunks)) return chunks;
                typeforce(types.Array, chunks);
                const bufferSize = chunks.reduce((accum, chunk) => {
                  // data chunk
                  if (singleChunkIsBuffer(chunk)) {
                    // adhere to BIP62.3, minimal push policy
                    if (
                      chunk.length === 1 &&
                      asMinimalOP(chunk) !== undefined
                    ) {
                      return accum + 1;
                    }
                    return (
                      accum +
                      pushdata.encodingLength(chunk.length) +
                      chunk.length
                    );
                  }
                  // opcode
                  return accum + 1;
                }, 0.0);
                const buffer = Buffer.allocUnsafe(bufferSize);
                let offset = 0;
                chunks.forEach((chunk) => {
                  // data chunk
                  if (singleChunkIsBuffer(chunk)) {
                    // adhere to BIP62.3, minimal push policy
                    const opcode = asMinimalOP(chunk);
                    if (opcode !== undefined) {
                      buffer.writeUInt8(opcode, offset);
                      offset += 1;
                      return;
                    }
                    offset += pushdata.encode(buffer, chunk.length, offset);
                    chunk.copy(buffer, offset);
                    offset += chunk.length;
                    // opcode
                  } else {
                    buffer.writeUInt8(chunk, offset);
                    offset += 1;
                  }
                });
                if (offset !== buffer.length)
                  throw new Error('Could not decode chunks');
                return buffer;
              }
              exports.compile = compile;
              function decompile(buffer) {
                // TODO: remove me
                if (chunksIsArray(buffer)) return buffer;
                typeforce(types.Buffer, buffer);
                const chunks = [];
                let i = 0;
                while (i < buffer.length) {
                  const opcode = buffer[i];
                  // data chunk
                  if (
                    opcode > ops_1.OPS.OP_0 &&
                    opcode <= ops_1.OPS.OP_PUSHDATA4
                  ) {
                    const d = pushdata.decode(buffer, i);
                    // did reading a pushDataInt fail?
                    if (d === null) return null;
                    i += d.size;
                    // attempt to read too much data?
                    if (i + d.number > buffer.length) return null;
                    const data = buffer.slice(i, i + d.number);
                    i += d.number;
                    // decompile minimally
                    const op = asMinimalOP(data);
                    if (op !== undefined) {
                      chunks.push(op);
                    } else {
                      chunks.push(data);
                    }
                    // opcode
                  } else {
                    chunks.push(opcode);
                    i += 1;
                  }
                }
                return chunks;
              }
              exports.decompile = decompile;
              function toASM(chunks) {
                if (chunksIsBuffer(chunks)) {
                  chunks = decompile(chunks);
                }
                return chunks
                  .map((chunk) => {
                    // data?
                    if (singleChunkIsBuffer(chunk)) {
                      const op = asMinimalOP(chunk);
                      if (op === undefined) return chunk.toString('hex');
                      chunk = op;
                    }
                    // opcode!
                    return ops_1.REVERSE_OPS[chunk];
                  })
                  .join(' ');
              }
              exports.toASM = toASM;
              function fromASM(asm) {
                typeforce(types.String, asm);
                return compile(
                  asm.split(' ').map((chunkStr) => {
                    // opcode?
                    if (ops_1.OPS[chunkStr] !== undefined)
                      return ops_1.OPS[chunkStr];
                    typeforce(types.Hex, chunkStr);
                    // data!
                    return Buffer.from(chunkStr, 'hex');
                  })
                );
              }
              exports.fromASM = fromASM;
              function toStack(chunks) {
                chunks = decompile(chunks);
                typeforce(isPushOnly, chunks);
                return chunks.map((op) => {
                  if (singleChunkIsBuffer(op)) return op;
                  if (op === ops_1.OPS.OP_0) return Buffer.allocUnsafe(0);
                  return scriptNumber.encode(op - OP_INT_BASE);
                });
              }
              exports.toStack = toStack;
              function isCanonicalPubKey(buffer) {
                return types.isPoint(buffer);
              }
              exports.isCanonicalPubKey = isCanonicalPubKey;
              function isDefinedHashType(hashType) {
                const hashTypeMod = hashType & ~0x80;
                // return hashTypeMod > SIGHASH_ALL && hashTypeMod < SIGHASH_SINGLE
                return hashTypeMod > 0x00 && hashTypeMod < 0x04;
              }
              exports.isDefinedHashType = isDefinedHashType;
              function isCanonicalScriptSignature(buffer) {
                if (!Buffer.isBuffer(buffer)) return false;
                if (!isDefinedHashType(buffer[buffer.length - 1])) return false;
                return bip66.check(buffer.slice(0, -1));
              }
              exports.isCanonicalScriptSignature = isCanonicalScriptSignature;
              // tslint:disable-next-line variable-name
              exports.number = scriptNumber;
              exports.signature = scriptSignature;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './bip66': 61,
          './ops': 68,
          './push_data': 79,
          './script_number': 81,
          './script_signature': 82,
          './types': 84,
          buffer: 183,
        },
      ],
      81: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.encode = exports.decode = void 0;
              function decode(buffer, maxLength, minimal) {
                maxLength = maxLength || 4;
                minimal = minimal === undefined ? true : minimal;
                const length = buffer.length;
                if (length === 0) return 0;
                if (length > maxLength)
                  throw new TypeError('Script number overflow');
                if (minimal) {
                  if ((buffer[length - 1] & 0x7f) === 0) {
                    if (length <= 1 || (buffer[length - 2] & 0x80) === 0)
                      throw new Error('Non-minimally encoded script number');
                  }
                }
                // 40-bit
                if (length === 5) {
                  const a = buffer.readUInt32LE(0);
                  const b = buffer.readUInt8(4);
                  if (b & 0x80) return -((b & ~0x80) * 0x100000000 + a);
                  return b * 0x100000000 + a;
                }
                // 32-bit / 24-bit / 16-bit / 8-bit
                let result = 0;
                for (let i = 0; i < length; ++i) {
                  result |= buffer[i] << (8 * i);
                }
                if (buffer[length - 1] & 0x80)
                  return -(result & ~(0x80 << (8 * (length - 1))));
                return result;
              }
              exports.decode = decode;
              function scriptNumSize(i) {
                return i > 0x7fffffff
                  ? 5
                  : i > 0x7fffff
                  ? 4
                  : i > 0x7fff
                  ? 3
                  : i > 0x7f
                  ? 2
                  : i > 0x00
                  ? 1
                  : 0;
              }
              function encode(_number) {
                let value = Math.abs(_number);
                const size = scriptNumSize(value);
                const buffer = Buffer.allocUnsafe(size);
                const negative = _number < 0;
                for (let i = 0; i < size; ++i) {
                  buffer.writeUInt8(value & 0xff, i);
                  value >>= 8;
                }
                if (buffer[size - 1] & 0x80) {
                  buffer.writeUInt8(negative ? 0x80 : 0x00, size - 1);
                } else if (negative) {
                  buffer[size - 1] |= 0x80;
                }
                return buffer;
              }
              exports.encode = encode;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183 },
      ],
      82: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.encode = exports.decode = void 0;
              const bip66 = require('./bip66');
              const types = require('./types');
              const { typeforce } = types;
              const ZERO = Buffer.alloc(1, 0);
              function toDER(x) {
                let i = 0;
                while (x[i] === 0) ++i;
                if (i === x.length) return ZERO;
                x = x.slice(i);
                if (x[0] & 0x80) return Buffer.concat([ZERO, x], 1 + x.length);
                return x;
              }
              function fromDER(x) {
                if (x[0] === 0x00) x = x.slice(1);
                const buffer = Buffer.alloc(32, 0);
                const bstart = Math.max(0, 32 - x.length);
                x.copy(buffer, bstart);
                return buffer;
              }
              // BIP62: 1 byte hashType flag (only 0x01, 0x02, 0x03, 0x81, 0x82 and 0x83 are allowed)
              function decode(buffer) {
                const hashType = buffer.readUInt8(buffer.length - 1);
                const hashTypeMod = hashType & ~0x80;
                if (hashTypeMod <= 0 || hashTypeMod >= 4)
                  throw new Error('Invalid hashType ' + hashType);
                const decoded = bip66.decode(buffer.slice(0, -1));
                const r = fromDER(decoded.r);
                const s = fromDER(decoded.s);
                const signature = Buffer.concat([r, s], 64);
                return { signature, hashType };
              }
              exports.decode = decode;
              function encode(signature, hashType) {
                typeforce(
                  {
                    signature: types.BufferN(64),
                    hashType: types.UInt8,
                  },
                  { signature, hashType }
                );
                const hashTypeMod = hashType & ~0x80;
                if (hashTypeMod <= 0 || hashTypeMod >= 4)
                  throw new Error('Invalid hashType ' + hashType);
                const hashTypeBuffer = Buffer.allocUnsafe(1);
                hashTypeBuffer.writeUInt8(hashType, 0);
                const r = toDER(signature.slice(0, 32));
                const s = toDER(signature.slice(32, 64));
                return Buffer.concat([bip66.encode(r, s), hashTypeBuffer]);
              }
              exports.encode = encode;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { './bip66': 61, './types': 84, buffer: 183 },
      ],
      83: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              'use strict';
              Object.defineProperty(exports, '__esModule', { value: true });
              exports.Transaction = void 0;
              const bufferutils_1 = require('./bufferutils');
              const bcrypto = require('./crypto');
              const bscript = require('./script');
              const script_1 = require('./script');
              const types = require('./types');
              const { typeforce } = types;
              function varSliceSize(someScript) {
                const length = someScript.length;
                return bufferutils_1.varuint.encodingLength(length) + length;
              }
              function vectorSize(someVector) {
                const length = someVector.length;
                return (
                  bufferutils_1.varuint.encodingLength(length) +
                  someVector.reduce((sum, witness) => {
                    return sum + varSliceSize(witness);
                  }, 0)
                );
              }
              const EMPTY_BUFFER = Buffer.allocUnsafe(0);
              const EMPTY_WITNESS = [];
              const ZERO = Buffer.from(
                '0000000000000000000000000000000000000000000000000000000000000000',
                'hex'
              );
              const ONE = Buffer.from(
                '0000000000000000000000000000000000000000000000000000000000000001',
                'hex'
              );
              const VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex');
              const BLANK_OUTPUT = {
                script: EMPTY_BUFFER,
                valueBuffer: VALUE_UINT64_MAX,
              };
              function isOutput(out) {
                return out.value !== undefined;
              }
              class Transaction {
                constructor() {
                  this.version = 1;
                  this.locktime = 0;
                  this.ins = [];
                  this.outs = [];
                }
                static fromBuffer(buffer, _NO_STRICT) {
                  const bufferReader = new bufferutils_1.BufferReader(buffer);
                  const tx = new Transaction();
                  tx.version = bufferReader.readInt32();
                  const marker = bufferReader.readUInt8();
                  const flag = bufferReader.readUInt8();
                  let hasWitnesses = false;
                  if (
                    marker === Transaction.ADVANCED_TRANSACTION_MARKER &&
                    flag === Transaction.ADVANCED_TRANSACTION_FLAG
                  ) {
                    hasWitnesses = true;
                  } else {
                    bufferReader.offset -= 2;
                  }
                  const vinLen = bufferReader.readVarInt();
                  for (let i = 0; i < vinLen; ++i) {
                    tx.ins.push({
                      hash: bufferReader.readSlice(32),
                      index: bufferReader.readUInt32(),
                      script: bufferReader.readVarSlice(),
                      sequence: bufferReader.readUInt32(),
                      witness: EMPTY_WITNESS,
                    });
                  }
                  const voutLen = bufferReader.readVarInt();
                  for (let i = 0; i < voutLen; ++i) {
                    tx.outs.push({
                      value: bufferReader.readUInt64(),
                      script: bufferReader.readVarSlice(),
                    });
                  }
                  if (hasWitnesses) {
                    for (let i = 0; i < vinLen; ++i) {
                      tx.ins[i].witness = bufferReader.readVector();
                    }
                    // was this pointless?
                    if (!tx.hasWitnesses())
                      throw new Error(
                        'Transaction has superfluous witness data'
                      );
                  }
                  tx.locktime = bufferReader.readUInt32();
                  if (_NO_STRICT) return tx;
                  if (bufferReader.offset !== buffer.length)
                    throw new Error('Transaction has unexpected data');
                  return tx;
                }
                static fromHex(hex) {
                  return Transaction.fromBuffer(Buffer.from(hex, 'hex'), false);
                }
                static isCoinbaseHash(buffer) {
                  typeforce(types.Hash256bit, buffer);
                  for (let i = 0; i < 32; ++i) {
                    if (buffer[i] !== 0) return false;
                  }
                  return true;
                }
                isCoinbase() {
                  return (
                    this.ins.length === 1 &&
                    Transaction.isCoinbaseHash(this.ins[0].hash)
                  );
                }
                addInput(hash, index, sequence, scriptSig) {
                  typeforce(
                    types.tuple(
                      types.Hash256bit,
                      types.UInt32,
                      types.maybe(types.UInt32),
                      types.maybe(types.Buffer)
                    ),
                    arguments
                  );
                  if (types.Null(sequence)) {
                    sequence = Transaction.DEFAULT_SEQUENCE;
                  }
                  // Add the input and return the input's index
                  return (
                    this.ins.push({
                      hash,
                      index,
                      script: scriptSig || EMPTY_BUFFER,
                      sequence: sequence,
                      witness: EMPTY_WITNESS,
                    }) - 1
                  );
                }
                addOutput(scriptPubKey, value) {
                  typeforce(
                    types.tuple(types.Buffer, types.Satoshi),
                    arguments
                  );
                  // Add the output and return the output's index
                  return (
                    this.outs.push({
                      script: scriptPubKey,
                      value,
                    }) - 1
                  );
                }
                hasWitnesses() {
                  return this.ins.some((x) => {
                    return x.witness.length !== 0;
                  });
                }
                weight() {
                  const base = this.byteLength(false);
                  const total = this.byteLength(true);
                  return base * 3 + total;
                }
                virtualSize() {
                  return Math.ceil(this.weight() / 4);
                }
                byteLength(_ALLOW_WITNESS = true) {
                  const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
                  return (
                    (hasWitnesses ? 10 : 8) +
                    bufferutils_1.varuint.encodingLength(this.ins.length) +
                    bufferutils_1.varuint.encodingLength(this.outs.length) +
                    this.ins.reduce((sum, input) => {
                      return sum + 40 + varSliceSize(input.script);
                    }, 0) +
                    this.outs.reduce((sum, output) => {
                      return sum + 8 + varSliceSize(output.script);
                    }, 0) +
                    (hasWitnesses
                      ? this.ins.reduce((sum, input) => {
                          return sum + vectorSize(input.witness);
                        }, 0)
                      : 0)
                  );
                }
                clone() {
                  const newTx = new Transaction();
                  newTx.version = this.version;
                  newTx.locktime = this.locktime;
                  newTx.ins = this.ins.map((txIn) => {
                    return {
                      hash: txIn.hash,
                      index: txIn.index,
                      script: txIn.script,
                      sequence: txIn.sequence,
                      witness: txIn.witness,
                    };
                  });
                  newTx.outs = this.outs.map((txOut) => {
                    return {
                      script: txOut.script,
                      value: txOut.value,
                    };
                  });
                  return newTx;
                }
                /**
                 * Hash transaction for signing a specific input.
                 *
                 * Bitcoin uses a different hash for each signed transaction input.
                 * This method copies the transaction, makes the necessary changes based on the
                 * hashType, and then hashes the result.
                 * This hash can then be used to sign the provided transaction input.
                 */
                hashForSignature(inIndex, prevOutScript, hashType) {
                  typeforce(
                    types.tuple(
                      types.UInt32,
                      types.Buffer,
                      /* types.UInt8 */ types.Number
                    ),
                    arguments
                  );
                  // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29
                  if (inIndex >= this.ins.length) return ONE;
                  // ignore OP_CODESEPARATOR
                  const ourScript = bscript.compile(
                    bscript.decompile(prevOutScript).filter((x) => {
                      return x !== script_1.OPS.OP_CODESEPARATOR;
                    })
                  );
                  const txTmp = this.clone();
                  // SIGHASH_NONE: ignore all outputs? (wildcard payee)
                  if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {
                    txTmp.outs = [];
                    // ignore sequence numbers (except at inIndex)
                    txTmp.ins.forEach((input, i) => {
                      if (i === inIndex) return;
                      input.sequence = 0;
                    });
                    // SIGHASH_SINGLE: ignore all outputs, except at the same index?
                  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {
                    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60
                    if (inIndex >= this.outs.length) return ONE;
                    // truncate outputs after
                    txTmp.outs.length = inIndex + 1;
                    // "blank" outputs before
                    for (let i = 0; i < inIndex; i++) {
                      txTmp.outs[i] = BLANK_OUTPUT;
                    }
                    // ignore sequence numbers (except at inIndex)
                    txTmp.ins.forEach((input, y) => {
                      if (y === inIndex) return;
                      input.sequence = 0;
                    });
                  }
                  // SIGHASH_ANYONECANPAY: ignore inputs entirely?
                  if (hashType & Transaction.SIGHASH_ANYONECANPAY) {
                    txTmp.ins = [txTmp.ins[inIndex]];
                    txTmp.ins[0].script = ourScript;
                    // SIGHASH_ALL: only ignore input scripts
                  } else {
                    // "blank" others input scripts
                    txTmp.ins.forEach((input) => {
                      input.script = EMPTY_BUFFER;
                    });
                    txTmp.ins[inIndex].script = ourScript;
                  }
                  // serialize and hash
                  const buffer = Buffer.allocUnsafe(
                    txTmp.byteLength(false) + 4
                  );
                  buffer.writeInt32LE(hashType, buffer.length - 4);
                  txTmp.__toBuffer(buffer, 0, false);
                  return bcrypto.hash256(buffer);
                }
                hashForWitnessV1(
                  inIndex,
                  prevOutScripts,
                  values,
                  hashType,
                  leafHash,
                  annex
                ) {
                  // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#common-signature-message
                  typeforce(
                    types.tuple(
                      types.UInt32,
                      typeforce.arrayOf(types.Buffer),
                      typeforce.arrayOf(types.Satoshi),
                      types.UInt32
                    ),
                    arguments
                  );
                  if (
                    values.length !== this.ins.length ||
                    prevOutScripts.length !== this.ins.length
                  ) {
                    throw new Error(
                      'Must supply prevout script and value for all inputs'
                    );
                  }
                  const outputType =
                    hashType === Transaction.SIGHASH_DEFAULT
                      ? Transaction.SIGHASH_ALL
                      : hashType & Transaction.SIGHASH_OUTPUT_MASK;
                  const inputType = hashType & Transaction.SIGHASH_INPUT_MASK;
                  const isAnyoneCanPay =
                    inputType === Transaction.SIGHASH_ANYONECANPAY;
                  const isNone = outputType === Transaction.SIGHASH_NONE;
                  const isSingle = outputType === Transaction.SIGHASH_SINGLE;
                  let hashPrevouts = EMPTY_BUFFER;
                  let hashAmounts = EMPTY_BUFFER;
                  let hashScriptPubKeys = EMPTY_BUFFER;
                  let hashSequences = EMPTY_BUFFER;
                  let hashOutputs = EMPTY_BUFFER;
                  if (!isAnyoneCanPay) {
                    let bufferWriter = bufferutils_1.BufferWriter.withCapacity(
                      36 * this.ins.length
                    );
                    this.ins.forEach((txIn) => {
                      bufferWriter.writeSlice(txIn.hash);
                      bufferWriter.writeUInt32(txIn.index);
                    });
                    hashPrevouts = bcrypto.sha256(bufferWriter.end());
                    bufferWriter = bufferutils_1.BufferWriter.withCapacity(
                      8 * this.ins.length
                    );
                    values.forEach((value) => bufferWriter.writeUInt64(value));
                    hashAmounts = bcrypto.sha256(bufferWriter.end());
                    bufferWriter = bufferutils_1.BufferWriter.withCapacity(
                      prevOutScripts.map(varSliceSize).reduce((a, b) => a + b)
                    );
                    prevOutScripts.forEach((prevOutScript) =>
                      bufferWriter.writeVarSlice(prevOutScript)
                    );
                    hashScriptPubKeys = bcrypto.sha256(bufferWriter.end());
                    bufferWriter = bufferutils_1.BufferWriter.withCapacity(
                      4 * this.ins.length
                    );
                    this.ins.forEach((txIn) =>
                      bufferWriter.writeUInt32(txIn.sequence)
                    );
                    hashSequences = bcrypto.sha256(bufferWriter.end());
                  }
                  if (!(isNone || isSingle)) {
                    const txOutsSize = this.outs
                      .map((output) => 8 + varSliceSize(output.script))
                      .reduce((a, b) => a + b);
                    const bufferWriter =
                      bufferutils_1.BufferWriter.withCapacity(txOutsSize);
                    this.outs.forEach((out) => {
                      bufferWriter.writeUInt64(out.value);
                      bufferWriter.writeVarSlice(out.script);
                    });
                    hashOutputs = bcrypto.sha256(bufferWriter.end());
                  } else if (isSingle && inIndex < this.outs.length) {
                    const output = this.outs[inIndex];
                    const bufferWriter =
                      bufferutils_1.BufferWriter.withCapacity(
                        8 + varSliceSize(output.script)
                      );
                    bufferWriter.writeUInt64(output.value);
                    bufferWriter.writeVarSlice(output.script);
                    hashOutputs = bcrypto.sha256(bufferWriter.end());
                  }
                  const spendType = (leafHash ? 2 : 0) + (annex ? 1 : 0);
                  // Length calculation from:
                  // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-14
                  // With extension from:
                  // https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki#signature-validation
                  const sigMsgSize =
                    174 -
                    (isAnyoneCanPay ? 49 : 0) -
                    (isNone ? 32 : 0) +
                    (annex ? 32 : 0) +
                    (leafHash ? 37 : 0);
                  const sigMsgWriter =
                    bufferutils_1.BufferWriter.withCapacity(sigMsgSize);
                  sigMsgWriter.writeUInt8(hashType);
                  // Transaction
                  sigMsgWriter.writeInt32(this.version);
                  sigMsgWriter.writeUInt32(this.locktime);
                  sigMsgWriter.writeSlice(hashPrevouts);
                  sigMsgWriter.writeSlice(hashAmounts);
                  sigMsgWriter.writeSlice(hashScriptPubKeys);
                  sigMsgWriter.writeSlice(hashSequences);
                  if (!(isNone || isSingle)) {
                    sigMsgWriter.writeSlice(hashOutputs);
                  }
                  // Input
                  sigMsgWriter.writeUInt8(spendType);
                  if (isAnyoneCanPay) {
                    const input = this.ins[inIndex];
                    sigMsgWriter.writeSlice(input.hash);
                    sigMsgWriter.writeUInt32(input.index);
                    sigMsgWriter.writeUInt64(values[inIndex]);
                    sigMsgWriter.writeVarSlice(prevOutScripts[inIndex]);
                    sigMsgWriter.writeUInt32(input.sequence);
                  } else {
                    sigMsgWriter.writeUInt32(inIndex);
                  }
                  if (annex) {
                    const bufferWriter =
                      bufferutils_1.BufferWriter.withCapacity(
                        varSliceSize(annex)
                      );
                    bufferWriter.writeVarSlice(annex);
                    sigMsgWriter.writeSlice(bcrypto.sha256(bufferWriter.end()));
                  }
                  // Output
                  if (isSingle) {
                    sigMsgWriter.writeSlice(hashOutputs);
                  }
                  // BIP342 extension
                  if (leafHash) {
                    sigMsgWriter.writeSlice(leafHash);
                    sigMsgWriter.writeUInt8(0);
                    sigMsgWriter.writeUInt32(0xffffffff);
                  }
                  // Extra zero byte because:
                  // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-19
                  return bcrypto.taggedHash(
                    'TapSighash',
                    Buffer.concat([Buffer.of(0x00), sigMsgWriter.end()])
                  );
                }
                hashForWitnessV0(inIndex, prevOutScript, value, hashType) {
                  typeforce(
                    types.tuple(
                      types.UInt32,
                      types.Buffer,
                      types.Satoshi,
                      types.UInt32
                    ),
                    arguments
                  );
                  let tbuffer = Buffer.from([]);
                  let bufferWriter;
                  let hashOutputs = ZERO;
                  let hashPrevouts = ZERO;
                  let hashSequence = ZERO;
                  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {
                    tbuffer = Buffer.allocUnsafe(36 * this.ins.length);
                    bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
                    this.ins.forEach((txIn) => {
                      bufferWriter.writeSlice(txIn.hash);
                      bufferWriter.writeUInt32(txIn.index);
                    });
                    hashPrevouts = bcrypto.hash256(tbuffer);
                  }
                  if (
                    !(hashType & Transaction.SIGHASH_ANYONECANPAY) &&
                    (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&
                    (hashType & 0x1f) !== Transaction.SIGHASH_NONE
                  ) {
                    tbuffer = Buffer.allocUnsafe(4 * this.ins.length);
                    bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
                    this.ins.forEach((txIn) => {
                      bufferWriter.writeUInt32(txIn.sequence);
                    });
                    hashSequence = bcrypto.hash256(tbuffer);
                  }
                  if (
                    (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&
                    (hashType & 0x1f) !== Transaction.SIGHASH_NONE
                  ) {
                    const txOutsSize = this.outs.reduce((sum, output) => {
                      return sum + 8 + varSliceSize(output.script);
                    }, 0);
                    tbuffer = Buffer.allocUnsafe(txOutsSize);
                    bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
                    this.outs.forEach((out) => {
                      bufferWriter.writeUInt64(out.value);
                      bufferWriter.writeVarSlice(out.script);
                    });
                    hashOutputs = bcrypto.hash256(tbuffer);
                  } else if (
                    (hashType & 0x1f) === Transaction.SIGHASH_SINGLE &&
                    inIndex < this.outs.length
                  ) {
                    const output = this.outs[inIndex];
                    tbuffer = Buffer.allocUnsafe(
                      8 + varSliceSize(output.script)
                    );
                    bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
                    bufferWriter.writeUInt64(output.value);
                    bufferWriter.writeVarSlice(output.script);
                    hashOutputs = bcrypto.hash256(tbuffer);
                  }
                  tbuffer = Buffer.allocUnsafe(
                    156 + varSliceSize(prevOutScript)
                  );
                  bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
                  const input = this.ins[inIndex];
                  bufferWriter.writeInt32(this.version);
                  bufferWriter.writeSlice(hashPrevouts);
                  bufferWriter.writeSlice(hashSequence);
                  bufferWriter.writeSlice(input.hash);
                  bufferWriter.writeUInt32(input.index);
                  bufferWriter.writeVarSlice(prevOutScript);
                  bufferWriter.writeUInt64(value);
                  bufferWriter.writeUInt32(input.sequence);
                  bufferWriter.writeSlice(hashOutputs);
                  bufferWriter.writeUInt32(this.locktime);
                  bufferWriter.writeUInt32(hashType);
                  return bcrypto.hash256(tbuffer);
                }
                getHash(forWitness) {
                  // wtxid for coinbase is always 32 bytes of 0x00
                  if (forWitness && this.isCoinbase())
                    return Buffer.alloc(32, 0);
                  return bcrypto.hash256(
                    this.__toBuffer(undefined, undefined, forWitness)
                  );
                }
                getId() {
                  // transaction hash's are displayed in reverse order
                  return (0, bufferutils_1.reverseBuffer)(
                    this.getHash(false)
                  ).toString('hex');
                }
                toBuffer(buffer, initialOffset) {
                  return this.__toBuffer(buffer, initialOffset, true);
                }
                toHex() {
                  return this.toBuffer(undefined, undefined).toString('hex');
                }
                setInputScript(index, scriptSig) {
                  typeforce(types.tuple(types.Number, types.Buffer), arguments);
                  this.ins[index].script = scriptSig;
                }
                setWitness(index, witness) {
                  typeforce(
                    types.tuple(types.Number, [types.Buffer]),
                    arguments
                  );
                  this.ins[index].witness = witness;
                }
                __toBuffer(buffer, initialOffset, _ALLOW_WITNESS = false) {
                  if (!buffer)
                    buffer = Buffer.allocUnsafe(
                      this.byteLength(_ALLOW_WITNESS)
                    );
                  const bufferWriter = new bufferutils_1.BufferWriter(
                    buffer,
                    initialOffset || 0
                  );
                  bufferWriter.writeInt32(this.version);
                  const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
                  if (hasWitnesses) {
                    bufferWriter.writeUInt8(
                      Transaction.ADVANCED_TRANSACTION_MARKER
                    );
                    bufferWriter.writeUInt8(
                      Transaction.ADVANCED_TRANSACTION_FLAG
                    );
                  }
                  bufferWriter.writeVarInt(this.ins.length);
                  this.ins.forEach((txIn) => {
                    bufferWriter.writeSlice(txIn.hash);
                    bufferWriter.writeUInt32(txIn.index);
                    bufferWriter.writeVarSlice(txIn.script);
                    bufferWriter.writeUInt32(txIn.sequence);
                  });
                  bufferWriter.writeVarInt(this.outs.length);
                  this.outs.forEach((txOut) => {
                    if (isOutput(txOut)) {
                      bufferWriter.writeUInt64(txOut.value);
                    } else {
                      bufferWriter.writeSlice(txOut.valueBuffer);
                    }
                    bufferWriter.writeVarSlice(txOut.script);
                  });
                  if (hasWitnesses) {
                    this.ins.forEach((input) => {
                      bufferWriter.writeVector(input.witness);
                    });
                  }
                  bufferWriter.writeUInt32(this.locktime);
                  // avoid slicing unless necessary
                  if (initialOffset !== undefined)
                    return buffer.slice(initialOffset, bufferWriter.offset);
                  return buffer;
                }
              }
              exports.Transaction = Transaction;
              Transaction.DEFAULT_SEQUENCE = 0xffffffff;
              Transaction.SIGHASH_DEFAULT = 0x00;
              Transaction.SIGHASH_ALL = 0x01;
              Transaction.SIGHASH_NONE = 0x02;
              Transaction.SIGHASH_SINGLE = 0x03;
              Transaction.SIGHASH_ANYONECANPAY = 0x80;
              Transaction.SIGHASH_OUTPUT_MASK = 0x03;
              Transaction.SIGHASH_INPUT_MASK = 0x80;
              Transaction.ADVANCED_TRANSACTION_MARKER = 0x00;
              Transaction.ADVANCED_TRANSACTION_FLAG = 0x01;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        {
          './bufferutils': 63,
          './crypto': 64,
          './script': 80,
          './types': 84,
          buffer: 183,
        },
      ],
      84: [
        function (require, module, exports) {
          'use strict';
          Object.defineProperty(exports, '__esModule', { value: true });
          exports.oneOf =
            exports.Null =
            exports.BufferN =
            exports.Function =
            exports.UInt32 =
            exports.UInt8 =
            exports.tuple =
            exports.maybe =
            exports.Hex =
            exports.Buffer =
            exports.String =
            exports.Boolean =
            exports.Array =
            exports.Number =
            exports.Hash256bit =
            exports.Hash160bit =
            exports.Buffer256bit =
            exports.Network =
            exports.ECPoint =
            exports.Satoshi =
            exports.Signer =
            exports.BIP32Path =
            exports.UInt31 =
            exports.isPoint =
            exports.typeforce =
              void 0;
          const buffer_1 = require('buffer');
          exports.typeforce = require('typeforce');
          const ZERO32 = buffer_1.Buffer.alloc(32, 0);
          const EC_P = buffer_1.Buffer.from(
            'fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f',
            'hex'
          );
          function isPoint(p) {
            if (!buffer_1.Buffer.isBuffer(p)) return false;
            if (p.length < 33) return false;
            const t = p[0];
            const x = p.slice(1, 33);
            if (x.compare(ZERO32) === 0) return false;
            if (x.compare(EC_P) >= 0) return false;
            if ((t === 0x02 || t === 0x03) && p.length === 33) {
              return true;
            }
            const y = p.slice(33);
            if (y.compare(ZERO32) === 0) return false;
            if (y.compare(EC_P) >= 0) return false;
            if (t === 0x04 && p.length === 65) return true;
            return false;
          }
          exports.isPoint = isPoint;
          const UINT31_MAX = Math.pow(2, 31) - 1;
          function UInt31(value) {
            return exports.typeforce.UInt32(value) && value <= UINT31_MAX;
          }
          exports.UInt31 = UInt31;
          function BIP32Path(value) {
            return (
              exports.typeforce.String(value) &&
              !!value.match(/^(m\/)?(\d+'?\/)*\d+'?$/)
            );
          }
          exports.BIP32Path = BIP32Path;
          BIP32Path.toJSON = () => {
            return 'BIP32 derivation path';
          };
          function Signer(obj) {
            return (
              (exports.typeforce.Buffer(obj.publicKey) ||
                typeof obj.getPublicKey === 'function') &&
              typeof obj.sign === 'function'
            );
          }
          exports.Signer = Signer;
          const SATOSHI_MAX = 21 * 1e14;
          function Satoshi(value) {
            return exports.typeforce.UInt53(value) && value <= SATOSHI_MAX;
          }
          exports.Satoshi = Satoshi;
          // external dependent types
          exports.ECPoint = exports.typeforce.quacksLike('Point');
          // exposed, external API
          exports.Network = exports.typeforce.compile({
            messagePrefix: exports.typeforce.oneOf(
              exports.typeforce.Buffer,
              exports.typeforce.String
            ),
            bip32: {
              public: exports.typeforce.UInt32,
              private: exports.typeforce.UInt32,
            },
            pubKeyHash: exports.typeforce.UInt8,
            scriptHash: exports.typeforce.UInt8,
            wif: exports.typeforce.UInt8,
          });
          exports.Buffer256bit = exports.typeforce.BufferN(32);
          exports.Hash160bit = exports.typeforce.BufferN(20);
          exports.Hash256bit = exports.typeforce.BufferN(32);
          exports.Number = exports.typeforce.Number; // tslint:disable-line variable-name
          exports.Array = exports.typeforce.Array;
          exports.Boolean = exports.typeforce.Boolean; // tslint:disable-line variable-name
          exports.String = exports.typeforce.String; // tslint:disable-line variable-name
          exports.Buffer = exports.typeforce.Buffer;
          exports.Hex = exports.typeforce.Hex;
          exports.maybe = exports.typeforce.maybe;
          exports.tuple = exports.typeforce.tuple;
          exports.UInt8 = exports.typeforce.UInt8;
          exports.UInt32 = exports.typeforce.UInt32;
          exports.Function = exports.typeforce.Function;
          exports.BufferN = exports.typeforce.BufferN;
          exports.Null = exports.typeforce.Null;
          exports.oneOf = exports.typeforce.oneOf;
        },
        { buffer: 183, typeforce: 172 },
      ],
      85: [
        function (require, module, exports) {
          (function (module, exports) {
            'use strict';

            // Utils
            function assert(val, msg) {
              if (!val) throw new Error(msg || 'Assertion failed');
            }

            // Could use `inherits` module, but don't want to move from single file
            // architecture yet.
            function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function () {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }

            // BN

            function BN(number, base, endian) {
              if (BN.isBN(number)) {
                return number;
              }

              this.negative = 0;
              this.words = null;
              this.length = 0;

              // Reduction context
              this.red = null;

              if (number !== null) {
                if (base === 'le' || base === 'be') {
                  endian = base;
                  base = 10;
                }

                this._init(number || 0, base || 10, endian || 'be');
              }
            }
            if (typeof module === 'object') {
              module.exports = BN;
            } else {
              exports.BN = BN;
            }

            BN.BN = BN;
            BN.wordSize = 26;

            var Buffer;
            try {
              if (
                typeof window !== 'undefined' &&
                typeof window.Buffer !== 'undefined'
              ) {
                Buffer = window.Buffer;
              } else {
                Buffer = require('buffer').Buffer;
              }
            } catch (e) {}

            BN.isBN = function isBN(num) {
              if (num instanceof BN) {
                return true;
              }

              return (
                num !== null &&
                typeof num === 'object' &&
                num.constructor.wordSize === BN.wordSize &&
                Array.isArray(num.words)
              );
            };

            BN.max = function max(left, right) {
              if (left.cmp(right) > 0) return left;
              return right;
            };

            BN.min = function min(left, right) {
              if (left.cmp(right) < 0) return left;
              return right;
            };

            BN.prototype._init = function init(number, base, endian) {
              if (typeof number === 'number') {
                return this._initNumber(number, base, endian);
              }

              if (typeof number === 'object') {
                return this._initArray(number, base, endian);
              }

              if (base === 'hex') {
                base = 16;
              }
              assert(base === (base | 0) && base >= 2 && base <= 36);

              number = number.toString().replace(/\s+/g, '');
              var start = 0;
              if (number[0] === '-') {
                start++;
                this.negative = 1;
              }

              if (start < number.length) {
                if (base === 16) {
                  this._parseHex(number, start, endian);
                } else {
                  this._parseBase(number, base, start);
                  if (endian === 'le') {
                    this._initArray(this.toArray(), base, endian);
                  }
                }
              }
            };

            BN.prototype._initNumber = function _initNumber(
              number,
              base,
              endian
            ) {
              if (number < 0) {
                this.negative = 1;
                number = -number;
              }
              if (number < 0x4000000) {
                this.words = [number & 0x3ffffff];
                this.length = 1;
              } else if (number < 0x10000000000000) {
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff,
                ];
                this.length = 2;
              } else {
                assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff,
                  1,
                ];
                this.length = 3;
              }

              if (endian !== 'le') return;

              // Reverse the bytes
              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initArray = function _initArray(
              number,
              base,
              endian
            ) {
              // Perhaps a Uint8Array
              assert(typeof number.length === 'number');
              if (number.length <= 0) {
                this.words = [0];
                this.length = 1;
                return this;
              }

              this.length = Math.ceil(number.length / 3);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              var off = 0;
              if (endian === 'be') {
                for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                  w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              } else if (endian === 'le') {
                for (i = 0, j = 0; i < number.length; i += 3) {
                  w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              }
              return this.strip();
            };

            function parseHex4Bits(string, index) {
              var c = string.charCodeAt(index);
              // 'A' - 'F'
              if (c >= 65 && c <= 70) {
                return c - 55;
                // 'a' - 'f'
              } else if (c >= 97 && c <= 102) {
                return c - 87;
                // '0' - '9'
              } else {
                return (c - 48) & 0xf;
              }
            }

            function parseHexByte(string, lowerBound, index) {
              var r = parseHex4Bits(string, index);
              if (index - 1 >= lowerBound) {
                r |= parseHex4Bits(string, index - 1) << 4;
              }
              return r;
            }

            BN.prototype._parseHex = function _parseHex(number, start, endian) {
              // Create possibly bigger array to ensure that it fits the number
              this.length = Math.ceil((number.length - start) / 6);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              // 24-bits chunks
              var off = 0;
              var j = 0;

              var w;
              if (endian === 'be') {
                for (i = number.length - 1; i >= start; i -= 2) {
                  w = parseHexByte(number, start, i) << off;
                  this.words[j] |= w & 0x3ffffff;
                  if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                  } else {
                    off += 8;
                  }
                }
              } else {
                var parseLength = number.length - start;
                for (
                  i = parseLength % 2 === 0 ? start + 1 : start;
                  i < number.length;
                  i += 2
                ) {
                  w = parseHexByte(number, start, i) << off;
                  this.words[j] |= w & 0x3ffffff;
                  if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                  } else {
                    off += 8;
                  }
                }
              }

              this.strip();
            };

            function parseBase(str, start, end, mul) {
              var r = 0;
              var len = Math.min(str.length, end);
              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r *= mul;

                // 'a'
                if (c >= 49) {
                  r += c - 49 + 0xa;

                  // 'A'
                } else if (c >= 17) {
                  r += c - 17 + 0xa;

                  // '0' - '9'
                } else {
                  r += c;
                }
              }
              return r;
            }

            BN.prototype._parseBase = function _parseBase(number, base, start) {
              // Initialize as zero
              this.words = [0];
              this.length = 1;

              // Find length of limb in base
              for (
                var limbLen = 0, limbPow = 1;
                limbPow <= 0x3ffffff;
                limbPow *= base
              ) {
                limbLen++;
              }
              limbLen--;
              limbPow = (limbPow / base) | 0;

              var total = number.length - start;
              var mod = total % limbLen;
              var end = Math.min(total, total - mod) + start;

              var word = 0;
              for (var i = start; i < end; i += limbLen) {
                word = parseBase(number, i, i + limbLen, base);

                this.imuln(limbPow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }

              if (mod !== 0) {
                var pow = 1;
                word = parseBase(number, i, number.length, base);

                for (i = 0; i < mod; i++) {
                  pow *= base;
                }

                this.imuln(pow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }

              this.strip();
            };

            BN.prototype.copy = function copy(dest) {
              dest.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                dest.words[i] = this.words[i];
              }
              dest.length = this.length;
              dest.negative = this.negative;
              dest.red = this.red;
            };

            BN.prototype.clone = function clone() {
              var r = new BN(null);
              this.copy(r);
              return r;
            };

            BN.prototype._expand = function _expand(size) {
              while (this.length < size) {
                this.words[this.length++] = 0;
              }
              return this;
            };

            // Remove leading `0` from `this`
            BN.prototype.strip = function strip() {
              while (this.length > 1 && this.words[this.length - 1] === 0) {
                this.length--;
              }
              return this._normSign();
            };

            BN.prototype._normSign = function _normSign() {
              // -0 = 0
              if (this.length === 1 && this.words[0] === 0) {
                this.negative = 0;
              }
              return this;
            };

            BN.prototype.inspect = function inspect() {
              return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
            };

            /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

            var zeros = [
              '',
              '0',
              '00',
              '000',
              '0000',
              '00000',
              '000000',
              '0000000',
              '00000000',
              '000000000',
              '0000000000',
              '00000000000',
              '000000000000',
              '0000000000000',
              '00000000000000',
              '000000000000000',
              '0000000000000000',
              '00000000000000000',
              '000000000000000000',
              '0000000000000000000',
              '00000000000000000000',
              '000000000000000000000',
              '0000000000000000000000',
              '00000000000000000000000',
              '000000000000000000000000',
              '0000000000000000000000000',
            ];

            var groupSizes = [
              0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6,
              6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
            ];

            var groupBases = [
              0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607,
              16777216, 43046721, 10000000, 19487171, 35831808, 62748517,
              7529536, 11390625, 16777216, 24137569, 34012224, 47045881,
              64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376,
              14348907, 17210368, 20511149, 24300000, 28629151, 33554432,
              39135393, 45435424, 52521875, 60466176,
            ];

            BN.prototype.toString = function toString(base, padding) {
              base = base || 10;
              padding = padding | 0 || 1;

              var out;
              if (base === 16 || base === 'hex') {
                out = '';
                var off = 0;
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                  var w = this.words[i];
                  var word = (((w << off) | carry) & 0xffffff).toString(16);
                  carry = (w >>> (24 - off)) & 0xffffff;
                  if (carry !== 0 || i !== this.length - 1) {
                    out = zeros[6 - word.length] + word + out;
                  } else {
                    out = word + out;
                  }
                  off += 2;
                  if (off >= 26) {
                    off -= 26;
                    i--;
                  }
                }
                if (carry !== 0) {
                  out = carry.toString(16) + out;
                }
                while (out.length % padding !== 0) {
                  out = '0' + out;
                }
                if (this.negative !== 0) {
                  out = '-' + out;
                }
                return out;
              }

              if (base === (base | 0) && base >= 2 && base <= 36) {
                // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                var groupSize = groupSizes[base];
                // var groupBase = Math.pow(base, groupSize);
                var groupBase = groupBases[base];
                out = '';
                var c = this.clone();
                c.negative = 0;
                while (!c.isZero()) {
                  var r = c.modn(groupBase).toString(base);
                  c = c.idivn(groupBase);

                  if (!c.isZero()) {
                    out = zeros[groupSize - r.length] + r + out;
                  } else {
                    out = r + out;
                  }
                }
                if (this.isZero()) {
                  out = '0' + out;
                }
                while (out.length % padding !== 0) {
                  out = '0' + out;
                }
                if (this.negative !== 0) {
                  out = '-' + out;
                }
                return out;
              }

              assert(false, 'Base should be between 2 and 36');
            };

            BN.prototype.toNumber = function toNumber() {
              var ret = this.words[0];
              if (this.length === 2) {
                ret += this.words[1] * 0x4000000;
              } else if (this.length === 3 && this.words[2] === 0x01) {
                // NOTE: at this stage it is known that the top bit is set
                ret += 0x10000000000000 + this.words[1] * 0x4000000;
              } else if (this.length > 2) {
                assert(false, 'Number can only safely store up to 53 bits');
              }
              return this.negative !== 0 ? -ret : ret;
            };

            BN.prototype.toJSON = function toJSON() {
              return this.toString(16);
            };

            BN.prototype.toBuffer = function toBuffer(endian, length) {
              assert(typeof Buffer !== 'undefined');
              return this.toArrayLike(Buffer, endian, length);
            };

            BN.prototype.toArray = function toArray(endian, length) {
              return this.toArrayLike(Array, endian, length);
            };

            BN.prototype.toArrayLike = function toArrayLike(
              ArrayType,
              endian,
              length
            ) {
              var byteLength = this.byteLength();
              var reqLength = length || Math.max(1, byteLength);
              assert(
                byteLength <= reqLength,
                'byte array longer than desired length'
              );
              assert(reqLength > 0, 'Requested array length <= 0');

              this.strip();
              var littleEndian = endian === 'le';
              var res = new ArrayType(reqLength);

              var b, i;
              var q = this.clone();
              if (!littleEndian) {
                // Assume big-endian
                for (i = 0; i < reqLength - byteLength; i++) {
                  res[i] = 0;
                }

                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[reqLength - i - 1] = b;
                }
              } else {
                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[i] = b;
                }

                for (; i < reqLength; i++) {
                  res[i] = 0;
                }
              }

              return res;
            };

            if (Math.clz32) {
              BN.prototype._countBits = function _countBits(w) {
                return 32 - Math.clz32(w);
              };
            } else {
              BN.prototype._countBits = function _countBits(w) {
                var t = w;
                var r = 0;
                if (t >= 0x1000) {
                  r += 13;
                  t >>>= 13;
                }
                if (t >= 0x40) {
                  r += 7;
                  t >>>= 7;
                }
                if (t >= 0x8) {
                  r += 4;
                  t >>>= 4;
                }
                if (t >= 0x02) {
                  r += 2;
                  t >>>= 2;
                }
                return r + t;
              };
            }

            BN.prototype._zeroBits = function _zeroBits(w) {
              // Short-cut
              if (w === 0) return 26;

              var t = w;
              var r = 0;
              if ((t & 0x1fff) === 0) {
                r += 13;
                t >>>= 13;
              }
              if ((t & 0x7f) === 0) {
                r += 7;
                t >>>= 7;
              }
              if ((t & 0xf) === 0) {
                r += 4;
                t >>>= 4;
              }
              if ((t & 0x3) === 0) {
                r += 2;
                t >>>= 2;
              }
              if ((t & 0x1) === 0) {
                r++;
              }
              return r;
            };

            // Return number of used bits in a BN
            BN.prototype.bitLength = function bitLength() {
              var w = this.words[this.length - 1];
              var hi = this._countBits(w);
              return (this.length - 1) * 26 + hi;
            };

            function toBitArray(num) {
              var w = new Array(num.bitLength());

              for (var bit = 0; bit < w.length; bit++) {
                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
              }

              return w;
            }

            // Number of trailing zero bits
            BN.prototype.zeroBits = function zeroBits() {
              if (this.isZero()) return 0;

              var r = 0;
              for (var i = 0; i < this.length; i++) {
                var b = this._zeroBits(this.words[i]);
                r += b;
                if (b !== 26) break;
              }
              return r;
            };

            BN.prototype.byteLength = function byteLength() {
              return Math.ceil(this.bitLength() / 8);
            };

            BN.prototype.toTwos = function toTwos(width) {
              if (this.negative !== 0) {
                return this.abs().inotn(width).iaddn(1);
              }
              return this.clone();
            };

            BN.prototype.fromTwos = function fromTwos(width) {
              if (this.testn(width - 1)) {
                return this.notn(width).iaddn(1).ineg();
              }
              return this.clone();
            };

            BN.prototype.isNeg = function isNeg() {
              return this.negative !== 0;
            };

            // Return negative clone of `this`
            BN.prototype.neg = function neg() {
              return this.clone().ineg();
            };

            BN.prototype.ineg = function ineg() {
              if (!this.isZero()) {
                this.negative ^= 1;
              }

              return this;
            };

            // Or `num` with `this` in-place
            BN.prototype.iuor = function iuor(num) {
              while (this.length < num.length) {
                this.words[this.length++] = 0;
              }

              for (var i = 0; i < num.length; i++) {
                this.words[i] = this.words[i] | num.words[i];
              }

              return this.strip();
            };

            BN.prototype.ior = function ior(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuor(num);
            };

            // Or `num` with `this`
            BN.prototype.or = function or(num) {
              if (this.length > num.length) return this.clone().ior(num);
              return num.clone().ior(this);
            };

            BN.prototype.uor = function uor(num) {
              if (this.length > num.length) return this.clone().iuor(num);
              return num.clone().iuor(this);
            };

            // And `num` with `this` in-place
            BN.prototype.iuand = function iuand(num) {
              // b = min-length(num, this)
              var b;
              if (this.length > num.length) {
                b = num;
              } else {
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = this.words[i] & num.words[i];
              }

              this.length = b.length;

              return this.strip();
            };

            BN.prototype.iand = function iand(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuand(num);
            };

            // And `num` with `this`
            BN.prototype.and = function and(num) {
              if (this.length > num.length) return this.clone().iand(num);
              return num.clone().iand(this);
            };

            BN.prototype.uand = function uand(num) {
              if (this.length > num.length) return this.clone().iuand(num);
              return num.clone().iuand(this);
            };

            // Xor `num` with `this` in-place
            BN.prototype.iuxor = function iuxor(num) {
              // a.length > b.length
              var a;
              var b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = a.words[i] ^ b.words[i];
              }

              if (this !== a) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = a.length;

              return this.strip();
            };

            BN.prototype.ixor = function ixor(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuxor(num);
            };

            // Xor `num` with `this`
            BN.prototype.xor = function xor(num) {
              if (this.length > num.length) return this.clone().ixor(num);
              return num.clone().ixor(this);
            };

            BN.prototype.uxor = function uxor(num) {
              if (this.length > num.length) return this.clone().iuxor(num);
              return num.clone().iuxor(this);
            };

            // Not ``this`` with ``width`` bitwidth
            BN.prototype.inotn = function inotn(width) {
              assert(typeof width === 'number' && width >= 0);

              var bytesNeeded = Math.ceil(width / 26) | 0;
              var bitsLeft = width % 26;

              // Extend the buffer with leading zeroes
              this._expand(bytesNeeded);

              if (bitsLeft > 0) {
                bytesNeeded--;
              }

              // Handle complete words
              for (var i = 0; i < bytesNeeded; i++) {
                this.words[i] = ~this.words[i] & 0x3ffffff;
              }

              // Handle the residue
              if (bitsLeft > 0) {
                this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
              }

              // And remove leading zeroes
              return this.strip();
            };

            BN.prototype.notn = function notn(width) {
              return this.clone().inotn(width);
            };

            // Set `bit` of `this`
            BN.prototype.setn = function setn(bit, val) {
              assert(typeof bit === 'number' && bit >= 0);

              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              this._expand(off + 1);

              if (val) {
                this.words[off] = this.words[off] | (1 << wbit);
              } else {
                this.words[off] = this.words[off] & ~(1 << wbit);
              }

              return this.strip();
            };

            // Add `num` to `this` in-place
            BN.prototype.iadd = function iadd(num) {
              var r;

              // negative + positive
              if (this.negative !== 0 && num.negative === 0) {
                this.negative = 0;
                r = this.isub(num);
                this.negative ^= 1;
                return this._normSign();

                // positive + negative
              } else if (this.negative === 0 && num.negative !== 0) {
                num.negative = 0;
                r = this.isub(num);
                num.negative = 1;
                return r._normSign();
              }

              // a.length > b.length
              var a, b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }

              this.length = a.length;
              if (carry !== 0) {
                this.words[this.length] = carry;
                this.length++;
                // Copy the rest of the words
              } else if (a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              return this;
            };

            // Add `num` to `this`
            BN.prototype.add = function add(num) {
              var res;
              if (num.negative !== 0 && this.negative === 0) {
                num.negative = 0;
                res = this.sub(num);
                num.negative ^= 1;
                return res;
              } else if (num.negative === 0 && this.negative !== 0) {
                this.negative = 0;
                res = num.sub(this);
                this.negative = 1;
                return res;
              }

              if (this.length > num.length) return this.clone().iadd(num);

              return num.clone().iadd(this);
            };

            // Subtract `num` from `this` in-place
            BN.prototype.isub = function isub(num) {
              // this - (-num) = this + num
              if (num.negative !== 0) {
                num.negative = 0;
                var r = this.iadd(num);
                num.negative = 1;
                return r._normSign();

                // -this - num = -(this + num)
              } else if (this.negative !== 0) {
                this.negative = 0;
                this.iadd(num);
                this.negative = 1;
                return this._normSign();
              }

              // At this point both numbers are positive
              var cmp = this.cmp(num);

              // Optimization - zeroify
              if (cmp === 0) {
                this.negative = 0;
                this.length = 1;
                this.words[0] = 0;
                return this;
              }

              // a > b
              var a, b;
              if (cmp > 0) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }

              // Copy rest of the words
              if (carry === 0 && i < a.length && a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = Math.max(this.length, i);

              if (a !== this) {
                this.negative = 1;
              }

              return this.strip();
            };

            // Subtract `num` from `this`
            BN.prototype.sub = function sub(num) {
              return this.clone().isub(num);
            };

            function smallMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              var len = (self.length + num.length) | 0;
              out.length = len;
              len = (len - 1) | 0;

              // Peel one iteration (compiler can't do it, because of code complexity)
              var a = self.words[0] | 0;
              var b = num.words[0] | 0;
              var r = a * b;

              var lo = r & 0x3ffffff;
              var carry = (r / 0x4000000) | 0;
              out.words[0] = lo;

              for (var k = 1; k < len; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = carry >>> 26;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = (k - j) | 0;
                  a = self.words[i] | 0;
                  b = num.words[j] | 0;
                  r = a * b + rword;
                  ncarry += (r / 0x4000000) | 0;
                  rword = r & 0x3ffffff;
                }
                out.words[k] = rword | 0;
                carry = ncarry | 0;
              }
              if (carry !== 0) {
                out.words[k] = carry | 0;
              } else {
                out.length--;
              }

              return out.strip();
            }

            // TODO(indutny): it may be reasonable to omit it for users who don't need
            // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
            // multiplication (like elliptic secp256k1).
            var comb10MulTo = function comb10MulTo(self, num, out) {
              var a = self.words;
              var b = num.words;
              var o = out.words;
              var c = 0;
              var lo;
              var mid;
              var hi;
              var a0 = a[0] | 0;
              var al0 = a0 & 0x1fff;
              var ah0 = a0 >>> 13;
              var a1 = a[1] | 0;
              var al1 = a1 & 0x1fff;
              var ah1 = a1 >>> 13;
              var a2 = a[2] | 0;
              var al2 = a2 & 0x1fff;
              var ah2 = a2 >>> 13;
              var a3 = a[3] | 0;
              var al3 = a3 & 0x1fff;
              var ah3 = a3 >>> 13;
              var a4 = a[4] | 0;
              var al4 = a4 & 0x1fff;
              var ah4 = a4 >>> 13;
              var a5 = a[5] | 0;
              var al5 = a5 & 0x1fff;
              var ah5 = a5 >>> 13;
              var a6 = a[6] | 0;
              var al6 = a6 & 0x1fff;
              var ah6 = a6 >>> 13;
              var a7 = a[7] | 0;
              var al7 = a7 & 0x1fff;
              var ah7 = a7 >>> 13;
              var a8 = a[8] | 0;
              var al8 = a8 & 0x1fff;
              var ah8 = a8 >>> 13;
              var a9 = a[9] | 0;
              var al9 = a9 & 0x1fff;
              var ah9 = a9 >>> 13;
              var b0 = b[0] | 0;
              var bl0 = b0 & 0x1fff;
              var bh0 = b0 >>> 13;
              var b1 = b[1] | 0;
              var bl1 = b1 & 0x1fff;
              var bh1 = b1 >>> 13;
              var b2 = b[2] | 0;
              var bl2 = b2 & 0x1fff;
              var bh2 = b2 >>> 13;
              var b3 = b[3] | 0;
              var bl3 = b3 & 0x1fff;
              var bh3 = b3 >>> 13;
              var b4 = b[4] | 0;
              var bl4 = b4 & 0x1fff;
              var bh4 = b4 >>> 13;
              var b5 = b[5] | 0;
              var bl5 = b5 & 0x1fff;
              var bh5 = b5 >>> 13;
              var b6 = b[6] | 0;
              var bl6 = b6 & 0x1fff;
              var bh6 = b6 >>> 13;
              var b7 = b[7] | 0;
              var bl7 = b7 & 0x1fff;
              var bh7 = b7 >>> 13;
              var b8 = b[8] | 0;
              var bl8 = b8 & 0x1fff;
              var bh8 = b8 >>> 13;
              var b9 = b[9] | 0;
              var bl9 = b9 & 0x1fff;
              var bh9 = b9 >>> 13;

              out.negative = self.negative ^ num.negative;
              out.length = 19;
              /* k = 0 */
              lo = Math.imul(al0, bl0);
              mid = Math.imul(al0, bh0);
              mid = (mid + Math.imul(ah0, bl0)) | 0;
              hi = Math.imul(ah0, bh0);
              var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
              w0 &= 0x3ffffff;
              /* k = 1 */
              lo = Math.imul(al1, bl0);
              mid = Math.imul(al1, bh0);
              mid = (mid + Math.imul(ah1, bl0)) | 0;
              hi = Math.imul(ah1, bh0);
              lo = (lo + Math.imul(al0, bl1)) | 0;
              mid = (mid + Math.imul(al0, bh1)) | 0;
              mid = (mid + Math.imul(ah0, bl1)) | 0;
              hi = (hi + Math.imul(ah0, bh1)) | 0;
              var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
              w1 &= 0x3ffffff;
              /* k = 2 */
              lo = Math.imul(al2, bl0);
              mid = Math.imul(al2, bh0);
              mid = (mid + Math.imul(ah2, bl0)) | 0;
              hi = Math.imul(ah2, bh0);
              lo = (lo + Math.imul(al1, bl1)) | 0;
              mid = (mid + Math.imul(al1, bh1)) | 0;
              mid = (mid + Math.imul(ah1, bl1)) | 0;
              hi = (hi + Math.imul(ah1, bh1)) | 0;
              lo = (lo + Math.imul(al0, bl2)) | 0;
              mid = (mid + Math.imul(al0, bh2)) | 0;
              mid = (mid + Math.imul(ah0, bl2)) | 0;
              hi = (hi + Math.imul(ah0, bh2)) | 0;
              var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
              w2 &= 0x3ffffff;
              /* k = 3 */
              lo = Math.imul(al3, bl0);
              mid = Math.imul(al3, bh0);
              mid = (mid + Math.imul(ah3, bl0)) | 0;
              hi = Math.imul(ah3, bh0);
              lo = (lo + Math.imul(al2, bl1)) | 0;
              mid = (mid + Math.imul(al2, bh1)) | 0;
              mid = (mid + Math.imul(ah2, bl1)) | 0;
              hi = (hi + Math.imul(ah2, bh1)) | 0;
              lo = (lo + Math.imul(al1, bl2)) | 0;
              mid = (mid + Math.imul(al1, bh2)) | 0;
              mid = (mid + Math.imul(ah1, bl2)) | 0;
              hi = (hi + Math.imul(ah1, bh2)) | 0;
              lo = (lo + Math.imul(al0, bl3)) | 0;
              mid = (mid + Math.imul(al0, bh3)) | 0;
              mid = (mid + Math.imul(ah0, bl3)) | 0;
              hi = (hi + Math.imul(ah0, bh3)) | 0;
              var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
              w3 &= 0x3ffffff;
              /* k = 4 */
              lo = Math.imul(al4, bl0);
              mid = Math.imul(al4, bh0);
              mid = (mid + Math.imul(ah4, bl0)) | 0;
              hi = Math.imul(ah4, bh0);
              lo = (lo + Math.imul(al3, bl1)) | 0;
              mid = (mid + Math.imul(al3, bh1)) | 0;
              mid = (mid + Math.imul(ah3, bl1)) | 0;
              hi = (hi + Math.imul(ah3, bh1)) | 0;
              lo = (lo + Math.imul(al2, bl2)) | 0;
              mid = (mid + Math.imul(al2, bh2)) | 0;
              mid = (mid + Math.imul(ah2, bl2)) | 0;
              hi = (hi + Math.imul(ah2, bh2)) | 0;
              lo = (lo + Math.imul(al1, bl3)) | 0;
              mid = (mid + Math.imul(al1, bh3)) | 0;
              mid = (mid + Math.imul(ah1, bl3)) | 0;
              hi = (hi + Math.imul(ah1, bh3)) | 0;
              lo = (lo + Math.imul(al0, bl4)) | 0;
              mid = (mid + Math.imul(al0, bh4)) | 0;
              mid = (mid + Math.imul(ah0, bl4)) | 0;
              hi = (hi + Math.imul(ah0, bh4)) | 0;
              var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
              w4 &= 0x3ffffff;
              /* k = 5 */
              lo = Math.imul(al5, bl0);
              mid = Math.imul(al5, bh0);
              mid = (mid + Math.imul(ah5, bl0)) | 0;
              hi = Math.imul(ah5, bh0);
              lo = (lo + Math.imul(al4, bl1)) | 0;
              mid = (mid + Math.imul(al4, bh1)) | 0;
              mid = (mid + Math.imul(ah4, bl1)) | 0;
              hi = (hi + Math.imul(ah4, bh1)) | 0;
              lo = (lo + Math.imul(al3, bl2)) | 0;
              mid = (mid + Math.imul(al3, bh2)) | 0;
              mid = (mid + Math.imul(ah3, bl2)) | 0;
              hi = (hi + Math.imul(ah3, bh2)) | 0;
              lo = (lo + Math.imul(al2, bl3)) | 0;
              mid = (mid + Math.imul(al2, bh3)) | 0;
              mid = (mid + Math.imul(ah2, bl3)) | 0;
              hi = (hi + Math.imul(ah2, bh3)) | 0;
              lo = (lo + Math.imul(al1, bl4)) | 0;
              mid = (mid + Math.imul(al1, bh4)) | 0;
              mid = (mid + Math.imul(ah1, bl4)) | 0;
              hi = (hi + Math.imul(ah1, bh4)) | 0;
              lo = (lo + Math.imul(al0, bl5)) | 0;
              mid = (mid + Math.imul(al0, bh5)) | 0;
              mid = (mid + Math.imul(ah0, bl5)) | 0;
              hi = (hi + Math.imul(ah0, bh5)) | 0;
              var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
              w5 &= 0x3ffffff;
              /* k = 6 */
              lo = Math.imul(al6, bl0);
              mid = Math.imul(al6, bh0);
              mid = (mid + Math.imul(ah6, bl0)) | 0;
              hi = Math.imul(ah6, bh0);
              lo = (lo + Math.imul(al5, bl1)) | 0;
              mid = (mid + Math.imul(al5, bh1)) | 0;
              mid = (mid + Math.imul(ah5, bl1)) | 0;
              hi = (hi + Math.imul(ah5, bh1)) | 0;
              lo = (lo + Math.imul(al4, bl2)) | 0;
              mid = (mid + Math.imul(al4, bh2)) | 0;
              mid = (mid + Math.imul(ah4, bl2)) | 0;
              hi = (hi + Math.imul(ah4, bh2)) | 0;
              lo = (lo + Math.imul(al3, bl3)) | 0;
              mid = (mid + Math.imul(al3, bh3)) | 0;
              mid = (mid + Math.imul(ah3, bl3)) | 0;
              hi = (hi + Math.imul(ah3, bh3)) | 0;
              lo = (lo + Math.imul(al2, bl4)) | 0;
              mid = (mid + Math.imul(al2, bh4)) | 0;
              mid = (mid + Math.imul(ah2, bl4)) | 0;
              hi = (hi + Math.imul(ah2, bh4)) | 0;
              lo = (lo + Math.imul(al1, bl5)) | 0;
              mid = (mid + Math.imul(al1, bh5)) | 0;
              mid = (mid + Math.imul(ah1, bl5)) | 0;
              hi = (hi + Math.imul(ah1, bh5)) | 0;
              lo = (lo + Math.imul(al0, bl6)) | 0;
              mid = (mid + Math.imul(al0, bh6)) | 0;
              mid = (mid + Math.imul(ah0, bl6)) | 0;
              hi = (hi + Math.imul(ah0, bh6)) | 0;
              var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
              w6 &= 0x3ffffff;
              /* k = 7 */
              lo = Math.imul(al7, bl0);
              mid = Math.imul(al7, bh0);
              mid = (mid + Math.imul(ah7, bl0)) | 0;
              hi = Math.imul(ah7, bh0);
              lo = (lo + Math.imul(al6, bl1)) | 0;
              mid = (mid + Math.imul(al6, bh1)) | 0;
              mid = (mid + Math.imul(ah6, bl1)) | 0;
              hi = (hi + Math.imul(ah6, bh1)) | 0;
              lo = (lo + Math.imul(al5, bl2)) | 0;
              mid = (mid + Math.imul(al5, bh2)) | 0;
              mid = (mid + Math.imul(ah5, bl2)) | 0;
              hi = (hi + Math.imul(ah5, bh2)) | 0;
              lo = (lo + Math.imul(al4, bl3)) | 0;
              mid = (mid + Math.imul(al4, bh3)) | 0;
              mid = (mid + Math.imul(ah4, bl3)) | 0;
              hi = (hi + Math.imul(ah4, bh3)) | 0;
              lo = (lo + Math.imul(al3, bl4)) | 0;
              mid = (mid + Math.imul(al3, bh4)) | 0;
              mid = (mid + Math.imul(ah3, bl4)) | 0;
              hi = (hi + Math.imul(ah3, bh4)) | 0;
              lo = (lo + Math.imul(al2, bl5)) | 0;
              mid = (mid + Math.imul(al2, bh5)) | 0;
              mid = (mid + Math.imul(ah2, bl5)) | 0;
              hi = (hi + Math.imul(ah2, bh5)) | 0;
              lo = (lo + Math.imul(al1, bl6)) | 0;
              mid = (mid + Math.imul(al1, bh6)) | 0;
              mid = (mid + Math.imul(ah1, bl6)) | 0;
              hi = (hi + Math.imul(ah1, bh6)) | 0;
              lo = (lo + Math.imul(al0, bl7)) | 0;
              mid = (mid + Math.imul(al0, bh7)) | 0;
              mid = (mid + Math.imul(ah0, bl7)) | 0;
              hi = (hi + Math.imul(ah0, bh7)) | 0;
              var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
              w7 &= 0x3ffffff;
              /* k = 8 */
              lo = Math.imul(al8, bl0);
              mid = Math.imul(al8, bh0);
              mid = (mid + Math.imul(ah8, bl0)) | 0;
              hi = Math.imul(ah8, bh0);
              lo = (lo + Math.imul(al7, bl1)) | 0;
              mid = (mid + Math.imul(al7, bh1)) | 0;
              mid = (mid + Math.imul(ah7, bl1)) | 0;
              hi = (hi + Math.imul(ah7, bh1)) | 0;
              lo = (lo + Math.imul(al6, bl2)) | 0;
              mid = (mid + Math.imul(al6, bh2)) | 0;
              mid = (mid + Math.imul(ah6, bl2)) | 0;
              hi = (hi + Math.imul(ah6, bh2)) | 0;
              lo = (lo + Math.imul(al5, bl3)) | 0;
              mid = (mid + Math.imul(al5, bh3)) | 0;
              mid = (mid + Math.imul(ah5, bl3)) | 0;
              hi = (hi + Math.imul(ah5, bh3)) | 0;
              lo = (lo + Math.imul(al4, bl4)) | 0;
              mid = (mid + Math.imul(al4, bh4)) | 0;
              mid = (mid + Math.imul(ah4, bl4)) | 0;
              hi = (hi + Math.imul(ah4, bh4)) | 0;
              lo = (lo + Math.imul(al3, bl5)) | 0;
              mid = (mid + Math.imul(al3, bh5)) | 0;
              mid = (mid + Math.imul(ah3, bl5)) | 0;
              hi = (hi + Math.imul(ah3, bh5)) | 0;
              lo = (lo + Math.imul(al2, bl6)) | 0;
              mid = (mid + Math.imul(al2, bh6)) | 0;
              mid = (mid + Math.imul(ah2, bl6)) | 0;
              hi = (hi + Math.imul(ah2, bh6)) | 0;
              lo = (lo + Math.imul(al1, bl7)) | 0;
              mid = (mid + Math.imul(al1, bh7)) | 0;
              mid = (mid + Math.imul(ah1, bl7)) | 0;
              hi = (hi + Math.imul(ah1, bh7)) | 0;
              lo = (lo + Math.imul(al0, bl8)) | 0;
              mid = (mid + Math.imul(al0, bh8)) | 0;
              mid = (mid + Math.imul(ah0, bl8)) | 0;
              hi = (hi + Math.imul(ah0, bh8)) | 0;
              var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
              w8 &= 0x3ffffff;
              /* k = 9 */
              lo = Math.imul(al9, bl0);
              mid = Math.imul(al9, bh0);
              mid = (mid + Math.imul(ah9, bl0)) | 0;
              hi = Math.imul(ah9, bh0);
              lo = (lo + Math.imul(al8, bl1)) | 0;
              mid = (mid + Math.imul(al8, bh1)) | 0;
              mid = (mid + Math.imul(ah8, bl1)) | 0;
              hi = (hi + Math.imul(ah8, bh1)) | 0;
              lo = (lo + Math.imul(al7, bl2)) | 0;
              mid = (mid + Math.imul(al7, bh2)) | 0;
              mid = (mid + Math.imul(ah7, bl2)) | 0;
              hi = (hi + Math.imul(ah7, bh2)) | 0;
              lo = (lo + Math.imul(al6, bl3)) | 0;
              mid = (mid + Math.imul(al6, bh3)) | 0;
              mid = (mid + Math.imul(ah6, bl3)) | 0;
              hi = (hi + Math.imul(ah6, bh3)) | 0;
              lo = (lo + Math.imul(al5, bl4)) | 0;
              mid = (mid + Math.imul(al5, bh4)) | 0;
              mid = (mid + Math.imul(ah5, bl4)) | 0;
              hi = (hi + Math.imul(ah5, bh4)) | 0;
              lo = (lo + Math.imul(al4, bl5)) | 0;
              mid = (mid + Math.imul(al4, bh5)) | 0;
              mid = (mid + Math.imul(ah4, bl5)) | 0;
              hi = (hi + Math.imul(ah4, bh5)) | 0;
              lo = (lo + Math.imul(al3, bl6)) | 0;
              mid = (mid + Math.imul(al3, bh6)) | 0;
              mid = (mid + Math.imul(ah3, bl6)) | 0;
              hi = (hi + Math.imul(ah3, bh6)) | 0;
              lo = (lo + Math.imul(al2, bl7)) | 0;
              mid = (mid + Math.imul(al2, bh7)) | 0;
              mid = (mid + Math.imul(ah2, bl7)) | 0;
              hi = (hi + Math.imul(ah2, bh7)) | 0;
              lo = (lo + Math.imul(al1, bl8)) | 0;
              mid = (mid + Math.imul(al1, bh8)) | 0;
              mid = (mid + Math.imul(ah1, bl8)) | 0;
              hi = (hi + Math.imul(ah1, bh8)) | 0;
              lo = (lo + Math.imul(al0, bl9)) | 0;
              mid = (mid + Math.imul(al0, bh9)) | 0;
              mid = (mid + Math.imul(ah0, bl9)) | 0;
              hi = (hi + Math.imul(ah0, bh9)) | 0;
              var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
              w9 &= 0x3ffffff;
              /* k = 10 */
              lo = Math.imul(al9, bl1);
              mid = Math.imul(al9, bh1);
              mid = (mid + Math.imul(ah9, bl1)) | 0;
              hi = Math.imul(ah9, bh1);
              lo = (lo + Math.imul(al8, bl2)) | 0;
              mid = (mid + Math.imul(al8, bh2)) | 0;
              mid = (mid + Math.imul(ah8, bl2)) | 0;
              hi = (hi + Math.imul(ah8, bh2)) | 0;
              lo = (lo + Math.imul(al7, bl3)) | 0;
              mid = (mid + Math.imul(al7, bh3)) | 0;
              mid = (mid + Math.imul(ah7, bl3)) | 0;
              hi = (hi + Math.imul(ah7, bh3)) | 0;
              lo = (lo + Math.imul(al6, bl4)) | 0;
              mid = (mid + Math.imul(al6, bh4)) | 0;
              mid = (mid + Math.imul(ah6, bl4)) | 0;
              hi = (hi + Math.imul(ah6, bh4)) | 0;
              lo = (lo + Math.imul(al5, bl5)) | 0;
              mid = (mid + Math.imul(al5, bh5)) | 0;
              mid = (mid + Math.imul(ah5, bl5)) | 0;
              hi = (hi + Math.imul(ah5, bh5)) | 0;
              lo = (lo + Math.imul(al4, bl6)) | 0;
              mid = (mid + Math.imul(al4, bh6)) | 0;
              mid = (mid + Math.imul(ah4, bl6)) | 0;
              hi = (hi + Math.imul(ah4, bh6)) | 0;
              lo = (lo + Math.imul(al3, bl7)) | 0;
              mid = (mid + Math.imul(al3, bh7)) | 0;
              mid = (mid + Math.imul(ah3, bl7)) | 0;
              hi = (hi + Math.imul(ah3, bh7)) | 0;
              lo = (lo + Math.imul(al2, bl8)) | 0;
              mid = (mid + Math.imul(al2, bh8)) | 0;
              mid = (mid + Math.imul(ah2, bl8)) | 0;
              hi = (hi + Math.imul(ah2, bh8)) | 0;
              lo = (lo + Math.imul(al1, bl9)) | 0;
              mid = (mid + Math.imul(al1, bh9)) | 0;
              mid = (mid + Math.imul(ah1, bl9)) | 0;
              hi = (hi + Math.imul(ah1, bh9)) | 0;
              var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
              w10 &= 0x3ffffff;
              /* k = 11 */
              lo = Math.imul(al9, bl2);
              mid = Math.imul(al9, bh2);
              mid = (mid + Math.imul(ah9, bl2)) | 0;
              hi = Math.imul(ah9, bh2);
              lo = (lo + Math.imul(al8, bl3)) | 0;
              mid = (mid + Math.imul(al8, bh3)) | 0;
              mid = (mid + Math.imul(ah8, bl3)) | 0;
              hi = (hi + Math.imul(ah8, bh3)) | 0;
              lo = (lo + Math.imul(al7, bl4)) | 0;
              mid = (mid + Math.imul(al7, bh4)) | 0;
              mid = (mid + Math.imul(ah7, bl4)) | 0;
              hi = (hi + Math.imul(ah7, bh4)) | 0;
              lo = (lo + Math.imul(al6, bl5)) | 0;
              mid = (mid + Math.imul(al6, bh5)) | 0;
              mid = (mid + Math.imul(ah6, bl5)) | 0;
              hi = (hi + Math.imul(ah6, bh5)) | 0;
              lo = (lo + Math.imul(al5, bl6)) | 0;
              mid = (mid + Math.imul(al5, bh6)) | 0;
              mid = (mid + Math.imul(ah5, bl6)) | 0;
              hi = (hi + Math.imul(ah5, bh6)) | 0;
              lo = (lo + Math.imul(al4, bl7)) | 0;
              mid = (mid + Math.imul(al4, bh7)) | 0;
              mid = (mid + Math.imul(ah4, bl7)) | 0;
              hi = (hi + Math.imul(ah4, bh7)) | 0;
              lo = (lo + Math.imul(al3, bl8)) | 0;
              mid = (mid + Math.imul(al3, bh8)) | 0;
              mid = (mid + Math.imul(ah3, bl8)) | 0;
              hi = (hi + Math.imul(ah3, bh8)) | 0;
              lo = (lo + Math.imul(al2, bl9)) | 0;
              mid = (mid + Math.imul(al2, bh9)) | 0;
              mid = (mid + Math.imul(ah2, bl9)) | 0;
              hi = (hi + Math.imul(ah2, bh9)) | 0;
              var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
              w11 &= 0x3ffffff;
              /* k = 12 */
              lo = Math.imul(al9, bl3);
              mid = Math.imul(al9, bh3);
              mid = (mid + Math.imul(ah9, bl3)) | 0;
              hi = Math.imul(ah9, bh3);
              lo = (lo + Math.imul(al8, bl4)) | 0;
              mid = (mid + Math.imul(al8, bh4)) | 0;
              mid = (mid + Math.imul(ah8, bl4)) | 0;
              hi = (hi + Math.imul(ah8, bh4)) | 0;
              lo = (lo + Math.imul(al7, bl5)) | 0;
              mid = (mid + Math.imul(al7, bh5)) | 0;
              mid = (mid + Math.imul(ah7, bl5)) | 0;
              hi = (hi + Math.imul(ah7, bh5)) | 0;
              lo = (lo + Math.imul(al6, bl6)) | 0;
              mid = (mid + Math.imul(al6, bh6)) | 0;
              mid = (mid + Math.imul(ah6, bl6)) | 0;
              hi = (hi + Math.imul(ah6, bh6)) | 0;
              lo = (lo + Math.imul(al5, bl7)) | 0;
              mid = (mid + Math.imul(al5, bh7)) | 0;
              mid = (mid + Math.imul(ah5, bl7)) | 0;
              hi = (hi + Math.imul(ah5, bh7)) | 0;
              lo = (lo + Math.imul(al4, bl8)) | 0;
              mid = (mid + Math.imul(al4, bh8)) | 0;
              mid = (mid + Math.imul(ah4, bl8)) | 0;
              hi = (hi + Math.imul(ah4, bh8)) | 0;
              lo = (lo + Math.imul(al3, bl9)) | 0;
              mid = (mid + Math.imul(al3, bh9)) | 0;
              mid = (mid + Math.imul(ah3, bl9)) | 0;
              hi = (hi + Math.imul(ah3, bh9)) | 0;
              var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
              w12 &= 0x3ffffff;
              /* k = 13 */
              lo = Math.imul(al9, bl4);
              mid = Math.imul(al9, bh4);
              mid = (mid + Math.imul(ah9, bl4)) | 0;
              hi = Math.imul(ah9, bh4);
              lo = (lo + Math.imul(al8, bl5)) | 0;
              mid = (mid + Math.imul(al8, bh5)) | 0;
              mid = (mid + Math.imul(ah8, bl5)) | 0;
              hi = (hi + Math.imul(ah8, bh5)) | 0;
              lo = (lo + Math.imul(al7, bl6)) | 0;
              mid = (mid + Math.imul(al7, bh6)) | 0;
              mid = (mid + Math.imul(ah7, bl6)) | 0;
              hi = (hi + Math.imul(ah7, bh6)) | 0;
              lo = (lo + Math.imul(al6, bl7)) | 0;
              mid = (mid + Math.imul(al6, bh7)) | 0;
              mid = (mid + Math.imul(ah6, bl7)) | 0;
              hi = (hi + Math.imul(ah6, bh7)) | 0;
              lo = (lo + Math.imul(al5, bl8)) | 0;
              mid = (mid + Math.imul(al5, bh8)) | 0;
              mid = (mid + Math.imul(ah5, bl8)) | 0;
              hi = (hi + Math.imul(ah5, bh8)) | 0;
              lo = (lo + Math.imul(al4, bl9)) | 0;
              mid = (mid + Math.imul(al4, bh9)) | 0;
              mid = (mid + Math.imul(ah4, bl9)) | 0;
              hi = (hi + Math.imul(ah4, bh9)) | 0;
              var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
              w13 &= 0x3ffffff;
              /* k = 14 */
              lo = Math.imul(al9, bl5);
              mid = Math.imul(al9, bh5);
              mid = (mid + Math.imul(ah9, bl5)) | 0;
              hi = Math.imul(ah9, bh5);
              lo = (lo + Math.imul(al8, bl6)) | 0;
              mid = (mid + Math.imul(al8, bh6)) | 0;
              mid = (mid + Math.imul(ah8, bl6)) | 0;
              hi = (hi + Math.imul(ah8, bh6)) | 0;
              lo = (lo + Math.imul(al7, bl7)) | 0;
              mid = (mid + Math.imul(al7, bh7)) | 0;
              mid = (mid + Math.imul(ah7, bl7)) | 0;
              hi = (hi + Math.imul(ah7, bh7)) | 0;
              lo = (lo + Math.imul(al6, bl8)) | 0;
              mid = (mid + Math.imul(al6, bh8)) | 0;
              mid = (mid + Math.imul(ah6, bl8)) | 0;
              hi = (hi + Math.imul(ah6, bh8)) | 0;
              lo = (lo + Math.imul(al5, bl9)) | 0;
              mid = (mid + Math.imul(al5, bh9)) | 0;
              mid = (mid + Math.imul(ah5, bl9)) | 0;
              hi = (hi + Math.imul(ah5, bh9)) | 0;
              var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
              w14 &= 0x3ffffff;
              /* k = 15 */
              lo = Math.imul(al9, bl6);
              mid = Math.imul(al9, bh6);
              mid = (mid + Math.imul(ah9, bl6)) | 0;
              hi = Math.imul(ah9, bh6);
              lo = (lo + Math.imul(al8, bl7)) | 0;
              mid = (mid + Math.imul(al8, bh7)) | 0;
              mid = (mid + Math.imul(ah8, bl7)) | 0;
              hi = (hi + Math.imul(ah8, bh7)) | 0;
              lo = (lo + Math.imul(al7, bl8)) | 0;
              mid = (mid + Math.imul(al7, bh8)) | 0;
              mid = (mid + Math.imul(ah7, bl8)) | 0;
              hi = (hi + Math.imul(ah7, bh8)) | 0;
              lo = (lo + Math.imul(al6, bl9)) | 0;
              mid = (mid + Math.imul(al6, bh9)) | 0;
              mid = (mid + Math.imul(ah6, bl9)) | 0;
              hi = (hi + Math.imul(ah6, bh9)) | 0;
              var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
              w15 &= 0x3ffffff;
              /* k = 16 */
              lo = Math.imul(al9, bl7);
              mid = Math.imul(al9, bh7);
              mid = (mid + Math.imul(ah9, bl7)) | 0;
              hi = Math.imul(ah9, bh7);
              lo = (lo + Math.imul(al8, bl8)) | 0;
              mid = (mid + Math.imul(al8, bh8)) | 0;
              mid = (mid + Math.imul(ah8, bl8)) | 0;
              hi = (hi + Math.imul(ah8, bh8)) | 0;
              lo = (lo + Math.imul(al7, bl9)) | 0;
              mid = (mid + Math.imul(al7, bh9)) | 0;
              mid = (mid + Math.imul(ah7, bl9)) | 0;
              hi = (hi + Math.imul(ah7, bh9)) | 0;
              var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
              w16 &= 0x3ffffff;
              /* k = 17 */
              lo = Math.imul(al9, bl8);
              mid = Math.imul(al9, bh8);
              mid = (mid + Math.imul(ah9, bl8)) | 0;
              hi = Math.imul(ah9, bh8);
              lo = (lo + Math.imul(al8, bl9)) | 0;
              mid = (mid + Math.imul(al8, bh9)) | 0;
              mid = (mid + Math.imul(ah8, bl9)) | 0;
              hi = (hi + Math.imul(ah8, bh9)) | 0;
              var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
              w17 &= 0x3ffffff;
              /* k = 18 */
              lo = Math.imul(al9, bl9);
              mid = Math.imul(al9, bh9);
              mid = (mid + Math.imul(ah9, bl9)) | 0;
              hi = Math.imul(ah9, bh9);
              var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
              w18 &= 0x3ffffff;
              o[0] = w0;
              o[1] = w1;
              o[2] = w2;
              o[3] = w3;
              o[4] = w4;
              o[5] = w5;
              o[6] = w6;
              o[7] = w7;
              o[8] = w8;
              o[9] = w9;
              o[10] = w10;
              o[11] = w11;
              o[12] = w12;
              o[13] = w13;
              o[14] = w14;
              o[15] = w15;
              o[16] = w16;
              o[17] = w17;
              o[18] = w18;
              if (c !== 0) {
                o[19] = c;
                out.length++;
              }
              return out;
            };

            // Polyfill comb
            if (!Math.imul) {
              comb10MulTo = smallMulTo;
            }

            function bigMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              out.length = self.length + num.length;

              var carry = 0;
              var hncarry = 0;
              for (var k = 0; k < out.length - 1; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = hncarry;
                hncarry = 0;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = k - j;
                  var a = self.words[i] | 0;
                  var b = num.words[j] | 0;
                  var r = a * b;

                  var lo = r & 0x3ffffff;
                  ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                  lo = (lo + rword) | 0;
                  rword = lo & 0x3ffffff;
                  ncarry = (ncarry + (lo >>> 26)) | 0;

                  hncarry += ncarry >>> 26;
                  ncarry &= 0x3ffffff;
                }
                out.words[k] = rword;
                carry = ncarry;
                ncarry = hncarry;
              }
              if (carry !== 0) {
                out.words[k] = carry;
              } else {
                out.length--;
              }

              return out.strip();
            }

            function jumboMulTo(self, num, out) {
              var fftm = new FFTM();
              return fftm.mulp(self, num, out);
            }

            BN.prototype.mulTo = function mulTo(num, out) {
              var res;
              var len = this.length + num.length;
              if (this.length === 10 && num.length === 10) {
                res = comb10MulTo(this, num, out);
              } else if (len < 63) {
                res = smallMulTo(this, num, out);
              } else if (len < 1024) {
                res = bigMulTo(this, num, out);
              } else {
                res = jumboMulTo(this, num, out);
              }

              return res;
            };

            // Cooley-Tukey algorithm for FFT
            // slightly revisited to rely on looping instead of recursion

            function FFTM(x, y) {
              this.x = x;
              this.y = y;
            }

            FFTM.prototype.makeRBT = function makeRBT(N) {
              var t = new Array(N);
              var l = BN.prototype._countBits(N) - 1;
              for (var i = 0; i < N; i++) {
                t[i] = this.revBin(i, l, N);
              }

              return t;
            };

            // Returns binary-reversed representation of `x`
            FFTM.prototype.revBin = function revBin(x, l, N) {
              if (x === 0 || x === N - 1) return x;

              var rb = 0;
              for (var i = 0; i < l; i++) {
                rb |= (x & 1) << (l - i - 1);
                x >>= 1;
              }

              return rb;
            };

            // Performs "tweedling" phase, therefore 'emulating'
            // behaviour of the recursive algorithm
            FFTM.prototype.permute = function permute(
              rbt,
              rws,
              iws,
              rtws,
              itws,
              N
            ) {
              for (var i = 0; i < N; i++) {
                rtws[i] = rws[rbt[i]];
                itws[i] = iws[rbt[i]];
              }
            };

            FFTM.prototype.transform = function transform(
              rws,
              iws,
              rtws,
              itws,
              N,
              rbt
            ) {
              this.permute(rbt, rws, iws, rtws, itws, N);

              for (var s = 1; s < N; s <<= 1) {
                var l = s << 1;

                var rtwdf = Math.cos((2 * Math.PI) / l);
                var itwdf = Math.sin((2 * Math.PI) / l);

                for (var p = 0; p < N; p += l) {
                  var rtwdf_ = rtwdf;
                  var itwdf_ = itwdf;

                  for (var j = 0; j < s; j++) {
                    var re = rtws[p + j];
                    var ie = itws[p + j];

                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];

                    var rx = rtwdf_ * ro - itwdf_ * io;

                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;

                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;

                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;

                    /* jshint maxdepth : false */
                    if (j !== l) {
                      rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                      itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                      rtwdf_ = rx;
                    }
                  }
                }
              }
            };

            FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
              var N = Math.max(m, n) | 1;
              var odd = N & 1;
              var i = 0;
              for (N = (N / 2) | 0; N; N = N >>> 1) {
                i++;
              }

              return 1 << (i + 1 + odd);
            };

            FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
              if (N <= 1) return;

              for (var i = 0; i < N / 2; i++) {
                var t = rws[i];

                rws[i] = rws[N - i - 1];
                rws[N - i - 1] = t;

                t = iws[i];

                iws[i] = -iws[N - i - 1];
                iws[N - i - 1] = -t;
              }
            };

            FFTM.prototype.normalize13b = function normalize13b(ws, N) {
              var carry = 0;
              for (var i = 0; i < N / 2; i++) {
                var w =
                  Math.round(ws[2 * i + 1] / N) * 0x2000 +
                  Math.round(ws[2 * i] / N) +
                  carry;

                ws[i] = w & 0x3ffffff;

                if (w < 0x4000000) {
                  carry = 0;
                } else {
                  carry = (w / 0x4000000) | 0;
                }
              }

              return ws;
            };

            FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
              var carry = 0;
              for (var i = 0; i < len; i++) {
                carry = carry + (ws[i] | 0);

                rws[2 * i] = carry & 0x1fff;
                carry = carry >>> 13;
                rws[2 * i + 1] = carry & 0x1fff;
                carry = carry >>> 13;
              }

              // Pad with zeroes
              for (i = 2 * len; i < N; ++i) {
                rws[i] = 0;
              }

              assert(carry === 0);
              assert((carry & ~0x1fff) === 0);
            };

            FFTM.prototype.stub = function stub(N) {
              var ph = new Array(N);
              for (var i = 0; i < N; i++) {
                ph[i] = 0;
              }

              return ph;
            };

            FFTM.prototype.mulp = function mulp(x, y, out) {
              var N = 2 * this.guessLen13b(x.length, y.length);

              var rbt = this.makeRBT(N);

              var _ = this.stub(N);

              var rws = new Array(N);
              var rwst = new Array(N);
              var iwst = new Array(N);

              var nrws = new Array(N);
              var nrwst = new Array(N);
              var niwst = new Array(N);

              var rmws = out.words;
              rmws.length = N;

              this.convert13b(x.words, x.length, rws, N);
              this.convert13b(y.words, y.length, nrws, N);

              this.transform(rws, _, rwst, iwst, N, rbt);
              this.transform(nrws, _, nrwst, niwst, N, rbt);

              for (var i = 0; i < N; i++) {
                var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                rwst[i] = rx;
              }

              this.conjugate(rwst, iwst, N);
              this.transform(rwst, iwst, rmws, _, N, rbt);
              this.conjugate(rmws, _, N);
              this.normalize13b(rmws, N);

              out.negative = x.negative ^ y.negative;
              out.length = x.length + y.length;
              return out.strip();
            };

            // Multiply `this` by `num`
            BN.prototype.mul = function mul(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return this.mulTo(num, out);
            };

            // Multiply employing FFT
            BN.prototype.mulf = function mulf(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return jumboMulTo(this, num, out);
            };

            // In-place Multiplication
            BN.prototype.imul = function imul(num) {
              return this.clone().mulTo(num, this);
            };

            BN.prototype.imuln = function imuln(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);

              // Carry
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = (this.words[i] | 0) * num;
                var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                carry >>= 26;
                carry += (w / 0x4000000) | 0;
                // NOTE: lo is 27bit maximum
                carry += lo >>> 26;
                this.words[i] = lo & 0x3ffffff;
              }

              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }

              return this;
            };

            BN.prototype.muln = function muln(num) {
              return this.clone().imuln(num);
            };

            // `this` * `this`
            BN.prototype.sqr = function sqr() {
              return this.mul(this);
            };

            // `this` * `this` in-place
            BN.prototype.isqr = function isqr() {
              return this.imul(this.clone());
            };

            // Math.pow(`this`, `num`)
            BN.prototype.pow = function pow(num) {
              var w = toBitArray(num);
              if (w.length === 0) return new BN(1);

              // Skip leading zeroes
              var res = this;
              for (var i = 0; i < w.length; i++, res = res.sqr()) {
                if (w[i] !== 0) break;
              }

              if (++i < w.length) {
                for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                  if (w[i] === 0) continue;

                  res = res.mul(q);
                }
              }

              return res;
            };

            // Shift-left in-place
            BN.prototype.iushln = function iushln(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;
              var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
              var i;

              if (r !== 0) {
                var carry = 0;

                for (i = 0; i < this.length; i++) {
                  var newCarry = this.words[i] & carryMask;
                  var c = ((this.words[i] | 0) - newCarry) << r;
                  this.words[i] = c | carry;
                  carry = newCarry >>> (26 - r);
                }

                if (carry) {
                  this.words[i] = carry;
                  this.length++;
                }
              }

              if (s !== 0) {
                for (i = this.length - 1; i >= 0; i--) {
                  this.words[i + s] = this.words[i];
                }

                for (i = 0; i < s; i++) {
                  this.words[i] = 0;
                }

                this.length += s;
              }

              return this.strip();
            };

            BN.prototype.ishln = function ishln(bits) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushln(bits);
            };

            // Shift-right in-place
            // NOTE: `hint` is a lowest bit before trailing zeroes
            // NOTE: if `extended` is present - it will be filled with destroyed bits
            BN.prototype.iushrn = function iushrn(bits, hint, extended) {
              assert(typeof bits === 'number' && bits >= 0);
              var h;
              if (hint) {
                h = (hint - (hint % 26)) / 26;
              } else {
                h = 0;
              }

              var r = bits % 26;
              var s = Math.min((bits - r) / 26, this.length);
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              var maskedWords = extended;

              h -= s;
              h = Math.max(0, h);

              // Extended mode, copy masked part
              if (maskedWords) {
                for (var i = 0; i < s; i++) {
                  maskedWords.words[i] = this.words[i];
                }
                maskedWords.length = s;
              }

              if (s === 0) {
                // No-op, we should not move anything at all
              } else if (this.length > s) {
                this.length -= s;
                for (i = 0; i < this.length; i++) {
                  this.words[i] = this.words[i + s];
                }
              } else {
                this.words[0] = 0;
                this.length = 1;
              }

              var carry = 0;
              for (
                i = this.length - 1;
                i >= 0 && (carry !== 0 || i >= h);
                i--
              ) {
                var word = this.words[i] | 0;
                this.words[i] = (carry << (26 - r)) | (word >>> r);
                carry = word & mask;
              }

              // Push carried bits as a mask
              if (maskedWords && carry !== 0) {
                maskedWords.words[maskedWords.length++] = carry;
              }

              if (this.length === 0) {
                this.words[0] = 0;
                this.length = 1;
              }

              return this.strip();
            };

            BN.prototype.ishrn = function ishrn(bits, hint, extended) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushrn(bits, hint, extended);
            };

            // Shift-left
            BN.prototype.shln = function shln(bits) {
              return this.clone().ishln(bits);
            };

            BN.prototype.ushln = function ushln(bits) {
              return this.clone().iushln(bits);
            };

            // Shift-right
            BN.prototype.shrn = function shrn(bits) {
              return this.clone().ishrn(bits);
            };

            BN.prototype.ushrn = function ushrn(bits) {
              return this.clone().iushrn(bits);
            };

            // Test if n bit is set
            BN.prototype.testn = function testn(bit) {
              assert(typeof bit === 'number' && bit >= 0);
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) return false;

              // Check bit and return
              var w = this.words[s];

              return !!(w & q);
            };

            // Return only lowers bits of number (in-place)
            BN.prototype.imaskn = function imaskn(bits) {
              assert(typeof bits === 'number' && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;

              assert(
                this.negative === 0,
                'imaskn works only with positive numbers'
              );

              if (this.length <= s) {
                return this;
              }

              if (r !== 0) {
                s++;
              }
              this.length = Math.min(s, this.length);

              if (r !== 0) {
                var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                this.words[this.length - 1] &= mask;
              }

              return this.strip();
            };

            // Return only lowers bits of number
            BN.prototype.maskn = function maskn(bits) {
              return this.clone().imaskn(bits);
            };

            // Add plain number `num` to `this`
            BN.prototype.iaddn = function iaddn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.isubn(-num);

              // Possible sign change
              if (this.negative !== 0) {
                if (this.length === 1 && (this.words[0] | 0) < num) {
                  this.words[0] = num - (this.words[0] | 0);
                  this.negative = 0;
                  return this;
                }

                this.negative = 0;
                this.isubn(num);
                this.negative = 1;
                return this;
              }

              // Add without checks
              return this._iaddn(num);
            };

            BN.prototype._iaddn = function _iaddn(num) {
              this.words[0] += num;

              // Carry
              for (
                var i = 0;
                i < this.length && this.words[i] >= 0x4000000;
                i++
              ) {
                this.words[i] -= 0x4000000;
                if (i === this.length - 1) {
                  this.words[i + 1] = 1;
                } else {
                  this.words[i + 1]++;
                }
              }
              this.length = Math.max(this.length, i + 1);

              return this;
            };

            // Subtract plain number `num` from `this`
            BN.prototype.isubn = function isubn(num) {
              assert(typeof num === 'number');
              assert(num < 0x4000000);
              if (num < 0) return this.iaddn(-num);

              if (this.negative !== 0) {
                this.negative = 0;
                this.iaddn(num);
                this.negative = 1;
                return this;
              }

              this.words[0] -= num;

              if (this.length === 1 && this.words[0] < 0) {
                this.words[0] = -this.words[0];
                this.negative = 1;
              } else {
                // Carry
                for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                  this.words[i] += 0x4000000;
                  this.words[i + 1] -= 1;
                }
              }

              return this.strip();
            };

            BN.prototype.addn = function addn(num) {
              return this.clone().iaddn(num);
            };

            BN.prototype.subn = function subn(num) {
              return this.clone().isubn(num);
            };

            BN.prototype.iabs = function iabs() {
              this.negative = 0;

              return this;
            };

            BN.prototype.abs = function abs() {
              return this.clone().iabs();
            };

            BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
              var len = num.length + shift;
              var i;

              this._expand(len);

              var w;
              var carry = 0;
              for (i = 0; i < num.length; i++) {
                w = (this.words[i + shift] | 0) + carry;
                var right = (num.words[i] | 0) * mul;
                w -= right & 0x3ffffff;
                carry = (w >> 26) - ((right / 0x4000000) | 0);
                this.words[i + shift] = w & 0x3ffffff;
              }
              for (; i < this.length - shift; i++) {
                w = (this.words[i + shift] | 0) + carry;
                carry = w >> 26;
                this.words[i + shift] = w & 0x3ffffff;
              }

              if (carry === 0) return this.strip();

              // Subtraction overflow
              assert(carry === -1);
              carry = 0;
              for (i = 0; i < this.length; i++) {
                w = -(this.words[i] | 0) + carry;
                carry = w >> 26;
                this.words[i] = w & 0x3ffffff;
              }
              this.negative = 1;

              return this.strip();
            };

            BN.prototype._wordDiv = function _wordDiv(num, mode) {
              var shift = this.length - num.length;

              var a = this.clone();
              var b = num;

              // Normalize
              var bhi = b.words[b.length - 1] | 0;
              var bhiBits = this._countBits(bhi);
              shift = 26 - bhiBits;
              if (shift !== 0) {
                b = b.ushln(shift);
                a.iushln(shift);
                bhi = b.words[b.length - 1] | 0;
              }

              // Initialize quotient
              var m = a.length - b.length;
              var q;

              if (mode !== 'mod') {
                q = new BN(null);
                q.length = m + 1;
                q.words = new Array(q.length);
                for (var i = 0; i < q.length; i++) {
                  q.words[i] = 0;
                }
              }

              var diff = a.clone()._ishlnsubmul(b, 1, m);
              if (diff.negative === 0) {
                a = diff;
                if (q) {
                  q.words[m] = 1;
                }
              }

              for (var j = m - 1; j >= 0; j--) {
                var qj =
                  (a.words[b.length + j] | 0) * 0x4000000 +
                  (a.words[b.length + j - 1] | 0);

                // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                // (0x7ffffff)
                qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                a._ishlnsubmul(b, qj, j);
                while (a.negative !== 0) {
                  qj--;
                  a.negative = 0;
                  a._ishlnsubmul(b, 1, j);
                  if (!a.isZero()) {
                    a.negative ^= 1;
                  }
                }
                if (q) {
                  q.words[j] = qj;
                }
              }
              if (q) {
                q.strip();
              }
              a.strip();

              // Denormalize
              if (mode !== 'div' && shift !== 0) {
                a.iushrn(shift);
              }

              return {
                div: q || null,
                mod: a,
              };
            };

            // NOTE: 1) `mode` can be set to `mod` to request mod only,
            //       to `div` to request div only, or be absent to
            //       request both div & mod
            //       2) `positive` is true if unsigned mod is requested
            BN.prototype.divmod = function divmod(num, mode, positive) {
              assert(!num.isZero());

              if (this.isZero()) {
                return {
                  div: new BN(0),
                  mod: new BN(0),
                };
              }

              var div, mod, res;
              if (this.negative !== 0 && num.negative === 0) {
                res = this.neg().divmod(num, mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                if (mode !== 'div') {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.iadd(num);
                  }
                }

                return {
                  div: div,
                  mod: mod,
                };
              }

              if (this.negative === 0 && num.negative !== 0) {
                res = this.divmod(num.neg(), mode);

                if (mode !== 'mod') {
                  div = res.div.neg();
                }

                return {
                  div: div,
                  mod: res.mod,
                };
              }

              if ((this.negative & num.negative) !== 0) {
                res = this.neg().divmod(num.neg(), mode);

                if (mode !== 'div') {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.isub(num);
                  }
                }

                return {
                  div: res.div,
                  mod: mod,
                };
              }

              // Both numbers are positive at this point

              // Strip both numbers to approximate shift value
              if (num.length > this.length || this.cmp(num) < 0) {
                return {
                  div: new BN(0),
                  mod: this,
                };
              }

              // Very short reduction
              if (num.length === 1) {
                if (mode === 'div') {
                  return {
                    div: this.divn(num.words[0]),
                    mod: null,
                  };
                }

                if (mode === 'mod') {
                  return {
                    div: null,
                    mod: new BN(this.modn(num.words[0])),
                  };
                }

                return {
                  div: this.divn(num.words[0]),
                  mod: new BN(this.modn(num.words[0])),
                };
              }

              return this._wordDiv(num, mode);
            };

            // Find `this` / `num`
            BN.prototype.div = function div(num) {
              return this.divmod(num, 'div', false).div;
            };

            // Find `this` % `num`
            BN.prototype.mod = function mod(num) {
              return this.divmod(num, 'mod', false).mod;
            };

            BN.prototype.umod = function umod(num) {
              return this.divmod(num, 'mod', true).mod;
            };

            // Find Round(`this` / `num`)
            BN.prototype.divRound = function divRound(num) {
              var dm = this.divmod(num);

              // Fast case - exact division
              if (dm.mod.isZero()) return dm.div;

              var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

              var half = num.ushrn(1);
              var r2 = num.andln(1);
              var cmp = mod.cmp(half);

              // Round down
              if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

              // Round up
              return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };

            BN.prototype.modn = function modn(num) {
              assert(num <= 0x3ffffff);
              var p = (1 << 26) % num;

              var acc = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                acc = (p * acc + (this.words[i] | 0)) % num;
              }

              return acc;
            };

            // In-place division by number
            BN.prototype.idivn = function idivn(num) {
              assert(num <= 0x3ffffff);

              var carry = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var w = (this.words[i] | 0) + carry * 0x4000000;
                this.words[i] = (w / num) | 0;
                carry = w % num;
              }

              return this.strip();
            };

            BN.prototype.divn = function divn(num) {
              return this.clone().idivn(num);
            };

            BN.prototype.egcd = function egcd(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var x = this;
              var y = p.clone();

              if (x.negative !== 0) {
                x = x.umod(p);
              } else {
                x = x.clone();
              }

              // A * x + B * y = x
              var A = new BN(1);
              var B = new BN(0);

              // C * x + D * y = y
              var C = new BN(0);
              var D = new BN(1);

              var g = 0;

              while (x.isEven() && y.isEven()) {
                x.iushrn(1);
                y.iushrn(1);
                ++g;
              }

              var yp = y.clone();
              var xp = x.clone();

              while (!x.isZero()) {
                for (
                  var i = 0, im = 1;
                  (x.words[0] & im) === 0 && i < 26;
                  ++i, im <<= 1
                );
                if (i > 0) {
                  x.iushrn(i);
                  while (i-- > 0) {
                    if (A.isOdd() || B.isOdd()) {
                      A.iadd(yp);
                      B.isub(xp);
                    }

                    A.iushrn(1);
                    B.iushrn(1);
                  }
                }

                for (
                  var j = 0, jm = 1;
                  (y.words[0] & jm) === 0 && j < 26;
                  ++j, jm <<= 1
                );
                if (j > 0) {
                  y.iushrn(j);
                  while (j-- > 0) {
                    if (C.isOdd() || D.isOdd()) {
                      C.iadd(yp);
                      D.isub(xp);
                    }

                    C.iushrn(1);
                    D.iushrn(1);
                  }
                }

                if (x.cmp(y) >= 0) {
                  x.isub(y);
                  A.isub(C);
                  B.isub(D);
                } else {
                  y.isub(x);
                  C.isub(A);
                  D.isub(B);
                }
              }

              return {
                a: C,
                b: D,
                gcd: y.iushln(g),
              };
            };

            // This is reduced incarnation of the binary EEA
            // above, designated to invert members of the
            // _prime_ fields F(p) at a maximal speed
            BN.prototype._invmp = function _invmp(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var a = this;
              var b = p.clone();

              if (a.negative !== 0) {
                a = a.umod(p);
              } else {
                a = a.clone();
              }

              var x1 = new BN(1);
              var x2 = new BN(0);

              var delta = b.clone();

              while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                for (
                  var i = 0, im = 1;
                  (a.words[0] & im) === 0 && i < 26;
                  ++i, im <<= 1
                );
                if (i > 0) {
                  a.iushrn(i);
                  while (i-- > 0) {
                    if (x1.isOdd()) {
                      x1.iadd(delta);
                    }

                    x1.iushrn(1);
                  }
                }

                for (
                  var j = 0, jm = 1;
                  (b.words[0] & jm) === 0 && j < 26;
                  ++j, jm <<= 1
                );
                if (j > 0) {
                  b.iushrn(j);
                  while (j-- > 0) {
                    if (x2.isOdd()) {
                      x2.iadd(delta);
                    }

                    x2.iushrn(1);
                  }
                }

                if (a.cmp(b) >= 0) {
                  a.isub(b);
                  x1.isub(x2);
                } else {
                  b.isub(a);
                  x2.isub(x1);
                }
              }

              var res;
              if (a.cmpn(1) === 0) {
                res = x1;
              } else {
                res = x2;
              }

              if (res.cmpn(0) < 0) {
                res.iadd(p);
              }

              return res;
            };

            BN.prototype.gcd = function gcd(num) {
              if (this.isZero()) return num.abs();
              if (num.isZero()) return this.abs();

              var a = this.clone();
              var b = num.clone();
              a.negative = 0;
              b.negative = 0;

              // Remove common factor of two
              for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                a.iushrn(1);
                b.iushrn(1);
              }

              do {
                while (a.isEven()) {
                  a.iushrn(1);
                }
                while (b.isEven()) {
                  b.iushrn(1);
                }

                var r = a.cmp(b);
                if (r < 0) {
                  // Swap `a` and `b` to make `a` always bigger than `b`
                  var t = a;
                  a = b;
                  b = t;
                } else if (r === 0 || b.cmpn(1) === 0) {
                  break;
                }

                a.isub(b);
              } while (true);

              return b.iushln(shift);
            };

            // Invert number in the field F(num)
            BN.prototype.invm = function invm(num) {
              return this.egcd(num).a.umod(num);
            };

            BN.prototype.isEven = function isEven() {
              return (this.words[0] & 1) === 0;
            };

            BN.prototype.isOdd = function isOdd() {
              return (this.words[0] & 1) === 1;
            };

            // And first word and num
            BN.prototype.andln = function andln(num) {
              return this.words[0] & num;
            };

            // Increment at the bit position in-line
            BN.prototype.bincn = function bincn(bit) {
              assert(typeof bit === 'number');
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) {
                this._expand(s + 1);
                this.words[s] |= q;
                return this;
              }

              // Add bit and propagate, if needed
              var carry = q;
              for (var i = s; carry !== 0 && i < this.length; i++) {
                var w = this.words[i] | 0;
                w += carry;
                carry = w >>> 26;
                w &= 0x3ffffff;
                this.words[i] = w;
              }
              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }
              return this;
            };

            BN.prototype.isZero = function isZero() {
              return this.length === 1 && this.words[0] === 0;
            };

            BN.prototype.cmpn = function cmpn(num) {
              var negative = num < 0;

              if (this.negative !== 0 && !negative) return -1;
              if (this.negative === 0 && negative) return 1;

              this.strip();

              var res;
              if (this.length > 1) {
                res = 1;
              } else {
                if (negative) {
                  num = -num;
                }

                assert(num <= 0x3ffffff, 'Number is too big');

                var w = this.words[0] | 0;
                res = w === num ? 0 : w < num ? -1 : 1;
              }
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Compare two numbers and return:
            // 1 - if `this` > `num`
            // 0 - if `this` == `num`
            // -1 - if `this` < `num`
            BN.prototype.cmp = function cmp(num) {
              if (this.negative !== 0 && num.negative === 0) return -1;
              if (this.negative === 0 && num.negative !== 0) return 1;

              var res = this.ucmp(num);
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Unsigned comparison
            BN.prototype.ucmp = function ucmp(num) {
              // At this point both numbers have the same sign
              if (this.length > num.length) return 1;
              if (this.length < num.length) return -1;

              var res = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var a = this.words[i] | 0;
                var b = num.words[i] | 0;

                if (a === b) continue;
                if (a < b) {
                  res = -1;
                } else if (a > b) {
                  res = 1;
                }
                break;
              }
              return res;
            };

            BN.prototype.gtn = function gtn(num) {
              return this.cmpn(num) === 1;
            };

            BN.prototype.gt = function gt(num) {
              return this.cmp(num) === 1;
            };

            BN.prototype.gten = function gten(num) {
              return this.cmpn(num) >= 0;
            };

            BN.prototype.gte = function gte(num) {
              return this.cmp(num) >= 0;
            };

            BN.prototype.ltn = function ltn(num) {
              return this.cmpn(num) === -1;
            };

            BN.prototype.lt = function lt(num) {
              return this.cmp(num) === -1;
            };

            BN.prototype.lten = function lten(num) {
              return this.cmpn(num) <= 0;
            };

            BN.prototype.lte = function lte(num) {
              return this.cmp(num) <= 0;
            };

            BN.prototype.eqn = function eqn(num) {
              return this.cmpn(num) === 0;
            };

            BN.prototype.eq = function eq(num) {
              return this.cmp(num) === 0;
            };

            //
            // A reduce context, could be using montgomery or something better, depending
            // on the `m` itself.
            //
            BN.red = function red(num) {
              return new Red(num);
            };

            BN.prototype.toRed = function toRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              assert(this.negative === 0, 'red works only with positives');
              return ctx.convertTo(this)._forceRed(ctx);
            };

            BN.prototype.fromRed = function fromRed() {
              assert(
                this.red,
                'fromRed works only with numbers in reduction context'
              );
              return this.red.convertFrom(this);
            };

            BN.prototype._forceRed = function _forceRed(ctx) {
              this.red = ctx;
              return this;
            };

            BN.prototype.forceRed = function forceRed(ctx) {
              assert(!this.red, 'Already a number in reduction context');
              return this._forceRed(ctx);
            };

            BN.prototype.redAdd = function redAdd(num) {
              assert(this.red, 'redAdd works only with red numbers');
              return this.red.add(this, num);
            };

            BN.prototype.redIAdd = function redIAdd(num) {
              assert(this.red, 'redIAdd works only with red numbers');
              return this.red.iadd(this, num);
            };

            BN.prototype.redSub = function redSub(num) {
              assert(this.red, 'redSub works only with red numbers');
              return this.red.sub(this, num);
            };

            BN.prototype.redISub = function redISub(num) {
              assert(this.red, 'redISub works only with red numbers');
              return this.red.isub(this, num);
            };

            BN.prototype.redShl = function redShl(num) {
              assert(this.red, 'redShl works only with red numbers');
              return this.red.shl(this, num);
            };

            BN.prototype.redMul = function redMul(num) {
              assert(this.red, 'redMul works only with red numbers');
              this.red._verify2(this, num);
              return this.red.mul(this, num);
            };

            BN.prototype.redIMul = function redIMul(num) {
              assert(this.red, 'redMul works only with red numbers');
              this.red._verify2(this, num);
              return this.red.imul(this, num);
            };

            BN.prototype.redSqr = function redSqr() {
              assert(this.red, 'redSqr works only with red numbers');
              this.red._verify1(this);
              return this.red.sqr(this);
            };

            BN.prototype.redISqr = function redISqr() {
              assert(this.red, 'redISqr works only with red numbers');
              this.red._verify1(this);
              return this.red.isqr(this);
            };

            // Square root over p
            BN.prototype.redSqrt = function redSqrt() {
              assert(this.red, 'redSqrt works only with red numbers');
              this.red._verify1(this);
              return this.red.sqrt(this);
            };

            BN.prototype.redInvm = function redInvm() {
              assert(this.red, 'redInvm works only with red numbers');
              this.red._verify1(this);
              return this.red.invm(this);
            };

            // Return negative clone of `this` % `red modulo`
            BN.prototype.redNeg = function redNeg() {
              assert(this.red, 'redNeg works only with red numbers');
              this.red._verify1(this);
              return this.red.neg(this);
            };

            BN.prototype.redPow = function redPow(num) {
              assert(this.red && !num.red, 'redPow(normalNum)');
              this.red._verify1(this);
              return this.red.pow(this, num);
            };

            // Prime numbers with efficient reduction
            var primes = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null,
            };

            // Pseudo-Mersenne prime
            function MPrime(name, p) {
              // P = 2 ^ N - K
              this.name = name;
              this.p = new BN(p, 16);
              this.n = this.p.bitLength();
              this.k = new BN(1).iushln(this.n).isub(this.p);

              this.tmp = this._tmp();
            }

            MPrime.prototype._tmp = function _tmp() {
              var tmp = new BN(null);
              tmp.words = new Array(Math.ceil(this.n / 13));
              return tmp;
            };

            MPrime.prototype.ireduce = function ireduce(num) {
              // Assumes that `num` is less than `P^2`
              // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
              var r = num;
              var rlen;

              do {
                this.split(r, this.tmp);
                r = this.imulK(r);
                r = r.iadd(this.tmp);
                rlen = r.bitLength();
              } while (rlen > this.n);

              var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
              if (cmp === 0) {
                r.words[0] = 0;
                r.length = 1;
              } else if (cmp > 0) {
                r.isub(this.p);
              } else {
                if (r.strip !== undefined) {
                  // r is BN v4 instance
                  r.strip();
                } else {
                  // r is BN v5 instance
                  r._strip();
                }
              }

              return r;
            };

            MPrime.prototype.split = function split(input, out) {
              input.iushrn(this.n, 0, out);
            };

            MPrime.prototype.imulK = function imulK(num) {
              return num.imul(this.k);
            };

            function K256() {
              MPrime.call(
                this,
                'k256',
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f'
              );
            }
            inherits(K256, MPrime);

            K256.prototype.split = function split(input, output) {
              // 256 = 9 * 26 + 22
              var mask = 0x3fffff;

              var outLen = Math.min(input.length, 9);
              for (var i = 0; i < outLen; i++) {
                output.words[i] = input.words[i];
              }
              output.length = outLen;

              if (input.length <= 9) {
                input.words[0] = 0;
                input.length = 1;
                return;
              }

              // Shift by 9 limbs
              var prev = input.words[9];
              output.words[output.length++] = prev & mask;

              for (i = 10; i < input.length; i++) {
                var next = input.words[i] | 0;
                input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                prev = next;
              }
              prev >>>= 22;
              input.words[i - 10] = prev;
              if (prev === 0 && input.length > 10) {
                input.length -= 10;
              } else {
                input.length -= 9;
              }
            };

            K256.prototype.imulK = function imulK(num) {
              // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
              num.words[num.length] = 0;
              num.words[num.length + 1] = 0;
              num.length += 2;

              // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
              var lo = 0;
              for (var i = 0; i < num.length; i++) {
                var w = num.words[i] | 0;
                lo += w * 0x3d1;
                num.words[i] = lo & 0x3ffffff;
                lo = w * 0x40 + ((lo / 0x4000000) | 0);
              }

              // Fast length reduction
              if (num.words[num.length - 1] === 0) {
                num.length--;
                if (num.words[num.length - 1] === 0) {
                  num.length--;
                }
              }
              return num;
            };

            function P224() {
              MPrime.call(
                this,
                'p224',
                'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001'
              );
            }
            inherits(P224, MPrime);

            function P192() {
              MPrime.call(
                this,
                'p192',
                'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff'
              );
            }
            inherits(P192, MPrime);

            function P25519() {
              // 2 ^ 255 - 19
              MPrime.call(
                this,
                '25519',
                '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed'
              );
            }
            inherits(P25519, MPrime);

            P25519.prototype.imulK = function imulK(num) {
              // K = 0x13
              var carry = 0;
              for (var i = 0; i < num.length; i++) {
                var hi = (num.words[i] | 0) * 0x13 + carry;
                var lo = hi & 0x3ffffff;
                hi >>>= 26;

                num.words[i] = lo;
                carry = hi;
              }
              if (carry !== 0) {
                num.words[num.length++] = carry;
              }
              return num;
            };

            // Exported mostly for testing purposes, use plain name instead
            BN._prime = function prime(name) {
              // Cached version of prime
              if (primes[name]) return primes[name];

              var prime;
              if (name === 'k256') {
                prime = new K256();
              } else if (name === 'p224') {
                prime = new P224();
              } else if (name === 'p192') {
                prime = new P192();
              } else if (name === 'p25519') {
                prime = new P25519();
              } else {
                throw new Error('Unknown prime ' + name);
              }
              primes[name] = prime;

              return prime;
            };

            //
            // Base reduction engine
            //
            function Red(m) {
              if (typeof m === 'string') {
                var prime = BN._prime(m);
                this.m = prime.p;
                this.prime = prime;
              } else {
                assert(m.gtn(1), 'modulus must be greater than 1');
                this.m = m;
                this.prime = null;
              }
            }

            Red.prototype._verify1 = function _verify1(a) {
              assert(a.negative === 0, 'red works only with positives');
              assert(a.red, 'red works only with red numbers');
            };

            Red.prototype._verify2 = function _verify2(a, b) {
              assert(
                (a.negative | b.negative) === 0,
                'red works only with positives'
              );
              assert(
                a.red && a.red === b.red,
                'red works only with red numbers'
              );
            };

            Red.prototype.imod = function imod(a) {
              if (this.prime) return this.prime.ireduce(a)._forceRed(this);
              return a.umod(this.m)._forceRed(this);
            };

            Red.prototype.neg = function neg(a) {
              if (a.isZero()) {
                return a.clone();
              }

              return this.m.sub(a)._forceRed(this);
            };

            Red.prototype.add = function add(a, b) {
              this._verify2(a, b);

              var res = a.add(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.iadd = function iadd(a, b) {
              this._verify2(a, b);

              var res = a.iadd(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res;
            };

            Red.prototype.sub = function sub(a, b) {
              this._verify2(a, b);

              var res = a.sub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.isub = function isub(a, b) {
              this._verify2(a, b);

              var res = a.isub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res;
            };

            Red.prototype.shl = function shl(a, num) {
              this._verify1(a);
              return this.imod(a.ushln(num));
            };

            Red.prototype.imul = function imul(a, b) {
              this._verify2(a, b);
              return this.imod(a.imul(b));
            };

            Red.prototype.mul = function mul(a, b) {
              this._verify2(a, b);
              return this.imod(a.mul(b));
            };

            Red.prototype.isqr = function isqr(a) {
              return this.imul(a, a.clone());
            };

            Red.prototype.sqr = function sqr(a) {
              return this.mul(a, a);
            };

            Red.prototype.sqrt = function sqrt(a) {
              if (a.isZero()) return a.clone();

              var mod3 = this.m.andln(3);
              assert(mod3 % 2 === 1);

              // Fast case
              if (mod3 === 3) {
                var pow = this.m.add(new BN(1)).iushrn(2);
                return this.pow(a, pow);
              }

              // Tonelli-Shanks algorithm (Totally unoptimized and slow)
              //
              // Find Q and S, that Q * 2 ^ S = (P - 1)
              var q = this.m.subn(1);
              var s = 0;
              while (!q.isZero() && q.andln(1) === 0) {
                s++;
                q.iushrn(1);
              }
              assert(!q.isZero());

              var one = new BN(1).toRed(this);
              var nOne = one.redNeg();

              // Find quadratic non-residue
              // NOTE: Max is such because of generalized Riemann hypothesis.
              var lpow = this.m.subn(1).iushrn(1);
              var z = this.m.bitLength();
              z = new BN(2 * z * z).toRed(this);

              while (this.pow(z, lpow).cmp(nOne) !== 0) {
                z.redIAdd(nOne);
              }

              var c = this.pow(z, q);
              var r = this.pow(a, q.addn(1).iushrn(1));
              var t = this.pow(a, q);
              var m = s;
              while (t.cmp(one) !== 0) {
                var tmp = t;
                for (var i = 0; tmp.cmp(one) !== 0; i++) {
                  tmp = tmp.redSqr();
                }
                assert(i < m);
                var b = this.pow(c, new BN(1).iushln(m - i - 1));

                r = r.redMul(b);
                c = b.redSqr();
                t = t.redMul(c);
                m = i;
              }

              return r;
            };

            Red.prototype.invm = function invm(a) {
              var inv = a._invmp(this.m);
              if (inv.negative !== 0) {
                inv.negative = 0;
                return this.imod(inv).redNeg();
              } else {
                return this.imod(inv);
              }
            };

            Red.prototype.pow = function pow(a, num) {
              if (num.isZero()) return new BN(1).toRed(this);
              if (num.cmpn(1) === 0) return a.clone();

              var windowSize = 4;
              var wnd = new Array(1 << windowSize);
              wnd[0] = new BN(1).toRed(this);
              wnd[1] = a;
              for (var i = 2; i < wnd.length; i++) {
                wnd[i] = this.mul(wnd[i - 1], a);
              }

              var res = wnd[0];
              var current = 0;
              var currentLen = 0;
              var start = num.bitLength() % 26;
              if (start === 0) {
                start = 26;
              }

              for (i = num.length - 1; i >= 0; i--) {
                var word = num.words[i];
                for (var j = start - 1; j >= 0; j--) {
                  var bit = (word >> j) & 1;
                  if (res !== wnd[0]) {
                    res = this.sqr(res);
                  }

                  if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                  }

                  current <<= 1;
                  current |= bit;
                  currentLen++;
                  if (currentLen !== windowSize && (i !== 0 || j !== 0))
                    continue;

                  res = this.mul(res, wnd[current]);
                  currentLen = 0;
                  current = 0;
                }
                start = 26;
              }

              return res;
            };

            Red.prototype.convertTo = function convertTo(num) {
              var r = num.umod(this.m);

              return r === num ? r.clone() : r;
            };

            Red.prototype.convertFrom = function convertFrom(num) {
              var res = num.clone();
              res.red = null;
              return res;
            };

            //
            // Montgomery method engine
            //

            BN.mont = function mont(num) {
              return new Mont(num);
            };

            function Mont(m) {
              Red.call(this, m);

              this.shift = this.m.bitLength();
              if (this.shift % 26 !== 0) {
                this.shift += 26 - (this.shift % 26);
              }

              this.r = new BN(1).iushln(this.shift);
              this.r2 = this.imod(this.r.sqr());
              this.rinv = this.r._invmp(this.m);

              this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
              this.minv = this.minv.umod(this.r);
              this.minv = this.r.sub(this.minv);
            }
            inherits(Mont, Red);

            Mont.prototype.convertTo = function convertTo(num) {
              return this.imod(num.ushln(this.shift));
            };

            Mont.prototype.convertFrom = function convertFrom(num) {
              var r = this.imod(num.mul(this.rinv));
              r.red = null;
              return r;
            };

            Mont.prototype.imul = function imul(a, b) {
              if (a.isZero() || b.isZero()) {
                a.words[0] = 0;
                a.length = 1;
                return a;
              }

              var t = a.imul(b);
              var c = t
                .maskn(this.shift)
                .mul(this.minv)
                .imaskn(this.shift)
                .mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;

              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.mul = function mul(a, b) {
              if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

              var t = a.mul(b);
              var c = t
                .maskn(this.shift)
                .mul(this.minv)
                .imaskn(this.shift)
                .mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;
              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.invm = function invm(a) {
              // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
              var res = this.imod(a._invmp(this.m).mul(this.r2));
              return res._forceRed(this);
            };
          })(typeof module === 'undefined' || module, this);
        },
        { buffer: 182 },
      ],
      86: [
        function (require, module, exports) {
          var r;

          module.exports = function rand(len) {
            if (!r) r = new Rand(null);

            return r.generate(len);
          };

          function Rand(rand) {
            this.rand = rand;
          }
          module.exports.Rand = Rand;

          Rand.prototype.generate = function generate(len) {
            return this._rand(len);
          };

          // Emulate crypto API using randy
          Rand.prototype._rand = function _rand(n) {
            if (this.rand.getBytes) return this.rand.getBytes(n);

            var res = new Uint8Array(n);
            for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
            return res;
          };

          if (typeof self === 'object') {
            if (self.crypto && self.crypto.getRandomValues) {
              // Modern browsers
              Rand.prototype._rand = function _rand(n) {
                var arr = new Uint8Array(n);
                self.crypto.getRandomValues(arr);
                return arr;
              };
            } else if (self.msCrypto && self.msCrypto.getRandomValues) {
              // IE
              Rand.prototype._rand = function _rand(n) {
                var arr = new Uint8Array(n);
                self.msCrypto.getRandomValues(arr);
                return arr;
              };

              // Safari's WebWorkers do not have `crypto`
            } else if (typeof window === 'object') {
              // Old junk
              Rand.prototype._rand = function () {
                throw new Error('Not implemented yet');
              };
            }
          } else {
            // Node.js or Web worker with no crypto support
            try {
              var crypto = require('crypto');
              if (typeof crypto.randomBytes !== 'function')
                throw new Error('Not supported');

              Rand.prototype._rand = function _rand(n) {
                return crypto.randomBytes(n);
              };
            } catch (e) {}
          }
        },
        { crypto: 182 },
      ],
      87: [
        function (require, module, exports) {
          var basex = require('base-x');
          var ALPHABET =
            '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

          module.exports = basex(ALPHABET);
        },
        { 'base-x': 1 },
      ],
      88: [
        function (require, module, exports) {
          'use strict';

          var base58 = require('bs58');
          var Buffer = require('safe-buffer').Buffer;

          module.exports = function (checksumFn) {
            // Encode a buffer as a base58-check encoded string
            function encode(payload) {
              var checksum = checksumFn(payload);

              return base58.encode(
                Buffer.concat([payload, checksum], payload.length + 4)
              );
            }

            function decodeRaw(buffer) {
              var payload = buffer.slice(0, -4);
              var checksum = buffer.slice(-4);
              var newChecksum = checksumFn(payload);

              if (
                (checksum[0] ^ newChecksum[0]) |
                (checksum[1] ^ newChecksum[1]) |
                (checksum[2] ^ newChecksum[2]) |
                (checksum[3] ^ newChecksum[3])
              )
                return;

              return payload;
            }

            // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
            function decodeUnsafe(string) {
              var buffer = base58.decodeUnsafe(string);
              if (!buffer) return;

              return decodeRaw(buffer);
            }

            function decode(string) {
              var buffer = base58.decode(string);
              var payload = decodeRaw(buffer, checksumFn);
              if (!payload) throw new Error('Invalid checksum');
              return payload;
            }

            return {
              encode: encode,
              decode: decode,
              decodeUnsafe: decodeUnsafe,
            };
          };
        },
        { bs58: 87, 'safe-buffer': 158 },
      ],
      89: [
        function (require, module, exports) {
          'use strict';

          var createHash = require('create-hash');
          var bs58checkBase = require('./base');

          // SHA256(SHA256(buffer))
          function sha256x2(buffer) {
            var tmp = createHash('sha256').update(buffer).digest();
            return createHash('sha256').update(tmp).digest();
          }

          module.exports = bs58checkBase(sha256x2);
        },
        { './base': 88, 'create-hash': 91 },
      ],
      90: [
        function (require, module, exports) {
          var Buffer = require('safe-buffer').Buffer;
          var Transform = require('stream').Transform;
          var StringDecoder = require('string_decoder').StringDecoder;
          var inherits = require('inherits');

          function CipherBase(hashMode) {
            Transform.call(this);
            this.hashMode = typeof hashMode === 'string';
            if (this.hashMode) {
              this[hashMode] = this._finalOrDigest;
            } else {
              this.final = this._finalOrDigest;
            }
            if (this._final) {
              this.__final = this._final;
              this._final = null;
            }
            this._decoder = null;
            this._encoding = null;
          }
          inherits(CipherBase, Transform);

          CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
            if (typeof data === 'string') {
              data = Buffer.from(data, inputEnc);
            }

            var outData = this._update(data);
            if (this.hashMode) return this;

            if (outputEnc) {
              outData = this._toString(outData, outputEnc);
            }

            return outData;
          };

          CipherBase.prototype.setAutoPadding = function () {};
          CipherBase.prototype.getAuthTag = function () {
            throw new Error('trying to get auth tag in unsupported state');
          };

          CipherBase.prototype.setAuthTag = function () {
            throw new Error('trying to set auth tag in unsupported state');
          };

          CipherBase.prototype.setAAD = function () {
            throw new Error('trying to set aad in unsupported state');
          };

          CipherBase.prototype._transform = function (data, _, next) {
            var err;
            try {
              if (this.hashMode) {
                this._update(data);
              } else {
                this.push(this._update(data));
              }
            } catch (e) {
              err = e;
            } finally {
              next(err);
            }
          };
          CipherBase.prototype._flush = function (done) {
            var err;
            try {
              this.push(this.__final());
            } catch (e) {
              err = e;
            }

            done(err);
          };
          CipherBase.prototype._finalOrDigest = function (outputEnc) {
            var outData = this.__final() || Buffer.alloc(0);
            if (outputEnc) {
              outData = this._toString(outData, outputEnc, true);
            }
            return outData;
          };

          CipherBase.prototype._toString = function (value, enc, fin) {
            if (!this._decoder) {
              this._decoder = new StringDecoder(enc);
              this._encoding = enc;
            }

            if (this._encoding !== enc)
              throw new Error("can't switch encodings");

            var out = this._decoder.write(value);
            if (fin) {
              out += this._decoder.end();
            }

            return out;
          };

          module.exports = CipherBase;
        },
        { inherits: 130, 'safe-buffer': 158, stream: 191, string_decoder: 206 },
      ],
      91: [
        function (require, module, exports) {
          'use strict';
          var inherits = require('inherits');
          var MD5 = require('md5.js');
          var RIPEMD160 = require('ripemd160');
          var sha = require('sha.js');
          var Base = require('cipher-base');

          function Hash(hash) {
            Base.call(this, 'digest');

            this._hash = hash;
          }

          inherits(Hash, Base);

          Hash.prototype._update = function (data) {
            this._hash.update(data);
          };

          Hash.prototype._final = function () {
            return this._hash.digest();
          };

          module.exports = function createHash(alg) {
            alg = alg.toLowerCase();
            if (alg === 'md5') return new MD5();
            if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();

            return new Hash(sha(alg));
          };
        },
        {
          'cipher-base': 90,
          inherits: 130,
          'md5.js': 132,
          ripemd160: 157,
          'sha.js': 160,
        },
      ],
      92: [
        function (require, module, exports) {
          var MD5 = require('md5.js');

          module.exports = function (buffer) {
            return new MD5().update(buffer).digest();
          };
        },
        { 'md5.js': 132 },
      ],
      93: [
        function (require, module, exports) {
          'use strict';
          var inherits = require('inherits');
          var Legacy = require('./legacy');
          var Base = require('cipher-base');
          var Buffer = require('safe-buffer').Buffer;
          var md5 = require('create-hash/md5');
          var RIPEMD160 = require('ripemd160');

          var sha = require('sha.js');

          var ZEROS = Buffer.alloc(128);

          function Hmac(alg, key) {
            Base.call(this, 'digest');
            if (typeof key === 'string') {
              key = Buffer.from(key);
            }

            var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

            this._alg = alg;
            this._key = key;
            if (key.length > blocksize) {
              var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
              key = hash.update(key).digest();
            } else if (key.length < blocksize) {
              key = Buffer.concat([key, ZEROS], blocksize);
            }

            var ipad = (this._ipad = Buffer.allocUnsafe(blocksize));
            var opad = (this._opad = Buffer.allocUnsafe(blocksize));

            for (var i = 0; i < blocksize; i++) {
              ipad[i] = key[i] ^ 0x36;
              opad[i] = key[i] ^ 0x5c;
            }
            this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
            this._hash.update(ipad);
          }

          inherits(Hmac, Base);

          Hmac.prototype._update = function (data) {
            this._hash.update(data);
          };

          Hmac.prototype._final = function () {
            var h = this._hash.digest();
            var hash =
              this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
            return hash.update(this._opad).update(h).digest();
          };

          module.exports = function createHmac(alg, key) {
            alg = alg.toLowerCase();
            if (alg === 'rmd160' || alg === 'ripemd160') {
              return new Hmac('rmd160', key);
            }
            if (alg === 'md5') {
              return new Legacy(md5, key);
            }
            return new Hmac(alg, key);
          };
        },
        {
          './legacy': 94,
          'cipher-base': 90,
          'create-hash/md5': 92,
          inherits: 130,
          ripemd160: 157,
          'safe-buffer': 158,
          'sha.js': 160,
        },
      ],
      94: [
        function (require, module, exports) {
          'use strict';
          var inherits = require('inherits');
          var Buffer = require('safe-buffer').Buffer;

          var Base = require('cipher-base');

          var ZEROS = Buffer.alloc(128);
          var blocksize = 64;

          function Hmac(alg, key) {
            Base.call(this, 'digest');
            if (typeof key === 'string') {
              key = Buffer.from(key);
            }

            this._alg = alg;
            this._key = key;

            if (key.length > blocksize) {
              key = alg(key);
            } else if (key.length < blocksize) {
              key = Buffer.concat([key, ZEROS], blocksize);
            }

            var ipad = (this._ipad = Buffer.allocUnsafe(blocksize));
            var opad = (this._opad = Buffer.allocUnsafe(blocksize));

            for (var i = 0; i < blocksize; i++) {
              ipad[i] = key[i] ^ 0x36;
              opad[i] = key[i] ^ 0x5c;
            }

            this._hash = [ipad];
          }

          inherits(Hmac, Base);

          Hmac.prototype._update = function (data) {
            this._hash.push(data);
          };

          Hmac.prototype._final = function () {
            var h = this._alg(Buffer.concat(this._hash));
            return this._alg(Buffer.concat([this._opad, h]));
          };
          module.exports = Hmac;
        },
        { 'cipher-base': 90, inherits: 130, 'safe-buffer': 158 },
      ],
      95: [
        function (require, module, exports) {
          var assert = require('assert');
          var BigInteger = require('bigi');

          var Point = require('./point');

          function Curve(p, a, b, Gx, Gy, n, h) {
            this.p = p;
            this.a = a;
            this.b = b;
            this.G = Point.fromAffine(this, Gx, Gy);
            this.n = n;
            this.h = h;

            this.infinity = new Point(this, null, null, BigInteger.ZERO);

            // result caching
            this.pOverFour = p.add(BigInteger.ONE).shiftRight(2);

            // determine size of p in bytes
            this.pLength = Math.floor((this.p.bitLength() + 7) / 8);
          }

          Curve.prototype.pointFromX = function (isOdd, x) {
            var alpha = x
              .pow(3)
              .add(this.a.multiply(x))
              .add(this.b)
              .mod(this.p);
            var beta = alpha.modPow(this.pOverFour, this.p); // XXX: not compatible with all curves

            var y = beta;
            if (beta.isEven() ^ !isOdd) {
              y = this.p.subtract(y); // -y % p
            }

            return Point.fromAffine(this, x, y);
          };

          Curve.prototype.isInfinity = function (Q) {
            if (Q === this.infinity) return true;

            return Q.z.signum() === 0 && Q.y.signum() !== 0;
          };

          Curve.prototype.isOnCurve = function (Q) {
            if (this.isInfinity(Q)) return true;

            var x = Q.affineX;
            var y = Q.affineY;
            var a = this.a;
            var b = this.b;
            var p = this.p;

            // Check that xQ and yQ are integers in the interval [0, p - 1]
            if (x.signum() < 0 || x.compareTo(p) >= 0) return false;
            if (y.signum() < 0 || y.compareTo(p) >= 0) return false;

            // and check that y^2 = x^3 + ax + b (mod p)
            var lhs = y.square().mod(p);
            var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p);
            return lhs.equals(rhs);
          };

          /**
           * Validate an elliptic curve point.
           *
           * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
           */
          Curve.prototype.validate = function (Q) {
            // Check Q != O
            assert(!this.isInfinity(Q), 'Point is at infinity');
            assert(this.isOnCurve(Q), 'Point is not on the curve');

            // Check nQ = O (where Q is a scalar multiple of G)
            var nQ = Q.multiply(this.n);
            assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G');

            return true;
          };

          module.exports = Curve;
        },
        { './point': 99, assert: 177, bigi: 5 },
      ],
      96: [
        function (require, module, exports) {
          module.exports = {
            secp128r1: {
              p: 'fffffffdffffffffffffffffffffffff',
              a: 'fffffffdfffffffffffffffffffffffc',
              b: 'e87579c11079f43dd824993c2cee5ed3',
              n: 'fffffffe0000000075a30d1b9038a115',
              h: '01',
              Gx: '161ff7528b899b2d0c28607ca52c5b86',
              Gy: 'cf5ac8395bafeb13c02da292dded7a83',
            },
            secp160k1: {
              p: 'fffffffffffffffffffffffffffffffeffffac73',
              a: '00',
              b: '07',
              n: '0100000000000000000001b8fa16dfab9aca16b6b3',
              h: '01',
              Gx: '3b4c382ce37aa192a4019e763036f4f5dd4d7ebb',
              Gy: '938cf935318fdced6bc28286531733c3f03c4fee',
            },
            secp160r1: {
              p: 'ffffffffffffffffffffffffffffffff7fffffff',
              a: 'ffffffffffffffffffffffffffffffff7ffffffc',
              b: '1c97befc54bd7a8b65acf89f81d4d4adc565fa45',
              n: '0100000000000000000001f4c8f927aed3ca752257',
              h: '01',
              Gx: '4a96b5688ef573284664698968c38bb913cbfc82',
              Gy: '23a628553168947d59dcc912042351377ac5fb32',
            },
            secp192k1: {
              p: 'fffffffffffffffffffffffffffffffffffffffeffffee37',
              a: '00',
              b: '03',
              n: 'fffffffffffffffffffffffe26f2fc170f69466a74defd8d',
              h: '01',
              Gx: 'db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d',
              Gy: '9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d',
            },
            secp192r1: {
              p: 'fffffffffffffffffffffffffffffffeffffffffffffffff',
              a: 'fffffffffffffffffffffffffffffffefffffffffffffffc',
              b: '64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1',
              n: 'ffffffffffffffffffffffff99def836146bc9b1b4d22831',
              h: '01',
              Gx: '188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012',
              Gy: '07192b95ffc8da78631011ed6b24cdd573f977a11e794811',
            },
            secp256k1: {
              p: 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f',
              a: '00',
              b: '07',
              n: 'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141',
              h: '01',
              Gx: '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
              Gy: '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
            },
            secp256r1: {
              p: 'ffffffff00000001000000000000000000000000ffffffffffffffffffffffff',
              a: 'ffffffff00000001000000000000000000000000fffffffffffffffffffffffc',
              b: '5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b',
              n: 'ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551',
              h: '01',
              Gx: '6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296',
              Gy: '4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5',
            },
          };
        },
        {},
      ],
      97: [
        function (require, module, exports) {
          var Point = require('./point');
          var Curve = require('./curve');

          var getCurveByName = require('./names');

          module.exports = {
            Curve: Curve,
            Point: Point,
            getCurveByName: getCurveByName,
          };
        },
        { './curve': 95, './names': 98, './point': 99 },
      ],
      98: [
        function (require, module, exports) {
          var BigInteger = require('bigi');

          var curves = require('./curves.json');
          var Curve = require('./curve');

          function getCurveByName(name) {
            var curve = curves[name];
            if (!curve) return null;

            var p = new BigInteger(curve.p, 16);
            var a = new BigInteger(curve.a, 16);
            var b = new BigInteger(curve.b, 16);
            var n = new BigInteger(curve.n, 16);
            var h = new BigInteger(curve.h, 16);
            var Gx = new BigInteger(curve.Gx, 16);
            var Gy = new BigInteger(curve.Gy, 16);

            return new Curve(p, a, b, Gx, Gy, n, h);
          }

          module.exports = getCurveByName;
        },
        { './curve': 95, './curves.json': 96, bigi: 5 },
      ],
      99: [
        function (require, module, exports) {
          var assert = require('assert');
          var Buffer = require('safe-buffer').Buffer;
          var BigInteger = require('bigi');

          var THREE = BigInteger.valueOf(3);

          function Point(curve, x, y, z) {
            assert.notStrictEqual(z, undefined, 'Missing Z coordinate');

            this.curve = curve;
            this.x = x;
            this.y = y;
            this.z = z;
            this._zInv = null;

            this.compressed = true;
          }

          Object.defineProperty(Point.prototype, 'zInv', {
            get: function () {
              if (this._zInv === null) {
                this._zInv = this.z.modInverse(this.curve.p);
              }

              return this._zInv;
            },
          });

          Object.defineProperty(Point.prototype, 'affineX', {
            get: function () {
              return this.x.multiply(this.zInv).mod(this.curve.p);
            },
          });

          Object.defineProperty(Point.prototype, 'affineY', {
            get: function () {
              return this.y.multiply(this.zInv).mod(this.curve.p);
            },
          });

          Point.fromAffine = function (curve, x, y) {
            return new Point(curve, x, y, BigInteger.ONE);
          };

          Point.prototype.equals = function (other) {
            if (other === this) return true;
            if (this.curve.isInfinity(this))
              return this.curve.isInfinity(other);
            if (this.curve.isInfinity(other))
              return this.curve.isInfinity(this);

            // u = Y2 * Z1 - Y1 * Z2
            var u = other.y
              .multiply(this.z)
              .subtract(this.y.multiply(other.z))
              .mod(this.curve.p);

            if (u.signum() !== 0) return false;

            // v = X2 * Z1 - X1 * Z2
            var v = other.x
              .multiply(this.z)
              .subtract(this.x.multiply(other.z))
              .mod(this.curve.p);

            return v.signum() === 0;
          };

          Point.prototype.negate = function () {
            var y = this.curve.p.subtract(this.y);

            return new Point(this.curve, this.x, y, this.z);
          };

          Point.prototype.add = function (b) {
            if (this.curve.isInfinity(this)) return b;
            if (this.curve.isInfinity(b)) return this;

            var x1 = this.x;
            var y1 = this.y;
            var x2 = b.x;
            var y2 = b.y;

            // u = Y2 * Z1 - Y1 * Z2
            var u = y2
              .multiply(this.z)
              .subtract(y1.multiply(b.z))
              .mod(this.curve.p);
            // v = X2 * Z1 - X1 * Z2
            var v = x2
              .multiply(this.z)
              .subtract(x1.multiply(b.z))
              .mod(this.curve.p);

            if (v.signum() === 0) {
              if (u.signum() === 0) {
                return this.twice(); // this == b, so double
              }

              return this.curve.infinity; // this = -b, so infinity
            }

            var v2 = v.square();
            var v3 = v2.multiply(v);
            var x1v2 = x1.multiply(v2);
            var zu2 = u.square().multiply(this.z);

            // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
            var x3 = zu2
              .subtract(x1v2.shiftLeft(1))
              .multiply(b.z)
              .subtract(v3)
              .multiply(v)
              .mod(this.curve.p);
            // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
            var y3 = x1v2
              .multiply(THREE)
              .multiply(u)
              .subtract(y1.multiply(v3))
              .subtract(zu2.multiply(u))
              .multiply(b.z)
              .add(u.multiply(v3))
              .mod(this.curve.p);
            // z3 = v^3 * z1 * z2
            var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p);

            return new Point(this.curve, x3, y3, z3);
          };

          Point.prototype.twice = function () {
            if (this.curve.isInfinity(this)) return this;
            if (this.y.signum() === 0) return this.curve.infinity;

            var x1 = this.x;
            var y1 = this.y;

            var y1z1 = y1.multiply(this.z).mod(this.curve.p);
            var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p);
            var a = this.curve.a;

            // w = 3 * x1^2 + a * z1^2
            var w = x1.square().multiply(THREE);

            if (a.signum() !== 0) {
              w = w.add(this.z.square().multiply(a));
            }

            w = w.mod(this.curve.p);
            // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
            var x3 = w
              .square()
              .subtract(x1.shiftLeft(3).multiply(y1sqz1))
              .shiftLeft(1)
              .multiply(y1z1)
              .mod(this.curve.p);
            // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
            var y3 = w
              .multiply(THREE)
              .multiply(x1)
              .subtract(y1sqz1.shiftLeft(1))
              .shiftLeft(2)
              .multiply(y1sqz1)
              .subtract(w.pow(3))
              .mod(this.curve.p);
            // z3 = 8 * (y1 * z1)^3
            var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p);

            return new Point(this.curve, x3, y3, z3);
          };

          // Simple NAF (Non-Adjacent Form) multiplication algorithm
          // TODO: modularize the multiplication algorithm
          Point.prototype.multiply = function (k) {
            if (this.curve.isInfinity(this)) return this;
            if (k.signum() === 0) return this.curve.infinity;

            var e = k;
            var h = e.multiply(THREE);

            var neg = this.negate();
            var R = this;

            for (var i = h.bitLength() - 2; i > 0; --i) {
              var hBit = h.testBit(i);
              var eBit = e.testBit(i);

              R = R.twice();

              if (hBit !== eBit) {
                R = R.add(hBit ? this : neg);
              }
            }

            return R;
          };

          // Compute this*j + x*k (simultaneous multiplication)
          Point.prototype.multiplyTwo = function (j, x, k) {
            var i = Math.max(j.bitLength(), k.bitLength()) - 1;
            var R = this.curve.infinity;
            var both = this.add(x);

            while (i >= 0) {
              var jBit = j.testBit(i);
              var kBit = k.testBit(i);

              R = R.twice();

              if (jBit) {
                if (kBit) {
                  R = R.add(both);
                } else {
                  R = R.add(this);
                }
              } else if (kBit) {
                R = R.add(x);
              }
              --i;
            }

            return R;
          };

          Point.prototype.getEncoded = function (compressed) {
            if (compressed == null) compressed = this.compressed;
            if (this.curve.isInfinity(this)) return Buffer.alloc(1, 0); // Infinity point encoded is simply '00'

            var x = this.affineX;
            var y = this.affineY;
            var byteLength = this.curve.pLength;
            var buffer;

            // 0x02/0x03 | X
            if (compressed) {
              buffer = Buffer.allocUnsafe(1 + byteLength);
              buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0);

              // 0x04 | X | Y
            } else {
              buffer = Buffer.allocUnsafe(1 + byteLength + byteLength);
              buffer.writeUInt8(0x04, 0);

              y.toBuffer(byteLength).copy(buffer, 1 + byteLength);
            }

            x.toBuffer(byteLength).copy(buffer, 1);

            return buffer;
          };

          Point.decodeFrom = function (curve, buffer) {
            var type = buffer.readUInt8(0);
            var compressed = type !== 4;

            var byteLength = Math.floor((curve.p.bitLength() + 7) / 8);
            var x = BigInteger.fromBuffer(buffer.slice(1, 1 + byteLength));

            var Q;
            if (compressed) {
              assert.equal(
                buffer.length,
                byteLength + 1,
                'Invalid sequence length'
              );
              assert(type === 0x02 || type === 0x03, 'Invalid sequence tag');

              var isOdd = type === 0x03;
              Q = curve.pointFromX(isOdd, x);
            } else {
              assert.equal(
                buffer.length,
                1 + byteLength + byteLength,
                'Invalid sequence length'
              );

              var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength));
              Q = Point.fromAffine(curve, x, y);
            }

            Q.compressed = compressed;
            return Q;
          };

          Point.prototype.toString = function () {
            if (this.curve.isInfinity(this)) return '(INFINITY)';

            return (
              '(' +
              this.affineX.toString() +
              ',' +
              this.affineY.toString() +
              ')'
            );
          };

          module.exports = Point;
        },
        { assert: 177, bigi: 5, 'safe-buffer': 158 },
      ],
      100: [
        function (require, module, exports) {
          'use strict';

          var elliptic = exports;

          elliptic.version = require('../package.json').version;
          elliptic.utils = require('./elliptic/utils');
          elliptic.rand = require('brorand');
          elliptic.curve = require('./elliptic/curve');
          elliptic.curves = require('./elliptic/curves');

          // Protocols
          elliptic.ec = require('./elliptic/ec');
          elliptic.eddsa = require('./elliptic/eddsa');
        },
        {
          '../package.json': 115,
          './elliptic/curve': 103,
          './elliptic/curves': 106,
          './elliptic/ec': 107,
          './elliptic/eddsa': 110,
          './elliptic/utils': 114,
          brorand: 86,
        },
      ],
      101: [
        function (require, module, exports) {
          'use strict';

          var BN = require('bn.js');
          var utils = require('../utils');
          var getNAF = utils.getNAF;
          var getJSF = utils.getJSF;
          var assert = utils.assert;

          function BaseCurve(type, conf) {
            this.type = type;
            this.p = new BN(conf.p, 16);

            // Use Montgomery, when there is no fast reduction for the prime
            this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

            // Useful for many curves
            this.zero = new BN(0).toRed(this.red);
            this.one = new BN(1).toRed(this.red);
            this.two = new BN(2).toRed(this.red);

            // Curve configuration, optional
            this.n = conf.n && new BN(conf.n, 16);
            this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

            // Temporary arrays
            this._wnafT1 = new Array(4);
            this._wnafT2 = new Array(4);
            this._wnafT3 = new Array(4);
            this._wnafT4 = new Array(4);

            this._bitLength = this.n ? this.n.bitLength() : 0;

            // Generalized Greg Maxwell's trick
            var adjustCount = this.n && this.p.div(this.n);
            if (!adjustCount || adjustCount.cmpn(100) > 0) {
              this.redN = null;
            } else {
              this._maxwellTrick = true;
              this.redN = this.n.toRed(this.red);
            }
          }
          module.exports = BaseCurve;

          BaseCurve.prototype.point = function point() {
            throw new Error('Not implemented');
          };

          BaseCurve.prototype.validate = function validate() {
            throw new Error('Not implemented');
          };

          BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
            assert(p.precomputed);
            var doubles = p._getDoubles();

            var naf = getNAF(k, 1, this._bitLength);
            var I =
              (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
            I /= 3;

            // Translate into more windowed form
            var repr = [];
            var j;
            var nafW;
            for (j = 0; j < naf.length; j += doubles.step) {
              nafW = 0;
              for (var l = j + doubles.step - 1; l >= j; l--)
                nafW = (nafW << 1) + naf[l];
              repr.push(nafW);
            }

            var a = this.jpoint(null, null, null);
            var b = this.jpoint(null, null, null);
            for (var i = I; i > 0; i--) {
              for (j = 0; j < repr.length; j++) {
                nafW = repr[j];
                if (nafW === i) b = b.mixedAdd(doubles.points[j]);
                else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
              }
              a = a.add(b);
            }
            return a.toP();
          };

          BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
            var w = 4;

            // Precompute window
            var nafPoints = p._getNAFPoints(w);
            w = nafPoints.wnd;
            var wnd = nafPoints.points;

            // Get NAF form
            var naf = getNAF(k, w, this._bitLength);

            // Add `this`*(N+1) for every w-NAF index
            var acc = this.jpoint(null, null, null);
            for (var i = naf.length - 1; i >= 0; i--) {
              // Count zeroes
              for (var l = 0; i >= 0 && naf[i] === 0; i--) l++;
              if (i >= 0) l++;
              acc = acc.dblp(l);

              if (i < 0) break;
              var z = naf[i];
              assert(z !== 0);
              if (p.type === 'affine') {
                // J +- P
                if (z > 0) acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                else acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
              } else {
                // J +- J
                if (z > 0) acc = acc.add(wnd[(z - 1) >> 1]);
                else acc = acc.add(wnd[(-z - 1) >> 1].neg());
              }
            }
            return p.type === 'affine' ? acc.toP() : acc;
          };

          BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(
            defW,
            points,
            coeffs,
            len,
            jacobianResult
          ) {
            var wndWidth = this._wnafT1;
            var wnd = this._wnafT2;
            var naf = this._wnafT3;

            // Fill all arrays
            var max = 0;
            var i;
            var j;
            var p;
            for (i = 0; i < len; i++) {
              p = points[i];
              var nafPoints = p._getNAFPoints(defW);
              wndWidth[i] = nafPoints.wnd;
              wnd[i] = nafPoints.points;
            }

            // Comb small window NAFs
            for (i = len - 1; i >= 1; i -= 2) {
              var a = i - 1;
              var b = i;
              if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                max = Math.max(naf[a].length, max);
                max = Math.max(naf[b].length, max);
                continue;
              }

              var comb = [
                points[a] /* 1 */,
                null /* 3 */,
                null /* 5 */,
                points[b] /* 7 */,
              ];

              // Try to avoid Projective points, if possible
              if (points[a].y.cmp(points[b].y) === 0) {
                comb[1] = points[a].add(points[b]);
                comb[2] = points[a].toJ().mixedAdd(points[b].neg());
              } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                comb[1] = points[a].toJ().mixedAdd(points[b]);
                comb[2] = points[a].add(points[b].neg());
              } else {
                comb[1] = points[a].toJ().mixedAdd(points[b]);
                comb[2] = points[a].toJ().mixedAdd(points[b].neg());
              }

              var index = [
                -3 /* -1 -1 */, -1 /* -1 0 */, -5 /* -1 1 */, -7 /* 0 -1 */,
                0 /* 0 0 */, 7 /* 0 1 */, 5 /* 1 -1 */, 1 /* 1 0 */,
                3 /* 1 1 */,
              ];

              var jsf = getJSF(coeffs[a], coeffs[b]);
              max = Math.max(jsf[0].length, max);
              naf[a] = new Array(max);
              naf[b] = new Array(max);
              for (j = 0; j < max; j++) {
                var ja = jsf[0][j] | 0;
                var jb = jsf[1][j] | 0;

                naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                naf[b][j] = 0;
                wnd[a] = comb;
              }
            }

            var acc = this.jpoint(null, null, null);
            var tmp = this._wnafT4;
            for (i = max; i >= 0; i--) {
              var k = 0;

              while (i >= 0) {
                var zero = true;
                for (j = 0; j < len; j++) {
                  tmp[j] = naf[j][i] | 0;
                  if (tmp[j] !== 0) zero = false;
                }
                if (!zero) break;
                k++;
                i--;
              }
              if (i >= 0) k++;
              acc = acc.dblp(k);
              if (i < 0) break;

              for (j = 0; j < len; j++) {
                var z = tmp[j];
                p;
                if (z === 0) continue;
                else if (z > 0) p = wnd[j][(z - 1) >> 1];
                else if (z < 0) p = wnd[j][(-z - 1) >> 1].neg();

                if (p.type === 'affine') acc = acc.mixedAdd(p);
                else acc = acc.add(p);
              }
            }
            // Zeroify references
            for (i = 0; i < len; i++) wnd[i] = null;

            if (jacobianResult) return acc;
            else return acc.toP();
          };

          function BasePoint(curve, type) {
            this.curve = curve;
            this.type = type;
            this.precomputed = null;
          }
          BaseCurve.BasePoint = BasePoint;

          BasePoint.prototype.eq = function eq(/*other*/) {
            throw new Error('Not implemented');
          };

          BasePoint.prototype.validate = function validate() {
            return this.curve.validate(this);
          };

          BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            bytes = utils.toArray(bytes, enc);

            var len = this.p.byteLength();

            // uncompressed, hybrid-odd, hybrid-even
            if (
              (bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
              bytes.length - 1 === 2 * len
            ) {
              if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
              else if (bytes[0] === 0x07)
                assert(bytes[bytes.length - 1] % 2 === 1);

              var res = this.point(
                bytes.slice(1, 1 + len),
                bytes.slice(1 + len, 1 + 2 * len)
              );

              return res;
            } else if (
              (bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len
            ) {
              return this.pointFromX(
                bytes.slice(1, 1 + len),
                bytes[0] === 0x03
              );
            }
            throw new Error('Unknown point format');
          };

          BasePoint.prototype.encodeCompressed = function encodeCompressed(
            enc
          ) {
            return this.encode(enc, true);
          };

          BasePoint.prototype._encode = function _encode(compact) {
            var len = this.curve.p.byteLength();
            var x = this.getX().toArray('be', len);

            if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

            return [0x04].concat(x, this.getY().toArray('be', len));
          };

          BasePoint.prototype.encode = function encode(enc, compact) {
            return utils.encode(this._encode(compact), enc);
          };

          BasePoint.prototype.precompute = function precompute(power) {
            if (this.precomputed) return this;

            var precomputed = {
              doubles: null,
              naf: null,
              beta: null,
            };
            precomputed.naf = this._getNAFPoints(8);
            precomputed.doubles = this._getDoubles(4, power);
            precomputed.beta = this._getBeta();
            this.precomputed = precomputed;

            return this;
          };

          BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
            if (!this.precomputed) return false;

            var doubles = this.precomputed.doubles;
            if (!doubles) return false;

            return (
              doubles.points.length >=
              Math.ceil((k.bitLength() + 1) / doubles.step)
            );
          };

          BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
            if (this.precomputed && this.precomputed.doubles)
              return this.precomputed.doubles;

            var doubles = [this];
            var acc = this;
            for (var i = 0; i < power; i += step) {
              for (var j = 0; j < step; j++) acc = acc.dbl();
              doubles.push(acc);
            }
            return {
              step: step,
              points: doubles,
            };
          };

          BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
            if (this.precomputed && this.precomputed.naf)
              return this.precomputed.naf;

            var res = [this];
            var max = (1 << wnd) - 1;
            var dbl = max === 1 ? null : this.dbl();
            for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
            return {
              wnd: wnd,
              points: res,
            };
          };

          BasePoint.prototype._getBeta = function _getBeta() {
            return null;
          };

          BasePoint.prototype.dblp = function dblp(k) {
            var r = this;
            for (var i = 0; i < k; i++) r = r.dbl();
            return r;
          };
        },
        { '../utils': 114, 'bn.js': 85 },
      ],
      102: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var BN = require('bn.js');
          var inherits = require('inherits');
          var Base = require('./base');

          var assert = utils.assert;

          function EdwardsCurve(conf) {
            // NOTE: Important as we are creating point in Base.call()
            this.twisted = (conf.a | 0) !== 1;
            this.mOneA = this.twisted && (conf.a | 0) === -1;
            this.extended = this.mOneA;

            Base.call(this, 'edwards', conf);

            this.a = new BN(conf.a, 16).umod(this.red.m);
            this.a = this.a.toRed(this.red);
            this.c = new BN(conf.c, 16).toRed(this.red);
            this.c2 = this.c.redSqr();
            this.d = new BN(conf.d, 16).toRed(this.red);
            this.dd = this.d.redAdd(this.d);

            assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
            this.oneC = (conf.c | 0) === 1;
          }
          inherits(EdwardsCurve, Base);
          module.exports = EdwardsCurve;

          EdwardsCurve.prototype._mulA = function _mulA(num) {
            if (this.mOneA) return num.redNeg();
            else return this.a.redMul(num);
          };

          EdwardsCurve.prototype._mulC = function _mulC(num) {
            if (this.oneC) return num;
            else return this.c.redMul(num);
          };

          // Just for compatibility with Short curve
          EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
            return this.point(x, y, z, t);
          };

          EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red) x = x.toRed(this.red);

            var x2 = x.redSqr();
            var rhs = this.c2.redSub(this.a.redMul(x2));
            var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

            var y2 = rhs.redMul(lhs.redInvm());
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
              throw new Error('invalid point');

            var isOdd = y.fromRed().isOdd();
            if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

            return this.point(x, y);
          };

          EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
            y = new BN(y, 16);
            if (!y.red) y = y.toRed(this.red);

            // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
            var y2 = y.redSqr();
            var lhs = y2.redSub(this.c2);
            var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
            var x2 = lhs.redMul(rhs.redInvm());

            if (x2.cmp(this.zero) === 0) {
              if (odd) throw new Error('invalid point');
              else return this.point(this.zero, y);
            }

            var x = x2.redSqrt();
            if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
              throw new Error('invalid point');

            if (x.fromRed().isOdd() !== odd) x = x.redNeg();

            return this.point(x, y);
          };

          EdwardsCurve.prototype.validate = function validate(point) {
            if (point.isInfinity()) return true;

            // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
            point.normalize();

            var x2 = point.x.redSqr();
            var y2 = point.y.redSqr();
            var lhs = x2.redMul(this.a).redAdd(y2);
            var rhs = this.c2.redMul(
              this.one.redAdd(this.d.redMul(x2).redMul(y2))
            );

            return lhs.cmp(rhs) === 0;
          };

          function Point(curve, x, y, z, t) {
            Base.BasePoint.call(this, curve, 'projective');
            if (x === null && y === null && z === null) {
              this.x = this.curve.zero;
              this.y = this.curve.one;
              this.z = this.curve.one;
              this.t = this.curve.zero;
              this.zOne = true;
            } else {
              this.x = new BN(x, 16);
              this.y = new BN(y, 16);
              this.z = z ? new BN(z, 16) : this.curve.one;
              this.t = t && new BN(t, 16);
              if (!this.x.red) this.x = this.x.toRed(this.curve.red);
              if (!this.y.red) this.y = this.y.toRed(this.curve.red);
              if (!this.z.red) this.z = this.z.toRed(this.curve.red);
              if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
              this.zOne = this.z === this.curve.one;

              // Use extended coordinates
              if (this.curve.extended && !this.t) {
                this.t = this.x.redMul(this.y);
                if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
              }
            }
          }
          inherits(Point, Base.BasePoint);

          EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
          };

          EdwardsCurve.prototype.point = function point(x, y, z, t) {
            return new Point(this, x, y, z, t);
          };

          Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1], obj[2]);
          };

          Point.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC Point Infinity>';
            return (
              '<EC Point x: ' +
              this.x.fromRed().toString(16, 2) +
              ' y: ' +
              this.y.fromRed().toString(16, 2) +
              ' z: ' +
              this.z.fromRed().toString(16, 2) +
              '>'
            );
          };

          Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return (
              this.x.cmpn(0) === 0 &&
              (this.y.cmp(this.z) === 0 ||
                (this.zOne && this.y.cmp(this.curve.c) === 0))
            );
          };

          Point.prototype._extDbl = function _extDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #doubling-dbl-2008-hwcd
            // 4M + 4S

            // A = X1^2
            var a = this.x.redSqr();
            // B = Y1^2
            var b = this.y.redSqr();
            // C = 2 * Z1^2
            var c = this.z.redSqr();
            c = c.redIAdd(c);
            // D = a * A
            var d = this.curve._mulA(a);
            // E = (X1 + Y1)^2 - A - B
            var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
            // G = D + B
            var g = d.redAdd(b);
            // F = G - C
            var f = g.redSub(c);
            // H = D - B
            var h = d.redSub(b);
            // X3 = E * F
            var nx = e.redMul(f);
            // Y3 = G * H
            var ny = g.redMul(h);
            // T3 = E * H
            var nt = e.redMul(h);
            // Z3 = F * G
            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
          };

          Point.prototype._projDbl = function _projDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #doubling-dbl-2008-bbjlp
            //     #doubling-dbl-2007-bl
            // and others
            // Generally 3M + 4S or 2M + 4S

            // B = (X1 + Y1)^2
            var b = this.x.redAdd(this.y).redSqr();
            // C = X1^2
            var c = this.x.redSqr();
            // D = Y1^2
            var d = this.y.redSqr();

            var nx;
            var ny;
            var nz;
            var e;
            var h;
            var j;
            if (this.curve.twisted) {
              // E = a * C
              e = this.curve._mulA(c);
              // F = E + D
              var f = e.redAdd(d);
              if (this.zOne) {
                // X3 = (B - C - D) * (F - 2)
                nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
                // Y3 = F * (E - D)
                ny = f.redMul(e.redSub(d));
                // Z3 = F^2 - 2 * F
                nz = f.redSqr().redSub(f).redSub(f);
              } else {
                // H = Z1^2
                h = this.z.redSqr();
                // J = F - 2 * H
                j = f.redSub(h).redISub(h);
                // X3 = (B-C-D)*J
                nx = b.redSub(c).redISub(d).redMul(j);
                // Y3 = F * (E - D)
                ny = f.redMul(e.redSub(d));
                // Z3 = F * J
                nz = f.redMul(j);
              }
            } else {
              // E = C + D
              e = c.redAdd(d);
              // H = (c * Z1)^2
              h = this.curve._mulC(this.z).redSqr();
              // J = E - 2 * H
              j = e.redSub(h).redSub(h);
              // X3 = c * (B - E) * J
              nx = this.curve._mulC(b.redISub(e)).redMul(j);
              // Y3 = c * E * (C - D)
              ny = this.curve._mulC(e).redMul(c.redISub(d));
              // Z3 = E * J
              nz = e.redMul(j);
            }
            return this.curve.point(nx, ny, nz);
          };

          Point.prototype.dbl = function dbl() {
            if (this.isInfinity()) return this;

            // Double in extended coordinates
            if (this.curve.extended) return this._extDbl();
            else return this._projDbl();
          };

          Point.prototype._extAdd = function _extAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #addition-add-2008-hwcd-3
            // 8M

            // A = (Y1 - X1) * (Y2 - X2)
            var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
            // B = (Y1 + X1) * (Y2 + X2)
            var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
            // C = T1 * k * T2
            var c = this.t.redMul(this.curve.dd).redMul(p.t);
            // D = Z1 * 2 * Z2
            var d = this.z.redMul(p.z.redAdd(p.z));
            // E = B - A
            var e = b.redSub(a);
            // F = D - C
            var f = d.redSub(c);
            // G = D + C
            var g = d.redAdd(c);
            // H = B + A
            var h = b.redAdd(a);
            // X3 = E * F
            var nx = e.redMul(f);
            // Y3 = G * H
            var ny = g.redMul(h);
            // T3 = E * H
            var nt = e.redMul(h);
            // Z3 = F * G
            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
          };

          Point.prototype._projAdd = function _projAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #addition-add-2008-bbjlp
            //     #addition-add-2007-bl
            // 10M + 1S

            // A = Z1 * Z2
            var a = this.z.redMul(p.z);
            // B = A^2
            var b = a.redSqr();
            // C = X1 * X2
            var c = this.x.redMul(p.x);
            // D = Y1 * Y2
            var d = this.y.redMul(p.y);
            // E = d * C * D
            var e = this.curve.d.redMul(c).redMul(d);
            // F = B - E
            var f = b.redSub(e);
            // G = B + E
            var g = b.redAdd(e);
            // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
            var tmp = this.x
              .redAdd(this.y)
              .redMul(p.x.redAdd(p.y))
              .redISub(c)
              .redISub(d);
            var nx = a.redMul(f).redMul(tmp);
            var ny;
            var nz;
            if (this.curve.twisted) {
              // Y3 = A * G * (D - a * C)
              ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
              // Z3 = F * G
              nz = f.redMul(g);
            } else {
              // Y3 = A * G * (D - C)
              ny = a.redMul(g).redMul(d.redSub(c));
              // Z3 = c * F * G
              nz = this.curve._mulC(f).redMul(g);
            }
            return this.curve.point(nx, ny, nz);
          };

          Point.prototype.add = function add(p) {
            if (this.isInfinity()) return p;
            if (p.isInfinity()) return this;

            if (this.curve.extended) return this._extAdd(p);
            else return this._projAdd(p);
          };

          Point.prototype.mul = function mul(k) {
            if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
            else return this.curve._wnafMul(this, k);
          };

          Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
          };

          Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
          };

          Point.prototype.normalize = function normalize() {
            if (this.zOne) return this;

            // Normalize coordinates
            var zi = this.z.redInvm();
            this.x = this.x.redMul(zi);
            this.y = this.y.redMul(zi);
            if (this.t) this.t = this.t.redMul(zi);
            this.z = this.curve.one;
            this.zOne = true;
            return this;
          };

          Point.prototype.neg = function neg() {
            return this.curve.point(
              this.x.redNeg(),
              this.y,
              this.z,
              this.t && this.t.redNeg()
            );
          };

          Point.prototype.getX = function getX() {
            this.normalize();
            return this.x.fromRed();
          };

          Point.prototype.getY = function getY() {
            this.normalize();
            return this.y.fromRed();
          };

          Point.prototype.eq = function eq(other) {
            return (
              this === other ||
              (this.getX().cmp(other.getX()) === 0 &&
                this.getY().cmp(other.getY()) === 0)
            );
          };

          Point.prototype.eqXToP = function eqXToP(x) {
            var rx = x.toRed(this.curve.red).redMul(this.z);
            if (this.x.cmp(rx) === 0) return true;

            var xc = x.clone();
            var t = this.curve.redN.redMul(this.z);
            for (;;) {
              xc.iadd(this.curve.n);
              if (xc.cmp(this.curve.p) >= 0) return false;

              rx.redIAdd(t);
              if (this.x.cmp(rx) === 0) return true;
            }
          };

          // Compatibility with BaseCurve
          Point.prototype.toP = Point.prototype.normalize;
          Point.prototype.mixedAdd = Point.prototype.add;
        },
        { '../utils': 114, './base': 101, 'bn.js': 85, inherits: 130 },
      ],
      103: [
        function (require, module, exports) {
          'use strict';

          var curve = exports;

          curve.base = require('./base');
          curve.short = require('./short');
          curve.mont = require('./mont');
          curve.edwards = require('./edwards');
        },
        { './base': 101, './edwards': 102, './mont': 104, './short': 105 },
      ],
      104: [
        function (require, module, exports) {
          'use strict';

          var BN = require('bn.js');
          var inherits = require('inherits');
          var Base = require('./base');

          var utils = require('../utils');

          function MontCurve(conf) {
            Base.call(this, 'mont', conf);

            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.i4 = new BN(4).toRed(this.red).redInvm();
            this.two = new BN(2).toRed(this.red);
            this.a24 = this.i4.redMul(this.a.redAdd(this.two));
          }
          inherits(MontCurve, Base);
          module.exports = MontCurve;

          MontCurve.prototype.validate = function validate(point) {
            var x = point.normalize().x;
            var x2 = x.redSqr();
            var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
            var y = rhs.redSqrt();

            return y.redSqr().cmp(rhs) === 0;
          };

          function Point(curve, x, z) {
            Base.BasePoint.call(this, curve, 'projective');
            if (x === null && z === null) {
              this.x = this.curve.one;
              this.z = this.curve.zero;
            } else {
              this.x = new BN(x, 16);
              this.z = new BN(z, 16);
              if (!this.x.red) this.x = this.x.toRed(this.curve.red);
              if (!this.z.red) this.z = this.z.toRed(this.curve.red);
            }
          }
          inherits(Point, Base.BasePoint);

          MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            return this.point(utils.toArray(bytes, enc), 1);
          };

          MontCurve.prototype.point = function point(x, z) {
            return new Point(this, x, z);
          };

          MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
          };

          Point.prototype.precompute = function precompute() {
            // No-op
          };

          Point.prototype._encode = function _encode() {
            return this.getX().toArray('be', this.curve.p.byteLength());
          };

          Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1] || curve.one);
          };

          Point.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC Point Infinity>';
            return (
              '<EC Point x: ' +
              this.x.fromRed().toString(16, 2) +
              ' z: ' +
              this.z.fromRed().toString(16, 2) +
              '>'
            );
          };

          Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
          };

          Point.prototype.dbl = function dbl() {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
            // 2M + 2S + 4A

            // A = X1 + Z1
            var a = this.x.redAdd(this.z);
            // AA = A^2
            var aa = a.redSqr();
            // B = X1 - Z1
            var b = this.x.redSub(this.z);
            // BB = B^2
            var bb = b.redSqr();
            // C = AA - BB
            var c = aa.redSub(bb);
            // X3 = AA * BB
            var nx = aa.redMul(bb);
            // Z3 = C * (BB + A24 * C)
            var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
            return this.curve.point(nx, nz);
          };

          Point.prototype.add = function add() {
            throw new Error('Not supported on Montgomery curve');
          };

          Point.prototype.diffAdd = function diffAdd(p, diff) {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
            // 4M + 2S + 6A

            // A = X2 + Z2
            var a = this.x.redAdd(this.z);
            // B = X2 - Z2
            var b = this.x.redSub(this.z);
            // C = X3 + Z3
            var c = p.x.redAdd(p.z);
            // D = X3 - Z3
            var d = p.x.redSub(p.z);
            // DA = D * A
            var da = d.redMul(a);
            // CB = C * B
            var cb = c.redMul(b);
            // X5 = Z1 * (DA + CB)^2
            var nx = diff.z.redMul(da.redAdd(cb).redSqr());
            // Z5 = X1 * (DA - CB)^2
            var nz = diff.x.redMul(da.redISub(cb).redSqr());
            return this.curve.point(nx, nz);
          };

          Point.prototype.mul = function mul(k) {
            var t = k.clone();
            var a = this; // (N / 2) * Q + Q
            var b = this.curve.point(null, null); // (N / 2) * Q
            var c = this; // Q

            for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
              bits.push(t.andln(1));

            for (var i = bits.length - 1; i >= 0; i--) {
              if (bits[i] === 0) {
                // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                a = a.diffAdd(b, c);
                // N * Q = 2 * ((N / 2) * Q + Q))
                b = b.dbl();
              } else {
                // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                b = a.diffAdd(b, c);
                // N * Q + Q = 2 * ((N / 2) * Q + Q)
                a = a.dbl();
              }
            }
            return b;
          };

          Point.prototype.mulAdd = function mulAdd() {
            throw new Error('Not supported on Montgomery curve');
          };

          Point.prototype.jumlAdd = function jumlAdd() {
            throw new Error('Not supported on Montgomery curve');
          };

          Point.prototype.eq = function eq(other) {
            return this.getX().cmp(other.getX()) === 0;
          };

          Point.prototype.normalize = function normalize() {
            this.x = this.x.redMul(this.z.redInvm());
            this.z = this.curve.one;
            return this;
          };

          Point.prototype.getX = function getX() {
            // Normalize coordinates
            this.normalize();

            return this.x.fromRed();
          };
        },
        { '../utils': 114, './base': 101, 'bn.js': 85, inherits: 130 },
      ],
      105: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var BN = require('bn.js');
          var inherits = require('inherits');
          var Base = require('./base');

          var assert = utils.assert;

          function ShortCurve(conf) {
            Base.call(this, 'short', conf);

            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.tinv = this.two.redInvm();

            this.zeroA = this.a.fromRed().cmpn(0) === 0;
            this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

            // If the curve is endomorphic, precalculate beta and lambda
            this.endo = this._getEndomorphism(conf);
            this._endoWnafT1 = new Array(4);
            this._endoWnafT2 = new Array(4);
          }
          inherits(ShortCurve, Base);
          module.exports = ShortCurve;

          ShortCurve.prototype._getEndomorphism = function _getEndomorphism(
            conf
          ) {
            // No efficient endomorphism
            if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
              return;

            // Compute beta and lambda, that lambda * P = (beta * Px; Py)
            var beta;
            var lambda;
            if (conf.beta) {
              beta = new BN(conf.beta, 16).toRed(this.red);
            } else {
              var betas = this._getEndoRoots(this.p);
              // Choose the smallest beta
              beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
              beta = beta.toRed(this.red);
            }
            if (conf.lambda) {
              lambda = new BN(conf.lambda, 16);
            } else {
              // Choose the lambda that is matching selected beta
              var lambdas = this._getEndoRoots(this.n);
              if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                lambda = lambdas[0];
              } else {
                lambda = lambdas[1];
                assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
              }
            }

            // Get basis vectors, used for balanced length-two representation
            var basis;
            if (conf.basis) {
              basis = conf.basis.map(function (vec) {
                return {
                  a: new BN(vec.a, 16),
                  b: new BN(vec.b, 16),
                };
              });
            } else {
              basis = this._getEndoBasis(lambda);
            }

            return {
              beta: beta,
              lambda: lambda,
              basis: basis,
            };
          };

          ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
            // Find roots of for x^2 + x + 1 in F
            // Root = (-1 +- Sqrt(-3)) / 2
            //
            var red = num === this.p ? this.red : BN.mont(num);
            var tinv = new BN(2).toRed(red).redInvm();
            var ntinv = tinv.redNeg();

            var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

            var l1 = ntinv.redAdd(s).fromRed();
            var l2 = ntinv.redSub(s).fromRed();
            return [l1, l2];
          };

          ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
            // aprxSqrt >= sqrt(this.n)
            var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

            // 3.74
            // Run EGCD, until r(L + 1) < aprxSqrt
            var u = lambda;
            var v = this.n.clone();
            var x1 = new BN(1);
            var y1 = new BN(0);
            var x2 = new BN(0);
            var y2 = new BN(1);

            // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
            var a0;
            var b0;
            // First vector
            var a1;
            var b1;
            // Second vector
            var a2;
            var b2;

            var prevR;
            var i = 0;
            var r;
            var x;
            while (u.cmpn(0) !== 0) {
              var q = v.div(u);
              r = v.sub(q.mul(u));
              x = x2.sub(q.mul(x1));
              var y = y2.sub(q.mul(y1));

              if (!a1 && r.cmp(aprxSqrt) < 0) {
                a0 = prevR.neg();
                b0 = x1;
                a1 = r.neg();
                b1 = x;
              } else if (a1 && ++i === 2) {
                break;
              }
              prevR = r;

              v = u;
              u = r;
              x2 = x1;
              x1 = x;
              y2 = y1;
              y1 = y;
            }
            a2 = r.neg();
            b2 = x;

            var len1 = a1.sqr().add(b1.sqr());
            var len2 = a2.sqr().add(b2.sqr());
            if (len2.cmp(len1) >= 0) {
              a2 = a0;
              b2 = b0;
            }

            // Normalize signs
            if (a1.negative) {
              a1 = a1.neg();
              b1 = b1.neg();
            }
            if (a2.negative) {
              a2 = a2.neg();
              b2 = b2.neg();
            }

            return [
              { a: a1, b: b1 },
              { a: a2, b: b2 },
            ];
          };

          ShortCurve.prototype._endoSplit = function _endoSplit(k) {
            var basis = this.endo.basis;
            var v1 = basis[0];
            var v2 = basis[1];

            var c1 = v2.b.mul(k).divRound(this.n);
            var c2 = v1.b.neg().mul(k).divRound(this.n);

            var p1 = c1.mul(v1.a);
            var p2 = c2.mul(v2.a);
            var q1 = c1.mul(v1.b);
            var q2 = c2.mul(v2.b);

            // Calculate answer
            var k1 = k.sub(p1).sub(p2);
            var k2 = q1.add(q2).neg();
            return { k1: k1, k2: k2 };
          };

          ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red) x = x.toRed(this.red);

            var y2 = x
              .redSqr()
              .redMul(x)
              .redIAdd(x.redMul(this.a))
              .redIAdd(this.b);
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
              throw new Error('invalid point');

            // XXX Is there any way to tell if the number is odd without converting it
            // to non-red form?
            var isOdd = y.fromRed().isOdd();
            if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

            return this.point(x, y);
          };

          ShortCurve.prototype.validate = function validate(point) {
            if (point.inf) return true;

            var x = point.x;
            var y = point.y;

            var ax = this.a.redMul(x);
            var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
            return y.redSqr().redISub(rhs).cmpn(0) === 0;
          };

          ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(
            points,
            coeffs,
            jacobianResult
          ) {
            var npoints = this._endoWnafT1;
            var ncoeffs = this._endoWnafT2;
            for (var i = 0; i < points.length; i++) {
              var split = this._endoSplit(coeffs[i]);
              var p = points[i];
              var beta = p._getBeta();

              if (split.k1.negative) {
                split.k1.ineg();
                p = p.neg(true);
              }
              if (split.k2.negative) {
                split.k2.ineg();
                beta = beta.neg(true);
              }

              npoints[i * 2] = p;
              npoints[i * 2 + 1] = beta;
              ncoeffs[i * 2] = split.k1;
              ncoeffs[i * 2 + 1] = split.k2;
            }
            var res = this._wnafMulAdd(
              1,
              npoints,
              ncoeffs,
              i * 2,
              jacobianResult
            );

            // Clean-up references to points and coefficients
            for (var j = 0; j < i * 2; j++) {
              npoints[j] = null;
              ncoeffs[j] = null;
            }
            return res;
          };

          function Point(curve, x, y, isRed) {
            Base.BasePoint.call(this, curve, 'affine');
            if (x === null && y === null) {
              this.x = null;
              this.y = null;
              this.inf = true;
            } else {
              this.x = new BN(x, 16);
              this.y = new BN(y, 16);
              // Force redgomery representation when loading from JSON
              if (isRed) {
                this.x.forceRed(this.curve.red);
                this.y.forceRed(this.curve.red);
              }
              if (!this.x.red) this.x = this.x.toRed(this.curve.red);
              if (!this.y.red) this.y = this.y.toRed(this.curve.red);
              this.inf = false;
            }
          }
          inherits(Point, Base.BasePoint);

          ShortCurve.prototype.point = function point(x, y, isRed) {
            return new Point(this, x, y, isRed);
          };

          ShortCurve.prototype.pointFromJSON = function pointFromJSON(
            obj,
            red
          ) {
            return Point.fromJSON(this, obj, red);
          };

          Point.prototype._getBeta = function _getBeta() {
            if (!this.curve.endo) return;

            var pre = this.precomputed;
            if (pre && pre.beta) return pre.beta;

            var beta = this.curve.point(
              this.x.redMul(this.curve.endo.beta),
              this.y
            );
            if (pre) {
              var curve = this.curve;
              var endoMul = function (p) {
                return curve.point(p.x.redMul(curve.endo.beta), p.y);
              };
              pre.beta = beta;
              beta.precomputed = {
                beta: null,
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(endoMul),
                },
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(endoMul),
                },
              };
            }
            return beta;
          };

          Point.prototype.toJSON = function toJSON() {
            if (!this.precomputed) return [this.x, this.y];

            return [
              this.x,
              this.y,
              this.precomputed && {
                doubles: this.precomputed.doubles && {
                  step: this.precomputed.doubles.step,
                  points: this.precomputed.doubles.points.slice(1),
                },
                naf: this.precomputed.naf && {
                  wnd: this.precomputed.naf.wnd,
                  points: this.precomputed.naf.points.slice(1),
                },
              },
            ];
          };

          Point.fromJSON = function fromJSON(curve, obj, red) {
            if (typeof obj === 'string') obj = JSON.parse(obj);
            var res = curve.point(obj[0], obj[1], red);
            if (!obj[2]) return res;

            function obj2point(obj) {
              return curve.point(obj[0], obj[1], red);
            }

            var pre = obj[2];
            res.precomputed = {
              beta: null,
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: [res].concat(pre.doubles.points.map(obj2point)),
              },
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: [res].concat(pre.naf.points.map(obj2point)),
              },
            };
            return res;
          };

          Point.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC Point Infinity>';
            return (
              '<EC Point x: ' +
              this.x.fromRed().toString(16, 2) +
              ' y: ' +
              this.y.fromRed().toString(16, 2) +
              '>'
            );
          };

          Point.prototype.isInfinity = function isInfinity() {
            return this.inf;
          };

          Point.prototype.add = function add(p) {
            // O + P = P
            if (this.inf) return p;

            // P + O = P
            if (p.inf) return this;

            // P + P = 2P
            if (this.eq(p)) return this.dbl();

            // P + (-P) = O
            if (this.neg().eq(p)) return this.curve.point(null, null);

            // P + Q = O
            if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

            var c = this.y.redSub(p.y);
            if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
            var nx = c.redSqr().redISub(this.x).redISub(p.x);
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
          };

          Point.prototype.dbl = function dbl() {
            if (this.inf) return this;

            // 2P = O
            var ys1 = this.y.redAdd(this.y);
            if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

            var a = this.curve.a;

            var x2 = this.x.redSqr();
            var dyinv = ys1.redInvm();
            var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

            var nx = c.redSqr().redISub(this.x.redAdd(this.x));
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
          };

          Point.prototype.getX = function getX() {
            return this.x.fromRed();
          };

          Point.prototype.getY = function getY() {
            return this.y.fromRed();
          };

          Point.prototype.mul = function mul(k) {
            k = new BN(k, 16);
            if (this.isInfinity()) return this;
            else if (this._hasDoubles(k))
              return this.curve._fixedNafMul(this, k);
            else if (this.curve.endo)
              return this.curve._endoWnafMulAdd([this], [k]);
            else return this.curve._wnafMul(this, k);
          };

          Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
            var points = [this, p2];
            var coeffs = [k1, k2];
            if (this.curve.endo)
              return this.curve._endoWnafMulAdd(points, coeffs);
            else return this.curve._wnafMulAdd(1, points, coeffs, 2);
          };

          Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
            var points = [this, p2];
            var coeffs = [k1, k2];
            if (this.curve.endo)
              return this.curve._endoWnafMulAdd(points, coeffs, true);
            else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
          };

          Point.prototype.eq = function eq(p) {
            return (
              this === p ||
              (this.inf === p.inf &&
                (this.inf || (this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0)))
            );
          };

          Point.prototype.neg = function neg(_precompute) {
            if (this.inf) return this;

            var res = this.curve.point(this.x, this.y.redNeg());
            if (_precompute && this.precomputed) {
              var pre = this.precomputed;
              var negate = function (p) {
                return p.neg();
              };
              res.precomputed = {
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(negate),
                },
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(negate),
                },
              };
            }
            return res;
          };

          Point.prototype.toJ = function toJ() {
            if (this.inf) return this.curve.jpoint(null, null, null);

            var res = this.curve.jpoint(this.x, this.y, this.curve.one);
            return res;
          };

          function JPoint(curve, x, y, z) {
            Base.BasePoint.call(this, curve, 'jacobian');
            if (x === null && y === null && z === null) {
              this.x = this.curve.one;
              this.y = this.curve.one;
              this.z = new BN(0);
            } else {
              this.x = new BN(x, 16);
              this.y = new BN(y, 16);
              this.z = new BN(z, 16);
            }
            if (!this.x.red) this.x = this.x.toRed(this.curve.red);
            if (!this.y.red) this.y = this.y.toRed(this.curve.red);
            if (!this.z.red) this.z = this.z.toRed(this.curve.red);

            this.zOne = this.z === this.curve.one;
          }
          inherits(JPoint, Base.BasePoint);

          ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
            return new JPoint(this, x, y, z);
          };

          JPoint.prototype.toP = function toP() {
            if (this.isInfinity()) return this.curve.point(null, null);

            var zinv = this.z.redInvm();
            var zinv2 = zinv.redSqr();
            var ax = this.x.redMul(zinv2);
            var ay = this.y.redMul(zinv2).redMul(zinv);

            return this.curve.point(ax, ay);
          };

          JPoint.prototype.neg = function neg() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          };

          JPoint.prototype.add = function add(p) {
            // O + P = P
            if (this.isInfinity()) return p;

            // P + O = P
            if (p.isInfinity()) return this;

            // 12M + 4S + 7A
            var pz2 = p.z.redSqr();
            var z2 = this.z.redSqr();
            var u1 = this.x.redMul(pz2);
            var u2 = p.x.redMul(z2);
            var s1 = this.y.redMul(pz2.redMul(p.z));
            var s2 = p.y.redMul(z2.redMul(this.z));

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
              if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
              else return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(p.z).redMul(h);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.mixedAdd = function mixedAdd(p) {
            // O + P = P
            if (this.isInfinity()) return p.toJ();

            // P + O = P
            if (p.isInfinity()) return this;

            // 8M + 3S + 7A
            var z2 = this.z.redSqr();
            var u1 = this.x;
            var u2 = p.x.redMul(z2);
            var s1 = this.y;
            var s2 = p.y.redMul(z2).redMul(this.z);

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
              if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
              else return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(h);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.dblp = function dblp(pow) {
            if (pow === 0) return this;
            if (this.isInfinity()) return this;
            if (!pow) return this.dbl();

            var i;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (i = 0; i < pow; i++) r = r.dbl();
              return r;
            }

            // 1M + 2S + 1A + N * (4S + 5M + 8A)
            // N = 1 => 6M + 6S + 9A
            var a = this.curve.a;
            var tinv = this.curve.tinv;

            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            // Reuse results
            var jyd = jy.redAdd(jy);
            for (i = 0; i < pow; i++) {
              var jx2 = jx.redSqr();
              var jyd2 = jyd.redSqr();
              var jyd4 = jyd2.redSqr();
              var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

              var t1 = jx.redMul(jyd2);
              var nx = c.redSqr().redISub(t1.redAdd(t1));
              var t2 = t1.redISub(nx);
              var dny = c.redMul(t2);
              dny = dny.redIAdd(dny).redISub(jyd4);
              var nz = jyd.redMul(jz);
              if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

              jx = nx;
              jz = nz;
              jyd = dny;
            }

            return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
          };

          JPoint.prototype.dbl = function dbl() {
            if (this.isInfinity()) return this;

            if (this.curve.zeroA) return this._zeroDbl();
            else if (this.curve.threeA) return this._threeDbl();
            else return this._dbl();
          };

          JPoint.prototype._zeroDbl = function _zeroDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
              //     #doubling-mdbl-2007-bl
              // 1M + 5S + 14A

              // XX = X1^2
              var xx = this.x.redSqr();
              // YY = Y1^2
              var yy = this.y.redSqr();
              // YYYY = YY^2
              var yyyy = yy.redSqr();
              // S = 2 * ((X1 + YY)^2 - XX - YYYY)
              var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              s = s.redIAdd(s);
              // M = 3 * XX + a; a = 0
              var m = xx.redAdd(xx).redIAdd(xx);
              // T = M ^ 2 - 2*S
              var t = m.redSqr().redISub(s).redISub(s);

              // 8 * YYYY
              var yyyy8 = yyyy.redIAdd(yyyy);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              yyyy8 = yyyy8.redIAdd(yyyy8);

              // X3 = T
              nx = t;
              // Y3 = M * (S - T) - 8 * YYYY
              ny = m.redMul(s.redISub(t)).redISub(yyyy8);
              // Z3 = 2*Y1
              nz = this.y.redAdd(this.y);
            } else {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
              //     #doubling-dbl-2009-l
              // 2M + 5S + 13A

              // A = X1^2
              var a = this.x.redSqr();
              // B = Y1^2
              var b = this.y.redSqr();
              // C = B^2
              var c = b.redSqr();
              // D = 2 * ((X1 + B)^2 - A - C)
              var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
              d = d.redIAdd(d);
              // E = 3 * A
              var e = a.redAdd(a).redIAdd(a);
              // F = E^2
              var f = e.redSqr();

              // 8 * C
              var c8 = c.redIAdd(c);
              c8 = c8.redIAdd(c8);
              c8 = c8.redIAdd(c8);

              // X3 = F - 2 * D
              nx = f.redISub(d).redISub(d);
              // Y3 = E * (D - X3) - 8 * C
              ny = e.redMul(d.redISub(nx)).redISub(c8);
              // Z3 = 2 * Y1 * Z1
              nz = this.y.redMul(this.z);
              nz = nz.redIAdd(nz);
            }

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype._threeDbl = function _threeDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
              //     #doubling-mdbl-2007-bl
              // 1M + 5S + 15A

              // XX = X1^2
              var xx = this.x.redSqr();
              // YY = Y1^2
              var yy = this.y.redSqr();
              // YYYY = YY^2
              var yyyy = yy.redSqr();
              // S = 2 * ((X1 + YY)^2 - XX - YYYY)
              var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              s = s.redIAdd(s);
              // M = 3 * XX + a
              var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
              // T = M^2 - 2 * S
              var t = m.redSqr().redISub(s).redISub(s);
              // X3 = T
              nx = t;
              // Y3 = M * (S - T) - 8 * YYYY
              var yyyy8 = yyyy.redIAdd(yyyy);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              ny = m.redMul(s.redISub(t)).redISub(yyyy8);
              // Z3 = 2 * Y1
              nz = this.y.redAdd(this.y);
            } else {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
              // 3M + 5S

              // delta = Z1^2
              var delta = this.z.redSqr();
              // gamma = Y1^2
              var gamma = this.y.redSqr();
              // beta = X1 * gamma
              var beta = this.x.redMul(gamma);
              // alpha = 3 * (X1 - delta) * (X1 + delta)
              var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
              alpha = alpha.redAdd(alpha).redIAdd(alpha);
              // X3 = alpha^2 - 8 * beta
              var beta4 = beta.redIAdd(beta);
              beta4 = beta4.redIAdd(beta4);
              var beta8 = beta4.redAdd(beta4);
              nx = alpha.redSqr().redISub(beta8);
              // Z3 = (Y1 + Z1)^2 - gamma - delta
              nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
              // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
              var ggamma8 = gamma.redSqr();
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
            }

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype._dbl = function _dbl() {
            var a = this.curve.a;

            // 4M + 6S + 10A
            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            var jx2 = jx.redSqr();
            var jy2 = jy.redSqr();

            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

            var jxd4 = jx.redAdd(jx);
            jxd4 = jxd4.redIAdd(jxd4);
            var t1 = jxd4.redMul(jy2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);

            var jyd8 = jy2.redSqr();
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            var ny = c.redMul(t2).redISub(jyd8);
            var nz = jy.redAdd(jy).redMul(jz);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.trpl = function trpl() {
            if (!this.curve.zeroA) return this.dbl().add(this);

            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
            // 5M + 10S + ...

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // ZZ = Z1^2
            var zz = this.z.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // M = 3 * XX + a * ZZ2; a = 0
            var m = xx.redAdd(xx).redIAdd(xx);
            // MM = M^2
            var mm = m.redSqr();
            // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
            var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            e = e.redIAdd(e);
            e = e.redAdd(e).redIAdd(e);
            e = e.redISub(mm);
            // EE = E^2
            var ee = e.redSqr();
            // T = 16*YYYY
            var t = yyyy.redIAdd(yyyy);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            // U = (M + E)^2 - MM - EE - T
            var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
            // X3 = 4 * (X1 * EE - 4 * YY * U)
            var yyu4 = yy.redMul(u);
            yyu4 = yyu4.redIAdd(yyu4);
            yyu4 = yyu4.redIAdd(yyu4);
            var nx = this.x.redMul(ee).redISub(yyu4);
            nx = nx.redIAdd(nx);
            nx = nx.redIAdd(nx);
            // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
            var ny = this.y.redMul(
              u.redMul(t.redISub(u)).redISub(e.redMul(ee))
            );
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            // Z3 = (Z1 + E)^2 - ZZ - EE
            var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.mul = function mul(k, kbase) {
            k = new BN(k, kbase);

            return this.curve._wnafMul(this, k);
          };

          JPoint.prototype.eq = function eq(p) {
            if (p.type === 'affine') return this.eq(p.toJ());

            if (this === p) return true;

            // x1 * z2^2 == x2 * z1^2
            var z2 = this.z.redSqr();
            var pz2 = p.z.redSqr();
            if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
              return false;

            // y1 * z2^3 == y2 * z1^3
            var z3 = z2.redMul(this.z);
            var pz3 = pz2.redMul(p.z);
            return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
          };

          JPoint.prototype.eqXToP = function eqXToP(x) {
            var zs = this.z.redSqr();
            var rx = x.toRed(this.curve.red).redMul(zs);
            if (this.x.cmp(rx) === 0) return true;

            var xc = x.clone();
            var t = this.curve.redN.redMul(zs);
            for (;;) {
              xc.iadd(this.curve.n);
              if (xc.cmp(this.curve.p) >= 0) return false;

              rx.redIAdd(t);
              if (this.x.cmp(rx) === 0) return true;
            }
          };

          JPoint.prototype.inspect = function inspect() {
            if (this.isInfinity()) return '<EC JPoint Infinity>';
            return (
              '<EC JPoint x: ' +
              this.x.toString(16, 2) +
              ' y: ' +
              this.y.toString(16, 2) +
              ' z: ' +
              this.z.toString(16, 2) +
              '>'
            );
          };

          JPoint.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
          };
        },
        { '../utils': 114, './base': 101, 'bn.js': 85, inherits: 130 },
      ],
      106: [
        function (require, module, exports) {
          'use strict';

          var curves = exports;

          var hash = require('hash.js');
          var curve = require('./curve');
          var utils = require('./utils');

          var assert = utils.assert;

          function PresetCurve(options) {
            if (options.type === 'short') this.curve = new curve.short(options);
            else if (options.type === 'edwards')
              this.curve = new curve.edwards(options);
            else this.curve = new curve.mont(options);
            this.g = this.curve.g;
            this.n = this.curve.n;
            this.hash = options.hash;

            assert(this.g.validate(), 'Invalid curve');
            assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
          }
          curves.PresetCurve = PresetCurve;

          function defineCurve(name, options) {
            Object.defineProperty(curves, name, {
              configurable: true,
              enumerable: true,
              get: function () {
                var curve = new PresetCurve(options);
                Object.defineProperty(curves, name, {
                  configurable: true,
                  enumerable: true,
                  value: curve,
                });
                return curve;
              },
            });
          }

          defineCurve('p192', {
            type: 'short',
            prime: 'p192',
            p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
            b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
            n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
            hash: hash.sha256,
            gRed: false,
            g: [
              '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
              '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
            ],
          });

          defineCurve('p224', {
            type: 'short',
            prime: 'p224',
            p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
            b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
            n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
            hash: hash.sha256,
            gRed: false,
            g: [
              'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
              'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
            ],
          });

          defineCurve('p256', {
            type: 'short',
            prime: null,
            p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
            a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
            b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
            n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
            hash: hash.sha256,
            gRed: false,
            g: [
              '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
              '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
            ],
          });

          defineCurve('p384', {
            type: 'short',
            prime: null,
            p:
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
              'fffffffe ffffffff 00000000 00000000 ffffffff',
            a:
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
              'fffffffe ffffffff 00000000 00000000 fffffffc',
            b:
              'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
              '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
            n:
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
              'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
            hash: hash.sha384,
            gRed: false,
            g: [
              'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
                '5502f25d bf55296c 3a545e38 72760ab7',
              '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
                '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
            ],
          });

          defineCurve('p521', {
            type: 'short',
            prime: null,
            p:
              '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
              'ffffffff ffffffff ffffffff ffffffff ffffffff',
            a:
              '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
              'ffffffff ffffffff ffffffff ffffffff fffffffc',
            b:
              '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
              '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
              '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
            n:
              '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
              'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
              'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
            hash: hash.sha512,
            gRed: false,
            g: [
              '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
                '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
                'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
              '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
                '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
                '3fad0761 353c7086 a272c240 88be9476 9fd16650',
            ],
          });

          defineCurve('curve25519', {
            type: 'mont',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '76d06',
            b: '1',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: ['9'],
          });

          defineCurve('ed25519', {
            type: 'edwards',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '-1',
            c: '1',
            // -121665 * (121666^(-1)) (mod P)
            d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: [
              '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

              // 4/5
              '6666666666666666666666666666666666666666666666666666666666666658',
            ],
          });

          var pre;
          try {
            pre = require('./precomputed/secp256k1');
          } catch (e) {
            pre = undefined;
          }

          defineCurve('secp256k1', {
            type: 'short',
            prime: 'k256',
            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
            a: '0',
            b: '7',
            n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
            h: '1',
            hash: hash.sha256,

            // Precomputed endomorphism
            beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
            lambda:
              '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
            basis: [
              {
                a: '3086d221a7d46bcde86c90e49284eb15',
                b: '-e4437ed6010e88286f547fa90abfe4c3',
              },
              {
                a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                b: '3086d221a7d46bcde86c90e49284eb15',
              },
            ],

            gRed: false,
            g: [
              '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
              '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
              pre,
            ],
          });
        },
        {
          './curve': 103,
          './precomputed/secp256k1': 113,
          './utils': 114,
          'hash.js': 117,
        },
      ],
      107: [
        function (require, module, exports) {
          'use strict';

          var BN = require('bn.js');
          var HmacDRBG = require('hmac-drbg');
          var utils = require('../utils');
          var curves = require('../curves');
          var rand = require('brorand');
          var assert = utils.assert;

          var KeyPair = require('./key');
          var Signature = require('./signature');

          function EC(options) {
            if (!(this instanceof EC)) return new EC(options);

            // Shortcut `elliptic.ec(curve-name)`
            if (typeof options === 'string') {
              assert(
                Object.prototype.hasOwnProperty.call(curves, options),
                'Unknown curve ' + options
              );

              options = curves[options];
            }

            // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
            if (options instanceof curves.PresetCurve)
              options = { curve: options };

            this.curve = options.curve.curve;
            this.n = this.curve.n;
            this.nh = this.n.ushrn(1);
            this.g = this.curve.g;

            // Point on curve
            this.g = options.curve.g;
            this.g.precompute(options.curve.n.bitLength() + 1);

            // Hash for function for DRBG
            this.hash = options.hash || options.curve.hash;
          }
          module.exports = EC;

          EC.prototype.keyPair = function keyPair(options) {
            return new KeyPair(this, options);
          };

          EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
            return KeyPair.fromPrivate(this, priv, enc);
          };

          EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
            return KeyPair.fromPublic(this, pub, enc);
          };

          EC.prototype.genKeyPair = function genKeyPair(options) {
            if (!options) options = {};

            // Instantiate Hmac_DRBG
            var drbg = new HmacDRBG({
              hash: this.hash,
              pers: options.pers,
              persEnc: options.persEnc || 'utf8',
              entropy: options.entropy || rand(this.hash.hmacStrength),
              entropyEnc: (options.entropy && options.entropyEnc) || 'utf8',
              nonce: this.n.toArray(),
            });

            var bytes = this.n.byteLength();
            var ns2 = this.n.sub(new BN(2));
            for (;;) {
              var priv = new BN(drbg.generate(bytes));
              if (priv.cmp(ns2) > 0) continue;

              priv.iaddn(1);
              return this.keyFromPrivate(priv);
            }
          };

          EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
            var delta = msg.byteLength() * 8 - this.n.bitLength();
            if (delta > 0) msg = msg.ushrn(delta);
            if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
            else return msg;
          };

          EC.prototype.sign = function sign(msg, key, enc, options) {
            if (typeof enc === 'object') {
              options = enc;
              enc = null;
            }
            if (!options) options = {};

            key = this.keyFromPrivate(key, enc);
            msg = this._truncateToN(new BN(msg, 16));

            // Zero-extend key to provide enough entropy
            var bytes = this.n.byteLength();
            var bkey = key.getPrivate().toArray('be', bytes);

            // Zero-extend nonce to have the same byte size as N
            var nonce = msg.toArray('be', bytes);

            // Instantiate Hmac_DRBG
            var drbg = new HmacDRBG({
              hash: this.hash,
              entropy: bkey,
              nonce: nonce,
              pers: options.pers,
              persEnc: options.persEnc || 'utf8',
            });

            // Number of bytes to generate
            var ns1 = this.n.sub(new BN(1));

            for (var iter = 0; ; iter++) {
              var k = options.k
                ? options.k(iter)
                : new BN(drbg.generate(this.n.byteLength()));
              k = this._truncateToN(k, true);
              if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

              var kp = this.g.mul(k);
              if (kp.isInfinity()) continue;

              var kpX = kp.getX();
              var r = kpX.umod(this.n);
              if (r.cmpn(0) === 0) continue;

              var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
              s = s.umod(this.n);
              if (s.cmpn(0) === 0) continue;

              var recoveryParam =
                (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

              // Use complement of `s`, if it is > `n / 2`
              if (options.canonical && s.cmp(this.nh) > 0) {
                s = this.n.sub(s);
                recoveryParam ^= 1;
              }

              return new Signature({
                r: r,
                s: s,
                recoveryParam: recoveryParam,
              });
            }
          };

          EC.prototype.verify = function verify(msg, signature, key, enc) {
            msg = this._truncateToN(new BN(msg, 16));
            key = this.keyFromPublic(key, enc);
            signature = new Signature(signature, 'hex');

            // Perform primitive values validation
            var r = signature.r;
            var s = signature.s;
            if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
            if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

            // Validate signature
            var sinv = s.invm(this.n);
            var u1 = sinv.mul(msg).umod(this.n);
            var u2 = sinv.mul(r).umod(this.n);
            var p;

            if (!this.curve._maxwellTrick) {
              p = this.g.mulAdd(u1, key.getPublic(), u2);
              if (p.isInfinity()) return false;

              return p.getX().umod(this.n).cmp(r) === 0;
            }

            // NOTE: Greg Maxwell's trick, inspired by:
            // https://git.io/vad3K

            p = this.g.jmulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity()) return false;

            // Compare `p.x` of Jacobian point with `r`,
            // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
            // inverse of `p.z^2`
            return p.eqXToP(r);
          };

          EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
            assert((3 & j) === j, 'The recovery param is more than two bits');
            signature = new Signature(signature, enc);

            var n = this.n;
            var e = new BN(msg);
            var r = signature.r;
            var s = signature.s;

            // A set LSB signifies that the y-coordinate is odd
            var isYOdd = j & 1;
            var isSecondKey = j >> 1;
            if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
              throw new Error('Unable to find sencond key candinate');

            // 1.1. Let x = r + jn.
            if (isSecondKey)
              r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
            else r = this.curve.pointFromX(r, isYOdd);

            var rInv = signature.r.invm(n);
            var s1 = n.sub(e).mul(rInv).umod(n);
            var s2 = s.mul(rInv).umod(n);

            // 1.6.1 Compute Q = r^-1 (sR -  eG)
            //               Q = r^-1 (sR + -eG)
            return this.g.mulAdd(s1, r, s2);
          };

          EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
            signature = new Signature(signature, enc);
            if (signature.recoveryParam !== null)
              return signature.recoveryParam;

            for (var i = 0; i < 4; i++) {
              var Qprime;
              try {
                Qprime = this.recoverPubKey(e, signature, i);
              } catch (e) {
                continue;
              }

              if (Qprime.eq(Q)) return i;
            }
            throw new Error('Unable to find valid recovery factor');
          };
        },
        {
          '../curves': 106,
          '../utils': 114,
          './key': 108,
          './signature': 109,
          'bn.js': 85,
          brorand: 86,
          'hmac-drbg': 129,
        },
      ],
      108: [
        function (require, module, exports) {
          'use strict';

          var BN = require('bn.js');
          var utils = require('../utils');
          var assert = utils.assert;

          function KeyPair(ec, options) {
            this.ec = ec;
            this.priv = null;
            this.pub = null;

            // KeyPair(ec, { priv: ..., pub: ... })
            if (options.priv)
              this._importPrivate(options.priv, options.privEnc);
            if (options.pub) this._importPublic(options.pub, options.pubEnc);
          }
          module.exports = KeyPair;

          KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
            if (pub instanceof KeyPair) return pub;

            return new KeyPair(ec, {
              pub: pub,
              pubEnc: enc,
            });
          };

          KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
            if (priv instanceof KeyPair) return priv;

            return new KeyPair(ec, {
              priv: priv,
              privEnc: enc,
            });
          };

          KeyPair.prototype.validate = function validate() {
            var pub = this.getPublic();

            if (pub.isInfinity())
              return { result: false, reason: 'Invalid public key' };
            if (!pub.validate())
              return { result: false, reason: 'Public key is not a point' };
            if (!pub.mul(this.ec.curve.n).isInfinity())
              return { result: false, reason: 'Public key * N != O' };

            return { result: true, reason: null };
          };

          KeyPair.prototype.getPublic = function getPublic(compact, enc) {
            // compact is optional argument
            if (typeof compact === 'string') {
              enc = compact;
              compact = null;
            }

            if (!this.pub) this.pub = this.ec.g.mul(this.priv);

            if (!enc) return this.pub;

            return this.pub.encode(enc, compact);
          };

          KeyPair.prototype.getPrivate = function getPrivate(enc) {
            if (enc === 'hex') return this.priv.toString(16, 2);
            else return this.priv;
          };

          KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
            this.priv = new BN(key, enc || 16);

            // Ensure that the priv won't be bigger than n, otherwise we may fail
            // in fixed multiplication method
            this.priv = this.priv.umod(this.ec.curve.n);
          };

          KeyPair.prototype._importPublic = function _importPublic(key, enc) {
            if (key.x || key.y) {
              // Montgomery points only have an `x` coordinate.
              // Weierstrass/Edwards points on the other hand have both `x` and
              // `y` coordinates.
              if (this.ec.curve.type === 'mont') {
                assert(key.x, 'Need x coordinate');
              } else if (
                this.ec.curve.type === 'short' ||
                this.ec.curve.type === 'edwards'
              ) {
                assert(key.x && key.y, 'Need both x and y coordinate');
              }
              this.pub = this.ec.curve.point(key.x, key.y);
              return;
            }
            this.pub = this.ec.curve.decodePoint(key, enc);
          };

          // ECDH
          KeyPair.prototype.derive = function derive(pub) {
            if (!pub.validate()) {
              assert(pub.validate(), 'public point not validated');
            }
            return pub.mul(this.priv).getX();
          };

          // ECDSA
          KeyPair.prototype.sign = function sign(msg, enc, options) {
            return this.ec.sign(msg, this, enc, options);
          };

          KeyPair.prototype.verify = function verify(msg, signature) {
            return this.ec.verify(msg, signature, this);
          };

          KeyPair.prototype.inspect = function inspect() {
            return (
              '<Key priv: ' +
              (this.priv && this.priv.toString(16, 2)) +
              ' pub: ' +
              (this.pub && this.pub.inspect()) +
              ' >'
            );
          };
        },
        { '../utils': 114, 'bn.js': 85 },
      ],
      109: [
        function (require, module, exports) {
          'use strict';

          var BN = require('bn.js');

          var utils = require('../utils');
          var assert = utils.assert;

          function Signature(options, enc) {
            if (options instanceof Signature) return options;

            if (this._importDER(options, enc)) return;

            assert(options.r && options.s, 'Signature without r or s');
            this.r = new BN(options.r, 16);
            this.s = new BN(options.s, 16);
            if (options.recoveryParam === undefined) this.recoveryParam = null;
            else this.recoveryParam = options.recoveryParam;
          }
          module.exports = Signature;

          function Position() {
            this.place = 0;
          }

          function getLength(buf, p) {
            var initial = buf[p.place++];
            if (!(initial & 0x80)) {
              return initial;
            }
            var octetLen = initial & 0xf;

            // Indefinite length or overflow
            if (octetLen === 0 || octetLen > 4) {
              return false;
            }

            var val = 0;
            for (var i = 0, off = p.place; i < octetLen; i++, off++) {
              val <<= 8;
              val |= buf[off];
              val >>>= 0;
            }

            // Leading zeroes
            if (val <= 0x7f) {
              return false;
            }

            p.place = off;
            return val;
          }

          function rmPadding(buf) {
            var i = 0;
            var len = buf.length - 1;
            while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
              i++;
            }
            if (i === 0) {
              return buf;
            }
            return buf.slice(i);
          }

          Signature.prototype._importDER = function _importDER(data, enc) {
            data = utils.toArray(data, enc);
            var p = new Position();
            if (data[p.place++] !== 0x30) {
              return false;
            }
            var len = getLength(data, p);
            if (len === false) {
              return false;
            }
            if (len + p.place !== data.length) {
              return false;
            }
            if (data[p.place++] !== 0x02) {
              return false;
            }
            var rlen = getLength(data, p);
            if (rlen === false) {
              return false;
            }
            var r = data.slice(p.place, rlen + p.place);
            p.place += rlen;
            if (data[p.place++] !== 0x02) {
              return false;
            }
            var slen = getLength(data, p);
            if (slen === false) {
              return false;
            }
            if (data.length !== slen + p.place) {
              return false;
            }
            var s = data.slice(p.place, slen + p.place);
            if (r[0] === 0) {
              if (r[1] & 0x80) {
                r = r.slice(1);
              } else {
                // Leading zeroes
                return false;
              }
            }
            if (s[0] === 0) {
              if (s[1] & 0x80) {
                s = s.slice(1);
              } else {
                // Leading zeroes
                return false;
              }
            }

            this.r = new BN(r);
            this.s = new BN(s);
            this.recoveryParam = null;

            return true;
          };

          function constructLength(arr, len) {
            if (len < 0x80) {
              arr.push(len);
              return;
            }
            var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
            arr.push(octets | 0x80);
            while (--octets) {
              arr.push((len >>> (octets << 3)) & 0xff);
            }
            arr.push(len);
          }

          Signature.prototype.toDER = function toDER(enc) {
            var r = this.r.toArray();
            var s = this.s.toArray();

            // Pad values
            if (r[0] & 0x80) r = [0].concat(r);
            // Pad values
            if (s[0] & 0x80) s = [0].concat(s);

            r = rmPadding(r);
            s = rmPadding(s);

            while (!s[0] && !(s[1] & 0x80)) {
              s = s.slice(1);
            }
            var arr = [0x02];
            constructLength(arr, r.length);
            arr = arr.concat(r);
            arr.push(0x02);
            constructLength(arr, s.length);
            var backHalf = arr.concat(s);
            var res = [0x30];
            constructLength(res, backHalf.length);
            res = res.concat(backHalf);
            return utils.encode(res, enc);
          };
        },
        { '../utils': 114, 'bn.js': 85 },
      ],
      110: [
        function (require, module, exports) {
          'use strict';

          var hash = require('hash.js');
          var curves = require('../curves');
          var utils = require('../utils');
          var assert = utils.assert;
          var parseBytes = utils.parseBytes;
          var KeyPair = require('./key');
          var Signature = require('./signature');

          function EDDSA(curve) {
            assert(curve === 'ed25519', 'only tested with ed25519 so far');

            if (!(this instanceof EDDSA)) return new EDDSA(curve);

            curve = curves[curve].curve;
            this.curve = curve;
            this.g = curve.g;
            this.g.precompute(curve.n.bitLength() + 1);

            this.pointClass = curve.point().constructor;
            this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
            this.hash = hash.sha512;
          }

          module.exports = EDDSA;

          /**
           * @param {Array|String} message - message bytes
           * @param {Array|String|KeyPair} secret - secret bytes or a keypair
           * @returns {Signature} - signature
           */
          EDDSA.prototype.sign = function sign(message, secret) {
            message = parseBytes(message);
            var key = this.keyFromSecret(secret);
            var r = this.hashInt(key.messagePrefix(), message);
            var R = this.g.mul(r);
            var Rencoded = this.encodePoint(R);
            var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(
              key.priv()
            );
            var S = r.add(s_).umod(this.curve.n);
            return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
          };

          /**
           * @param {Array} message - message bytes
           * @param {Array|String|Signature} sig - sig bytes
           * @param {Array|String|Point|KeyPair} pub - public key
           * @returns {Boolean} - true if public key matches sig of message
           */
          EDDSA.prototype.verify = function verify(message, sig, pub) {
            message = parseBytes(message);
            sig = this.makeSignature(sig);
            var key = this.keyFromPublic(pub);
            var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
            var SG = this.g.mul(sig.S());
            var RplusAh = sig.R().add(key.pub().mul(h));
            return RplusAh.eq(SG);
          };

          EDDSA.prototype.hashInt = function hashInt() {
            var hash = this.hash();
            for (var i = 0; i < arguments.length; i++)
              hash.update(arguments[i]);
            return utils.intFromLE(hash.digest()).umod(this.curve.n);
          };

          EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
            return KeyPair.fromPublic(this, pub);
          };

          EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
            return KeyPair.fromSecret(this, secret);
          };

          EDDSA.prototype.makeSignature = function makeSignature(sig) {
            if (sig instanceof Signature) return sig;
            return new Signature(this, sig);
          };

          /**
           * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
           *
           * EDDSA defines methods for encoding and decoding points and integers. These are
           * helper convenience methods, that pass along to utility functions implied
           * parameters.
           *
           */
          EDDSA.prototype.encodePoint = function encodePoint(point) {
            var enc = point.getY().toArray('le', this.encodingLength);
            enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
            return enc;
          };

          EDDSA.prototype.decodePoint = function decodePoint(bytes) {
            bytes = utils.parseBytes(bytes);

            var lastIx = bytes.length - 1;
            var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
            var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

            var y = utils.intFromLE(normed);
            return this.curve.pointFromY(y, xIsOdd);
          };

          EDDSA.prototype.encodeInt = function encodeInt(num) {
            return num.toArray('le', this.encodingLength);
          };

          EDDSA.prototype.decodeInt = function decodeInt(bytes) {
            return utils.intFromLE(bytes);
          };

          EDDSA.prototype.isPoint = function isPoint(val) {
            return val instanceof this.pointClass;
          };
        },
        {
          '../curves': 106,
          '../utils': 114,
          './key': 111,
          './signature': 112,
          'hash.js': 117,
        },
      ],
      111: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var assert = utils.assert;
          var parseBytes = utils.parseBytes;
          var cachedProperty = utils.cachedProperty;

          /**
           * @param {EDDSA} eddsa - instance
           * @param {Object} params - public/private key parameters
           *
           * @param {Array<Byte>} [params.secret] - secret seed bytes
           * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
           * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
           *
           */
          function KeyPair(eddsa, params) {
            this.eddsa = eddsa;
            this._secret = parseBytes(params.secret);
            if (eddsa.isPoint(params.pub)) this._pub = params.pub;
            else this._pubBytes = parseBytes(params.pub);
          }

          KeyPair.fromPublic = function fromPublic(eddsa, pub) {
            if (pub instanceof KeyPair) return pub;
            return new KeyPair(eddsa, { pub: pub });
          };

          KeyPair.fromSecret = function fromSecret(eddsa, secret) {
            if (secret instanceof KeyPair) return secret;
            return new KeyPair(eddsa, { secret: secret });
          };

          KeyPair.prototype.secret = function secret() {
            return this._secret;
          };

          cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
            return this.eddsa.encodePoint(this.pub());
          });

          cachedProperty(KeyPair, 'pub', function pub() {
            if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
            return this.eddsa.g.mul(this.priv());
          });

          cachedProperty(KeyPair, 'privBytes', function privBytes() {
            var eddsa = this.eddsa;
            var hash = this.hash();
            var lastIx = eddsa.encodingLength - 1;

            var a = hash.slice(0, eddsa.encodingLength);
            a[0] &= 248;
            a[lastIx] &= 127;
            a[lastIx] |= 64;

            return a;
          });

          cachedProperty(KeyPair, 'priv', function priv() {
            return this.eddsa.decodeInt(this.privBytes());
          });

          cachedProperty(KeyPair, 'hash', function hash() {
            return this.eddsa.hash().update(this.secret()).digest();
          });

          cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
            return this.hash().slice(this.eddsa.encodingLength);
          });

          KeyPair.prototype.sign = function sign(message) {
            assert(this._secret, 'KeyPair can only verify');
            return this.eddsa.sign(message, this);
          };

          KeyPair.prototype.verify = function verify(message, sig) {
            return this.eddsa.verify(message, sig, this);
          };

          KeyPair.prototype.getSecret = function getSecret(enc) {
            assert(this._secret, 'KeyPair is public only');
            return utils.encode(this.secret(), enc);
          };

          KeyPair.prototype.getPublic = function getPublic(enc) {
            return utils.encode(this.pubBytes(), enc);
          };

          module.exports = KeyPair;
        },
        { '../utils': 114 },
      ],
      112: [
        function (require, module, exports) {
          'use strict';

          var BN = require('bn.js');
          var utils = require('../utils');
          var assert = utils.assert;
          var cachedProperty = utils.cachedProperty;
          var parseBytes = utils.parseBytes;

          /**
           * @param {EDDSA} eddsa - eddsa instance
           * @param {Array<Bytes>|Object} sig -
           * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
           * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
           * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
           * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
           */
          function Signature(eddsa, sig) {
            this.eddsa = eddsa;

            if (typeof sig !== 'object') sig = parseBytes(sig);

            if (Array.isArray(sig)) {
              sig = {
                R: sig.slice(0, eddsa.encodingLength),
                S: sig.slice(eddsa.encodingLength),
              };
            }

            assert(sig.R && sig.S, 'Signature without R or S');

            if (eddsa.isPoint(sig.R)) this._R = sig.R;
            if (sig.S instanceof BN) this._S = sig.S;

            this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
            this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
          }

          cachedProperty(Signature, 'S', function S() {
            return this.eddsa.decodeInt(this.Sencoded());
          });

          cachedProperty(Signature, 'R', function R() {
            return this.eddsa.decodePoint(this.Rencoded());
          });

          cachedProperty(Signature, 'Rencoded', function Rencoded() {
            return this.eddsa.encodePoint(this.R());
          });

          cachedProperty(Signature, 'Sencoded', function Sencoded() {
            return this.eddsa.encodeInt(this.S());
          });

          Signature.prototype.toBytes = function toBytes() {
            return this.Rencoded().concat(this.Sencoded());
          };

          Signature.prototype.toHex = function toHex() {
            return utils.encode(this.toBytes(), 'hex').toUpperCase();
          };

          module.exports = Signature;
        },
        { '../utils': 114, 'bn.js': 85 },
      ],
      113: [
        function (require, module, exports) {
          module.exports = {
            doubles: {
              step: 4,
              points: [
                [
                  'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                  'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
                ],
                [
                  '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                  '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
                ],
                [
                  '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                  'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
                ],
                [
                  '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                  '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
                ],
                [
                  '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                  '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
                ],
                [
                  '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                  '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
                ],
                [
                  'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                  '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
                ],
                [
                  '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                  'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
                ],
                [
                  'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                  '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
                ],
                [
                  'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                  'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
                ],
                [
                  'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                  '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
                ],
                [
                  '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                  '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
                ],
                [
                  '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                  '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
                ],
                [
                  '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                  '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
                ],
                [
                  '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                  '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
                ],
                [
                  '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                  '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
                ],
                [
                  '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                  '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
                ],
                [
                  '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                  '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
                ],
                [
                  '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                  'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
                ],
                [
                  'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                  '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
                ],
                [
                  'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                  '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
                ],
                [
                  '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                  '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
                ],
                [
                  '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                  '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
                ],
                [
                  'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                  '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
                ],
                [
                  '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                  'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
                ],
                [
                  'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                  '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
                ],
                [
                  'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                  'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
                ],
                [
                  'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                  '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
                ],
                [
                  'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                  'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
                ],
                [
                  'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                  '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
                ],
                [
                  '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                  'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
                ],
                [
                  '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                  '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
                ],
                [
                  'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                  '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
                ],
                [
                  '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                  'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
                ],
                [
                  'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                  '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
                ],
                [
                  'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                  '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
                ],
                [
                  'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                  'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
                ],
                [
                  '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                  '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
                ],
                [
                  '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                  '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
                ],
                [
                  '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                  'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
                ],
                [
                  '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                  '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
                ],
                [
                  'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                  '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
                ],
                [
                  '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                  '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
                ],
                [
                  '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                  'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
                ],
                [
                  '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                  '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
                ],
                [
                  'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                  '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
                ],
                [
                  '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                  'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
                ],
                [
                  'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                  'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
                ],
                [
                  'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                  '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
                ],
                [
                  '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                  'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
                ],
                [
                  '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                  'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
                ],
                [
                  'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                  '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
                ],
                [
                  'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                  '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
                ],
                [
                  'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                  '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
                ],
                [
                  '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                  'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
                ],
                [
                  '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                  '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
                ],
                [
                  'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                  'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
                ],
                [
                  '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                  'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
                ],
                [
                  '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                  '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
                ],
                [
                  '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                  '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
                ],
                [
                  'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                  'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
                ],
                [
                  '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                  '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
                ],
                [
                  '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                  '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
                ],
                [
                  'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                  '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
                ],
                [
                  'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                  'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
                ],
              ],
            },
            naf: {
              wnd: 7,
              points: [
                [
                  'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                  '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
                ],
                [
                  '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                  'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
                ],
                [
                  '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                  '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
                ],
                [
                  'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                  'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
                ],
                [
                  '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                  'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
                ],
                [
                  'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                  'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
                ],
                [
                  'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                  '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
                ],
                [
                  'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                  '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
                ],
                [
                  '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                  '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
                ],
                [
                  '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                  '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
                ],
                [
                  '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                  '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
                ],
                [
                  '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                  '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
                ],
                [
                  'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                  'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
                ],
                [
                  'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                  '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
                ],
                [
                  '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                  'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
                ],
                [
                  '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                  'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
                ],
                [
                  '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                  '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
                ],
                [
                  '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                  '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
                ],
                [
                  '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                  '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
                ],
                [
                  '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                  'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
                ],
                [
                  'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                  'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
                ],
                [
                  '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                  '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
                ],
                [
                  '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                  '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
                ],
                [
                  'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                  'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
                ],
                [
                  '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                  '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
                ],
                [
                  'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                  'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
                ],
                [
                  'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                  'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
                ],
                [
                  '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                  '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
                ],
                [
                  '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                  '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
                ],
                [
                  '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                  '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
                ],
                [
                  'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                  '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
                ],
                [
                  '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                  '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
                ],
                [
                  'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                  '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
                ],
                [
                  '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                  'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
                ],
                [
                  '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                  'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
                ],
                [
                  'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                  'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
                ],
                [
                  '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                  '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
                ],
                [
                  '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                  'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
                ],
                [
                  'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                  'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
                ],
                [
                  '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                  '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
                ],
                [
                  '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                  'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
                ],
                [
                  '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                  '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
                ],
                [
                  '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                  'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
                ],
                [
                  'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                  '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
                ],
                [
                  '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                  '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
                ],
                [
                  '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                  'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
                ],
                [
                  '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                  'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
                ],
                [
                  'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                  'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
                ],
                [
                  'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                  'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
                ],
                [
                  '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                  '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
                ],
                [
                  '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                  '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
                ],
                [
                  'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                  '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
                ],
                [
                  'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                  'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
                ],
                [
                  '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                  '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
                ],
                [
                  '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                  '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
                ],
                [
                  'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                  '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
                ],
                [
                  '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                  '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
                ],
                [
                  'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                  'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
                ],
                [
                  '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                  'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
                ],
                [
                  '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                  '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
                ],
                [
                  'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                  '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
                ],
                [
                  'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                  '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
                ],
                [
                  '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                  '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
                ],
                [
                  '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                  '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
                ],
                [
                  '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                  'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
                ],
                [
                  '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                  'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
                ],
                [
                  '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                  '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
                ],
                [
                  '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                  '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
                ],
                [
                  '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                  '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
                ],
                [
                  '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                  'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
                ],
                [
                  'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                  'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
                ],
                [
                  '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                  'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
                ],
                [
                  'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                  '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
                ],
                [
                  'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                  '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
                ],
                [
                  'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                  '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
                ],
                [
                  'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                  '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
                ],
                [
                  '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                  'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
                ],
                [
                  '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                  '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
                ],
                [
                  '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                  'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
                ],
                [
                  'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                  'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
                ],
                [
                  'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                  '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
                ],
                [
                  'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                  'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
                ],
                [
                  'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                  '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
                ],
                [
                  '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                  '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
                ],
                [
                  'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                  '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
                ],
                [
                  'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                  '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
                ],
                [
                  '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                  '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
                ],
                [
                  '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                  'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
                ],
                [
                  'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                  '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
                ],
                [
                  'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                  '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
                ],
                [
                  'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                  '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
                ],
                [
                  '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                  '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
                ],
                [
                  'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                  'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
                ],
                [
                  '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                  'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
                ],
                [
                  'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                  'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
                ],
                [
                  'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                  '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
                ],
                [
                  '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                  'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
                ],
                [
                  'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                  '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
                ],
                [
                  'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                  '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
                ],
                [
                  'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                  '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
                ],
                [
                  '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                  'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
                ],
                [
                  '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                  'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
                ],
                [
                  'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                  '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
                ],
                [
                  '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                  'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
                ],
                [
                  '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                  '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
                ],
                [
                  '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                  'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
                ],
                [
                  'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                  'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
                ],
                [
                  '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                  'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
                ],
                [
                  '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                  '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
                ],
                [
                  '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                  'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
                ],
                [
                  '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                  '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
                ],
                [
                  'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                  'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
                ],
                [
                  '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                  '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
                ],
                [
                  'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                  '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
                ],
                [
                  '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                  '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
                ],
                [
                  'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                  'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
                ],
                [
                  'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                  '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
                ],
                [
                  'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                  'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
                ],
                [
                  '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                  'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
                ],
                [
                  '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                  '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
                ],
                [
                  '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                  'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
                ],
                [
                  '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                  '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
                ],
                [
                  '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                  '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
                ],
                [
                  '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                  'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
                ],
                [
                  '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                  '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
                ],
                [
                  '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                  '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
                ],
                [
                  '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                  '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
                ],
              ],
            },
          };
        },
        {},
      ],
      114: [
        function (require, module, exports) {
          'use strict';

          var utils = exports;
          var BN = require('bn.js');
          var minAssert = require('minimalistic-assert');
          var minUtils = require('minimalistic-crypto-utils');

          utils.assert = minAssert;
          utils.toArray = minUtils.toArray;
          utils.zero2 = minUtils.zero2;
          utils.toHex = minUtils.toHex;
          utils.encode = minUtils.encode;

          // Represent num in a w-NAF form
          function getNAF(num, w, bits) {
            var naf = new Array(Math.max(num.bitLength(), bits) + 1);
            naf.fill(0);

            var ws = 1 << (w + 1);
            var k = num.clone();

            for (var i = 0; i < naf.length; i++) {
              var z;
              var mod = k.andln(ws - 1);
              if (k.isOdd()) {
                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                else z = mod;
                k.isubn(z);
              } else {
                z = 0;
              }

              naf[i] = z;
              k.iushrn(1);
            }

            return naf;
          }
          utils.getNAF = getNAF;

          // Represent k1, k2 in a Joint Sparse Form
          function getJSF(k1, k2) {
            var jsf = [[], []];

            k1 = k1.clone();
            k2 = k2.clone();
            var d1 = 0;
            var d2 = 0;
            var m8;
            while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
              // First phase
              var m14 = (k1.andln(3) + d1) & 3;
              var m24 = (k2.andln(3) + d2) & 3;
              if (m14 === 3) m14 = -1;
              if (m24 === 3) m24 = -1;
              var u1;
              if ((m14 & 1) === 0) {
                u1 = 0;
              } else {
                m8 = (k1.andln(7) + d1) & 7;
                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                else u1 = m14;
              }
              jsf[0].push(u1);

              var u2;
              if ((m24 & 1) === 0) {
                u2 = 0;
              } else {
                m8 = (k2.andln(7) + d2) & 7;
                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                else u2 = m24;
              }
              jsf[1].push(u2);

              // Second phase
              if (2 * d1 === u1 + 1) d1 = 1 - d1;
              if (2 * d2 === u2 + 1) d2 = 1 - d2;
              k1.iushrn(1);
              k2.iushrn(1);
            }

            return jsf;
          }
          utils.getJSF = getJSF;

          function cachedProperty(obj, name, computer) {
            var key = '_' + name;
            obj.prototype[name] = function cachedProperty() {
              return this[key] !== undefined
                ? this[key]
                : (this[key] = computer.call(this));
            };
          }
          utils.cachedProperty = cachedProperty;

          function parseBytes(bytes) {
            return typeof bytes === 'string'
              ? utils.toArray(bytes, 'hex')
              : bytes;
          }
          utils.parseBytes = parseBytes;

          function intFromLE(bytes) {
            return new BN(bytes, 'hex', 'le');
          }
          utils.intFromLE = intFromLE;
        },
        {
          'bn.js': 85,
          'minimalistic-assert': 133,
          'minimalistic-crypto-utils': 134,
        },
      ],
      115: [
        function (require, module, exports) {
          module.exports = {
            name: 'elliptic',
            version: '6.5.4',
            description: 'EC cryptography',
            main: 'lib/elliptic.js',
            files: ['lib'],
            scripts: {
              lint: 'eslint lib test',
              'lint:fix': 'npm run lint -- --fix',
              unit: 'istanbul test _mocha --reporter=spec test/index.js',
              test: 'npm run lint && npm run unit',
              version: 'grunt dist && git add dist/',
            },
            repository: {
              type: 'git',
              url: 'git@github.com:indutny/elliptic',
            },
            keywords: ['EC', 'Elliptic', 'curve', 'Cryptography'],
            author: 'Fedor Indutny <fedor@indutny.com>',
            license: 'MIT',
            bugs: {
              url: 'https://github.com/indutny/elliptic/issues',
            },
            homepage: 'https://github.com/indutny/elliptic',
            devDependencies: {
              brfs: '^2.0.2',
              coveralls: '^3.1.0',
              eslint: '^7.6.0',
              grunt: '^1.2.1',
              'grunt-browserify': '^5.3.0',
              'grunt-cli': '^1.3.2',
              'grunt-contrib-connect': '^3.0.0',
              'grunt-contrib-copy': '^1.0.0',
              'grunt-contrib-uglify': '^5.0.0',
              'grunt-mocha-istanbul': '^5.0.2',
              'grunt-saucelabs': '^9.0.1',
              istanbul: '^0.4.5',
              mocha: '^8.0.1',
            },
            dependencies: {
              'bn.js': '^4.11.9',
              brorand: '^1.1.0',
              'hash.js': '^1.0.0',
              'hmac-drbg': '^1.0.1',
              inherits: '^2.0.4',
              'minimalistic-assert': '^1.0.1',
              'minimalistic-crypto-utils': '^1.0.1',
            },
          };
        },
        {},
      ],
      116: [
        function (require, module, exports) {
          'use strict';
          var Buffer = require('safe-buffer').Buffer;
          var Transform = require('readable-stream').Transform;
          var inherits = require('inherits');

          function throwIfNotStringOrBuffer(val, prefix) {
            if (!Buffer.isBuffer(val) && typeof val !== 'string') {
              throw new TypeError(prefix + ' must be a string or a buffer');
            }
          }

          function HashBase(blockSize) {
            Transform.call(this);

            this._block = Buffer.allocUnsafe(blockSize);
            this._blockSize = blockSize;
            this._blockOffset = 0;
            this._length = [0, 0, 0, 0];

            this._finalized = false;
          }

          inherits(HashBase, Transform);

          HashBase.prototype._transform = function (chunk, encoding, callback) {
            var error = null;
            try {
              this.update(chunk, encoding);
            } catch (err) {
              error = err;
            }

            callback(error);
          };

          HashBase.prototype._flush = function (callback) {
            var error = null;
            try {
              this.push(this.digest());
            } catch (err) {
              error = err;
            }

            callback(error);
          };

          HashBase.prototype.update = function (data, encoding) {
            throwIfNotStringOrBuffer(data, 'Data');
            if (this._finalized) throw new Error('Digest already called');
            if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

            // consume data
            var block = this._block;
            var offset = 0;
            while (
              this._blockOffset + data.length - offset >=
              this._blockSize
            ) {
              for (var i = this._blockOffset; i < this._blockSize; )
                block[i++] = data[offset++];
              this._update();
              this._blockOffset = 0;
            }
            while (offset < data.length)
              block[this._blockOffset++] = data[offset++];

            // update length
            for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
              this._length[j] += carry;
              carry = (this._length[j] / 0x0100000000) | 0;
              if (carry > 0) this._length[j] -= 0x0100000000 * carry;
            }

            return this;
          };

          HashBase.prototype._update = function () {
            throw new Error('_update is not implemented');
          };

          HashBase.prototype.digest = function (encoding) {
            if (this._finalized) throw new Error('Digest already called');
            this._finalized = true;

            var digest = this._digest();
            if (encoding !== undefined) digest = digest.toString(encoding);

            // reset state
            this._block.fill(0);
            this._blockOffset = 0;
            for (var i = 0; i < 4; ++i) this._length[i] = 0;

            return digest;
          };

          HashBase.prototype._digest = function () {
            throw new Error('_digest is not implemented');
          };

          module.exports = HashBase;
        },
        { inherits: 130, 'readable-stream': 156, 'safe-buffer': 158 },
      ],
      117: [
        function (require, module, exports) {
          var hash = exports;

          hash.utils = require('./hash/utils');
          hash.common = require('./hash/common');
          hash.sha = require('./hash/sha');
          hash.ripemd = require('./hash/ripemd');
          hash.hmac = require('./hash/hmac');

          // Proxy hash functions to the main object
          hash.sha1 = hash.sha.sha1;
          hash.sha256 = hash.sha.sha256;
          hash.sha224 = hash.sha.sha224;
          hash.sha384 = hash.sha.sha384;
          hash.sha512 = hash.sha.sha512;
          hash.ripemd160 = hash.ripemd.ripemd160;
        },
        {
          './hash/common': 118,
          './hash/hmac': 119,
          './hash/ripemd': 120,
          './hash/sha': 121,
          './hash/utils': 128,
        },
      ],
      118: [
        function (require, module, exports) {
          'use strict';

          var utils = require('./utils');
          var assert = require('minimalistic-assert');

          function BlockHash() {
            this.pending = null;
            this.pendingTotal = 0;
            this.blockSize = this.constructor.blockSize;
            this.outSize = this.constructor.outSize;
            this.hmacStrength = this.constructor.hmacStrength;
            this.padLength = this.constructor.padLength / 8;
            this.endian = 'big';

            this._delta8 = this.blockSize / 8;
            this._delta32 = this.blockSize / 32;
          }
          exports.BlockHash = BlockHash;

          BlockHash.prototype.update = function update(msg, enc) {
            // Convert message to array, pad it, and join into 32bit blocks
            msg = utils.toArray(msg, enc);
            if (!this.pending) this.pending = msg;
            else this.pending = this.pending.concat(msg);
            this.pendingTotal += msg.length;

            // Enough data, try updating
            if (this.pending.length >= this._delta8) {
              msg = this.pending;

              // Process pending data in blocks
              var r = msg.length % this._delta8;
              this.pending = msg.slice(msg.length - r, msg.length);
              if (this.pending.length === 0) this.pending = null;

              msg = utils.join32(msg, 0, msg.length - r, this.endian);
              for (var i = 0; i < msg.length; i += this._delta32)
                this._update(msg, i, i + this._delta32);
            }

            return this;
          };

          BlockHash.prototype.digest = function digest(enc) {
            this.update(this._pad());
            assert(this.pending === null);

            return this._digest(enc);
          };

          BlockHash.prototype._pad = function pad() {
            var len = this.pendingTotal;
            var bytes = this._delta8;
            var k = bytes - ((len + this.padLength) % bytes);
            var res = new Array(k + this.padLength);
            res[0] = 0x80;
            for (var i = 1; i < k; i++) res[i] = 0;

            // Append length
            len <<= 3;
            if (this.endian === 'big') {
              for (var t = 8; t < this.padLength; t++) res[i++] = 0;

              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = (len >>> 24) & 0xff;
              res[i++] = (len >>> 16) & 0xff;
              res[i++] = (len >>> 8) & 0xff;
              res[i++] = len & 0xff;
            } else {
              res[i++] = len & 0xff;
              res[i++] = (len >>> 8) & 0xff;
              res[i++] = (len >>> 16) & 0xff;
              res[i++] = (len >>> 24) & 0xff;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;
              res[i++] = 0;

              for (t = 8; t < this.padLength; t++) res[i++] = 0;
            }

            return res;
          };
        },
        { './utils': 128, 'minimalistic-assert': 133 },
      ],
      119: [
        function (require, module, exports) {
          'use strict';

          var utils = require('./utils');
          var assert = require('minimalistic-assert');

          function Hmac(hash, key, enc) {
            if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
            this.Hash = hash;
            this.blockSize = hash.blockSize / 8;
            this.outSize = hash.outSize / 8;
            this.inner = null;
            this.outer = null;

            this._init(utils.toArray(key, enc));
          }
          module.exports = Hmac;

          Hmac.prototype._init = function init(key) {
            // Shorten key, if needed
            if (key.length > this.blockSize)
              key = new this.Hash().update(key).digest();
            assert(key.length <= this.blockSize);

            // Add padding to key
            for (var i = key.length; i < this.blockSize; i++) key.push(0);

            for (i = 0; i < key.length; i++) key[i] ^= 0x36;
            this.inner = new this.Hash().update(key);

            // 0x36 ^ 0x5c = 0x6a
            for (i = 0; i < key.length; i++) key[i] ^= 0x6a;
            this.outer = new this.Hash().update(key);
          };

          Hmac.prototype.update = function update(msg, enc) {
            this.inner.update(msg, enc);
            return this;
          };

          Hmac.prototype.digest = function digest(enc) {
            this.outer.update(this.inner.digest());
            return this.outer.digest(enc);
          };
        },
        { './utils': 128, 'minimalistic-assert': 133 },
      ],
      120: [
        function (require, module, exports) {
          'use strict';

          var utils = require('./utils');
          var common = require('./common');

          var rotl32 = utils.rotl32;
          var sum32 = utils.sum32;
          var sum32_3 = utils.sum32_3;
          var sum32_4 = utils.sum32_4;
          var BlockHash = common.BlockHash;

          function RIPEMD160() {
            if (!(this instanceof RIPEMD160)) return new RIPEMD160();

            BlockHash.call(this);

            this.h = [
              0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,
            ];
            this.endian = 'little';
          }
          utils.inherits(RIPEMD160, BlockHash);
          exports.ripemd160 = RIPEMD160;

          RIPEMD160.blockSize = 512;
          RIPEMD160.outSize = 160;
          RIPEMD160.hmacStrength = 192;
          RIPEMD160.padLength = 64;

          RIPEMD160.prototype._update = function update(msg, start) {
            var A = this.h[0];
            var B = this.h[1];
            var C = this.h[2];
            var D = this.h[3];
            var E = this.h[4];
            var Ah = A;
            var Bh = B;
            var Ch = C;
            var Dh = D;
            var Eh = E;
            for (var j = 0; j < 80; j++) {
              var T = sum32(
                rotl32(
                  sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                  s[j]
                ),
                E
              );
              A = E;
              E = D;
              D = rotl32(C, 10);
              C = B;
              B = T;
              T = sum32(
                rotl32(
                  sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                  sh[j]
                ),
                Eh
              );
              Ah = Eh;
              Eh = Dh;
              Dh = rotl32(Ch, 10);
              Ch = Bh;
              Bh = T;
            }
            T = sum32_3(this.h[1], C, Dh);
            this.h[1] = sum32_3(this.h[2], D, Eh);
            this.h[2] = sum32_3(this.h[3], E, Ah);
            this.h[3] = sum32_3(this.h[4], A, Bh);
            this.h[4] = sum32_3(this.h[0], B, Ch);
            this.h[0] = T;
          };

          RIPEMD160.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'little');
            else return utils.split32(this.h, 'little');
          };

          function f(j, x, y, z) {
            if (j <= 15) return x ^ y ^ z;
            else if (j <= 31) return (x & y) | (~x & z);
            else if (j <= 47) return (x | ~y) ^ z;
            else if (j <= 63) return (x & z) | (y & ~z);
            else return x ^ (y | ~z);
          }

          function K(j) {
            if (j <= 15) return 0x00000000;
            else if (j <= 31) return 0x5a827999;
            else if (j <= 47) return 0x6ed9eba1;
            else if (j <= 63) return 0x8f1bbcdc;
            else return 0xa953fd4e;
          }

          function Kh(j) {
            if (j <= 15) return 0x50a28be6;
            else if (j <= 31) return 0x5c4dd124;
            else if (j <= 47) return 0x6d703ef3;
            else if (j <= 63) return 0x7a6d76e9;
            else return 0x00000000;
          }

          var r = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1,
            10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1,
            2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15,
            14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
          ];

          var rh = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7,
            0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9,
            11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13,
            9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
          ];

          var s = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13,
            11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13,
            15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14,
            5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8,
            5, 6,
          ];

          var sh = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15,
            7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6,
            14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9,
            12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13,
            11, 11,
          ];
        },
        { './common': 118, './utils': 128 },
      ],
      121: [
        function (require, module, exports) {
          'use strict';

          exports.sha1 = require('./sha/1');
          exports.sha224 = require('./sha/224');
          exports.sha256 = require('./sha/256');
          exports.sha384 = require('./sha/384');
          exports.sha512 = require('./sha/512');
        },
        {
          './sha/1': 122,
          './sha/224': 123,
          './sha/256': 124,
          './sha/384': 125,
          './sha/512': 126,
        },
      ],
      122: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var common = require('../common');
          var shaCommon = require('./common');

          var rotl32 = utils.rotl32;
          var sum32 = utils.sum32;
          var sum32_5 = utils.sum32_5;
          var ft_1 = shaCommon.ft_1;
          var BlockHash = common.BlockHash;

          var sha1_K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];

          function SHA1() {
            if (!(this instanceof SHA1)) return new SHA1();

            BlockHash.call(this);
            this.h = [
              0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,
            ];
            this.W = new Array(80);
          }

          utils.inherits(SHA1, BlockHash);
          module.exports = SHA1;

          SHA1.blockSize = 512;
          SHA1.outSize = 160;
          SHA1.hmacStrength = 80;
          SHA1.padLength = 64;

          SHA1.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++) W[i] = msg[start + i];

            for (; i < W.length; i++)
              W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];

            for (i = 0; i < W.length; i++) {
              var s = ~~(i / 20);
              var t = sum32_5(
                rotl32(a, 5),
                ft_1(s, b, c, d),
                e,
                W[i],
                sha1_K[s]
              );
              e = d;
              d = c;
              c = rotl32(b, 30);
              b = a;
              a = t;
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
          };

          SHA1.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'big');
            else return utils.split32(this.h, 'big');
          };
        },
        { '../common': 118, '../utils': 128, './common': 127 },
      ],
      123: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var SHA256 = require('./256');

          function SHA224() {
            if (!(this instanceof SHA224)) return new SHA224();

            SHA256.call(this);
            this.h = [
              0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31,
              0x68581511, 0x64f98fa7, 0xbefa4fa4,
            ];
          }
          utils.inherits(SHA224, SHA256);
          module.exports = SHA224;

          SHA224.blockSize = 512;
          SHA224.outSize = 224;
          SHA224.hmacStrength = 192;
          SHA224.padLength = 64;

          SHA224.prototype._digest = function digest(enc) {
            // Just truncate output
            if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');
            else return utils.split32(this.h.slice(0, 7), 'big');
          };
        },
        { '../utils': 128, './256': 124 },
      ],
      124: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var common = require('../common');
          var shaCommon = require('./common');
          var assert = require('minimalistic-assert');

          var sum32 = utils.sum32;
          var sum32_4 = utils.sum32_4;
          var sum32_5 = utils.sum32_5;
          var ch32 = shaCommon.ch32;
          var maj32 = shaCommon.maj32;
          var s0_256 = shaCommon.s0_256;
          var s1_256 = shaCommon.s1_256;
          var g0_256 = shaCommon.g0_256;
          var g1_256 = shaCommon.g1_256;

          var BlockHash = common.BlockHash;

          var sha256_K = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
            0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
            0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
            0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
            0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
            0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
            0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
            0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
            0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
            0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
            0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
            0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
          ];

          function SHA256() {
            if (!(this instanceof SHA256)) return new SHA256();

            BlockHash.call(this);
            this.h = [
              0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f,
              0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
            ];
            this.k = sha256_K;
            this.W = new Array(64);
          }
          utils.inherits(SHA256, BlockHash);
          module.exports = SHA256;

          SHA256.blockSize = 512;
          SHA256.outSize = 256;
          SHA256.hmacStrength = 192;
          SHA256.padLength = 64;

          SHA256.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++) W[i] = msg[start + i];
            for (; i < W.length; i++)
              W[i] = sum32_4(
                g1_256(W[i - 2]),
                W[i - 7],
                g0_256(W[i - 15]),
                W[i - 16]
              );

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];
            var f = this.h[5];
            var g = this.h[6];
            var h = this.h[7];

            assert(this.k.length === W.length);
            for (i = 0; i < W.length; i++) {
              var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
              var T2 = sum32(s0_256(a), maj32(a, b, c));
              h = g;
              g = f;
              f = e;
              e = sum32(d, T1);
              d = c;
              c = b;
              b = a;
              a = sum32(T1, T2);
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
            this.h[5] = sum32(this.h[5], f);
            this.h[6] = sum32(this.h[6], g);
            this.h[7] = sum32(this.h[7], h);
          };

          SHA256.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'big');
            else return utils.split32(this.h, 'big');
          };
        },
        {
          '../common': 118,
          '../utils': 128,
          './common': 127,
          'minimalistic-assert': 133,
        },
      ],
      125: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');

          var SHA512 = require('./512');

          function SHA384() {
            if (!(this instanceof SHA384)) return new SHA384();

            SHA512.call(this);
            this.h = [
              0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a,
              0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31,
              0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d,
              0xbefa4fa4,
            ];
          }
          utils.inherits(SHA384, SHA512);
          module.exports = SHA384;

          SHA384.blockSize = 1024;
          SHA384.outSize = 384;
          SHA384.hmacStrength = 192;
          SHA384.padLength = 128;

          SHA384.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');
            else return utils.split32(this.h.slice(0, 12), 'big');
          };
        },
        { '../utils': 128, './512': 126 },
      ],
      126: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var common = require('../common');
          var assert = require('minimalistic-assert');

          var rotr64_hi = utils.rotr64_hi;
          var rotr64_lo = utils.rotr64_lo;
          var shr64_hi = utils.shr64_hi;
          var shr64_lo = utils.shr64_lo;
          var sum64 = utils.sum64;
          var sum64_hi = utils.sum64_hi;
          var sum64_lo = utils.sum64_lo;
          var sum64_4_hi = utils.sum64_4_hi;
          var sum64_4_lo = utils.sum64_4_lo;
          var sum64_5_hi = utils.sum64_5_hi;
          var sum64_5_lo = utils.sum64_5_lo;

          var BlockHash = common.BlockHash;

          var sha512_K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf,
            0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538,
            0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5,
            0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74,
            0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235,
            0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786,
            0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc,
            0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab,
            0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7,
            0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85,
            0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed,
            0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb,
            0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70,
            0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218,
            0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070,
            0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3,
            0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373,
            0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f,
            0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7,
            0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c,
            0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f,
            0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5,
            0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc,
            0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c,
            0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817,
          ];

          function SHA512() {
            if (!(this instanceof SHA512)) return new SHA512();

            BlockHash.call(this);
            this.h = [
              0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372,
              0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1,
              0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19,
              0x137e2179,
            ];
            this.k = sha512_K;
            this.W = new Array(160);
          }
          utils.inherits(SHA512, BlockHash);
          module.exports = SHA512;

          SHA512.blockSize = 1024;
          SHA512.outSize = 512;
          SHA512.hmacStrength = 192;
          SHA512.padLength = 128;

          SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
            var W = this.W;

            // 32 x 32bit words
            for (var i = 0; i < 32; i++) W[i] = msg[start + i];
            for (; i < W.length; i += 2) {
              var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
              var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
              var c1_hi = W[i - 14]; // i - 7
              var c1_lo = W[i - 13];
              var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
              var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
              var c3_hi = W[i - 32]; // i - 16
              var c3_lo = W[i - 31];

              W[i] = sum64_4_hi(
                c0_hi,
                c0_lo,
                c1_hi,
                c1_lo,
                c2_hi,
                c2_lo,
                c3_hi,
                c3_lo
              );
              W[i + 1] = sum64_4_lo(
                c0_hi,
                c0_lo,
                c1_hi,
                c1_lo,
                c2_hi,
                c2_lo,
                c3_hi,
                c3_lo
              );
            }
          };

          SHA512.prototype._update = function _update(msg, start) {
            this._prepareBlock(msg, start);

            var W = this.W;

            var ah = this.h[0];
            var al = this.h[1];
            var bh = this.h[2];
            var bl = this.h[3];
            var ch = this.h[4];
            var cl = this.h[5];
            var dh = this.h[6];
            var dl = this.h[7];
            var eh = this.h[8];
            var el = this.h[9];
            var fh = this.h[10];
            var fl = this.h[11];
            var gh = this.h[12];
            var gl = this.h[13];
            var hh = this.h[14];
            var hl = this.h[15];

            assert(this.k.length === W.length);
            for (var i = 0; i < W.length; i += 2) {
              var c0_hi = hh;
              var c0_lo = hl;
              var c1_hi = s1_512_hi(eh, el);
              var c1_lo = s1_512_lo(eh, el);
              var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
              var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
              var c3_hi = this.k[i];
              var c3_lo = this.k[i + 1];
              var c4_hi = W[i];
              var c4_lo = W[i + 1];

              var T1_hi = sum64_5_hi(
                c0_hi,
                c0_lo,
                c1_hi,
                c1_lo,
                c2_hi,
                c2_lo,
                c3_hi,
                c3_lo,
                c4_hi,
                c4_lo
              );
              var T1_lo = sum64_5_lo(
                c0_hi,
                c0_lo,
                c1_hi,
                c1_lo,
                c2_hi,
                c2_lo,
                c3_hi,
                c3_lo,
                c4_hi,
                c4_lo
              );

              c0_hi = s0_512_hi(ah, al);
              c0_lo = s0_512_lo(ah, al);
              c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
              c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

              var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
              var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

              hh = gh;
              hl = gl;

              gh = fh;
              gl = fl;

              fh = eh;
              fl = el;

              eh = sum64_hi(dh, dl, T1_hi, T1_lo);
              el = sum64_lo(dl, dl, T1_hi, T1_lo);

              dh = ch;
              dl = cl;

              ch = bh;
              cl = bl;

              bh = ah;
              bl = al;

              ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
              al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
            }

            sum64(this.h, 0, ah, al);
            sum64(this.h, 2, bh, bl);
            sum64(this.h, 4, ch, cl);
            sum64(this.h, 6, dh, dl);
            sum64(this.h, 8, eh, el);
            sum64(this.h, 10, fh, fl);
            sum64(this.h, 12, gh, gl);
            sum64(this.h, 14, hh, hl);
          };

          SHA512.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils.toHex32(this.h, 'big');
            else return utils.split32(this.h, 'big');
          };

          function ch64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ (~xh & zh);
            if (r < 0) r += 0x100000000;
            return r;
          }

          function ch64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ (~xl & zl);
            if (r < 0) r += 0x100000000;
            return r;
          }

          function maj64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
            if (r < 0) r += 0x100000000;
            return r;
          }

          function maj64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 28);
            var c1_hi = rotr64_hi(xl, xh, 2); // 34
            var c2_hi = rotr64_hi(xl, xh, 7); // 39

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 28);
            var c1_lo = rotr64_lo(xl, xh, 2); // 34
            var c2_lo = rotr64_lo(xl, xh, 7); // 39

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 14);
            var c1_hi = rotr64_hi(xh, xl, 18);
            var c2_hi = rotr64_hi(xl, xh, 9); // 41

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function s1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 14);
            var c1_lo = rotr64_lo(xh, xl, 18);
            var c2_lo = rotr64_lo(xl, xh, 9); // 41

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 1);
            var c1_hi = rotr64_hi(xh, xl, 8);
            var c2_hi = shr64_hi(xh, xl, 7);

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 1);
            var c1_lo = rotr64_lo(xh, xl, 8);
            var c2_lo = shr64_lo(xh, xl, 7);

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 19);
            var c1_hi = rotr64_hi(xl, xh, 29); // 61
            var c2_hi = shr64_hi(xh, xl, 6);

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 0x100000000;
            return r;
          }

          function g1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 19);
            var c1_lo = rotr64_lo(xl, xh, 29); // 61
            var c2_lo = shr64_lo(xh, xl, 6);

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 0x100000000;
            return r;
          }
        },
        { '../common': 118, '../utils': 128, 'minimalistic-assert': 133 },
      ],
      127: [
        function (require, module, exports) {
          'use strict';

          var utils = require('../utils');
          var rotr32 = utils.rotr32;

          function ft_1(s, x, y, z) {
            if (s === 0) return ch32(x, y, z);
            if (s === 1 || s === 3) return p32(x, y, z);
            if (s === 2) return maj32(x, y, z);
          }
          exports.ft_1 = ft_1;

          function ch32(x, y, z) {
            return (x & y) ^ (~x & z);
          }
          exports.ch32 = ch32;

          function maj32(x, y, z) {
            return (x & y) ^ (x & z) ^ (y & z);
          }
          exports.maj32 = maj32;

          function p32(x, y, z) {
            return x ^ y ^ z;
          }
          exports.p32 = p32;

          function s0_256(x) {
            return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
          }
          exports.s0_256 = s0_256;

          function s1_256(x) {
            return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
          }
          exports.s1_256 = s1_256;

          function g0_256(x) {
            return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
          }
          exports.g0_256 = g0_256;

          function g1_256(x) {
            return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
          }
          exports.g1_256 = g1_256;
        },
        { '../utils': 128 },
      ],
      128: [
        function (require, module, exports) {
          'use strict';

          var assert = require('minimalistic-assert');
          var inherits = require('inherits');

          exports.inherits = inherits;

          function isSurrogatePair(msg, i) {
            if ((msg.charCodeAt(i) & 0xfc00) !== 0xd800) {
              return false;
            }
            if (i < 0 || i + 1 >= msg.length) {
              return false;
            }
            return (msg.charCodeAt(i + 1) & 0xfc00) === 0xdc00;
          }

          function toArray(msg, enc) {
            if (Array.isArray(msg)) return msg.slice();
            if (!msg) return [];
            var res = [];
            if (typeof msg === 'string') {
              if (!enc) {
                // Inspired by stringToUtf8ByteArray() in closure-library by Google
                // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
                // Apache License 2.0
                // https://github.com/google/closure-library/blob/master/LICENSE
                var p = 0;
                for (var i = 0; i < msg.length; i++) {
                  var c = msg.charCodeAt(i);
                  if (c < 128) {
                    res[p++] = c;
                  } else if (c < 2048) {
                    res[p++] = (c >> 6) | 192;
                    res[p++] = (c & 63) | 128;
                  } else if (isSurrogatePair(msg, i)) {
                    c =
                      0x10000 +
                      ((c & 0x03ff) << 10) +
                      (msg.charCodeAt(++i) & 0x03ff);
                    res[p++] = (c >> 18) | 240;
                    res[p++] = ((c >> 12) & 63) | 128;
                    res[p++] = ((c >> 6) & 63) | 128;
                    res[p++] = (c & 63) | 128;
                  } else {
                    res[p++] = (c >> 12) | 224;
                    res[p++] = ((c >> 6) & 63) | 128;
                    res[p++] = (c & 63) | 128;
                  }
                }
              } else if (enc === 'hex') {
                msg = msg.replace(/[^a-z0-9]+/gi, '');
                if (msg.length % 2 !== 0) msg = '0' + msg;
                for (i = 0; i < msg.length; i += 2)
                  res.push(parseInt(msg[i] + msg[i + 1], 16));
              }
            } else {
              for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
            }
            return res;
          }
          exports.toArray = toArray;

          function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++)
              res += zero2(msg[i].toString(16));
            return res;
          }
          exports.toHex = toHex;

          function htonl(w) {
            var res =
              (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
            return res >>> 0;
          }
          exports.htonl = htonl;

          function toHex32(msg, endian) {
            var res = '';
            for (var i = 0; i < msg.length; i++) {
              var w = msg[i];
              if (endian === 'little') w = htonl(w);
              res += zero8(w.toString(16));
            }
            return res;
          }
          exports.toHex32 = toHex32;

          function zero2(word) {
            if (word.length === 1) return '0' + word;
            else return word;
          }
          exports.zero2 = zero2;

          function zero8(word) {
            if (word.length === 7) return '0' + word;
            else if (word.length === 6) return '00' + word;
            else if (word.length === 5) return '000' + word;
            else if (word.length === 4) return '0000' + word;
            else if (word.length === 3) return '00000' + word;
            else if (word.length === 2) return '000000' + word;
            else if (word.length === 1) return '0000000' + word;
            else return word;
          }
          exports.zero8 = zero8;

          function join32(msg, start, end, endian) {
            var len = end - start;
            assert(len % 4 === 0);
            var res = new Array(len / 4);
            for (var i = 0, k = start; i < res.length; i++, k += 4) {
              var w;
              if (endian === 'big')
                w =
                  (msg[k] << 24) |
                  (msg[k + 1] << 16) |
                  (msg[k + 2] << 8) |
                  msg[k + 3];
              else
                w =
                  (msg[k + 3] << 24) |
                  (msg[k + 2] << 16) |
                  (msg[k + 1] << 8) |
                  msg[k];
              res[i] = w >>> 0;
            }
            return res;
          }
          exports.join32 = join32;

          function split32(msg, endian) {
            var res = new Array(msg.length * 4);
            for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
              var m = msg[i];
              if (endian === 'big') {
                res[k] = m >>> 24;
                res[k + 1] = (m >>> 16) & 0xff;
                res[k + 2] = (m >>> 8) & 0xff;
                res[k + 3] = m & 0xff;
              } else {
                res[k + 3] = m >>> 24;
                res[k + 2] = (m >>> 16) & 0xff;
                res[k + 1] = (m >>> 8) & 0xff;
                res[k] = m & 0xff;
              }
            }
            return res;
          }
          exports.split32 = split32;

          function rotr32(w, b) {
            return (w >>> b) | (w << (32 - b));
          }
          exports.rotr32 = rotr32;

          function rotl32(w, b) {
            return (w << b) | (w >>> (32 - b));
          }
          exports.rotl32 = rotl32;

          function sum32(a, b) {
            return (a + b) >>> 0;
          }
          exports.sum32 = sum32;

          function sum32_3(a, b, c) {
            return (a + b + c) >>> 0;
          }
          exports.sum32_3 = sum32_3;

          function sum32_4(a, b, c, d) {
            return (a + b + c + d) >>> 0;
          }
          exports.sum32_4 = sum32_4;

          function sum32_5(a, b, c, d, e) {
            return (a + b + c + d + e) >>> 0;
          }
          exports.sum32_5 = sum32_5;

          function sum64(buf, pos, ah, al) {
            var bh = buf[pos];
            var bl = buf[pos + 1];

            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            buf[pos] = hi >>> 0;
            buf[pos + 1] = lo;
          }
          exports.sum64 = sum64;

          function sum64_hi(ah, al, bh, bl) {
            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            return hi >>> 0;
          }
          exports.sum64_hi = sum64_hi;

          function sum64_lo(ah, al, bh, bl) {
            var lo = al + bl;
            return lo >>> 0;
          }
          exports.sum64_lo = sum64_lo;

          function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;

            var hi = ah + bh + ch + dh + carry;
            return hi >>> 0;
          }
          exports.sum64_4_hi = sum64_4_hi;

          function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
            var lo = al + bl + cl + dl;
            return lo >>> 0;
          }
          exports.sum64_4_lo = sum64_4_lo;

          function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;
            lo = (lo + el) >>> 0;
            carry += lo < el ? 1 : 0;

            var hi = ah + bh + ch + dh + eh + carry;
            return hi >>> 0;
          }
          exports.sum64_5_hi = sum64_5_hi;

          function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var lo = al + bl + cl + dl + el;

            return lo >>> 0;
          }
          exports.sum64_5_lo = sum64_5_lo;

          function rotr64_hi(ah, al, num) {
            var r = (al << (32 - num)) | (ah >>> num);
            return r >>> 0;
          }
          exports.rotr64_hi = rotr64_hi;

          function rotr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
          }
          exports.rotr64_lo = rotr64_lo;

          function shr64_hi(ah, al, num) {
            return ah >>> num;
          }
          exports.shr64_hi = shr64_hi;

          function shr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
          }
          exports.shr64_lo = shr64_lo;
        },
        { inherits: 130, 'minimalistic-assert': 133 },
      ],
      129: [
        function (require, module, exports) {
          'use strict';

          var hash = require('hash.js');
          var utils = require('minimalistic-crypto-utils');
          var assert = require('minimalistic-assert');

          function HmacDRBG(options) {
            if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
            this.hash = options.hash;
            this.predResist = !!options.predResist;

            this.outLen = this.hash.outSize;
            this.minEntropy = options.minEntropy || this.hash.hmacStrength;

            this._reseed = null;
            this.reseedInterval = null;
            this.K = null;
            this.V = null;

            var entropy = utils.toArray(
              options.entropy,
              options.entropyEnc || 'hex'
            );
            var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
            var pers = utils.toArray(options.pers, options.persEnc || 'hex');
            assert(
              entropy.length >= this.minEntropy / 8,
              'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits'
            );
            this._init(entropy, nonce, pers);
          }
          module.exports = HmacDRBG;

          HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
            var seed = entropy.concat(nonce).concat(pers);

            this.K = new Array(this.outLen / 8);
            this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) {
              this.K[i] = 0x00;
              this.V[i] = 0x01;
            }

            this._update(seed);
            this._reseed = 1;
            this.reseedInterval = 0x1000000000000; // 2^48
          };

          HmacDRBG.prototype._hmac = function hmac() {
            return new hash.hmac(this.hash, this.K);
          };

          HmacDRBG.prototype._update = function update(seed) {
            var kmac = this._hmac().update(this.V).update([0x00]);
            if (seed) kmac = kmac.update(seed);
            this.K = kmac.digest();
            this.V = this._hmac().update(this.V).digest();
            if (!seed) return;

            this.K = this._hmac()
              .update(this.V)
              .update([0x01])
              .update(seed)
              .digest();
            this.V = this._hmac().update(this.V).digest();
          };

          HmacDRBG.prototype.reseed = function reseed(
            entropy,
            entropyEnc,
            add,
            addEnc
          ) {
            // Optional entropy enc
            if (typeof entropyEnc !== 'string') {
              addEnc = add;
              add = entropyEnc;
              entropyEnc = null;
            }

            entropy = utils.toArray(entropy, entropyEnc);
            add = utils.toArray(add, addEnc);

            assert(
              entropy.length >= this.minEntropy / 8,
              'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits'
            );

            this._update(entropy.concat(add || []));
            this._reseed = 1;
          };

          HmacDRBG.prototype.generate = function generate(
            len,
            enc,
            add,
            addEnc
          ) {
            if (this._reseed > this.reseedInterval)
              throw new Error('Reseed is required');

            // Optional encoding
            if (typeof enc !== 'string') {
              addEnc = add;
              add = enc;
              enc = null;
            }

            // Optional additional data
            if (add) {
              add = utils.toArray(add, addEnc || 'hex');
              this._update(add);
            }

            var temp = [];
            while (temp.length < len) {
              this.V = this._hmac().update(this.V).digest();
              temp = temp.concat(this.V);
            }

            var res = temp.slice(0, len);
            this._update(add);
            this._reseed++;
            return utils.encode(res, enc);
          };
        },
        {
          'hash.js': 117,
          'minimalistic-assert': 133,
          'minimalistic-crypto-utils': 134,
        },
      ],
      130: [
        function (require, module, exports) {
          if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
              if (superCtor) {
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true,
                  },
                });
              }
            };
          } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
              if (superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function () {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
              }
            };
          }
        },
        {},
      ],
      131: [
        function (require, module, exports) {
          (function (process, global) {
            (function () {
              /**
               * [js-sha256]{@link https://github.com/emn178/js-sha256}
               *
               * @version 0.9.0
               * @author Chen, Yi-Cyuan [emn178@gmail.com]
               * @copyright Chen, Yi-Cyuan 2014-2017
               * @license MIT
               */
              /*jslint bitwise: true */
              (function () {
                'use strict';

                var ERROR = 'input is invalid type';
                var WINDOW = typeof window === 'object';
                var root = WINDOW ? window : {};
                if (root.JS_SHA256_NO_WINDOW) {
                  WINDOW = false;
                }
                var WEB_WORKER = !WINDOW && typeof self === 'object';
                var NODE_JS =
                  !root.JS_SHA256_NO_NODE_JS &&
                  typeof process === 'object' &&
                  process.versions &&
                  process.versions.node;
                if (NODE_JS) {
                  root = global;
                } else if (WEB_WORKER) {
                  root = self;
                }
                var COMMON_JS =
                  !root.JS_SHA256_NO_COMMON_JS &&
                  typeof module === 'object' &&
                  module.exports;
                var AMD = typeof define === 'function' && define.amd;
                var ARRAY_BUFFER =
                  !root.JS_SHA256_NO_ARRAY_BUFFER &&
                  typeof ArrayBuffer !== 'undefined';
                var HEX_CHARS = '0123456789abcdef'.split('');
                var EXTRA = [-2147483648, 8388608, 32768, 128];
                var SHIFT = [24, 16, 8, 0];
                var K = [
                  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
                  0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
                  0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
                  0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
                  0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
                  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
                  0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
                  0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
                  0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
                  0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
                ];
                var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

                var blocks = [];

                if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
                  Array.isArray = function (obj) {
                    return (
                      Object.prototype.toString.call(obj) === '[object Array]'
                    );
                  };
                }

                if (
                  ARRAY_BUFFER &&
                  (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW ||
                    !ArrayBuffer.isView)
                ) {
                  ArrayBuffer.isView = function (obj) {
                    return (
                      typeof obj === 'object' &&
                      obj.buffer &&
                      obj.buffer.constructor === ArrayBuffer
                    );
                  };
                }

                var createOutputMethod = function (outputType, is224) {
                  return function (message) {
                    return new Sha256(is224, true)
                      .update(message)
                      [outputType]();
                  };
                };

                var createMethod = function (is224) {
                  var method = createOutputMethod('hex', is224);
                  if (NODE_JS) {
                    method = nodeWrap(method, is224);
                  }
                  method.create = function () {
                    return new Sha256(is224);
                  };
                  method.update = function (message) {
                    return method.create().update(message);
                  };
                  for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
                    var type = OUTPUT_TYPES[i];
                    method[type] = createOutputMethod(type, is224);
                  }
                  return method;
                };

                var nodeWrap = function (method, is224) {
                  var crypto = eval("require('crypto')");
                  var Buffer = eval("require('buffer').Buffer");
                  var algorithm = is224 ? 'sha224' : 'sha256';
                  var nodeMethod = function (message) {
                    if (typeof message === 'string') {
                      return crypto
                        .createHash(algorithm)
                        .update(message, 'utf8')
                        .digest('hex');
                    } else {
                      if (message === null || message === undefined) {
                        throw new Error(ERROR);
                      } else if (message.constructor === ArrayBuffer) {
                        message = new Uint8Array(message);
                      }
                    }
                    if (
                      Array.isArray(message) ||
                      ArrayBuffer.isView(message) ||
                      message.constructor === Buffer
                    ) {
                      return crypto
                        .createHash(algorithm)
                        .update(new Buffer(message))
                        .digest('hex');
                    } else {
                      return method(message);
                    }
                  };
                  return nodeMethod;
                };

                var createHmacOutputMethod = function (outputType, is224) {
                  return function (key, message) {
                    return new HmacSha256(key, is224, true)
                      .update(message)
                      [outputType]();
                  };
                };

                var createHmacMethod = function (is224) {
                  var method = createHmacOutputMethod('hex', is224);
                  method.create = function (key) {
                    return new HmacSha256(key, is224);
                  };
                  method.update = function (key, message) {
                    return method.create(key).update(message);
                  };
                  for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
                    var type = OUTPUT_TYPES[i];
                    method[type] = createHmacOutputMethod(type, is224);
                  }
                  return method;
                };

                function Sha256(is224, sharedMemory) {
                  if (sharedMemory) {
                    blocks[0] =
                      blocks[16] =
                      blocks[1] =
                      blocks[2] =
                      blocks[3] =
                      blocks[4] =
                      blocks[5] =
                      blocks[6] =
                      blocks[7] =
                      blocks[8] =
                      blocks[9] =
                      blocks[10] =
                      blocks[11] =
                      blocks[12] =
                      blocks[13] =
                      blocks[14] =
                      blocks[15] =
                        0;
                    this.blocks = blocks;
                  } else {
                    this.blocks = [
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                  }

                  if (is224) {
                    this.h0 = 0xc1059ed8;
                    this.h1 = 0x367cd507;
                    this.h2 = 0x3070dd17;
                    this.h3 = 0xf70e5939;
                    this.h4 = 0xffc00b31;
                    this.h5 = 0x68581511;
                    this.h6 = 0x64f98fa7;
                    this.h7 = 0xbefa4fa4;
                  } else {
                    // 256
                    this.h0 = 0x6a09e667;
                    this.h1 = 0xbb67ae85;
                    this.h2 = 0x3c6ef372;
                    this.h3 = 0xa54ff53a;
                    this.h4 = 0x510e527f;
                    this.h5 = 0x9b05688c;
                    this.h6 = 0x1f83d9ab;
                    this.h7 = 0x5be0cd19;
                  }

                  this.block = this.start = this.bytes = this.hBytes = 0;
                  this.finalized = this.hashed = false;
                  this.first = true;
                  this.is224 = is224;
                }

                Sha256.prototype.update = function (message) {
                  if (this.finalized) {
                    return;
                  }
                  var notString,
                    type = typeof message;
                  if (type !== 'string') {
                    if (type === 'object') {
                      if (message === null) {
                        throw new Error(ERROR);
                      } else if (
                        ARRAY_BUFFER &&
                        message.constructor === ArrayBuffer
                      ) {
                        message = new Uint8Array(message);
                      } else if (!Array.isArray(message)) {
                        if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                          throw new Error(ERROR);
                        }
                      }
                    } else {
                      throw new Error(ERROR);
                    }
                    notString = true;
                  }
                  var code,
                    index = 0,
                    i,
                    length = message.length,
                    blocks = this.blocks;

                  while (index < length) {
                    if (this.hashed) {
                      this.hashed = false;
                      blocks[0] = this.block;
                      blocks[16] =
                        blocks[1] =
                        blocks[2] =
                        blocks[3] =
                        blocks[4] =
                        blocks[5] =
                        blocks[6] =
                        blocks[7] =
                        blocks[8] =
                        blocks[9] =
                        blocks[10] =
                        blocks[11] =
                        blocks[12] =
                        blocks[13] =
                        blocks[14] =
                        blocks[15] =
                          0;
                    }

                    if (notString) {
                      for (i = this.start; index < length && i < 64; ++index) {
                        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                      }
                    } else {
                      for (i = this.start; index < length && i < 64; ++index) {
                        code = message.charCodeAt(index);
                        if (code < 0x80) {
                          blocks[i >> 2] |= code << SHIFT[i++ & 3];
                        } else if (code < 0x800) {
                          blocks[i >> 2] |=
                            (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                          blocks[i >> 2] |=
                            (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                        } else if (code < 0xd800 || code >= 0xe000) {
                          blocks[i >> 2] |=
                            (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                          blocks[i >> 2] |=
                            (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                          blocks[i >> 2] |=
                            (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                        } else {
                          code =
                            0x10000 +
                            (((code & 0x3ff) << 10) |
                              (message.charCodeAt(++index) & 0x3ff));
                          blocks[i >> 2] |=
                            (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                          blocks[i >> 2] |=
                            (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                          blocks[i >> 2] |=
                            (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                          blocks[i >> 2] |=
                            (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                        }
                      }
                    }

                    this.lastByteIndex = i;
                    this.bytes += i - this.start;
                    if (i >= 64) {
                      this.block = blocks[16];
                      this.start = i - 64;
                      this.hash();
                      this.hashed = true;
                    } else {
                      this.start = i;
                    }
                  }
                  if (this.bytes > 4294967295) {
                    this.hBytes += (this.bytes / 4294967296) << 0;
                    this.bytes = this.bytes % 4294967296;
                  }
                  return this;
                };

                Sha256.prototype.finalize = function () {
                  if (this.finalized) {
                    return;
                  }
                  this.finalized = true;
                  var blocks = this.blocks,
                    i = this.lastByteIndex;
                  blocks[16] = this.block;
                  blocks[i >> 2] |= EXTRA[i & 3];
                  this.block = blocks[16];
                  if (i >= 56) {
                    if (!this.hashed) {
                      this.hash();
                    }
                    blocks[0] = this.block;
                    blocks[16] =
                      blocks[1] =
                      blocks[2] =
                      blocks[3] =
                      blocks[4] =
                      blocks[5] =
                      blocks[6] =
                      blocks[7] =
                      blocks[8] =
                      blocks[9] =
                      blocks[10] =
                      blocks[11] =
                      blocks[12] =
                      blocks[13] =
                      blocks[14] =
                      blocks[15] =
                        0;
                  }
                  blocks[14] = (this.hBytes << 3) | (this.bytes >>> 29);
                  blocks[15] = this.bytes << 3;
                  this.hash();
                };

                Sha256.prototype.hash = function () {
                  var a = this.h0,
                    b = this.h1,
                    c = this.h2,
                    d = this.h3,
                    e = this.h4,
                    f = this.h5,
                    g = this.h6,
                    h = this.h7,
                    blocks = this.blocks,
                    j,
                    s0,
                    s1,
                    maj,
                    t1,
                    t2,
                    ch,
                    ab,
                    da,
                    cd,
                    bc;

                  for (j = 16; j < 64; ++j) {
                    // rightrotate
                    t1 = blocks[j - 15];
                    s0 =
                      ((t1 >>> 7) | (t1 << 25)) ^
                      ((t1 >>> 18) | (t1 << 14)) ^
                      (t1 >>> 3);
                    t1 = blocks[j - 2];
                    s1 =
                      ((t1 >>> 17) | (t1 << 15)) ^
                      ((t1 >>> 19) | (t1 << 13)) ^
                      (t1 >>> 10);
                    blocks[j] = (blocks[j - 16] + s0 + blocks[j - 7] + s1) << 0;
                  }

                  bc = b & c;
                  for (j = 0; j < 64; j += 4) {
                    if (this.first) {
                      if (this.is224) {
                        ab = 300032;
                        t1 = blocks[0] - 1413257819;
                        h = (t1 - 150054599) << 0;
                        d = (t1 + 24177077) << 0;
                      } else {
                        ab = 704751109;
                        t1 = blocks[0] - 210244248;
                        h = (t1 - 1521486534) << 0;
                        d = (t1 + 143694565) << 0;
                      }
                      this.first = false;
                    } else {
                      s0 =
                        ((a >>> 2) | (a << 30)) ^
                        ((a >>> 13) | (a << 19)) ^
                        ((a >>> 22) | (a << 10));
                      s1 =
                        ((e >>> 6) | (e << 26)) ^
                        ((e >>> 11) | (e << 21)) ^
                        ((e >>> 25) | (e << 7));
                      ab = a & b;
                      maj = ab ^ (a & c) ^ bc;
                      ch = (e & f) ^ (~e & g);
                      t1 = h + s1 + ch + K[j] + blocks[j];
                      t2 = s0 + maj;
                      h = (d + t1) << 0;
                      d = (t1 + t2) << 0;
                    }
                    s0 =
                      ((d >>> 2) | (d << 30)) ^
                      ((d >>> 13) | (d << 19)) ^
                      ((d >>> 22) | (d << 10));
                    s1 =
                      ((h >>> 6) | (h << 26)) ^
                      ((h >>> 11) | (h << 21)) ^
                      ((h >>> 25) | (h << 7));
                    da = d & a;
                    maj = da ^ (d & b) ^ ab;
                    ch = (h & e) ^ (~h & f);
                    t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
                    t2 = s0 + maj;
                    g = (c + t1) << 0;
                    c = (t1 + t2) << 0;
                    s0 =
                      ((c >>> 2) | (c << 30)) ^
                      ((c >>> 13) | (c << 19)) ^
                      ((c >>> 22) | (c << 10));
                    s1 =
                      ((g >>> 6) | (g << 26)) ^
                      ((g >>> 11) | (g << 21)) ^
                      ((g >>> 25) | (g << 7));
                    cd = c & d;
                    maj = cd ^ (c & a) ^ da;
                    ch = (g & h) ^ (~g & e);
                    t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
                    t2 = s0 + maj;
                    f = (b + t1) << 0;
                    b = (t1 + t2) << 0;
                    s0 =
                      ((b >>> 2) | (b << 30)) ^
                      ((b >>> 13) | (b << 19)) ^
                      ((b >>> 22) | (b << 10));
                    s1 =
                      ((f >>> 6) | (f << 26)) ^
                      ((f >>> 11) | (f << 21)) ^
                      ((f >>> 25) | (f << 7));
                    bc = b & c;
                    maj = bc ^ (b & d) ^ cd;
                    ch = (f & g) ^ (~f & h);
                    t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
                    t2 = s0 + maj;
                    e = (a + t1) << 0;
                    a = (t1 + t2) << 0;
                  }

                  this.h0 = (this.h0 + a) << 0;
                  this.h1 = (this.h1 + b) << 0;
                  this.h2 = (this.h2 + c) << 0;
                  this.h3 = (this.h3 + d) << 0;
                  this.h4 = (this.h4 + e) << 0;
                  this.h5 = (this.h5 + f) << 0;
                  this.h6 = (this.h6 + g) << 0;
                  this.h7 = (this.h7 + h) << 0;
                };

                Sha256.prototype.hex = function () {
                  this.finalize();

                  var h0 = this.h0,
                    h1 = this.h1,
                    h2 = this.h2,
                    h3 = this.h3,
                    h4 = this.h4,
                    h5 = this.h5,
                    h6 = this.h6,
                    h7 = this.h7;

                  var hex =
                    HEX_CHARS[(h0 >> 28) & 0x0f] +
                    HEX_CHARS[(h0 >> 24) & 0x0f] +
                    HEX_CHARS[(h0 >> 20) & 0x0f] +
                    HEX_CHARS[(h0 >> 16) & 0x0f] +
                    HEX_CHARS[(h0 >> 12) & 0x0f] +
                    HEX_CHARS[(h0 >> 8) & 0x0f] +
                    HEX_CHARS[(h0 >> 4) & 0x0f] +
                    HEX_CHARS[h0 & 0x0f] +
                    HEX_CHARS[(h1 >> 28) & 0x0f] +
                    HEX_CHARS[(h1 >> 24) & 0x0f] +
                    HEX_CHARS[(h1 >> 20) & 0x0f] +
                    HEX_CHARS[(h1 >> 16) & 0x0f] +
                    HEX_CHARS[(h1 >> 12) & 0x0f] +
                    HEX_CHARS[(h1 >> 8) & 0x0f] +
                    HEX_CHARS[(h1 >> 4) & 0x0f] +
                    HEX_CHARS[h1 & 0x0f] +
                    HEX_CHARS[(h2 >> 28) & 0x0f] +
                    HEX_CHARS[(h2 >> 24) & 0x0f] +
                    HEX_CHARS[(h2 >> 20) & 0x0f] +
                    HEX_CHARS[(h2 >> 16) & 0x0f] +
                    HEX_CHARS[(h2 >> 12) & 0x0f] +
                    HEX_CHARS[(h2 >> 8) & 0x0f] +
                    HEX_CHARS[(h2 >> 4) & 0x0f] +
                    HEX_CHARS[h2 & 0x0f] +
                    HEX_CHARS[(h3 >> 28) & 0x0f] +
                    HEX_CHARS[(h3 >> 24) & 0x0f] +
                    HEX_CHARS[(h3 >> 20) & 0x0f] +
                    HEX_CHARS[(h3 >> 16) & 0x0f] +
                    HEX_CHARS[(h3 >> 12) & 0x0f] +
                    HEX_CHARS[(h3 >> 8) & 0x0f] +
                    HEX_CHARS[(h3 >> 4) & 0x0f] +
                    HEX_CHARS[h3 & 0x0f] +
                    HEX_CHARS[(h4 >> 28) & 0x0f] +
                    HEX_CHARS[(h4 >> 24) & 0x0f] +
                    HEX_CHARS[(h4 >> 20) & 0x0f] +
                    HEX_CHARS[(h4 >> 16) & 0x0f] +
                    HEX_CHARS[(h4 >> 12) & 0x0f] +
                    HEX_CHARS[(h4 >> 8) & 0x0f] +
                    HEX_CHARS[(h4 >> 4) & 0x0f] +
                    HEX_CHARS[h4 & 0x0f] +
                    HEX_CHARS[(h5 >> 28) & 0x0f] +
                    HEX_CHARS[(h5 >> 24) & 0x0f] +
                    HEX_CHARS[(h5 >> 20) & 0x0f] +
                    HEX_CHARS[(h5 >> 16) & 0x0f] +
                    HEX_CHARS[(h5 >> 12) & 0x0f] +
                    HEX_CHARS[(h5 >> 8) & 0x0f] +
                    HEX_CHARS[(h5 >> 4) & 0x0f] +
                    HEX_CHARS[h5 & 0x0f] +
                    HEX_CHARS[(h6 >> 28) & 0x0f] +
                    HEX_CHARS[(h6 >> 24) & 0x0f] +
                    HEX_CHARS[(h6 >> 20) & 0x0f] +
                    HEX_CHARS[(h6 >> 16) & 0x0f] +
                    HEX_CHARS[(h6 >> 12) & 0x0f] +
                    HEX_CHARS[(h6 >> 8) & 0x0f] +
                    HEX_CHARS[(h6 >> 4) & 0x0f] +
                    HEX_CHARS[h6 & 0x0f];
                  if (!this.is224) {
                    hex +=
                      HEX_CHARS[(h7 >> 28) & 0x0f] +
                      HEX_CHARS[(h7 >> 24) & 0x0f] +
                      HEX_CHARS[(h7 >> 20) & 0x0f] +
                      HEX_CHARS[(h7 >> 16) & 0x0f] +
                      HEX_CHARS[(h7 >> 12) & 0x0f] +
                      HEX_CHARS[(h7 >> 8) & 0x0f] +
                      HEX_CHARS[(h7 >> 4) & 0x0f] +
                      HEX_CHARS[h7 & 0x0f];
                  }
                  return hex;
                };

                Sha256.prototype.toString = Sha256.prototype.hex;

                Sha256.prototype.digest = function () {
                  this.finalize();

                  var h0 = this.h0,
                    h1 = this.h1,
                    h2 = this.h2,
                    h3 = this.h3,
                    h4 = this.h4,
                    h5 = this.h5,
                    h6 = this.h6,
                    h7 = this.h7;

                  var arr = [
                    (h0 >> 24) & 0xff,
                    (h0 >> 16) & 0xff,
                    (h0 >> 8) & 0xff,
                    h0 & 0xff,
                    (h1 >> 24) & 0xff,
                    (h1 >> 16) & 0xff,
                    (h1 >> 8) & 0xff,
                    h1 & 0xff,
                    (h2 >> 24) & 0xff,
                    (h2 >> 16) & 0xff,
                    (h2 >> 8) & 0xff,
                    h2 & 0xff,
                    (h3 >> 24) & 0xff,
                    (h3 >> 16) & 0xff,
                    (h3 >> 8) & 0xff,
                    h3 & 0xff,
                    (h4 >> 24) & 0xff,
                    (h4 >> 16) & 0xff,
                    (h4 >> 8) & 0xff,
                    h4 & 0xff,
                    (h5 >> 24) & 0xff,
                    (h5 >> 16) & 0xff,
                    (h5 >> 8) & 0xff,
                    h5 & 0xff,
                    (h6 >> 24) & 0xff,
                    (h6 >> 16) & 0xff,
                    (h6 >> 8) & 0xff,
                    h6 & 0xff,
                  ];
                  if (!this.is224) {
                    arr.push(
                      (h7 >> 24) & 0xff,
                      (h7 >> 16) & 0xff,
                      (h7 >> 8) & 0xff,
                      h7 & 0xff
                    );
                  }
                  return arr;
                };

                Sha256.prototype.array = Sha256.prototype.digest;

                Sha256.prototype.arrayBuffer = function () {
                  this.finalize();

                  var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
                  var dataView = new DataView(buffer);
                  dataView.setUint32(0, this.h0);
                  dataView.setUint32(4, this.h1);
                  dataView.setUint32(8, this.h2);
                  dataView.setUint32(12, this.h3);
                  dataView.setUint32(16, this.h4);
                  dataView.setUint32(20, this.h5);
                  dataView.setUint32(24, this.h6);
                  if (!this.is224) {
                    dataView.setUint32(28, this.h7);
                  }
                  return buffer;
                };

                function HmacSha256(key, is224, sharedMemory) {
                  var i,
                    type = typeof key;
                  if (type === 'string') {
                    var bytes = [],
                      length = key.length,
                      index = 0,
                      code;
                    for (i = 0; i < length; ++i) {
                      code = key.charCodeAt(i);
                      if (code < 0x80) {
                        bytes[index++] = code;
                      } else if (code < 0x800) {
                        bytes[index++] = 0xc0 | (code >> 6);
                        bytes[index++] = 0x80 | (code & 0x3f);
                      } else if (code < 0xd800 || code >= 0xe000) {
                        bytes[index++] = 0xe0 | (code >> 12);
                        bytes[index++] = 0x80 | ((code >> 6) & 0x3f);
                        bytes[index++] = 0x80 | (code & 0x3f);
                      } else {
                        code =
                          0x10000 +
                          (((code & 0x3ff) << 10) |
                            (key.charCodeAt(++i) & 0x3ff));
                        bytes[index++] = 0xf0 | (code >> 18);
                        bytes[index++] = 0x80 | ((code >> 12) & 0x3f);
                        bytes[index++] = 0x80 | ((code >> 6) & 0x3f);
                        bytes[index++] = 0x80 | (code & 0x3f);
                      }
                    }
                    key = bytes;
                  } else {
                    if (type === 'object') {
                      if (key === null) {
                        throw new Error(ERROR);
                      } else if (
                        ARRAY_BUFFER &&
                        key.constructor === ArrayBuffer
                      ) {
                        key = new Uint8Array(key);
                      } else if (!Array.isArray(key)) {
                        if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
                          throw new Error(ERROR);
                        }
                      }
                    } else {
                      throw new Error(ERROR);
                    }
                  }

                  if (key.length > 64) {
                    key = new Sha256(is224, true).update(key).array();
                  }

                  var oKeyPad = [],
                    iKeyPad = [];
                  for (i = 0; i < 64; ++i) {
                    var b = key[i] || 0;
                    oKeyPad[i] = 0x5c ^ b;
                    iKeyPad[i] = 0x36 ^ b;
                  }

                  Sha256.call(this, is224, sharedMemory);

                  this.update(iKeyPad);
                  this.oKeyPad = oKeyPad;
                  this.inner = true;
                  this.sharedMemory = sharedMemory;
                }
                HmacSha256.prototype = new Sha256();

                HmacSha256.prototype.finalize = function () {
                  Sha256.prototype.finalize.call(this);
                  if (this.inner) {
                    this.inner = false;
                    var innerHash = this.array();
                    Sha256.call(this, this.is224, this.sharedMemory);
                    this.update(this.oKeyPad);
                    this.update(innerHash);
                    Sha256.prototype.finalize.call(this);
                  }
                };

                var exports = createMethod();
                exports.sha256 = exports;
                exports.sha224 = createMethod(true);
                exports.sha256.hmac = createHmacMethod();
                exports.sha224.hmac = createHmacMethod(true);

                if (COMMON_JS) {
                  module.exports = exports;
                } else {
                  root.sha256 = exports.sha256;
                  root.sha224 = exports.sha224;
                  if (AMD) {
                    define(function () {
                      return exports;
                    });
                  }
                }
              })();
            }.call(this));
          }.call(
            this,
            require('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        { _process: 189 },
      ],
      132: [
        function (require, module, exports) {
          'use strict';
          var inherits = require('inherits');
          var HashBase = require('hash-base');
          var Buffer = require('safe-buffer').Buffer;

          var ARRAY16 = new Array(16);

          function MD5() {
            HashBase.call(this, 64);

            // state
            this._a = 0x67452301;
            this._b = 0xefcdab89;
            this._c = 0x98badcfe;
            this._d = 0x10325476;
          }

          inherits(MD5, HashBase);

          MD5.prototype._update = function () {
            var M = ARRAY16;
            for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

            var a = this._a;
            var b = this._b;
            var c = this._c;
            var d = this._d;

            a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
            d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
            c = fnF(c, d, a, b, M[2], 0x242070db, 17);
            b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
            a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
            d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
            c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
            b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
            a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
            d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
            c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
            b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
            a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
            d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
            c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
            b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

            a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
            d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
            c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
            b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
            a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
            d = fnG(d, a, b, c, M[10], 0x02441453, 9);
            c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
            b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
            a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
            d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
            c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
            b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
            a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
            d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
            c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
            b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

            a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
            d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
            c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
            b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
            a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
            d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
            c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
            b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
            a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
            d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
            c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
            b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
            a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
            d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
            c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
            b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

            a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
            d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
            c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
            b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
            a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
            d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
            c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
            b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
            a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
            d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
            c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
            b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
            a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
            d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
            c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
            b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

            this._a = (this._a + a) | 0;
            this._b = (this._b + b) | 0;
            this._c = (this._c + c) | 0;
            this._d = (this._d + d) | 0;
          };

          MD5.prototype._digest = function () {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80;
            if (this._blockOffset > 56) {
              this._block.fill(0, this._blockOffset, 64);
              this._update();
              this._blockOffset = 0;
            }

            this._block.fill(0, this._blockOffset, 56);
            this._block.writeUInt32LE(this._length[0], 56);
            this._block.writeUInt32LE(this._length[1], 60);
            this._update();

            // produce result
            var buffer = Buffer.allocUnsafe(16);
            buffer.writeInt32LE(this._a, 0);
            buffer.writeInt32LE(this._b, 4);
            buffer.writeInt32LE(this._c, 8);
            buffer.writeInt32LE(this._d, 12);
            return buffer;
          };

          function rotl(x, n) {
            return (x << n) | (x >>> (32 - n));
          }

          function fnF(a, b, c, d, m, k, s) {
            return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + b) | 0;
          }

          function fnG(a, b, c, d, m, k, s) {
            return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + b) | 0;
          }

          function fnH(a, b, c, d, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0;
          }

          function fnI(a, b, c, d, m, k, s) {
            return (rotl((a + (c ^ (b | ~d)) + m + k) | 0, s) + b) | 0;
          }

          module.exports = MD5;
        },
        { 'hash-base': 116, inherits: 130, 'safe-buffer': 158 },
      ],
      133: [
        function (require, module, exports) {
          module.exports = assert;

          function assert(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          assert.equal = function assertEqual(l, r, msg) {
            if (l != r)
              throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
          };
        },
        {},
      ],
      134: [
        function (require, module, exports) {
          'use strict';

          var utils = exports;

          function toArray(msg, enc) {
            if (Array.isArray(msg)) return msg.slice();
            if (!msg) return [];
            var res = [];
            if (typeof msg !== 'string') {
              for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
              return res;
            }
            if (enc === 'hex') {
              msg = msg.replace(/[^a-z0-9]+/gi, '');
              if (msg.length % 2 !== 0) msg = '0' + msg;
              for (var i = 0; i < msg.length; i += 2)
                res.push(parseInt(msg[i] + msg[i + 1], 16));
            } else {
              for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                var hi = c >> 8;
                var lo = c & 0xff;
                if (hi) res.push(hi, lo);
                else res.push(lo);
              }
            }
            return res;
          }
          utils.toArray = toArray;

          function zero2(word) {
            if (word.length === 1) return '0' + word;
            else return word;
          }
          utils.zero2 = zero2;

          function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++)
              res += zero2(msg[i].toString(16));
            return res;
          }
          utils.toHex = toHex;

          utils.encode = function encode(arr, enc) {
            if (enc === 'hex') return toHex(arr);
            else return arr;
          };
        },
        {},
      ],
      135: [
        function (require, module, exports) {
          exports.pbkdf2 = require('./lib/async');
          exports.pbkdf2Sync = require('./lib/sync');
        },
        { './lib/async': 136, './lib/sync': 139 },
      ],
      136: [
        function (require, module, exports) {
          (function (global) {
            (function () {
              var Buffer = require('safe-buffer').Buffer;

              var checkParameters = require('./precondition');
              var defaultEncoding = require('./default-encoding');
              var sync = require('./sync');
              var toBuffer = require('./to-buffer');

              var ZERO_BUF;
              var subtle = global.crypto && global.crypto.subtle;
              var toBrowser = {
                sha: 'SHA-1',
                'sha-1': 'SHA-1',
                sha1: 'SHA-1',
                sha256: 'SHA-256',
                'sha-256': 'SHA-256',
                sha384: 'SHA-384',
                'sha-384': 'SHA-384',
                'sha-512': 'SHA-512',
                sha512: 'SHA-512',
              };
              var checks = [];
              function checkNative(algo) {
                if (global.process && !global.process.browser) {
                  return Promise.resolve(false);
                }
                if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                  return Promise.resolve(false);
                }
                if (checks[algo] !== undefined) {
                  return checks[algo];
                }
                ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
                var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
                  .then(function () {
                    return true;
                  })
                  .catch(function () {
                    return false;
                  });
                checks[algo] = prom;
                return prom;
              }
              var nextTick;
              function getNextTick() {
                if (nextTick) {
                  return nextTick;
                }
                if (global.process && global.process.nextTick) {
                  nextTick = global.process.nextTick;
                } else if (global.queueMicrotask) {
                  nextTick = global.queueMicrotask;
                } else if (global.setImmediate) {
                  nextTick = global.setImmediate;
                } else {
                  nextTick = global.setTimeout;
                }
                return nextTick;
              }
              function browserPbkdf2(password, salt, iterations, length, algo) {
                return subtle
                  .importKey('raw', password, { name: 'PBKDF2' }, false, [
                    'deriveBits',
                  ])
                  .then(function (key) {
                    return subtle.deriveBits(
                      {
                        name: 'PBKDF2',
                        salt: salt,
                        iterations: iterations,
                        hash: {
                          name: algo,
                        },
                      },
                      key,
                      length << 3
                    );
                  })
                  .then(function (res) {
                    return Buffer.from(res);
                  });
              }

              function resolvePromise(promise, callback) {
                promise.then(
                  function (out) {
                    getNextTick()(function () {
                      callback(null, out);
                    });
                  },
                  function (e) {
                    getNextTick()(function () {
                      callback(e);
                    });
                  }
                );
              }
              module.exports = function (
                password,
                salt,
                iterations,
                keylen,
                digest,
                callback
              ) {
                if (typeof digest === 'function') {
                  callback = digest;
                  digest = undefined;
                }

                digest = digest || 'sha1';
                var algo = toBrowser[digest.toLowerCase()];

                if (!algo || typeof global.Promise !== 'function') {
                  getNextTick()(function () {
                    var out;
                    try {
                      out = sync(password, salt, iterations, keylen, digest);
                    } catch (e) {
                      return callback(e);
                    }
                    callback(null, out);
                  });
                  return;
                }

                checkParameters(iterations, keylen);
                password = toBuffer(password, defaultEncoding, 'Password');
                salt = toBuffer(salt, defaultEncoding, 'Salt');
                if (typeof callback !== 'function')
                  throw new Error('No callback provided to pbkdf2');

                resolvePromise(
                  checkNative(algo).then(function (resp) {
                    if (resp)
                      return browserPbkdf2(
                        password,
                        salt,
                        iterations,
                        keylen,
                        algo
                      );

                    return sync(password, salt, iterations, keylen, digest);
                  }),
                  callback
                );
              };
            }.call(this));
          }.call(
            this,
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        {
          './default-encoding': 137,
          './precondition': 138,
          './sync': 139,
          './to-buffer': 140,
          'safe-buffer': 158,
        },
      ],
      137: [
        function (require, module, exports) {
          (function (process, global) {
            (function () {
              var defaultEncoding;
              /* istanbul ignore next */
              if (global.process && global.process.browser) {
                defaultEncoding = 'utf-8';
              } else if (global.process && global.process.version) {
                var pVersionMajor = parseInt(
                  process.version.split('.')[0].slice(1),
                  10
                );

                defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
              } else {
                defaultEncoding = 'utf-8';
              }
              module.exports = defaultEncoding;
            }.call(this));
          }.call(
            this,
            require('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        { _process: 189 },
      ],
      138: [
        function (require, module, exports) {
          var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

          module.exports = function (iterations, keylen) {
            if (typeof iterations !== 'number') {
              throw new TypeError('Iterations not a number');
            }

            if (iterations < 0) {
              throw new TypeError('Bad iterations');
            }

            if (typeof keylen !== 'number') {
              throw new TypeError('Key length not a number');
            }

            if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
              /* eslint no-self-compare: 0 */
              throw new TypeError('Bad key length');
            }
          };
        },
        {},
      ],
      139: [
        function (require, module, exports) {
          var md5 = require('create-hash/md5');
          var RIPEMD160 = require('ripemd160');
          var sha = require('sha.js');
          var Buffer = require('safe-buffer').Buffer;

          var checkParameters = require('./precondition');
          var defaultEncoding = require('./default-encoding');
          var toBuffer = require('./to-buffer');

          var ZEROS = Buffer.alloc(128);
          var sizes = {
            md5: 16,
            sha1: 20,
            sha224: 28,
            sha256: 32,
            sha384: 48,
            sha512: 64,
            rmd160: 20,
            ripemd160: 20,
          };

          function Hmac(alg, key, saltLen) {
            var hash = getDigest(alg);
            var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

            if (key.length > blocksize) {
              key = hash(key);
            } else if (key.length < blocksize) {
              key = Buffer.concat([key, ZEROS], blocksize);
            }

            var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
            var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
            for (var i = 0; i < blocksize; i++) {
              ipad[i] = key[i] ^ 0x36;
              opad[i] = key[i] ^ 0x5c;
            }

            var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
            ipad.copy(ipad1, 0, 0, blocksize);
            this.ipad1 = ipad1;
            this.ipad2 = ipad;
            this.opad = opad;
            this.alg = alg;
            this.blocksize = blocksize;
            this.hash = hash;
            this.size = sizes[alg];
          }

          Hmac.prototype.run = function (data, ipad) {
            data.copy(ipad, this.blocksize);
            var h = this.hash(ipad);
            h.copy(this.opad, this.blocksize);
            return this.hash(this.opad);
          };

          function getDigest(alg) {
            function shaFunc(data) {
              return sha(alg).update(data).digest();
            }
            function rmd160Func(data) {
              return new RIPEMD160().update(data).digest();
            }

            if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
            if (alg === 'md5') return md5;
            return shaFunc;
          }

          function pbkdf2(password, salt, iterations, keylen, digest) {
            checkParameters(iterations, keylen);
            password = toBuffer(password, defaultEncoding, 'Password');
            salt = toBuffer(salt, defaultEncoding, 'Salt');

            digest = digest || 'sha1';

            var hmac = new Hmac(digest, password, salt.length);

            var DK = Buffer.allocUnsafe(keylen);
            var block1 = Buffer.allocUnsafe(salt.length + 4);
            salt.copy(block1, 0, 0, salt.length);

            var destPos = 0;
            var hLen = sizes[digest];
            var l = Math.ceil(keylen / hLen);

            for (var i = 1; i <= l; i++) {
              block1.writeUInt32BE(i, salt.length);

              var T = hmac.run(block1, hmac.ipad1);
              var U = T;

              for (var j = 1; j < iterations; j++) {
                U = hmac.run(U, hmac.ipad2);
                for (var k = 0; k < hLen; k++) T[k] ^= U[k];
              }

              T.copy(DK, destPos);
              destPos += hLen;
            }

            return DK;
          }

          module.exports = pbkdf2;
        },
        {
          './default-encoding': 137,
          './precondition': 138,
          './to-buffer': 140,
          'create-hash/md5': 92,
          ripemd160: 157,
          'safe-buffer': 158,
          'sha.js': 160,
        },
      ],
      140: [
        function (require, module, exports) {
          var Buffer = require('safe-buffer').Buffer;

          module.exports = function (thing, encoding, name) {
            if (Buffer.isBuffer(thing)) {
              return thing;
            } else if (typeof thing === 'string') {
              return Buffer.from(thing, encoding);
            } else if (ArrayBuffer.isView(thing)) {
              return Buffer.from(thing.buffer);
            } else {
              throw new TypeError(
                name +
                  ' must be a string, a Buffer, a typed array or a DataView'
              );
            }
          };
        },
        { 'safe-buffer': 158 },
      ],
      141: [
        function (require, module, exports) {
          (function (process, global) {
            (function () {
              'use strict';

              // limit of Crypto.getRandomValues()
              // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
              var MAX_BYTES = 65536;

              // Node supports requesting up to this number of bytes
              // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
              var MAX_UINT32 = 4294967295;

              function oldBrowser() {
                throw new Error(
                  'Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11'
                );
              }

              var Buffer = require('safe-buffer').Buffer;
              var crypto = global.crypto || global.msCrypto;

              if (crypto && crypto.getRandomValues) {
                module.exports = randomBytes;
              } else {
                module.exports = oldBrowser;
              }

              function randomBytes(size, cb) {
                // phantomjs needs to throw
                if (size > MAX_UINT32)
                  throw new RangeError('requested too many random bytes');

                var bytes = Buffer.allocUnsafe(size);

                if (size > 0) {
                  // getRandomValues fails on IE if size == 0
                  if (size > MAX_BYTES) {
                    // this is the max bytes crypto.getRandomValues
                    // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                    for (
                      var generated = 0;
                      generated < size;
                      generated += MAX_BYTES
                    ) {
                      // buffer.slice automatically checks if the end is past the end of
                      // the buffer so we don't have to here
                      crypto.getRandomValues(
                        bytes.slice(generated, generated + MAX_BYTES)
                      );
                    }
                  } else {
                    crypto.getRandomValues(bytes);
                  }
                }

                if (typeof cb === 'function') {
                  return process.nextTick(function () {
                    cb(null, bytes);
                  });
                }

                return bytes;
              }
            }.call(this));
          }.call(
            this,
            require('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        { _process: 189, 'safe-buffer': 158 },
      ],
      142: [
        function (require, module, exports) {
          'use strict';

          function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
          }

          var codes = {};

          function createErrorType(code, message, Base) {
            if (!Base) {
              Base = Error;
            }

            function getMessage(arg1, arg2, arg3) {
              if (typeof message === 'string') {
                return message;
              } else {
                return message(arg1, arg2, arg3);
              }
            }

            var NodeError =
              /*#__PURE__*/
              (function (_Base) {
                _inheritsLoose(NodeError, _Base);

                function NodeError(arg1, arg2, arg3) {
                  return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
                }

                return NodeError;
              })(Base);

            NodeError.prototype.name = Base.name;
            NodeError.prototype.code = code;
            codes[code] = NodeError;
          } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

          function oneOf(expected, thing) {
            if (Array.isArray(expected)) {
              var len = expected.length;
              expected = expected.map(function (i) {
                return String(i);
              });

              if (len > 2) {
                return (
                  'one of '
                    .concat(thing, ' ')
                    .concat(expected.slice(0, len - 1).join(', '), ', or ') +
                  expected[len - 1]
                );
              } else if (len === 2) {
                return 'one of '
                  .concat(thing, ' ')
                  .concat(expected[0], ' or ')
                  .concat(expected[1]);
              } else {
                return 'of '.concat(thing, ' ').concat(expected[0]);
              }
            } else {
              return 'of '.concat(thing, ' ').concat(String(expected));
            }
          } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

          function startsWith(str, search, pos) {
            return (
              str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search
            );
          } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

          function endsWith(str, search, this_len) {
            if (this_len === undefined || this_len > str.length) {
              this_len = str.length;
            }

            return str.substring(this_len - search.length, this_len) === search;
          } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

          function includes(str, search, start) {
            if (typeof start !== 'number') {
              start = 0;
            }

            if (start + search.length > str.length) {
              return false;
            } else {
              return str.indexOf(search, start) !== -1;
            }
          }

          createErrorType(
            'ERR_INVALID_OPT_VALUE',
            function (name, value) {
              return (
                'The value "' + value + '" is invalid for option "' + name + '"'
              );
            },
            TypeError
          );
          createErrorType(
            'ERR_INVALID_ARG_TYPE',
            function (name, expected, actual) {
              // determiner: 'must be' or 'must not be'
              var determiner;

              if (
                typeof expected === 'string' &&
                startsWith(expected, 'not ')
              ) {
                determiner = 'must not be';
                expected = expected.replace(/^not /, '');
              } else {
                determiner = 'must be';
              }

              var msg;

              if (endsWith(name, ' argument')) {
                // For cases like 'first argument'
                msg = 'The '
                  .concat(name, ' ')
                  .concat(determiner, ' ')
                  .concat(oneOf(expected, 'type'));
              } else {
                var type = includes(name, '.') ? 'property' : 'argument';
                msg = 'The "'
                  .concat(name, '" ')
                  .concat(type, ' ')
                  .concat(determiner, ' ')
                  .concat(oneOf(expected, 'type'));
              }

              msg += '. Received type '.concat(typeof actual);
              return msg;
            },
            TypeError
          );
          createErrorType(
            'ERR_STREAM_PUSH_AFTER_EOF',
            'stream.push() after EOF'
          );
          createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
            return 'The ' + name + ' method is not implemented';
          });
          createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
          createErrorType('ERR_STREAM_DESTROYED', function (name) {
            return 'Cannot call ' + name + ' after a stream was destroyed';
          });
          createErrorType(
            'ERR_MULTIPLE_CALLBACK',
            'Callback called multiple times'
          );
          createErrorType(
            'ERR_STREAM_CANNOT_PIPE',
            'Cannot pipe, not readable'
          );
          createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
          createErrorType(
            'ERR_STREAM_NULL_VALUES',
            'May not write null values to stream',
            TypeError
          );
          createErrorType(
            'ERR_UNKNOWN_ENCODING',
            function (arg) {
              return 'Unknown encoding: ' + arg;
            },
            TypeError
          );
          createErrorType(
            'ERR_STREAM_UNSHIFT_AFTER_END_EVENT',
            'stream.unshift() after end event'
          );
          module.exports.codes = codes;
        },
        {},
      ],
      143: [
        function (require, module, exports) {
          (function (process) {
            (function () {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.
              // a duplex stream is just a stream that is both readable and writable.
              // Since JS doesn't have multiple prototypal inheritance, this class
              // prototypally inherits from Readable, and then parasitically from
              // Writable.
              'use strict';
              /*<replacement>*/

              var objectKeys =
                Object.keys ||
                function (obj) {
                  var keys = [];

                  for (var key in obj) {
                    keys.push(key);
                  }

                  return keys;
                };
              /*</replacement>*/

              module.exports = Duplex;

              var Readable = require('./_stream_readable');

              var Writable = require('./_stream_writable');

              require('inherits')(Duplex, Readable);

              {
                // Allow the keys array to be GC'ed.
                var keys = objectKeys(Writable.prototype);

                for (var v = 0; v < keys.length; v++) {
                  var method = keys[v];
                  if (!Duplex.prototype[method])
                    Duplex.prototype[method] = Writable.prototype[method];
                }
              }

              function Duplex(options) {
                if (!(this instanceof Duplex)) return new Duplex(options);
                Readable.call(this, options);
                Writable.call(this, options);
                this.allowHalfOpen = true;

                if (options) {
                  if (options.readable === false) this.readable = false;
                  if (options.writable === false) this.writable = false;

                  if (options.allowHalfOpen === false) {
                    this.allowHalfOpen = false;
                    this.once('end', onend);
                  }
                }
              }

              Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState.highWaterMark;
                },
              });
              Object.defineProperty(Duplex.prototype, 'writableBuffer', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState && this._writableState.getBuffer();
                },
              });
              Object.defineProperty(Duplex.prototype, 'writableLength', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState.length;
                },
              }); // the no-half-open enforcer

              function onend() {
                // If the writable side ended, then we're ok.
                if (this._writableState.ended) return; // no more data can be written.
                // But allow more writes to happen in this tick.

                process.nextTick(onEndNT, this);
              }

              function onEndNT(self) {
                self.end();
              }

              Object.defineProperty(Duplex.prototype, 'destroyed', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  if (
                    this._readableState === undefined ||
                    this._writableState === undefined
                  ) {
                    return false;
                  }

                  return (
                    this._readableState.destroyed &&
                    this._writableState.destroyed
                  );
                },
                set: function set(value) {
                  // we ignore the value if the stream
                  // has not been initialized yet
                  if (
                    this._readableState === undefined ||
                    this._writableState === undefined
                  ) {
                    return;
                  } // backward compatibility, the user is explicitly
                  // managing destroyed

                  this._readableState.destroyed = value;
                  this._writableState.destroyed = value;
                },
              });
            }.call(this));
          }.call(this, require('_process')));
        },
        {
          './_stream_readable': 145,
          './_stream_writable': 147,
          _process: 189,
          inherits: 130,
        },
      ],
      144: [
        function (require, module, exports) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          // a passthrough stream.
          // basically just the most minimal sort of Transform stream.
          // Every written chunk gets output as-is.
          'use strict';

          module.exports = PassThrough;

          var Transform = require('./_stream_transform');

          require('inherits')(PassThrough, Transform);

          function PassThrough(options) {
            if (!(this instanceof PassThrough)) return new PassThrough(options);
            Transform.call(this, options);
          }

          PassThrough.prototype._transform = function (chunk, encoding, cb) {
            cb(null, chunk);
          };
        },
        { './_stream_transform': 146, inherits: 130 },
      ],
      145: [
        function (require, module, exports) {
          (function (process, global) {
            (function () {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.
              'use strict';

              module.exports = Readable;
              /*<replacement>*/

              var Duplex;
              /*</replacement>*/

              Readable.ReadableState = ReadableState;
              /*<replacement>*/

              var EE = require('events').EventEmitter;

              var EElistenerCount = function EElistenerCount(emitter, type) {
                return emitter.listeners(type).length;
              };
              /*</replacement>*/

              /*<replacement>*/

              var Stream = require('./internal/streams/stream');
              /*</replacement>*/

              var Buffer = require('buffer').Buffer;

              var OurUint8Array = global.Uint8Array || function () {};

              function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
              }

              function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
              }
              /*<replacement>*/

              var debugUtil = require('util');

              var debug;

              if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog('stream');
              } else {
                debug = function debug() {};
              }
              /*</replacement>*/

              var BufferList = require('./internal/streams/buffer_list');

              var destroyImpl = require('./internal/streams/destroy');

              var _require = require('./internal/streams/state'),
                getHighWaterMark = _require.getHighWaterMark;

              var _require$codes = require('../errors').codes,
                ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
                ERR_STREAM_PUSH_AFTER_EOF =
                  _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
                ERR_METHOD_NOT_IMPLEMENTED =
                  _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
                ERR_STREAM_UNSHIFT_AFTER_END_EVENT =
                  _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.

              var StringDecoder;
              var createReadableStreamAsyncIterator;
              var from;

              require('inherits')(Readable, Stream);

              var errorOrDestroy = destroyImpl.errorOrDestroy;
              var kProxyEvents = [
                'error',
                'close',
                'destroy',
                'pause',
                'resume',
              ];

              function prependListener(emitter, event, fn) {
                // Sadly this is not cacheable as some libraries bundle their own
                // event emitter implementation with them.
                if (typeof emitter.prependListener === 'function')
                  return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.

                if (!emitter._events || !emitter._events[event])
                  emitter.on(event, fn);
                else if (Array.isArray(emitter._events[event]))
                  emitter._events[event].unshift(fn);
                else emitter._events[event] = [fn, emitter._events[event]];
              }

              function ReadableState(options, stream, isDuplex) {
                Duplex = Duplex || require('./_stream_duplex');
                options = options || {}; // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.

                if (typeof isDuplex !== 'boolean')
                  isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
                // make all the buffer merging and length checks go away

                this.objectMode = !!options.objectMode;
                if (isDuplex)
                  this.objectMode =
                    this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
                // Note: 0 is a valid value, means "don't call _read preemptively ever"

                this.highWaterMark = getHighWaterMark(
                  this,
                  options,
                  'readableHighWaterMark',
                  isDuplex
                ); // A linked list is used to store data chunks instead of an array because the
                // linked list can remove elements from the beginning faster than
                // array.shift()

                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
                // immediately, or on a later tick.  We set this to true at first, because
                // any actions that shouldn't happen until "later" should generally also
                // not happen before the first read call.

                this.sync = true; // whenever we return null, then we set a flag to say
                // that we're awaiting a 'readable' event emission.

                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;
                this.paused = true; // Should close be emitted on destroy. Defaults to true.

                this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

                this.autoDestroy = !!options.autoDestroy; // has it been destroyed

                this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.

                this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

                this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

                this.readingMore = false;
                this.decoder = null;
                this.encoding = null;

                if (options.encoding) {
                  if (!StringDecoder)
                    StringDecoder = require('string_decoder/').StringDecoder;
                  this.decoder = new StringDecoder(options.encoding);
                  this.encoding = options.encoding;
                }
              }

              function Readable(options) {
                Duplex = Duplex || require('./_stream_duplex');
                if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
                // the ReadableState constructor, at least with V8 6.5

                var isDuplex = this instanceof Duplex;
                this._readableState = new ReadableState(
                  options,
                  this,
                  isDuplex
                ); // legacy

                this.readable = true;

                if (options) {
                  if (typeof options.read === 'function')
                    this._read = options.read;
                  if (typeof options.destroy === 'function')
                    this._destroy = options.destroy;
                }

                Stream.call(this);
              }

              Object.defineProperty(Readable.prototype, 'destroyed', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  if (this._readableState === undefined) {
                    return false;
                  }

                  return this._readableState.destroyed;
                },
                set: function set(value) {
                  // we ignore the value if the stream
                  // has not been initialized yet
                  if (!this._readableState) {
                    return;
                  } // backward compatibility, the user is explicitly
                  // managing destroyed

                  this._readableState.destroyed = value;
                },
              });
              Readable.prototype.destroy = destroyImpl.destroy;
              Readable.prototype._undestroy = destroyImpl.undestroy;

              Readable.prototype._destroy = function (err, cb) {
                cb(err);
              }; // Manually shove something into the read() buffer.
              // This returns true if the highWaterMark has not been hit yet,
              // similar to how Writable.write() returns true if you should
              // write() some more.

              Readable.prototype.push = function (chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;

                if (!state.objectMode) {
                  if (typeof chunk === 'string') {
                    encoding = encoding || state.defaultEncoding;

                    if (encoding !== state.encoding) {
                      chunk = Buffer.from(chunk, encoding);
                      encoding = '';
                    }

                    skipChunkCheck = true;
                  }
                } else {
                  skipChunkCheck = true;
                }

                return readableAddChunk(
                  this,
                  chunk,
                  encoding,
                  false,
                  skipChunkCheck
                );
              }; // Unshift should *always* be something directly out of read()

              Readable.prototype.unshift = function (chunk) {
                return readableAddChunk(this, chunk, null, true, false);
              };

              function readableAddChunk(
                stream,
                chunk,
                encoding,
                addToFront,
                skipChunkCheck
              ) {
                debug('readableAddChunk', chunk);
                var state = stream._readableState;

                if (chunk === null) {
                  state.reading = false;
                  onEofChunk(stream, state);
                } else {
                  var er;
                  if (!skipChunkCheck) er = chunkInvalid(state, chunk);

                  if (er) {
                    errorOrDestroy(stream, er);
                  } else if (state.objectMode || (chunk && chunk.length > 0)) {
                    if (
                      typeof chunk !== 'string' &&
                      !state.objectMode &&
                      Object.getPrototypeOf(chunk) !== Buffer.prototype
                    ) {
                      chunk = _uint8ArrayToBuffer(chunk);
                    }

                    if (addToFront) {
                      if (state.endEmitted)
                        errorOrDestroy(
                          stream,
                          new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()
                        );
                      else addChunk(stream, state, chunk, true);
                    } else if (state.ended) {
                      errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                    } else if (state.destroyed) {
                      return false;
                    } else {
                      state.reading = false;

                      if (state.decoder && !encoding) {
                        chunk = state.decoder.write(chunk);
                        if (state.objectMode || chunk.length !== 0)
                          addChunk(stream, state, chunk, false);
                        else maybeReadMore(stream, state);
                      } else {
                        addChunk(stream, state, chunk, false);
                      }
                    }
                  } else if (!addToFront) {
                    state.reading = false;
                    maybeReadMore(stream, state);
                  }
                } // We can push more data if we are below the highWaterMark.
                // Also, if we have no data yet, we can stand some more bytes.
                // This is to work around cases where hwm=0, such as the repl.

                return (
                  !state.ended &&
                  (state.length < state.highWaterMark || state.length === 0)
                );
              }

              function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                  state.awaitDrain = 0;
                  stream.emit('data', chunk);
                } else {
                  // update the buffer info.
                  state.length += state.objectMode ? 1 : chunk.length;
                  if (addToFront) state.buffer.unshift(chunk);
                  else state.buffer.push(chunk);
                  if (state.needReadable) emitReadable(stream);
                }

                maybeReadMore(stream, state);
              }

              function chunkInvalid(state, chunk) {
                var er;

                if (
                  !_isUint8Array(chunk) &&
                  typeof chunk !== 'string' &&
                  chunk !== undefined &&
                  !state.objectMode
                ) {
                  er = new ERR_INVALID_ARG_TYPE(
                    'chunk',
                    ['string', 'Buffer', 'Uint8Array'],
                    chunk
                  );
                }

                return er;
              }

              Readable.prototype.isPaused = function () {
                return this._readableState.flowing === false;
              }; // backwards compatibility.

              Readable.prototype.setEncoding = function (enc) {
                if (!StringDecoder)
                  StringDecoder = require('string_decoder/').StringDecoder;
                var decoder = new StringDecoder(enc);
                this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

                this._readableState.encoding =
                  this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

                var p = this._readableState.buffer.head;
                var content = '';

                while (p !== null) {
                  content += decoder.write(p.data);
                  p = p.next;
                }

                this._readableState.buffer.clear();

                if (content !== '') this._readableState.buffer.push(content);
                this._readableState.length = content.length;
                return this;
              }; // Don't raise the hwm > 1GB

              var MAX_HWM = 0x40000000;

              function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                  // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
                  n = MAX_HWM;
                } else {
                  // Get the next highest power of 2 to prevent increasing hwm excessively in
                  // tiny amounts
                  n--;
                  n |= n >>> 1;
                  n |= n >>> 2;
                  n |= n >>> 4;
                  n |= n >>> 8;
                  n |= n >>> 16;
                  n++;
                }

                return n;
              } // This function is designed to be inlinable, so please take care when making
              // changes to the function body.

              function howMuchToRead(n, state) {
                if (n <= 0 || (state.length === 0 && state.ended)) return 0;
                if (state.objectMode) return 1;

                if (n !== n) {
                  // Only flow one buffer at a time
                  if (state.flowing && state.length)
                    return state.buffer.head.data.length;
                  else return state.length;
                } // If we're asking for more than the current hwm, then raise the hwm.

                if (n > state.highWaterMark)
                  state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length) return n; // Don't have enough

                if (!state.ended) {
                  state.needReadable = true;
                  return 0;
                }

                return state.length;
              } // you can override either this method, or the async _read(n) below.

              Readable.prototype.read = function (n) {
                debug('read', n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;
                if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
                // already have a bunch of data in the buffer, then just trigger
                // the 'readable' event and move on.

                if (
                  n === 0 &&
                  state.needReadable &&
                  ((state.highWaterMark !== 0
                    ? state.length >= state.highWaterMark
                    : state.length > 0) ||
                    state.ended)
                ) {
                  debug('read: emitReadable', state.length, state.ended);
                  if (state.length === 0 && state.ended) endReadable(this);
                  else emitReadable(this);
                  return null;
                }

                n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

                if (n === 0 && state.ended) {
                  if (state.length === 0) endReadable(this);
                  return null;
                } // All the actual chunk generation logic needs to be
                // *below* the call to _read.  The reason is that in certain
                // synthetic stream cases, such as passthrough streams, _read
                // may be a completely synchronous operation which may change
                // the state of the read buffer, providing enough data when
                // before there was *not* enough.
                //
                // So, the steps are:
                // 1. Figure out what the state of things will be after we do
                // a read from the buffer.
                //
                // 2. If that resulting state will trigger a _read, then call _read.
                // Note that this may be asynchronous, or synchronous.  Yes, it is
                // deeply ugly to write APIs this way, but that still doesn't mean
                // that the Readable class should behave improperly, as streams are
                // designed to be sync/async agnostic.
                // Take note if the _read call is sync or async (ie, if the read call
                // has returned yet), so that we know whether or not it's safe to emit
                // 'readable' etc.
                //
                // 3. Actually pull the requested chunks out of the buffer and return.
                // if we need a readable event, then we need to do some reading.

                var doRead = state.needReadable;
                debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

                if (
                  state.length === 0 ||
                  state.length - n < state.highWaterMark
                ) {
                  doRead = true;
                  debug('length less than watermark', doRead);
                } // however, if we've ended, then there's no point, and if we're already
                // reading, then it's unnecessary.

                if (state.ended || state.reading) {
                  doRead = false;
                  debug('reading or ended', doRead);
                } else if (doRead) {
                  debug('do read');
                  state.reading = true;
                  state.sync = true; // if the length is currently zero, then we *need* a readable event.

                  if (state.length === 0) state.needReadable = true; // call internal read method

                  this._read(state.highWaterMark);

                  state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
                  // and we need to re-evaluate how much data we can return to the user.

                  if (!state.reading) n = howMuchToRead(nOrig, state);
                }

                var ret;
                if (n > 0) ret = fromList(n, state);
                else ret = null;

                if (ret === null) {
                  state.needReadable = state.length <= state.highWaterMark;
                  n = 0;
                } else {
                  state.length -= n;
                  state.awaitDrain = 0;
                }

                if (state.length === 0) {
                  // If we have nothing in the buffer, then we want to know
                  // as soon as we *do* get something into the buffer.
                  if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

                  if (nOrig !== n && state.ended) endReadable(this);
                }

                if (ret !== null) this.emit('data', ret);
                return ret;
              };

              function onEofChunk(stream, state) {
                debug('onEofChunk');
                if (state.ended) return;

                if (state.decoder) {
                  var chunk = state.decoder.end();

                  if (chunk && chunk.length) {
                    state.buffer.push(chunk);
                    state.length += state.objectMode ? 1 : chunk.length;
                  }
                }

                state.ended = true;

                if (state.sync) {
                  // if we are sync, wait until next tick to emit the data.
                  // Otherwise we risk emitting data in the flow()
                  // the readable code triggers during a read() call
                  emitReadable(stream);
                } else {
                  // emit 'readable' now to make sure it gets picked up.
                  state.needReadable = false;

                  if (!state.emittedReadable) {
                    state.emittedReadable = true;
                    emitReadable_(stream);
                  }
                }
              } // Don't emit readable right away in sync mode, because this can trigger
              // another read() call => stack overflow.  This way, it might trigger
              // a nextTick recursion warning, but that's not so bad.

              function emitReadable(stream) {
                var state = stream._readableState;
                debug(
                  'emitReadable',
                  state.needReadable,
                  state.emittedReadable
                );
                state.needReadable = false;

                if (!state.emittedReadable) {
                  debug('emitReadable', state.flowing);
                  state.emittedReadable = true;
                  process.nextTick(emitReadable_, stream);
                }
              }

              function emitReadable_(stream) {
                var state = stream._readableState;
                debug(
                  'emitReadable_',
                  state.destroyed,
                  state.length,
                  state.ended
                );

                if (!state.destroyed && (state.length || state.ended)) {
                  stream.emit('readable');
                  state.emittedReadable = false;
                } // The stream needs another readable event if
                // 1. It is not flowing, as the flow mechanism will take
                //    care of it.
                // 2. It is not ended.
                // 3. It is below the highWaterMark, so we can schedule
                //    another readable later.

                state.needReadable =
                  !state.flowing &&
                  !state.ended &&
                  state.length <= state.highWaterMark;
                flow(stream);
              } // at this point, the user has presumably seen the 'readable' event,
              // and called read() to consume some data.  that may have triggered
              // in turn another _read(n) call, in which case reading = true if
              // it's in progress.
              // However, if we're not ended, or reading, and the length < hwm,
              // then go ahead and try to read some more preemptively.

              function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                  state.readingMore = true;
                  process.nextTick(maybeReadMore_, stream, state);
                }
              }

              function maybeReadMore_(stream, state) {
                // Attempt to read more data if we should.
                //
                // The conditions for reading more data are (one of):
                // - Not enough data buffered (state.length < state.highWaterMark). The loop
                //   is responsible for filling the buffer with enough data if such data
                //   is available. If highWaterMark is 0 and we are not in the flowing mode
                //   we should _not_ attempt to buffer any extra data. We'll get more data
                //   when the stream consumer calls read() instead.
                // - No data in the buffer, and the stream is in flowing mode. In this mode
                //   the loop below is responsible for ensuring read() is called. Failing to
                //   call read here would abort the flow and there's no other mechanism for
                //   continuing the flow if the stream consumer has just subscribed to the
                //   'data' event.
                //
                // In addition to the above conditions to keep reading data, the following
                // conditions prevent the data from being read:
                // - The stream has ended (state.ended).
                // - There is already a pending 'read' operation (state.reading). This is a
                //   case where the the stream has called the implementation defined _read()
                //   method, but they are processing the call asynchronously and have _not_
                //   called push() with new data. In this case we skip performing more
                //   read()s. The execution ends in this method again after the _read() ends
                //   up calling push() with more data.
                while (
                  !state.reading &&
                  !state.ended &&
                  (state.length < state.highWaterMark ||
                    (state.flowing && state.length === 0))
                ) {
                  var len = state.length;
                  debug('maybeReadMore read 0');
                  stream.read(0);
                  if (len === state.length)
                    // didn't get any data, stop spinning.
                    break;
                }

                state.readingMore = false;
              } // abstract method.  to be overridden in specific implementation classes.
              // call cb(er, data) where data is <= n in length.
              // for virtual (non-string, non-buffer) streams, "length" is somewhat
              // arbitrary, and perhaps not very meaningful.

              Readable.prototype._read = function (n) {
                errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
              };

              Readable.prototype.pipe = function (dest, pipeOpts) {
                var src = this;
                var state = this._readableState;

                switch (state.pipesCount) {
                  case 0:
                    state.pipes = dest;
                    break;

                  case 1:
                    state.pipes = [state.pipes, dest];
                    break;

                  default:
                    state.pipes.push(dest);
                    break;
                }

                state.pipesCount += 1;
                debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
                var doEnd =
                  (!pipeOpts || pipeOpts.end !== false) &&
                  dest !== process.stdout &&
                  dest !== process.stderr;
                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted) process.nextTick(endFn);
                else src.once('end', endFn);
                dest.on('unpipe', onunpipe);

                function onunpipe(readable, unpipeInfo) {
                  debug('onunpipe');

                  if (readable === src) {
                    if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                      unpipeInfo.hasUnpiped = true;
                      cleanup();
                    }
                  }
                }

                function onend() {
                  debug('onend');
                  dest.end();
                } // when the dest drains, it reduces the awaitDrain counter
                // on the source.  This would be more elegant with a .once()
                // handler in flow(), but adding and removing repeatedly is
                // too slow.

                var ondrain = pipeOnDrain(src);
                dest.on('drain', ondrain);
                var cleanedUp = false;

                function cleanup() {
                  debug('cleanup'); // cleanup event handlers once the pipe is broken

                  dest.removeListener('close', onclose);
                  dest.removeListener('finish', onfinish);
                  dest.removeListener('drain', ondrain);
                  dest.removeListener('error', onerror);
                  dest.removeListener('unpipe', onunpipe);
                  src.removeListener('end', onend);
                  src.removeListener('end', unpipe);
                  src.removeListener('data', ondata);
                  cleanedUp = true; // if the reader is waiting for a drain event from this
                  // specific writer, then it would cause it to never start
                  // flowing again.
                  // So, if this is awaiting a drain, then we just call it now.
                  // If we don't know, then assume that we are waiting for one.

                  if (
                    state.awaitDrain &&
                    (!dest._writableState || dest._writableState.needDrain)
                  )
                    ondrain();
                }

                src.on('data', ondata);

                function ondata(chunk) {
                  debug('ondata');
                  var ret = dest.write(chunk);
                  debug('dest.write', ret);

                  if (ret === false) {
                    // If the user unpiped during `dest.write()`, it is possible
                    // to get stuck in a permanently paused state if that write
                    // also returned false.
                    // => Check whether `dest` is still a piping destination.
                    if (
                      ((state.pipesCount === 1 && state.pipes === dest) ||
                        (state.pipesCount > 1 &&
                          indexOf(state.pipes, dest) !== -1)) &&
                      !cleanedUp
                    ) {
                      debug('false write response, pause', state.awaitDrain);
                      state.awaitDrain++;
                    }

                    src.pause();
                  }
                } // if the dest has an error, then stop piping into it.
                // however, don't suppress the throwing behavior for this.

                function onerror(er) {
                  debug('onerror', er);
                  unpipe();
                  dest.removeListener('error', onerror);
                  if (EElistenerCount(dest, 'error') === 0)
                    errorOrDestroy(dest, er);
                } // Make sure our error handler is attached before userland ones.

                prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

                function onclose() {
                  dest.removeListener('finish', onfinish);
                  unpipe();
                }

                dest.once('close', onclose);

                function onfinish() {
                  debug('onfinish');
                  dest.removeListener('close', onclose);
                  unpipe();
                }

                dest.once('finish', onfinish);

                function unpipe() {
                  debug('unpipe');
                  src.unpipe(dest);
                } // tell the dest that it's being piped to

                dest.emit('pipe', src); // start the flow if it hasn't been started already.

                if (!state.flowing) {
                  debug('pipe resume');
                  src.resume();
                }

                return dest;
              };

              function pipeOnDrain(src) {
                return function pipeOnDrainFunctionResult() {
                  var state = src._readableState;
                  debug('pipeOnDrain', state.awaitDrain);
                  if (state.awaitDrain) state.awaitDrain--;

                  if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                    state.flowing = true;
                    flow(src);
                  }
                };
              }

              Readable.prototype.unpipe = function (dest) {
                var state = this._readableState;
                var unpipeInfo = {
                  hasUnpiped: false,
                }; // if we're not piping anywhere, then do nothing.

                if (state.pipesCount === 0) return this; // just one destination.  most common case.

                if (state.pipesCount === 1) {
                  // passed in one, but it's not the right one.
                  if (dest && dest !== state.pipes) return this;
                  if (!dest) dest = state.pipes; // got a match.

                  state.pipes = null;
                  state.pipesCount = 0;
                  state.flowing = false;
                  if (dest) dest.emit('unpipe', this, unpipeInfo);
                  return this;
                } // slow case. multiple pipe destinations.

                if (!dest) {
                  // remove all.
                  var dests = state.pipes;
                  var len = state.pipesCount;
                  state.pipes = null;
                  state.pipesCount = 0;
                  state.flowing = false;

                  for (var i = 0; i < len; i++) {
                    dests[i].emit('unpipe', this, {
                      hasUnpiped: false,
                    });
                  }

                  return this;
                } // try to find the right one.

                var index = indexOf(state.pipes, dest);
                if (index === -1) return this;
                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1) state.pipes = state.pipes[0];
                dest.emit('unpipe', this, unpipeInfo);
                return this;
              }; // set up data events if they are asked for
              // Ensure readable listeners eventually get something

              Readable.prototype.on = function (ev, fn) {
                var res = Stream.prototype.on.call(this, ev, fn);
                var state = this._readableState;

                if (ev === 'data') {
                  // update readableListening so that resume() may be a no-op
                  // a few lines down. This is needed to support once('readable').
                  state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

                  if (state.flowing !== false) this.resume();
                } else if (ev === 'readable') {
                  if (!state.endEmitted && !state.readableListening) {
                    state.readableListening = state.needReadable = true;
                    state.flowing = false;
                    state.emittedReadable = false;
                    debug('on readable', state.length, state.reading);

                    if (state.length) {
                      emitReadable(this);
                    } else if (!state.reading) {
                      process.nextTick(nReadingNextTick, this);
                    }
                  }
                }

                return res;
              };

              Readable.prototype.addListener = Readable.prototype.on;

              Readable.prototype.removeListener = function (ev, fn) {
                var res = Stream.prototype.removeListener.call(this, ev, fn);

                if (ev === 'readable') {
                  // We need to check if there is someone still listening to
                  // readable and reset the state. However this needs to happen
                  // after readable has been emitted but before I/O (nextTick) to
                  // support once('readable', fn) cycles. This means that calling
                  // resume within the same tick will have no
                  // effect.
                  process.nextTick(updateReadableListening, this);
                }

                return res;
              };

              Readable.prototype.removeAllListeners = function (ev) {
                var res = Stream.prototype.removeAllListeners.apply(
                  this,
                  arguments
                );

                if (ev === 'readable' || ev === undefined) {
                  // We need to check if there is someone still listening to
                  // readable and reset the state. However this needs to happen
                  // after readable has been emitted but before I/O (nextTick) to
                  // support once('readable', fn) cycles. This means that calling
                  // resume within the same tick will have no
                  // effect.
                  process.nextTick(updateReadableListening, this);
                }

                return res;
              };

              function updateReadableListening(self) {
                var state = self._readableState;
                state.readableListening = self.listenerCount('readable') > 0;

                if (state.resumeScheduled && !state.paused) {
                  // flowing needs to be set to true now, otherwise
                  // the upcoming resume will not flow.
                  state.flowing = true; // crude way to check if we should resume
                } else if (self.listenerCount('data') > 0) {
                  self.resume();
                }
              }

              function nReadingNextTick(self) {
                debug('readable nexttick read 0');
                self.read(0);
              } // pause() and resume() are remnants of the legacy readable stream API
              // If the user uses them, then switch into old mode.

              Readable.prototype.resume = function () {
                var state = this._readableState;

                if (!state.flowing) {
                  debug('resume'); // we flow only if there is no one listening
                  // for readable, but we still have to call
                  // resume()

                  state.flowing = !state.readableListening;
                  resume(this, state);
                }

                state.paused = false;
                return this;
              };

              function resume(stream, state) {
                if (!state.resumeScheduled) {
                  state.resumeScheduled = true;
                  process.nextTick(resume_, stream, state);
                }
              }

              function resume_(stream, state) {
                debug('resume', state.reading);

                if (!state.reading) {
                  stream.read(0);
                }

                state.resumeScheduled = false;
                stream.emit('resume');
                flow(stream);
                if (state.flowing && !state.reading) stream.read(0);
              }

              Readable.prototype.pause = function () {
                debug('call pause flowing=%j', this._readableState.flowing);

                if (this._readableState.flowing !== false) {
                  debug('pause');
                  this._readableState.flowing = false;
                  this.emit('pause');
                }

                this._readableState.paused = true;
                return this;
              };

              function flow(stream) {
                var state = stream._readableState;
                debug('flow', state.flowing);

                while (state.flowing && stream.read() !== null) {}
              } // wrap an old-style stream as the async data source.
              // This is *not* part of the readable stream interface.
              // It is an ugly unfortunate mess of history.

              Readable.prototype.wrap = function (stream) {
                var _this = this;

                var state = this._readableState;
                var paused = false;
                stream.on('end', function () {
                  debug('wrapped end');

                  if (state.decoder && !state.ended) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length) _this.push(chunk);
                  }

                  _this.push(null);
                });
                stream.on('data', function (chunk) {
                  debug('wrapped data');
                  if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

                  if (
                    state.objectMode &&
                    (chunk === null || chunk === undefined)
                  )
                    return;
                  else if (!state.objectMode && (!chunk || !chunk.length))
                    return;

                  var ret = _this.push(chunk);

                  if (!ret) {
                    paused = true;
                    stream.pause();
                  }
                }); // proxy all the other methods.
                // important when wrapping filters and duplexes.

                for (var i in stream) {
                  if (
                    this[i] === undefined &&
                    typeof stream[i] === 'function'
                  ) {
                    this[i] = (function methodWrap(method) {
                      return function methodWrapReturnFunction() {
                        return stream[method].apply(stream, arguments);
                      };
                    })(i);
                  }
                } // proxy certain important events.

                for (var n = 0; n < kProxyEvents.length; n++) {
                  stream.on(
                    kProxyEvents[n],
                    this.emit.bind(this, kProxyEvents[n])
                  );
                } // when we try to consume some more bytes, simply unpause the
                // underlying stream.

                this._read = function (n) {
                  debug('wrapped _read', n);

                  if (paused) {
                    paused = false;
                    stream.resume();
                  }
                };

                return this;
              };

              if (typeof Symbol === 'function') {
                Readable.prototype[Symbol.asyncIterator] = function () {
                  if (createReadableStreamAsyncIterator === undefined) {
                    createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
                  }

                  return createReadableStreamAsyncIterator(this);
                };
              }

              Object.defineProperty(
                Readable.prototype,
                'readableHighWaterMark',
                {
                  // making it explicit this property is not enumerable
                  // because otherwise some prototype manipulation in
                  // userland will fail
                  enumerable: false,
                  get: function get() {
                    return this._readableState.highWaterMark;
                  },
                }
              );
              Object.defineProperty(Readable.prototype, 'readableBuffer', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._readableState && this._readableState.buffer;
                },
              });
              Object.defineProperty(Readable.prototype, 'readableFlowing', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._readableState.flowing;
                },
                set: function set(state) {
                  if (this._readableState) {
                    this._readableState.flowing = state;
                  }
                },
              }); // exposed for testing purposes only.

              Readable._fromList = fromList;
              Object.defineProperty(Readable.prototype, 'readableLength', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._readableState.length;
                },
              }); // Pluck off n bytes from an array of buffers.
              // Length is the combined lengths of all the buffers in the list.
              // This function is designed to be inlinable, so please take care when making
              // changes to the function body.

              function fromList(n, state) {
                // nothing buffered
                if (state.length === 0) return null;
                var ret;
                if (state.objectMode) ret = state.buffer.shift();
                else if (!n || n >= state.length) {
                  // read it all, truncate the list
                  if (state.decoder) ret = state.buffer.join('');
                  else if (state.buffer.length === 1)
                    ret = state.buffer.first();
                  else ret = state.buffer.concat(state.length);
                  state.buffer.clear();
                } else {
                  // read part of list
                  ret = state.buffer.consume(n, state.decoder);
                }
                return ret;
              }

              function endReadable(stream) {
                var state = stream._readableState;
                debug('endReadable', state.endEmitted);

                if (!state.endEmitted) {
                  state.ended = true;
                  process.nextTick(endReadableNT, state, stream);
                }
              }

              function endReadableNT(state, stream) {
                debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

                if (!state.endEmitted && state.length === 0) {
                  state.endEmitted = true;
                  stream.readable = false;
                  stream.emit('end');

                  if (state.autoDestroy) {
                    // In case of duplex streams we need a way to detect
                    // if the writable side is ready for autoDestroy as well
                    var wState = stream._writableState;

                    if (!wState || (wState.autoDestroy && wState.finished)) {
                      stream.destroy();
                    }
                  }
                }
              }

              if (typeof Symbol === 'function') {
                Readable.from = function (iterable, opts) {
                  if (from === undefined) {
                    from = require('./internal/streams/from');
                  }

                  return from(Readable, iterable, opts);
                };
              }

              function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                  if (xs[i] === x) return i;
                }

                return -1;
              }
            }.call(this));
          }.call(
            this,
            require('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        {
          '../errors': 142,
          './_stream_duplex': 143,
          './internal/streams/async_iterator': 148,
          './internal/streams/buffer_list': 149,
          './internal/streams/destroy': 150,
          './internal/streams/from': 152,
          './internal/streams/state': 154,
          './internal/streams/stream': 155,
          _process: 189,
          buffer: 183,
          events: 184,
          inherits: 130,
          'string_decoder/': 167,
          util: 182,
        },
      ],
      146: [
        function (require, module, exports) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          // a transform stream is a readable/writable stream where you do
          // something with the data.  Sometimes it's called a "filter",
          // but that's not a great name for it, since that implies a thing where
          // some bits pass through, and others are simply ignored.  (That would
          // be a valid example of a transform, of course.)
          //
          // While the output is causally related to the input, it's not a
          // necessarily symmetric or synchronous transformation.  For example,
          // a zlib stream might take multiple plain-text writes(), and then
          // emit a single compressed chunk some time in the future.
          //
          // Here's how this works:
          //
          // The Transform stream has all the aspects of the readable and writable
          // stream classes.  When you write(chunk), that calls _write(chunk,cb)
          // internally, and returns false if there's a lot of pending writes
          // buffered up.  When you call read(), that calls _read(n) until
          // there's enough pending readable data buffered up.
          //
          // In a transform stream, the written data is placed in a buffer.  When
          // _read(n) is called, it transforms the queued up data, calling the
          // buffered _write cb's as it consumes chunks.  If consuming a single
          // written chunk would result in multiple output chunks, then the first
          // outputted bit calls the readcb, and subsequent chunks just go into
          // the read buffer, and will cause it to emit 'readable' if necessary.
          //
          // This way, back-pressure is actually determined by the reading side,
          // since _read has to be called to start processing a new chunk.  However,
          // a pathological inflate type of transform can cause excessive buffering
          // here.  For example, imagine a stream where every byte of input is
          // interpreted as an integer from 0-255, and then results in that many
          // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
          // 1kb of data being output.  In this case, you could write a very small
          // amount of input, and end up with a very large amount of output.  In
          // such a pathological inflating mechanism, there'd be no way to tell
          // the system to stop doing the transform.  A single 4MB write could
          // cause the system to run out of memory.
          //
          // However, even in such a pathological case, only a single written chunk
          // would be consumed, and then the rest would wait (un-transformed) until
          // the results of the previous transformed chunk were consumed.
          'use strict';

          module.exports = Transform;

          var _require$codes = require('../errors').codes,
            ERR_METHOD_NOT_IMPLEMENTED =
              _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
            ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
            ERR_TRANSFORM_ALREADY_TRANSFORMING =
              _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
            ERR_TRANSFORM_WITH_LENGTH_0 =
              _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

          var Duplex = require('./_stream_duplex');

          require('inherits')(Transform, Duplex);

          function afterTransform(er, data) {
            var ts = this._transformState;
            ts.transforming = false;
            var cb = ts.writecb;

            if (cb === null) {
              return this.emit('error', new ERR_MULTIPLE_CALLBACK());
            }

            ts.writechunk = null;
            ts.writecb = null;
            if (data != null)
              // single equals check for both `null` and `undefined`
              this.push(data);
            cb(er);
            var rs = this._readableState;
            rs.reading = false;

            if (rs.needReadable || rs.length < rs.highWaterMark) {
              this._read(rs.highWaterMark);
            }
          }

          function Transform(options) {
            if (!(this instanceof Transform)) return new Transform(options);
            Duplex.call(this, options);
            this._transformState = {
              afterTransform: afterTransform.bind(this),
              needTransform: false,
              transforming: false,
              writecb: null,
              writechunk: null,
              writeencoding: null,
            }; // start out asking for a readable event once data is transformed.

            this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
            // that Readable wants before the first _read call, so unset the
            // sync guard flag.

            this._readableState.sync = false;

            if (options) {
              if (typeof options.transform === 'function')
                this._transform = options.transform;
              if (typeof options.flush === 'function')
                this._flush = options.flush;
            } // When the writable side finishes, then flush out anything remaining.

            this.on('prefinish', prefinish);
          }

          function prefinish() {
            var _this = this;

            if (
              typeof this._flush === 'function' &&
              !this._readableState.destroyed
            ) {
              this._flush(function (er, data) {
                done(_this, er, data);
              });
            } else {
              done(this, null, null);
            }
          }

          Transform.prototype.push = function (chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
          }; // This is the part where you do stuff!
          // override this function in implementation classes.
          // 'chunk' is an input chunk.
          //
          // Call `push(newChunk)` to pass along transformed output
          // to the readable side.  You may call 'push' zero or more times.
          //
          // Call `cb(err)` when you are done with this chunk.  If you pass
          // an error, then that'll put the hurt on the whole operation.  If you
          // never call cb(), then you'll never get another chunk.

          Transform.prototype._transform = function (chunk, encoding, cb) {
            cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
          };

          Transform.prototype._write = function (chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;

            if (!ts.transforming) {
              var rs = this._readableState;
              if (
                ts.needTransform ||
                rs.needReadable ||
                rs.length < rs.highWaterMark
              )
                this._read(rs.highWaterMark);
            }
          }; // Doesn't matter what the args are here.
          // _transform does all the work.
          // That we got here means that the readable side wants more data.

          Transform.prototype._read = function (n) {
            var ts = this._transformState;

            if (ts.writechunk !== null && !ts.transforming) {
              ts.transforming = true;

              this._transform(
                ts.writechunk,
                ts.writeencoding,
                ts.afterTransform
              );
            } else {
              // mark that we need a transform, so that any data that comes in
              // will get processed, now that we've asked for it.
              ts.needTransform = true;
            }
          };

          Transform.prototype._destroy = function (err, cb) {
            Duplex.prototype._destroy.call(this, err, function (err2) {
              cb(err2);
            });
          };

          function done(stream, er, data) {
            if (er) return stream.emit('error', er);
            if (data != null)
              // single equals check for both `null` and `undefined`
              stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
            // if there's nothing in the write buffer, then that means
            // that nothing more will ever be provided

            if (stream._writableState.length)
              throw new ERR_TRANSFORM_WITH_LENGTH_0();
            if (stream._transformState.transforming)
              throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
            return stream.push(null);
          }
        },
        { '../errors': 142, './_stream_duplex': 143, inherits: 130 },
      ],
      147: [
        function (require, module, exports) {
          (function (process, global) {
            (function () {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.
              // A bit simpler than readable streams.
              // Implement an async ._write(chunk, encoding, cb), and it'll handle all
              // the drain event emission and buffering.
              'use strict';

              module.exports = Writable;
              /* <replacement> */

              function WriteReq(chunk, encoding, cb) {
                this.chunk = chunk;
                this.encoding = encoding;
                this.callback = cb;
                this.next = null;
              } // It seems a linked list but it is not
              // there will be only 2 of these for each stream

              function CorkedRequest(state) {
                var _this = this;

                this.next = null;
                this.entry = null;

                this.finish = function () {
                  onCorkedFinish(_this, state);
                };
              }
              /* </replacement> */

              /*<replacement>*/

              var Duplex;
              /*</replacement>*/

              Writable.WritableState = WritableState;
              /*<replacement>*/

              var internalUtil = {
                deprecate: require('util-deprecate'),
              };
              /*</replacement>*/

              /*<replacement>*/

              var Stream = require('./internal/streams/stream');
              /*</replacement>*/

              var Buffer = require('buffer').Buffer;

              var OurUint8Array = global.Uint8Array || function () {};

              function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
              }

              function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
              }

              var destroyImpl = require('./internal/streams/destroy');

              var _require = require('./internal/streams/state'),
                getHighWaterMark = _require.getHighWaterMark;

              var _require$codes = require('../errors').codes,
                ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
                ERR_METHOD_NOT_IMPLEMENTED =
                  _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
                ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
                ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
                ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
                ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
                ERR_STREAM_WRITE_AFTER_END =
                  _require$codes.ERR_STREAM_WRITE_AFTER_END,
                ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

              var errorOrDestroy = destroyImpl.errorOrDestroy;

              require('inherits')(Writable, Stream);

              function nop() {}

              function WritableState(options, stream, isDuplex) {
                Duplex = Duplex || require('./_stream_duplex');
                options = options || {}; // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream,
                // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

                if (typeof isDuplex !== 'boolean')
                  isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
                // contains buffers or objects.

                this.objectMode = !!options.objectMode;
                if (isDuplex)
                  this.objectMode =
                    this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
                // Note: 0 is a valid value, means that we always return false if
                // the entire buffer is not flushed immediately on write()

                this.highWaterMark = getHighWaterMark(
                  this,
                  options,
                  'writableHighWaterMark',
                  isDuplex
                ); // if _final has been called

                this.finalCalled = false; // drain event flag.

                this.needDrain = false; // at the start of calling end()

                this.ending = false; // when end() has been called, and returned

                this.ended = false; // when 'finish' is emitted

                this.finished = false; // has it been destroyed

                this.destroyed = false; // should we decode strings into buffers before passing to _write?
                // this is here so that some node-core streams can optimize string
                // handling at a lower level.

                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.

                this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
                // of how much we're waiting to get pushed to some underlying
                // socket or file.

                this.length = 0; // a flag to see when we're in the middle of a write.

                this.writing = false; // when true all writes will be buffered until .uncork() call

                this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
                // or on a later tick.  We set this to true at first, because any
                // actions that shouldn't happen until "later" should generally also
                // not happen before the first write call.

                this.sync = true; // a flag to know if we're processing previously buffered items, which
                // may call the _write() callback in the same tick, so that we don't
                // end up in an overlapped onwrite situation.

                this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

                this.onwrite = function (er) {
                  onwrite(stream, er);
                }; // the callback that the user supplies to write(chunk,encoding,cb)

                this.writecb = null; // the amount that is being written when _write is called.

                this.writelen = 0;
                this.bufferedRequest = null;
                this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
                // this must be 0 before 'finish' can be emitted

                this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
                // This is relevant for synchronous Transform streams

                this.prefinished = false; // True if the error was already emitted and should not be thrown again

                this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

                this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

                this.autoDestroy = !!options.autoDestroy; // count buffered requests

                this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
                // one allocated and free to use, and we maintain at most two

                this.corkedRequestsFree = new CorkedRequest(this);
              }

              WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];

                while (current) {
                  out.push(current);
                  current = current.next;
                }

                return out;
              };

              (function () {
                try {
                  Object.defineProperty(WritableState.prototype, 'buffer', {
                    get: internalUtil.deprecate(
                      function writableStateBufferGetter() {
                        return this.getBuffer();
                      },
                      '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +
                        'instead.',
                      'DEP0003'
                    ),
                  });
                } catch (_) {}
              })(); // Test _writableState for inheritance to account for Duplex streams,
              // whose prototype chain only points to Readable.

              var realHasInstance;

              if (
                typeof Symbol === 'function' &&
                Symbol.hasInstance &&
                typeof Function.prototype[Symbol.hasInstance] === 'function'
              ) {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                  value: function value(object) {
                    if (realHasInstance.call(this, object)) return true;
                    if (this !== Writable) return false;
                    return (
                      object && object._writableState instanceof WritableState
                    );
                  },
                });
              } else {
                realHasInstance = function realHasInstance(object) {
                  return object instanceof this;
                };
              }

              function Writable(options) {
                Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
                // `realHasInstance` is necessary because using plain `instanceof`
                // would return false, as no `_writableState` property is attached.
                // Trying to use the custom `instanceof` for Writable here will also break the
                // Node.js LazyTransform implementation, which has a non-trivial getter for
                // `_writableState` that would lead to infinite recursion.
                // Checking for a Stream.Duplex instance is faster here instead of inside
                // the WritableState constructor, at least with V8 6.5

                var isDuplex = this instanceof Duplex;
                if (!isDuplex && !realHasInstance.call(Writable, this))
                  return new Writable(options);
                this._writableState = new WritableState(
                  options,
                  this,
                  isDuplex
                ); // legacy.

                this.writable = true;

                if (options) {
                  if (typeof options.write === 'function')
                    this._write = options.write;
                  if (typeof options.writev === 'function')
                    this._writev = options.writev;
                  if (typeof options.destroy === 'function')
                    this._destroy = options.destroy;
                  if (typeof options.final === 'function')
                    this._final = options.final;
                }

                Stream.call(this);
              } // Otherwise people can pipe Writable streams, which is just wrong.

              Writable.prototype.pipe = function () {
                errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
              };

              function writeAfterEnd(stream, cb) {
                var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

                errorOrDestroy(stream, er);
                process.nextTick(cb, er);
              } // Checks that a user-supplied chunk is valid, especially for the particular
              // mode the stream is in. Currently this means that `null` is never accepted
              // and undefined/non-string values are only allowed in object mode.

              function validChunk(stream, state, chunk, cb) {
                var er;

                if (chunk === null) {
                  er = new ERR_STREAM_NULL_VALUES();
                } else if (typeof chunk !== 'string' && !state.objectMode) {
                  er = new ERR_INVALID_ARG_TYPE(
                    'chunk',
                    ['string', 'Buffer'],
                    chunk
                  );
                }

                if (er) {
                  errorOrDestroy(stream, er);
                  process.nextTick(cb, er);
                  return false;
                }

                return true;
              }

              Writable.prototype.write = function (chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;

                var isBuf = !state.objectMode && _isUint8Array(chunk);

                if (isBuf && !Buffer.isBuffer(chunk)) {
                  chunk = _uint8ArrayToBuffer(chunk);
                }

                if (typeof encoding === 'function') {
                  cb = encoding;
                  encoding = null;
                }

                if (isBuf) encoding = 'buffer';
                else if (!encoding) encoding = state.defaultEncoding;
                if (typeof cb !== 'function') cb = nop;
                if (state.ending) writeAfterEnd(this, cb);
                else if (isBuf || validChunk(this, state, chunk, cb)) {
                  state.pendingcb++;
                  ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }
                return ret;
              };

              Writable.prototype.cork = function () {
                this._writableState.corked++;
              };

              Writable.prototype.uncork = function () {
                var state = this._writableState;

                if (state.corked) {
                  state.corked--;
                  if (
                    !state.writing &&
                    !state.corked &&
                    !state.bufferProcessing &&
                    state.bufferedRequest
                  )
                    clearBuffer(this, state);
                }
              };

              Writable.prototype.setDefaultEncoding =
                function setDefaultEncoding(encoding) {
                  // node::ParseEncoding() requires lower case.
                  if (typeof encoding === 'string')
                    encoding = encoding.toLowerCase();
                  if (
                    !(
                      [
                        'hex',
                        'utf8',
                        'utf-8',
                        'ascii',
                        'binary',
                        'base64',
                        'ucs2',
                        'ucs-2',
                        'utf16le',
                        'utf-16le',
                        'raw',
                      ].indexOf((encoding + '').toLowerCase()) > -1
                    )
                  )
                    throw new ERR_UNKNOWN_ENCODING(encoding);
                  this._writableState.defaultEncoding = encoding;
                  return this;
                };

              Object.defineProperty(Writable.prototype, 'writableBuffer', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState && this._writableState.getBuffer();
                },
              });

              function decodeChunk(state, chunk, encoding) {
                if (
                  !state.objectMode &&
                  state.decodeStrings !== false &&
                  typeof chunk === 'string'
                ) {
                  chunk = Buffer.from(chunk, encoding);
                }

                return chunk;
              }

              Object.defineProperty(
                Writable.prototype,
                'writableHighWaterMark',
                {
                  // making it explicit this property is not enumerable
                  // because otherwise some prototype manipulation in
                  // userland will fail
                  enumerable: false,
                  get: function get() {
                    return this._writableState.highWaterMark;
                  },
                }
              ); // if we're already writing something, then just put this
              // in the queue, and wait our turn.  Otherwise, call _write
              // If we return false, then we need a drain event, so set that flag.

              function writeOrBuffer(
                stream,
                state,
                isBuf,
                chunk,
                encoding,
                cb
              ) {
                if (!isBuf) {
                  var newChunk = decodeChunk(state, chunk, encoding);

                  if (chunk !== newChunk) {
                    isBuf = true;
                    encoding = 'buffer';
                    chunk = newChunk;
                  }
                }

                var len = state.objectMode ? 1 : chunk.length;
                state.length += len;
                var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

                if (!ret) state.needDrain = true;

                if (state.writing || state.corked) {
                  var last = state.lastBufferedRequest;
                  state.lastBufferedRequest = {
                    chunk: chunk,
                    encoding: encoding,
                    isBuf: isBuf,
                    callback: cb,
                    next: null,
                  };

                  if (last) {
                    last.next = state.lastBufferedRequest;
                  } else {
                    state.bufferedRequest = state.lastBufferedRequest;
                  }

                  state.bufferedRequestCount += 1;
                } else {
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                }

                return ret;
              }

              function doWrite(
                stream,
                state,
                writev,
                len,
                chunk,
                encoding,
                cb
              ) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (state.destroyed)
                  state.onwrite(new ERR_STREAM_DESTROYED('write'));
                else if (writev) stream._writev(chunk, state.onwrite);
                else stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
              }

              function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;

                if (sync) {
                  // defer the callback if we are being called synchronously
                  // to avoid piling up things on the stack
                  process.nextTick(cb, er); // this can emit finish, and it will always happen
                  // after error

                  process.nextTick(finishMaybe, stream, state);
                  stream._writableState.errorEmitted = true;
                  errorOrDestroy(stream, er);
                } else {
                  // the caller expect this to happen before if
                  // it is async
                  cb(er);
                  stream._writableState.errorEmitted = true;
                  errorOrDestroy(stream, er); // this can emit finish, but finish must
                  // always follow error

                  finishMaybe(stream, state);
                }
              }

              function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
              }

              function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;
                if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
                onwriteStateUpdate(state);
                if (er) onwriteError(stream, state, sync, er, cb);
                else {
                  // Check if we're actually ready to finish, but don't emit yet
                  var finished = needFinish(state) || stream.destroyed;

                  if (
                    !finished &&
                    !state.corked &&
                    !state.bufferProcessing &&
                    state.bufferedRequest
                  ) {
                    clearBuffer(stream, state);
                  }

                  if (sync) {
                    process.nextTick(afterWrite, stream, state, finished, cb);
                  } else {
                    afterWrite(stream, state, finished, cb);
                  }
                }
              }

              function afterWrite(stream, state, finished, cb) {
                if (!finished) onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
              } // Must force callback to be called on nextTick, so that we don't
              // emit 'drain' before the write() consumer gets the 'false' return
              // value, and has a chance to attach a 'drain' listener.

              function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                  state.needDrain = false;
                  stream.emit('drain');
                }
              } // if there's something in the buffer waiting, then process it

              function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;

                if (stream._writev && entry && entry.next) {
                  // Fast case, write everything using _writev()
                  var l = state.bufferedRequestCount;
                  var buffer = new Array(l);
                  var holder = state.corkedRequestsFree;
                  holder.entry = entry;
                  var count = 0;
                  var allBuffers = true;

                  while (entry) {
                    buffer[count] = entry;
                    if (!entry.isBuf) allBuffers = false;
                    entry = entry.next;
                    count += 1;
                  }

                  buffer.allBuffers = allBuffers;
                  doWrite(
                    stream,
                    state,
                    true,
                    state.length,
                    buffer,
                    '',
                    holder.finish
                  ); // doWrite is almost always async, defer these to save a bit of time
                  // as the hot path ends with doWrite

                  state.pendingcb++;
                  state.lastBufferedRequest = null;

                  if (holder.next) {
                    state.corkedRequestsFree = holder.next;
                    holder.next = null;
                  } else {
                    state.corkedRequestsFree = new CorkedRequest(state);
                  }

                  state.bufferedRequestCount = 0;
                } else {
                  // Slow case, write chunks one-by-one
                  while (entry) {
                    var chunk = entry.chunk;
                    var encoding = entry.encoding;
                    var cb = entry.callback;
                    var len = state.objectMode ? 1 : chunk.length;
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                    entry = entry.next;
                    state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
                    // it means that we need to wait until it does.
                    // also, that means that the chunk and cb are currently
                    // being processed, so move the buffer counter past them.

                    if (state.writing) {
                      break;
                    }
                  }

                  if (entry === null) state.lastBufferedRequest = null;
                }

                state.bufferedRequest = entry;
                state.bufferProcessing = false;
              }

              Writable.prototype._write = function (chunk, encoding, cb) {
                cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
              };

              Writable.prototype._writev = null;

              Writable.prototype.end = function (chunk, encoding, cb) {
                var state = this._writableState;

                if (typeof chunk === 'function') {
                  cb = chunk;
                  chunk = null;
                  encoding = null;
                } else if (typeof encoding === 'function') {
                  cb = encoding;
                  encoding = null;
                }

                if (chunk !== null && chunk !== undefined)
                  this.write(chunk, encoding); // .end() fully uncorks

                if (state.corked) {
                  state.corked = 1;
                  this.uncork();
                } // ignore unnecessary end() calls.

                if (!state.ending) endWritable(this, state, cb);
                return this;
              };

              Object.defineProperty(Writable.prototype, 'writableLength', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState.length;
                },
              });

              function needFinish(state) {
                return (
                  state.ending &&
                  state.length === 0 &&
                  state.bufferedRequest === null &&
                  !state.finished &&
                  !state.writing
                );
              }

              function callFinal(stream, state) {
                stream._final(function (err) {
                  state.pendingcb--;

                  if (err) {
                    errorOrDestroy(stream, err);
                  }

                  state.prefinished = true;
                  stream.emit('prefinish');
                  finishMaybe(stream, state);
                });
              }

              function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                  if (typeof stream._final === 'function' && !state.destroyed) {
                    state.pendingcb++;
                    state.finalCalled = true;
                    process.nextTick(callFinal, stream, state);
                  } else {
                    state.prefinished = true;
                    stream.emit('prefinish');
                  }
                }
              }

              function finishMaybe(stream, state) {
                var need = needFinish(state);

                if (need) {
                  prefinish(stream, state);

                  if (state.pendingcb === 0) {
                    state.finished = true;
                    stream.emit('finish');

                    if (state.autoDestroy) {
                      // In case of duplex streams we need a way to detect
                      // if the readable side is ready for autoDestroy as well
                      var rState = stream._readableState;

                      if (
                        !rState ||
                        (rState.autoDestroy && rState.endEmitted)
                      ) {
                        stream.destroy();
                      }
                    }
                  }
                }

                return need;
              }

              function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);

                if (cb) {
                  if (state.finished) process.nextTick(cb);
                  else stream.once('finish', cb);
                }

                state.ended = true;
                stream.writable = false;
              }

              function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;

                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                } // reuse the free corkReq.

                state.corkedRequestsFree.next = corkReq;
              }

              Object.defineProperty(Writable.prototype, 'destroyed', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  if (this._writableState === undefined) {
                    return false;
                  }

                  return this._writableState.destroyed;
                },
                set: function set(value) {
                  // we ignore the value if the stream
                  // has not been initialized yet
                  if (!this._writableState) {
                    return;
                  } // backward compatibility, the user is explicitly
                  // managing destroyed

                  this._writableState.destroyed = value;
                },
              });
              Writable.prototype.destroy = destroyImpl.destroy;
              Writable.prototype._undestroy = destroyImpl.undestroy;

              Writable.prototype._destroy = function (err, cb) {
                cb(err);
              };
            }.call(this));
          }.call(
            this,
            require('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        {
          '../errors': 142,
          './_stream_duplex': 143,
          './internal/streams/destroy': 150,
          './internal/streams/state': 154,
          './internal/streams/stream': 155,
          _process: 189,
          buffer: 183,
          inherits: 130,
          'util-deprecate': 174,
        },
      ],
      148: [
        function (require, module, exports) {
          (function (process) {
            (function () {
              'use strict';

              var _Object$setPrototypeO;

              function _defineProperty(obj, key, value) {
                if (key in obj) {
                  Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true,
                  });
                } else {
                  obj[key] = value;
                }
                return obj;
              }

              var finished = require('./end-of-stream');

              var kLastResolve = Symbol('lastResolve');
              var kLastReject = Symbol('lastReject');
              var kError = Symbol('error');
              var kEnded = Symbol('ended');
              var kLastPromise = Symbol('lastPromise');
              var kHandlePromise = Symbol('handlePromise');
              var kStream = Symbol('stream');

              function createIterResult(value, done) {
                return {
                  value: value,
                  done: done,
                };
              }

              function readAndResolve(iter) {
                var resolve = iter[kLastResolve];

                if (resolve !== null) {
                  var data = iter[kStream].read(); // we defer if data is null
                  // we can be expecting either 'end' or
                  // 'error'

                  if (data !== null) {
                    iter[kLastPromise] = null;
                    iter[kLastResolve] = null;
                    iter[kLastReject] = null;
                    resolve(createIterResult(data, false));
                  }
                }
              }

              function onReadable(iter) {
                // we wait for the next tick, because it might
                // emit an error with process.nextTick
                process.nextTick(readAndResolve, iter);
              }

              function wrapForNext(lastPromise, iter) {
                return function (resolve, reject) {
                  lastPromise.then(function () {
                    if (iter[kEnded]) {
                      resolve(createIterResult(undefined, true));
                      return;
                    }

                    iter[kHandlePromise](resolve, reject);
                  }, reject);
                };
              }

              var AsyncIteratorPrototype = Object.getPrototypeOf(
                function () {}
              );
              var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(
                ((_Object$setPrototypeO = {
                  get stream() {
                    return this[kStream];
                  },

                  next: function next() {
                    var _this = this;

                    // if we have detected an error in the meanwhile
                    // reject straight away
                    var error = this[kError];

                    if (error !== null) {
                      return Promise.reject(error);
                    }

                    if (this[kEnded]) {
                      return Promise.resolve(createIterResult(undefined, true));
                    }

                    if (this[kStream].destroyed) {
                      // We need to defer via nextTick because if .destroy(err) is
                      // called, the error will be emitted via nextTick, and
                      // we cannot guarantee that there is no error lingering around
                      // waiting to be emitted.
                      return new Promise(function (resolve, reject) {
                        process.nextTick(function () {
                          if (_this[kError]) {
                            reject(_this[kError]);
                          } else {
                            resolve(createIterResult(undefined, true));
                          }
                        });
                      });
                    } // if we have multiple next() calls
                    // we will wait for the previous Promise to finish
                    // this logic is optimized to support for await loops,
                    // where next() is only called once at a time

                    var lastPromise = this[kLastPromise];
                    var promise;

                    if (lastPromise) {
                      promise = new Promise(wrapForNext(lastPromise, this));
                    } else {
                      // fast path needed to support multiple this.push()
                      // without triggering the next() queue
                      var data = this[kStream].read();

                      if (data !== null) {
                        return Promise.resolve(createIterResult(data, false));
                      }

                      promise = new Promise(this[kHandlePromise]);
                    }

                    this[kLastPromise] = promise;
                    return promise;
                  },
                }),
                _defineProperty(
                  _Object$setPrototypeO,
                  Symbol.asyncIterator,
                  function () {
                    return this;
                  }
                ),
                _defineProperty(
                  _Object$setPrototypeO,
                  'return',
                  function _return() {
                    var _this2 = this;

                    // destroy(err, cb) is a private API
                    // we can guarantee we have that here, because we control the
                    // Readable class this is attached to
                    return new Promise(function (resolve, reject) {
                      _this2[kStream].destroy(null, function (err) {
                        if (err) {
                          reject(err);
                          return;
                        }

                        resolve(createIterResult(undefined, true));
                      });
                    });
                  }
                ),
                _Object$setPrototypeO),
                AsyncIteratorPrototype
              );

              var createReadableStreamAsyncIterator =
                function createReadableStreamAsyncIterator(stream) {
                  var _Object$create;

                  var iterator = Object.create(
                    ReadableStreamAsyncIteratorPrototype,
                    ((_Object$create = {}),
                    _defineProperty(_Object$create, kStream, {
                      value: stream,
                      writable: true,
                    }),
                    _defineProperty(_Object$create, kLastResolve, {
                      value: null,
                      writable: true,
                    }),
                    _defineProperty(_Object$create, kLastReject, {
                      value: null,
                      writable: true,
                    }),
                    _defineProperty(_Object$create, kError, {
                      value: null,
                      writable: true,
                    }),
                    _defineProperty(_Object$create, kEnded, {
                      value: stream._readableState.endEmitted,
                      writable: true,
                    }),
                    _defineProperty(_Object$create, kHandlePromise, {
                      value: function value(resolve, reject) {
                        var data = iterator[kStream].read();

                        if (data) {
                          iterator[kLastPromise] = null;
                          iterator[kLastResolve] = null;
                          iterator[kLastReject] = null;
                          resolve(createIterResult(data, false));
                        } else {
                          iterator[kLastResolve] = resolve;
                          iterator[kLastReject] = reject;
                        }
                      },
                      writable: true,
                    }),
                    _Object$create)
                  );
                  iterator[kLastPromise] = null;
                  finished(stream, function (err) {
                    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
                      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
                      // returned by next() and store the error

                      if (reject !== null) {
                        iterator[kLastPromise] = null;
                        iterator[kLastResolve] = null;
                        iterator[kLastReject] = null;
                        reject(err);
                      }

                      iterator[kError] = err;
                      return;
                    }

                    var resolve = iterator[kLastResolve];

                    if (resolve !== null) {
                      iterator[kLastPromise] = null;
                      iterator[kLastResolve] = null;
                      iterator[kLastReject] = null;
                      resolve(createIterResult(undefined, true));
                    }

                    iterator[kEnded] = true;
                  });
                  stream.on('readable', onReadable.bind(null, iterator));
                  return iterator;
                };

              module.exports = createReadableStreamAsyncIterator;
            }.call(this));
          }.call(this, require('_process')));
        },
        { './end-of-stream': 151, _process: 189 },
      ],
      149: [
        function (require, module, exports) {
          'use strict';

          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              if (enumerableOnly)
                symbols = symbols.filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(
                    object,
                    sym
                  ).enumerable;
                });
              keys.push.apply(keys, symbols);
            }
            return keys;
          }

          function _objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i] != null ? arguments[i] : {};
              if (i % 2) {
                ownKeys(Object(source), true).forEach(function (key) {
                  _defineProperty(target, key, source[key]);
                });
              } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                );
              } else {
                ownKeys(Object(source)).forEach(function (key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
              }
            }
            return target;
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }
            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError('Cannot call a class as a function');
            }
          }

          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
          }

          var _require = require('buffer'),
            Buffer = _require.Buffer;

          var _require2 = require('util'),
            inspect = _require2.inspect;

          var custom = (inspect && inspect.custom) || 'inspect';

          function copyBuffer(src, target, offset) {
            Buffer.prototype.copy.call(src, target, offset);
          }

          module.exports =
            /*#__PURE__*/
            (function () {
              function BufferList() {
                _classCallCheck(this, BufferList);

                this.head = null;
                this.tail = null;
                this.length = 0;
              }

              _createClass(BufferList, [
                {
                  key: 'push',
                  value: function push(v) {
                    var entry = {
                      data: v,
                      next: null,
                    };
                    if (this.length > 0) this.tail.next = entry;
                    else this.head = entry;
                    this.tail = entry;
                    ++this.length;
                  },
                },
                {
                  key: 'unshift',
                  value: function unshift(v) {
                    var entry = {
                      data: v,
                      next: this.head,
                    };
                    if (this.length === 0) this.tail = entry;
                    this.head = entry;
                    ++this.length;
                  },
                },
                {
                  key: 'shift',
                  value: function shift() {
                    if (this.length === 0) return;
                    var ret = this.head.data;
                    if (this.length === 1) this.head = this.tail = null;
                    else this.head = this.head.next;
                    --this.length;
                    return ret;
                  },
                },
                {
                  key: 'clear',
                  value: function clear() {
                    this.head = this.tail = null;
                    this.length = 0;
                  },
                },
                {
                  key: 'join',
                  value: function join(s) {
                    if (this.length === 0) return '';
                    var p = this.head;
                    var ret = '' + p.data;

                    while ((p = p.next)) {
                      ret += s + p.data;
                    }

                    return ret;
                  },
                },
                {
                  key: 'concat',
                  value: function concat(n) {
                    if (this.length === 0) return Buffer.alloc(0);
                    var ret = Buffer.allocUnsafe(n >>> 0);
                    var p = this.head;
                    var i = 0;

                    while (p) {
                      copyBuffer(p.data, ret, i);
                      i += p.data.length;
                      p = p.next;
                    }

                    return ret;
                  }, // Consumes a specified amount of bytes or characters from the buffered data.
                },
                {
                  key: 'consume',
                  value: function consume(n, hasStrings) {
                    var ret;

                    if (n < this.head.data.length) {
                      // `slice` is the same for buffers and strings.
                      ret = this.head.data.slice(0, n);
                      this.head.data = this.head.data.slice(n);
                    } else if (n === this.head.data.length) {
                      // First chunk is a perfect match.
                      ret = this.shift();
                    } else {
                      // Result spans more than one buffer.
                      ret = hasStrings
                        ? this._getString(n)
                        : this._getBuffer(n);
                    }

                    return ret;
                  },
                },
                {
                  key: 'first',
                  value: function first() {
                    return this.head.data;
                  }, // Consumes a specified amount of characters from the buffered data.
                },
                {
                  key: '_getString',
                  value: function _getString(n) {
                    var p = this.head;
                    var c = 1;
                    var ret = p.data;
                    n -= ret.length;

                    while ((p = p.next)) {
                      var str = p.data;
                      var nb = n > str.length ? str.length : n;
                      if (nb === str.length) ret += str;
                      else ret += str.slice(0, n);
                      n -= nb;

                      if (n === 0) {
                        if (nb === str.length) {
                          ++c;
                          if (p.next) this.head = p.next;
                          else this.head = this.tail = null;
                        } else {
                          this.head = p;
                          p.data = str.slice(nb);
                        }

                        break;
                      }

                      ++c;
                    }

                    this.length -= c;
                    return ret;
                  }, // Consumes a specified amount of bytes from the buffered data.
                },
                {
                  key: '_getBuffer',
                  value: function _getBuffer(n) {
                    var ret = Buffer.allocUnsafe(n);
                    var p = this.head;
                    var c = 1;
                    p.data.copy(ret);
                    n -= p.data.length;

                    while ((p = p.next)) {
                      var buf = p.data;
                      var nb = n > buf.length ? buf.length : n;
                      buf.copy(ret, ret.length - n, 0, nb);
                      n -= nb;

                      if (n === 0) {
                        if (nb === buf.length) {
                          ++c;
                          if (p.next) this.head = p.next;
                          else this.head = this.tail = null;
                        } else {
                          this.head = p;
                          p.data = buf.slice(nb);
                        }

                        break;
                      }

                      ++c;
                    }

                    this.length -= c;
                    return ret;
                  }, // Make sure the linked list only shows the minimal necessary information.
                },
                {
                  key: custom,
                  value: function value(_, options) {
                    return inspect(
                      this,
                      _objectSpread({}, options, {
                        // Only inspect one level.
                        depth: 0,
                        // It should not recurse.
                        customInspect: false,
                      })
                    );
                  },
                },
              ]);

              return BufferList;
            })();
        },
        { buffer: 183, util: 182 },
      ],
      150: [
        function (require, module, exports) {
          (function (process) {
            (function () {
              'use strict'; // undocumented cb() API, needed for core, not for public API

              function destroy(err, cb) {
                var _this = this;

                var readableDestroyed =
                  this._readableState && this._readableState.destroyed;
                var writableDestroyed =
                  this._writableState && this._writableState.destroyed;

                if (readableDestroyed || writableDestroyed) {
                  if (cb) {
                    cb(err);
                  } else if (err) {
                    if (!this._writableState) {
                      process.nextTick(emitErrorNT, this, err);
                    } else if (!this._writableState.errorEmitted) {
                      this._writableState.errorEmitted = true;
                      process.nextTick(emitErrorNT, this, err);
                    }
                  }

                  return this;
                } // we set destroyed to true before firing error callbacks in order
                // to make it re-entrance safe in case destroy() is called within callbacks

                if (this._readableState) {
                  this._readableState.destroyed = true;
                } // if this is a duplex stream mark the writable part as destroyed as well

                if (this._writableState) {
                  this._writableState.destroyed = true;
                }

                this._destroy(err || null, function (err) {
                  if (!cb && err) {
                    if (!_this._writableState) {
                      process.nextTick(emitErrorAndCloseNT, _this, err);
                    } else if (!_this._writableState.errorEmitted) {
                      _this._writableState.errorEmitted = true;
                      process.nextTick(emitErrorAndCloseNT, _this, err);
                    } else {
                      process.nextTick(emitCloseNT, _this);
                    }
                  } else if (cb) {
                    process.nextTick(emitCloseNT, _this);
                    cb(err);
                  } else {
                    process.nextTick(emitCloseNT, _this);
                  }
                });

                return this;
              }

              function emitErrorAndCloseNT(self, err) {
                emitErrorNT(self, err);
                emitCloseNT(self);
              }

              function emitCloseNT(self) {
                if (self._writableState && !self._writableState.emitClose)
                  return;
                if (self._readableState && !self._readableState.emitClose)
                  return;
                self.emit('close');
              }

              function undestroy() {
                if (this._readableState) {
                  this._readableState.destroyed = false;
                  this._readableState.reading = false;
                  this._readableState.ended = false;
                  this._readableState.endEmitted = false;
                }

                if (this._writableState) {
                  this._writableState.destroyed = false;
                  this._writableState.ended = false;
                  this._writableState.ending = false;
                  this._writableState.finalCalled = false;
                  this._writableState.prefinished = false;
                  this._writableState.finished = false;
                  this._writableState.errorEmitted = false;
                }
              }

              function emitErrorNT(self, err) {
                self.emit('error', err);
              }

              function errorOrDestroy(stream, err) {
                // We have tests that rely on errors being emitted
                // in the same tick, so changing this is semver major.
                // For now when you opt-in to autoDestroy we allow
                // the error to be emitted nextTick. In a future
                // semver major update we should change the default to this.
                var rState = stream._readableState;
                var wState = stream._writableState;
                if (
                  (rState && rState.autoDestroy) ||
                  (wState && wState.autoDestroy)
                )
                  stream.destroy(err);
                else stream.emit('error', err);
              }

              module.exports = {
                destroy: destroy,
                undestroy: undestroy,
                errorOrDestroy: errorOrDestroy,
              };
            }.call(this));
          }.call(this, require('_process')));
        },
        { _process: 189 },
      ],
      151: [
        function (require, module, exports) {
          // Ported from https://github.com/mafintosh/end-of-stream with
          // permission from the author, Mathias Buus (@mafintosh).
          'use strict';

          var ERR_STREAM_PREMATURE_CLOSE =
            require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

          function once(callback) {
            var called = false;
            return function () {
              if (called) return;
              called = true;

              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              callback.apply(this, args);
            };
          }

          function noop() {}

          function isRequest(stream) {
            return stream.setHeader && typeof stream.abort === 'function';
          }

          function eos(stream, opts, callback) {
            if (typeof opts === 'function') return eos(stream, null, opts);
            if (!opts) opts = {};
            callback = once(callback || noop);
            var readable =
              opts.readable || (opts.readable !== false && stream.readable);
            var writable =
              opts.writable || (opts.writable !== false && stream.writable);

            var onlegacyfinish = function onlegacyfinish() {
              if (!stream.writable) onfinish();
            };

            var writableEnded =
              stream._writableState && stream._writableState.finished;

            var onfinish = function onfinish() {
              writable = false;
              writableEnded = true;
              if (!readable) callback.call(stream);
            };

            var readableEnded =
              stream._readableState && stream._readableState.endEmitted;

            var onend = function onend() {
              readable = false;
              readableEnded = true;
              if (!writable) callback.call(stream);
            };

            var onerror = function onerror(err) {
              callback.call(stream, err);
            };

            var onclose = function onclose() {
              var err;

              if (readable && !readableEnded) {
                if (!stream._readableState || !stream._readableState.ended)
                  err = new ERR_STREAM_PREMATURE_CLOSE();
                return callback.call(stream, err);
              }

              if (writable && !writableEnded) {
                if (!stream._writableState || !stream._writableState.ended)
                  err = new ERR_STREAM_PREMATURE_CLOSE();
                return callback.call(stream, err);
              }
            };

            var onrequest = function onrequest() {
              stream.req.on('finish', onfinish);
            };

            if (isRequest(stream)) {
              stream.on('complete', onfinish);
              stream.on('abort', onclose);
              if (stream.req) onrequest();
              else stream.on('request', onrequest);
            } else if (writable && !stream._writableState) {
              // legacy streams
              stream.on('end', onlegacyfinish);
              stream.on('close', onlegacyfinish);
            }

            stream.on('end', onend);
            stream.on('finish', onfinish);
            if (opts.error !== false) stream.on('error', onerror);
            stream.on('close', onclose);
            return function () {
              stream.removeListener('complete', onfinish);
              stream.removeListener('abort', onclose);
              stream.removeListener('request', onrequest);
              if (stream.req) stream.req.removeListener('finish', onfinish);
              stream.removeListener('end', onlegacyfinish);
              stream.removeListener('close', onlegacyfinish);
              stream.removeListener('finish', onfinish);
              stream.removeListener('end', onend);
              stream.removeListener('error', onerror);
              stream.removeListener('close', onclose);
            };
          }

          module.exports = eos;
        },
        { '../../../errors': 142 },
      ],
      152: [
        function (require, module, exports) {
          module.exports = function () {
            throw new Error('Readable.from is not available in the browser');
          };
        },
        {},
      ],
      153: [
        function (require, module, exports) {
          // Ported from https://github.com/mafintosh/pump with
          // permission from the author, Mathias Buus (@mafintosh).
          'use strict';

          var eos;

          function once(callback) {
            var called = false;
            return function () {
              if (called) return;
              called = true;
              callback.apply(void 0, arguments);
            };
          }

          var _require$codes = require('../../../errors').codes,
            ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
            ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

          function noop(err) {
            // Rethrow the error if it exists to avoid swallowing it
            if (err) throw err;
          }

          function isRequest(stream) {
            return stream.setHeader && typeof stream.abort === 'function';
          }

          function destroyer(stream, reading, writing, callback) {
            callback = once(callback);
            var closed = false;
            stream.on('close', function () {
              closed = true;
            });
            if (eos === undefined) eos = require('./end-of-stream');
            eos(
              stream,
              {
                readable: reading,
                writable: writing,
              },
              function (err) {
                if (err) return callback(err);
                closed = true;
                callback();
              }
            );
            var destroyed = false;
            return function (err) {
              if (closed) return;
              if (destroyed) return;
              destroyed = true; // request.destroy just do .end - .abort is what we want

              if (isRequest(stream)) return stream.abort();
              if (typeof stream.destroy === 'function') return stream.destroy();
              callback(err || new ERR_STREAM_DESTROYED('pipe'));
            };
          }

          function call(fn) {
            fn();
          }

          function pipe(from, to) {
            return from.pipe(to);
          }

          function popCallback(streams) {
            if (!streams.length) return noop;
            if (typeof streams[streams.length - 1] !== 'function') return noop;
            return streams.pop();
          }

          function pipeline() {
            for (
              var _len = arguments.length, streams = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              streams[_key] = arguments[_key];
            }

            var callback = popCallback(streams);
            if (Array.isArray(streams[0])) streams = streams[0];

            if (streams.length < 2) {
              throw new ERR_MISSING_ARGS('streams');
            }

            var error;
            var destroys = streams.map(function (stream, i) {
              var reading = i < streams.length - 1;
              var writing = i > 0;
              return destroyer(stream, reading, writing, function (err) {
                if (!error) error = err;
                if (err) destroys.forEach(call);
                if (reading) return;
                destroys.forEach(call);
                callback(error);
              });
            });
            return streams.reduce(pipe);
          }

          module.exports = pipeline;
        },
        { '../../../errors': 142, './end-of-stream': 151 },
      ],
      154: [
        function (require, module, exports) {
          'use strict';

          var ERR_INVALID_OPT_VALUE =
            require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

          function highWaterMarkFrom(options, isDuplex, duplexKey) {
            return options.highWaterMark != null
              ? options.highWaterMark
              : isDuplex
              ? options[duplexKey]
              : null;
          }

          function getHighWaterMark(state, options, duplexKey, isDuplex) {
            var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

            if (hwm != null) {
              if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
                var name = isDuplex ? duplexKey : 'highWaterMark';
                throw new ERR_INVALID_OPT_VALUE(name, hwm);
              }

              return Math.floor(hwm);
            } // Default value

            return state.objectMode ? 16 : 16 * 1024;
          }

          module.exports = {
            getHighWaterMark: getHighWaterMark,
          };
        },
        { '../../../errors': 142 },
      ],
      155: [
        function (require, module, exports) {
          module.exports = require('events').EventEmitter;
        },
        { events: 184 },
      ],
      156: [
        function (require, module, exports) {
          exports = module.exports = require('./lib/_stream_readable.js');
          exports.Stream = exports;
          exports.Readable = exports;
          exports.Writable = require('./lib/_stream_writable.js');
          exports.Duplex = require('./lib/_stream_duplex.js');
          exports.Transform = require('./lib/_stream_transform.js');
          exports.PassThrough = require('./lib/_stream_passthrough.js');
          exports.finished = require('./lib/internal/streams/end-of-stream.js');
          exports.pipeline = require('./lib/internal/streams/pipeline.js');
        },
        {
          './lib/_stream_duplex.js': 143,
          './lib/_stream_passthrough.js': 144,
          './lib/_stream_readable.js': 145,
          './lib/_stream_transform.js': 146,
          './lib/_stream_writable.js': 147,
          './lib/internal/streams/end-of-stream.js': 151,
          './lib/internal/streams/pipeline.js': 153,
        },
      ],
      157: [
        function (require, module, exports) {
          'use strict';
          var Buffer = require('buffer').Buffer;
          var inherits = require('inherits');
          var HashBase = require('hash-base');

          var ARRAY16 = new Array(16);

          var zl = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1,
            10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1,
            2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15,
            14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
          ];

          var zr = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7,
            0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9,
            11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13,
            9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
          ];

          var sl = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13,
            11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13,
            15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14,
            5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8,
            5, 6,
          ];

          var sr = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15,
            7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6,
            14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9,
            12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13,
            11, 11,
          ];

          var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
          var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

          function RIPEMD160() {
            HashBase.call(this, 64);

            // state
            this._a = 0x67452301;
            this._b = 0xefcdab89;
            this._c = 0x98badcfe;
            this._d = 0x10325476;
            this._e = 0xc3d2e1f0;
          }

          inherits(RIPEMD160, HashBase);

          RIPEMD160.prototype._update = function () {
            var words = ARRAY16;
            for (var j = 0; j < 16; ++j)
              words[j] = this._block.readInt32LE(j * 4);

            var al = this._a | 0;
            var bl = this._b | 0;
            var cl = this._c | 0;
            var dl = this._d | 0;
            var el = this._e | 0;

            var ar = this._a | 0;
            var br = this._b | 0;
            var cr = this._c | 0;
            var dr = this._d | 0;
            var er = this._e | 0;

            // computation
            for (var i = 0; i < 80; i += 1) {
              var tl;
              var tr;
              if (i < 16) {
                tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
                tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
              } else if (i < 32) {
                tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
                tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
              } else if (i < 48) {
                tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
                tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
              } else if (i < 64) {
                tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
                tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
              } else {
                // if (i<80) {
                tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
                tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
              }

              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = tl;

              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = tr;
            }

            // update state
            var t = (this._b + cl + dr) | 0;
            this._b = (this._c + dl + er) | 0;
            this._c = (this._d + el + ar) | 0;
            this._d = (this._e + al + br) | 0;
            this._e = (this._a + bl + cr) | 0;
            this._a = t;
          };

          RIPEMD160.prototype._digest = function () {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80;
            if (this._blockOffset > 56) {
              this._block.fill(0, this._blockOffset, 64);
              this._update();
              this._blockOffset = 0;
            }

            this._block.fill(0, this._blockOffset, 56);
            this._block.writeUInt32LE(this._length[0], 56);
            this._block.writeUInt32LE(this._length[1], 60);
            this._update();

            // produce result
            var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
            buffer.writeInt32LE(this._a, 0);
            buffer.writeInt32LE(this._b, 4);
            buffer.writeInt32LE(this._c, 8);
            buffer.writeInt32LE(this._d, 12);
            buffer.writeInt32LE(this._e, 16);
            return buffer;
          };

          function rotl(x, n) {
            return (x << n) | (x >>> (32 - n));
          }

          function fn1(a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0;
          }

          function fn2(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0;
          }

          function fn3(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0;
          }

          function fn4(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0;
          }

          function fn5(a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0;
          }

          module.exports = RIPEMD160;
        },
        { buffer: 183, 'hash-base': 116, inherits: 130 },
      ],
      158: [
        function (require, module, exports) {
          /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
          /* eslint-disable node/no-deprecated-api */
          var buffer = require('buffer');
          var Buffer = buffer.Buffer;

          // alternative to using Object.keys for old browsers
          function copyProps(src, dst) {
            for (var key in src) {
              dst[key] = src[key];
            }
          }
          if (
            Buffer.from &&
            Buffer.alloc &&
            Buffer.allocUnsafe &&
            Buffer.allocUnsafeSlow
          ) {
            module.exports = buffer;
          } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports);
            exports.Buffer = SafeBuffer;
          }

          function SafeBuffer(arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length);
          }

          SafeBuffer.prototype = Object.create(Buffer.prototype);

          // Copy static methods from Buffer
          copyProps(Buffer, SafeBuffer);

          SafeBuffer.from = function (arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
              throw new TypeError('Argument must not be a number');
            }
            return Buffer(arg, encodingOrOffset, length);
          };

          SafeBuffer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number');
            }
            var buf = Buffer(size);
            if (fill !== undefined) {
              if (typeof encoding === 'string') {
                buf.fill(fill, encoding);
              } else {
                buf.fill(fill);
              }
            } else {
              buf.fill(0);
            }
            return buf;
          };

          SafeBuffer.allocUnsafe = function (size) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number');
            }
            return Buffer(size);
          };

          SafeBuffer.allocUnsafeSlow = function (size) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number');
            }
            return buffer.SlowBuffer(size);
          };
        },
        { buffer: 183 },
      ],
      159: [
        function (require, module, exports) {
          var Buffer = require('safe-buffer').Buffer;

          // prototype class for hash functions
          function Hash(blockSize, finalSize) {
            this._block = Buffer.alloc(blockSize);
            this._finalSize = finalSize;
            this._blockSize = blockSize;
            this._len = 0;
          }

          Hash.prototype.update = function (data, enc) {
            if (typeof data === 'string') {
              enc = enc || 'utf8';
              data = Buffer.from(data, enc);
            }

            var block = this._block;
            var blockSize = this._blockSize;
            var length = data.length;
            var accum = this._len;

            for (var offset = 0; offset < length; ) {
              var assigned = accum % blockSize;
              var remainder = Math.min(length - offset, blockSize - assigned);

              for (var i = 0; i < remainder; i++) {
                block[assigned + i] = data[offset + i];
              }

              accum += remainder;
              offset += remainder;

              if (accum % blockSize === 0) {
                this._update(block);
              }
            }

            this._len += length;
            return this;
          };

          Hash.prototype.digest = function (enc) {
            var rem = this._len % this._blockSize;

            this._block[rem] = 0x80;

            // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
            // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
            this._block.fill(0, rem + 1);

            if (rem >= this._finalSize) {
              this._update(this._block);
              this._block.fill(0);
            }

            var bits = this._len * 8;

            // uint32
            if (bits <= 0xffffffff) {
              this._block.writeUInt32BE(bits, this._blockSize - 4);

              // uint64
            } else {
              var lowBits = (bits & 0xffffffff) >>> 0;
              var highBits = (bits - lowBits) / 0x100000000;

              this._block.writeUInt32BE(highBits, this._blockSize - 8);
              this._block.writeUInt32BE(lowBits, this._blockSize - 4);
            }

            this._update(this._block);
            var hash = this._hash();

            return enc ? hash.toString(enc) : hash;
          };

          Hash.prototype._update = function () {
            throw new Error('_update must be implemented by subclass');
          };

          module.exports = Hash;
        },
        { 'safe-buffer': 158 },
      ],
      160: [
        function (require, module, exports) {
          var exports = (module.exports = function SHA(algorithm) {
            algorithm = algorithm.toLowerCase();

            var Algorithm = exports[algorithm];
            if (!Algorithm)
              throw new Error(
                algorithm + ' is not supported (we accept pull requests)'
              );

            return new Algorithm();
          });

          exports.sha = require('./sha');
          exports.sha1 = require('./sha1');
          exports.sha224 = require('./sha224');
          exports.sha256 = require('./sha256');
          exports.sha384 = require('./sha384');
          exports.sha512 = require('./sha512');
        },
        {
          './sha': 161,
          './sha1': 162,
          './sha224': 163,
          './sha256': 164,
          './sha384': 165,
          './sha512': 166,
        },
      ],
      161: [
        function (require, module, exports) {
          /*
           * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
           * in FIPS PUB 180-1
           * This source code is derived from sha1.js of the same repository.
           * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
           * operation was added.
           */

          var inherits = require('inherits');
          var Hash = require('./hash');
          var Buffer = require('safe-buffer').Buffer;

          var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

          var W = new Array(80);

          function Sha() {
            this.init();
            this._w = W;

            Hash.call(this, 64, 56);
          }

          inherits(Sha, Hash);

          Sha.prototype.init = function () {
            this._a = 0x67452301;
            this._b = 0xefcdab89;
            this._c = 0x98badcfe;
            this._d = 0x10325476;
            this._e = 0xc3d2e1f0;

            return this;
          };

          function rotl5(num) {
            return (num << 5) | (num >>> 27);
          }

          function rotl30(num) {
            return (num << 30) | (num >>> 2);
          }

          function ft(s, b, c, d) {
            if (s === 0) return (b & c) | (~b & d);
            if (s === 2) return (b & c) | (b & d) | (c & d);
            return b ^ c ^ d;
          }

          Sha.prototype._update = function (M) {
            var W = this._w;

            var a = this._a | 0;
            var b = this._b | 0;
            var c = this._c | 0;
            var d = this._d | 0;
            var e = this._e | 0;

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
            for (; i < 80; ++i)
              W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

            for (var j = 0; j < 80; ++j) {
              var s = ~~(j / 20);
              var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0;

              e = d;
              d = c;
              c = rotl30(b);
              b = a;
              a = t;
            }

            this._a = (a + this._a) | 0;
            this._b = (b + this._b) | 0;
            this._c = (c + this._c) | 0;
            this._d = (d + this._d) | 0;
            this._e = (e + this._e) | 0;
          };

          Sha.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20);

            H.writeInt32BE(this._a | 0, 0);
            H.writeInt32BE(this._b | 0, 4);
            H.writeInt32BE(this._c | 0, 8);
            H.writeInt32BE(this._d | 0, 12);
            H.writeInt32BE(this._e | 0, 16);

            return H;
          };

          module.exports = Sha;
        },
        { './hash': 159, inherits: 130, 'safe-buffer': 158 },
      ],
      162: [
        function (require, module, exports) {
          /*
           * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
           * in FIPS PUB 180-1
           * Version 2.1a Copyright Paul Johnston 2000 - 2002.
           * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
           * Distributed under the BSD License
           * See http://pajhome.org.uk/crypt/md5 for details.
           */

          var inherits = require('inherits');
          var Hash = require('./hash');
          var Buffer = require('safe-buffer').Buffer;

          var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

          var W = new Array(80);

          function Sha1() {
            this.init();
            this._w = W;

            Hash.call(this, 64, 56);
          }

          inherits(Sha1, Hash);

          Sha1.prototype.init = function () {
            this._a = 0x67452301;
            this._b = 0xefcdab89;
            this._c = 0x98badcfe;
            this._d = 0x10325476;
            this._e = 0xc3d2e1f0;

            return this;
          };

          function rotl1(num) {
            return (num << 1) | (num >>> 31);
          }

          function rotl5(num) {
            return (num << 5) | (num >>> 27);
          }

          function rotl30(num) {
            return (num << 30) | (num >>> 2);
          }

          function ft(s, b, c, d) {
            if (s === 0) return (b & c) | (~b & d);
            if (s === 2) return (b & c) | (b & d) | (c & d);
            return b ^ c ^ d;
          }

          Sha1.prototype._update = function (M) {
            var W = this._w;

            var a = this._a | 0;
            var b = this._b | 0;
            var c = this._c | 0;
            var d = this._d | 0;
            var e = this._e | 0;

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
            for (; i < 80; ++i)
              W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

            for (var j = 0; j < 80; ++j) {
              var s = ~~(j / 20);
              var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0;

              e = d;
              d = c;
              c = rotl30(b);
              b = a;
              a = t;
            }

            this._a = (a + this._a) | 0;
            this._b = (b + this._b) | 0;
            this._c = (c + this._c) | 0;
            this._d = (d + this._d) | 0;
            this._e = (e + this._e) | 0;
          };

          Sha1.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20);

            H.writeInt32BE(this._a | 0, 0);
            H.writeInt32BE(this._b | 0, 4);
            H.writeInt32BE(this._c | 0, 8);
            H.writeInt32BE(this._d | 0, 12);
            H.writeInt32BE(this._e | 0, 16);

            return H;
          };

          module.exports = Sha1;
        },
        { './hash': 159, inherits: 130, 'safe-buffer': 158 },
      ],
      163: [
        function (require, module, exports) {
          /**
           * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
           * in FIPS 180-2
           * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
           * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
           *
           */

          var inherits = require('inherits');
          var Sha256 = require('./sha256');
          var Hash = require('./hash');
          var Buffer = require('safe-buffer').Buffer;

          var W = new Array(64);

          function Sha224() {
            this.init();

            this._w = W; // new Array(64)

            Hash.call(this, 64, 56);
          }

          inherits(Sha224, Sha256);

          Sha224.prototype.init = function () {
            this._a = 0xc1059ed8;
            this._b = 0x367cd507;
            this._c = 0x3070dd17;
            this._d = 0xf70e5939;
            this._e = 0xffc00b31;
            this._f = 0x68581511;
            this._g = 0x64f98fa7;
            this._h = 0xbefa4fa4;

            return this;
          };

          Sha224.prototype._hash = function () {
            var H = Buffer.allocUnsafe(28);

            H.writeInt32BE(this._a, 0);
            H.writeInt32BE(this._b, 4);
            H.writeInt32BE(this._c, 8);
            H.writeInt32BE(this._d, 12);
            H.writeInt32BE(this._e, 16);
            H.writeInt32BE(this._f, 20);
            H.writeInt32BE(this._g, 24);

            return H;
          };

          module.exports = Sha224;
        },
        { './hash': 159, './sha256': 164, inherits: 130, 'safe-buffer': 158 },
      ],
      164: [
        function (require, module, exports) {
          /**
           * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
           * in FIPS 180-2
           * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
           * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
           *
           */

          var inherits = require('inherits');
          var Hash = require('./hash');
          var Buffer = require('safe-buffer').Buffer;

          var K = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
            0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
            0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
            0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
            0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
            0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
            0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
            0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
            0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
            0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
            0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
            0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
          ];

          var W = new Array(64);

          function Sha256() {
            this.init();

            this._w = W; // new Array(64)

            Hash.call(this, 64, 56);
          }

          inherits(Sha256, Hash);

          Sha256.prototype.init = function () {
            this._a = 0x6a09e667;
            this._b = 0xbb67ae85;
            this._c = 0x3c6ef372;
            this._d = 0xa54ff53a;
            this._e = 0x510e527f;
            this._f = 0x9b05688c;
            this._g = 0x1f83d9ab;
            this._h = 0x5be0cd19;

            return this;
          };

          function ch(x, y, z) {
            return z ^ (x & (y ^ z));
          }

          function maj(x, y, z) {
            return (x & y) | (z & (x | y));
          }

          function sigma0(x) {
            return (
              ((x >>> 2) | (x << 30)) ^
              ((x >>> 13) | (x << 19)) ^
              ((x >>> 22) | (x << 10))
            );
          }

          function sigma1(x) {
            return (
              ((x >>> 6) | (x << 26)) ^
              ((x >>> 11) | (x << 21)) ^
              ((x >>> 25) | (x << 7))
            );
          }

          function gamma0(x) {
            return (
              ((x >>> 7) | (x << 25)) ^ ((x >>> 18) | (x << 14)) ^ (x >>> 3)
            );
          }

          function gamma1(x) {
            return (
              ((x >>> 17) | (x << 15)) ^ ((x >>> 19) | (x << 13)) ^ (x >>> 10)
            );
          }

          Sha256.prototype._update = function (M) {
            var W = this._w;

            var a = this._a | 0;
            var b = this._b | 0;
            var c = this._c | 0;
            var d = this._d | 0;
            var e = this._e | 0;
            var f = this._f | 0;
            var g = this._g | 0;
            var h = this._h | 0;

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
            for (; i < 64; ++i)
              W[i] =
                (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) |
                0;

            for (var j = 0; j < 64; ++j) {
              var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0;
              var T2 = (sigma0(a) + maj(a, b, c)) | 0;

              h = g;
              g = f;
              f = e;
              e = (d + T1) | 0;
              d = c;
              c = b;
              b = a;
              a = (T1 + T2) | 0;
            }

            this._a = (a + this._a) | 0;
            this._b = (b + this._b) | 0;
            this._c = (c + this._c) | 0;
            this._d = (d + this._d) | 0;
            this._e = (e + this._e) | 0;
            this._f = (f + this._f) | 0;
            this._g = (g + this._g) | 0;
            this._h = (h + this._h) | 0;
          };

          Sha256.prototype._hash = function () {
            var H = Buffer.allocUnsafe(32);

            H.writeInt32BE(this._a, 0);
            H.writeInt32BE(this._b, 4);
            H.writeInt32BE(this._c, 8);
            H.writeInt32BE(this._d, 12);
            H.writeInt32BE(this._e, 16);
            H.writeInt32BE(this._f, 20);
            H.writeInt32BE(this._g, 24);
            H.writeInt32BE(this._h, 28);

            return H;
          };

          module.exports = Sha256;
        },
        { './hash': 159, inherits: 130, 'safe-buffer': 158 },
      ],
      165: [
        function (require, module, exports) {
          var inherits = require('inherits');
          var SHA512 = require('./sha512');
          var Hash = require('./hash');
          var Buffer = require('safe-buffer').Buffer;

          var W = new Array(160);

          function Sha384() {
            this.init();
            this._w = W;

            Hash.call(this, 128, 112);
          }

          inherits(Sha384, SHA512);

          Sha384.prototype.init = function () {
            this._ah = 0xcbbb9d5d;
            this._bh = 0x629a292a;
            this._ch = 0x9159015a;
            this._dh = 0x152fecd8;
            this._eh = 0x67332667;
            this._fh = 0x8eb44a87;
            this._gh = 0xdb0c2e0d;
            this._hh = 0x47b5481d;

            this._al = 0xc1059ed8;
            this._bl = 0x367cd507;
            this._cl = 0x3070dd17;
            this._dl = 0xf70e5939;
            this._el = 0xffc00b31;
            this._fl = 0x68581511;
            this._gl = 0x64f98fa7;
            this._hl = 0xbefa4fa4;

            return this;
          };

          Sha384.prototype._hash = function () {
            var H = Buffer.allocUnsafe(48);

            function writeInt64BE(h, l, offset) {
              H.writeInt32BE(h, offset);
              H.writeInt32BE(l, offset + 4);
            }

            writeInt64BE(this._ah, this._al, 0);
            writeInt64BE(this._bh, this._bl, 8);
            writeInt64BE(this._ch, this._cl, 16);
            writeInt64BE(this._dh, this._dl, 24);
            writeInt64BE(this._eh, this._el, 32);
            writeInt64BE(this._fh, this._fl, 40);

            return H;
          };

          module.exports = Sha384;
        },
        { './hash': 159, './sha512': 166, inherits: 130, 'safe-buffer': 158 },
      ],
      166: [
        function (require, module, exports) {
          var inherits = require('inherits');
          var Hash = require('./hash');
          var Buffer = require('safe-buffer').Buffer;

          var K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf,
            0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538,
            0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5,
            0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74,
            0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235,
            0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786,
            0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc,
            0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab,
            0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7,
            0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85,
            0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed,
            0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb,
            0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70,
            0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218,
            0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070,
            0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3,
            0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373,
            0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f,
            0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7,
            0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c,
            0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f,
            0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5,
            0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc,
            0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c,
            0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817,
          ];

          var W = new Array(160);

          function Sha512() {
            this.init();
            this._w = W;

            Hash.call(this, 128, 112);
          }

          inherits(Sha512, Hash);

          Sha512.prototype.init = function () {
            this._ah = 0x6a09e667;
            this._bh = 0xbb67ae85;
            this._ch = 0x3c6ef372;
            this._dh = 0xa54ff53a;
            this._eh = 0x510e527f;
            this._fh = 0x9b05688c;
            this._gh = 0x1f83d9ab;
            this._hh = 0x5be0cd19;

            this._al = 0xf3bcc908;
            this._bl = 0x84caa73b;
            this._cl = 0xfe94f82b;
            this._dl = 0x5f1d36f1;
            this._el = 0xade682d1;
            this._fl = 0x2b3e6c1f;
            this._gl = 0xfb41bd6b;
            this._hl = 0x137e2179;

            return this;
          };

          function Ch(x, y, z) {
            return z ^ (x & (y ^ z));
          }

          function maj(x, y, z) {
            return (x & y) | (z & (x | y));
          }

          function sigma0(x, xl) {
            return (
              ((x >>> 28) | (xl << 4)) ^
              ((xl >>> 2) | (x << 30)) ^
              ((xl >>> 7) | (x << 25))
            );
          }

          function sigma1(x, xl) {
            return (
              ((x >>> 14) | (xl << 18)) ^
              ((x >>> 18) | (xl << 14)) ^
              ((xl >>> 9) | (x << 23))
            );
          }

          function Gamma0(x, xl) {
            return (
              ((x >>> 1) | (xl << 31)) ^ ((x >>> 8) | (xl << 24)) ^ (x >>> 7)
            );
          }

          function Gamma0l(x, xl) {
            return (
              ((x >>> 1) | (xl << 31)) ^
              ((x >>> 8) | (xl << 24)) ^
              ((x >>> 7) | (xl << 25))
            );
          }

          function Gamma1(x, xl) {
            return (
              ((x >>> 19) | (xl << 13)) ^ ((xl >>> 29) | (x << 3)) ^ (x >>> 6)
            );
          }

          function Gamma1l(x, xl) {
            return (
              ((x >>> 19) | (xl << 13)) ^
              ((xl >>> 29) | (x << 3)) ^
              ((x >>> 6) | (xl << 26))
            );
          }

          function getCarry(a, b) {
            return a >>> 0 < b >>> 0 ? 1 : 0;
          }

          Sha512.prototype._update = function (M) {
            var W = this._w;

            var ah = this._ah | 0;
            var bh = this._bh | 0;
            var ch = this._ch | 0;
            var dh = this._dh | 0;
            var eh = this._eh | 0;
            var fh = this._fh | 0;
            var gh = this._gh | 0;
            var hh = this._hh | 0;

            var al = this._al | 0;
            var bl = this._bl | 0;
            var cl = this._cl | 0;
            var dl = this._dl | 0;
            var el = this._el | 0;
            var fl = this._fl | 0;
            var gl = this._gl | 0;
            var hl = this._hl | 0;

            for (var i = 0; i < 32; i += 2) {
              W[i] = M.readInt32BE(i * 4);
              W[i + 1] = M.readInt32BE(i * 4 + 4);
            }
            for (; i < 160; i += 2) {
              var xh = W[i - 15 * 2];
              var xl = W[i - 15 * 2 + 1];
              var gamma0 = Gamma0(xh, xl);
              var gamma0l = Gamma0l(xl, xh);

              xh = W[i - 2 * 2];
              xl = W[i - 2 * 2 + 1];
              var gamma1 = Gamma1(xh, xl);
              var gamma1l = Gamma1l(xl, xh);

              // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
              var Wi7h = W[i - 7 * 2];
              var Wi7l = W[i - 7 * 2 + 1];

              var Wi16h = W[i - 16 * 2];
              var Wi16l = W[i - 16 * 2 + 1];

              var Wil = (gamma0l + Wi7l) | 0;
              var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
              Wil = (Wil + gamma1l) | 0;
              Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
              Wil = (Wil + Wi16l) | 0;
              Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

              W[i] = Wih;
              W[i + 1] = Wil;
            }

            for (var j = 0; j < 160; j += 2) {
              Wih = W[j];
              Wil = W[j + 1];

              var majh = maj(ah, bh, ch);
              var majl = maj(al, bl, cl);

              var sigma0h = sigma0(ah, al);
              var sigma0l = sigma0(al, ah);
              var sigma1h = sigma1(eh, el);
              var sigma1l = sigma1(el, eh);

              // t1 = h + sigma1 + ch + K[j] + W[j]
              var Kih = K[j];
              var Kil = K[j + 1];

              var chh = Ch(eh, fh, gh);
              var chl = Ch(el, fl, gl);

              var t1l = (hl + sigma1l) | 0;
              var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
              t1l = (t1l + chl) | 0;
              t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
              t1l = (t1l + Kil) | 0;
              t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
              t1l = (t1l + Wil) | 0;
              t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

              // t2 = sigma0 + maj
              var t2l = (sigma0l + majl) | 0;
              var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = (dl + t1l) | 0;
              eh = (dh + t1h + getCarry(el, dl)) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = (t1l + t2l) | 0;
              ah = (t1h + t2h + getCarry(al, t1l)) | 0;
            }

            this._al = (this._al + al) | 0;
            this._bl = (this._bl + bl) | 0;
            this._cl = (this._cl + cl) | 0;
            this._dl = (this._dl + dl) | 0;
            this._el = (this._el + el) | 0;
            this._fl = (this._fl + fl) | 0;
            this._gl = (this._gl + gl) | 0;
            this._hl = (this._hl + hl) | 0;

            this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
            this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
            this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
            this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
            this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
            this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
            this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
            this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
          };

          Sha512.prototype._hash = function () {
            var H = Buffer.allocUnsafe(64);

            function writeInt64BE(h, l, offset) {
              H.writeInt32BE(h, offset);
              H.writeInt32BE(l, offset + 4);
            }

            writeInt64BE(this._ah, this._al, 0);
            writeInt64BE(this._bh, this._bl, 8);
            writeInt64BE(this._ch, this._cl, 16);
            writeInt64BE(this._dh, this._dl, 24);
            writeInt64BE(this._eh, this._el, 32);
            writeInt64BE(this._fh, this._fl, 40);
            writeInt64BE(this._gh, this._gl, 48);
            writeInt64BE(this._hh, this._hl, 56);

            return H;
          };

          module.exports = Sha512;
        },
        { './hash': 159, inherits: 130, 'safe-buffer': 158 },
      ],
      167: [
        function (require, module, exports) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          'use strict';

          /*<replacement>*/

          var Buffer = require('safe-buffer').Buffer;
          /*</replacement>*/

          var isEncoding =
            Buffer.isEncoding ||
            function (encoding) {
              encoding = '' + encoding;
              switch (encoding && encoding.toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                case 'raw':
                  return true;
                default:
                  return false;
              }
            };

          function _normalizeEncoding(enc) {
            if (!enc) return 'utf8';
            var retried;
            while (true) {
              switch (enc) {
                case 'utf8':
                case 'utf-8':
                  return 'utf8';
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return 'utf16le';
                case 'latin1':
                case 'binary':
                  return 'latin1';
                case 'base64':
                case 'ascii':
                case 'hex':
                  return enc;
                default: // undefined
                  if (retried) return;
                  enc = ('' + enc).toLowerCase();
                  retried = true;
              }
            }
          }

          // Do not cache `Buffer.isEncoding` when checking encoding names as some
          // modules monkey-patch it to support additional encodings
          function normalizeEncoding(enc) {
            var nenc = _normalizeEncoding(enc);
            if (
              typeof nenc !== 'string' &&
              (Buffer.isEncoding === isEncoding || !isEncoding(enc))
            )
              throw new Error('Unknown encoding: ' + enc);
            return nenc || enc;
          }

          // StringDecoder provides an interface for efficiently splitting a series of
          // buffers into a series of JS strings without breaking apart multi-byte
          // characters.
          exports.StringDecoder = StringDecoder;
          function StringDecoder(encoding) {
            this.encoding = normalizeEncoding(encoding);
            var nb;
            switch (this.encoding) {
              case 'utf16le':
                this.text = utf16Text;
                this.end = utf16End;
                nb = 4;
                break;
              case 'utf8':
                this.fillLast = utf8FillLast;
                nb = 4;
                break;
              case 'base64':
                this.text = base64Text;
                this.end = base64End;
                nb = 3;
                break;
              default:
                this.write = simpleWrite;
                this.end = simpleEnd;
                return;
            }
            this.lastNeed = 0;
            this.lastTotal = 0;
            this.lastChar = Buffer.allocUnsafe(nb);
          }

          StringDecoder.prototype.write = function (buf) {
            if (buf.length === 0) return '';
            var r;
            var i;
            if (this.lastNeed) {
              r = this.fillLast(buf);
              if (r === undefined) return '';
              i = this.lastNeed;
              this.lastNeed = 0;
            } else {
              i = 0;
            }
            if (i < buf.length)
              return r ? r + this.text(buf, i) : this.text(buf, i);
            return r || '';
          };

          StringDecoder.prototype.end = utf8End;

          // Returns only complete characters in a Buffer
          StringDecoder.prototype.text = utf8Text;

          // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
          StringDecoder.prototype.fillLast = function (buf) {
            if (this.lastNeed <= buf.length) {
              buf.copy(
                this.lastChar,
                this.lastTotal - this.lastNeed,
                0,
                this.lastNeed
              );
              return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(
              this.lastChar,
              this.lastTotal - this.lastNeed,
              0,
              buf.length
            );
            this.lastNeed -= buf.length;
          };

          // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
          // continuation byte. If an invalid byte is detected, -2 is returned.
          function utf8CheckByte(byte) {
            if (byte <= 0x7f) return 0;
            else if (byte >> 5 === 0x06) return 2;
            else if (byte >> 4 === 0x0e) return 3;
            else if (byte >> 3 === 0x1e) return 4;
            return byte >> 6 === 0x02 ? -1 : -2;
          }

          // Checks at most 3 bytes at the end of a Buffer in order to detect an
          // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
          // needed to complete the UTF-8 character (if applicable) are returned.
          function utf8CheckIncomplete(self, buf, i) {
            var j = buf.length - 1;
            if (j < i) return 0;
            var nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
              if (nb > 0) self.lastNeed = nb - 1;
              return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
              if (nb > 0) self.lastNeed = nb - 2;
              return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
              if (nb > 0) {
                if (nb === 2) nb = 0;
                else self.lastNeed = nb - 3;
              }
              return nb;
            }
            return 0;
          }

          // Validates as many continuation bytes for a multi-byte UTF-8 character as
          // needed or are available. If we see a non-continuation byte where we expect
          // one, we "replace" the validated continuation bytes we've seen so far with
          // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
          // behavior. The continuation byte check is included three times in the case
          // where all of the continuation bytes for a character exist in the same buffer.
          // It is also done this way as a slight performance increase instead of using a
          // loop.
          function utf8CheckExtraBytes(self, buf, p) {
            if ((buf[0] & 0xc0) !== 0x80) {
              self.lastNeed = 0;
              return '\ufffd';
            }
            if (self.lastNeed > 1 && buf.length > 1) {
              if ((buf[1] & 0xc0) !== 0x80) {
                self.lastNeed = 1;
                return '\ufffd';
              }
              if (self.lastNeed > 2 && buf.length > 2) {
                if ((buf[2] & 0xc0) !== 0x80) {
                  self.lastNeed = 2;
                  return '\ufffd';
                }
              }
            }
          }

          // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
          function utf8FillLast(buf) {
            var p = this.lastTotal - this.lastNeed;
            var r = utf8CheckExtraBytes(this, buf, p);
            if (r !== undefined) return r;
            if (this.lastNeed <= buf.length) {
              buf.copy(this.lastChar, p, 0, this.lastNeed);
              return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, p, 0, buf.length);
            this.lastNeed -= buf.length;
          }

          // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
          // partial character, the character's bytes are buffered until the required
          // number of bytes are available.
          function utf8Text(buf, i) {
            var total = utf8CheckIncomplete(this, buf, i);
            if (!this.lastNeed) return buf.toString('utf8', i);
            this.lastTotal = total;
            var end = buf.length - (total - this.lastNeed);
            buf.copy(this.lastChar, 0, end);
            return buf.toString('utf8', i, end);
          }

          // For UTF-8, a replacement character is added when ending on a partial
          // character.
          function utf8End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + '\ufffd';
            return r;
          }

          // UTF-16LE typically needs two bytes per character, but even if we have an even
          // number of bytes available, we need to check if we end on a leading/high
          // surrogate. In that case, we need to wait for the next two bytes in order to
          // decode the last character properly.
          function utf16Text(buf, i) {
            if ((buf.length - i) % 2 === 0) {
              var r = buf.toString('utf16le', i);
              if (r) {
                var c = r.charCodeAt(r.length - 1);
                if (c >= 0xd800 && c <= 0xdbff) {
                  this.lastNeed = 2;
                  this.lastTotal = 4;
                  this.lastChar[0] = buf[buf.length - 2];
                  this.lastChar[1] = buf[buf.length - 1];
                  return r.slice(0, -1);
                }
              }
              return r;
            }
            this.lastNeed = 1;
            this.lastTotal = 2;
            this.lastChar[0] = buf[buf.length - 1];
            return buf.toString('utf16le', i, buf.length - 1);
          }

          // For UTF-16LE we do not explicitly append special replacement characters if we
          // end on a partial character, we simply let v8 handle that.
          function utf16End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) {
              var end = this.lastTotal - this.lastNeed;
              return r + this.lastChar.toString('utf16le', 0, end);
            }
            return r;
          }

          function base64Text(buf, i) {
            var n = (buf.length - i) % 3;
            if (n === 0) return buf.toString('base64', i);
            this.lastNeed = 3 - n;
            this.lastTotal = 3;
            if (n === 1) {
              this.lastChar[0] = buf[buf.length - 1];
            } else {
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
            }
            return buf.toString('base64', i, buf.length - n);
          }

          function base64End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed)
              return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
            return r;
          }

          // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
          function simpleWrite(buf) {
            return buf.toString(this.encoding);
          }

          function simpleEnd(buf) {
            return buf && buf.length ? this.write(buf) : '';
          }
        },
        { 'safe-buffer': 158 },
      ],
      168: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              const BN = require('bn.js');
              const EC = require('elliptic').ec;
              const secp256k1 = new EC('secp256k1');
              const deterministicGenerateK = require('./rfc6979');

              const ZERO32 = Buffer.alloc(32, 0);
              const EC_GROUP_ORDER = Buffer.from(
                'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141',
                'hex'
              );
              const EC_P = Buffer.from(
                'fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f',
                'hex'
              );

              const n = secp256k1.curve.n;
              const nDiv2 = n.shrn(1);
              const G = secp256k1.curve.g;

              const THROW_BAD_PRIVATE = 'Expected Private';
              const THROW_BAD_POINT = 'Expected Point';
              const THROW_BAD_TWEAK = 'Expected Tweak';
              const THROW_BAD_HASH = 'Expected Hash';
              const THROW_BAD_SIGNATURE = 'Expected Signature';
              const THROW_BAD_EXTRA_DATA = 'Expected Extra Data (32 bytes)';

              function isScalar(x) {
                return Buffer.isBuffer(x) && x.length === 32;
              }

              function isOrderScalar(x) {
                if (!isScalar(x)) return false;
                return x.compare(EC_GROUP_ORDER) < 0; // < G
              }

              function isPoint(p) {
                if (!Buffer.isBuffer(p)) return false;
                if (p.length < 33) return false;

                const t = p[0];
                const x = p.slice(1, 33);
                if (x.compare(ZERO32) === 0) return false;
                if (x.compare(EC_P) >= 0) return false;
                if ((t === 0x02 || t === 0x03) && p.length === 33) {
                  try {
                    decodeFrom(p);
                  } catch (e) {
                    return false;
                  } // TODO: temporary
                  return true;
                }

                const y = p.slice(33);
                if (y.compare(ZERO32) === 0) return false;
                if (y.compare(EC_P) >= 0) return false;
                if (t === 0x04 && p.length === 65) return true;
                return false;
              }

              function __isPointCompressed(p) {
                return p[0] !== 0x04;
              }

              function isPointCompressed(p) {
                if (!isPoint(p)) return false;
                return __isPointCompressed(p);
              }

              function isPrivate(x) {
                if (!isScalar(x)) return false;
                return (
                  x.compare(ZERO32) > 0 && // > 0
                  x.compare(EC_GROUP_ORDER) < 0
                ); // < G
              }

              function isSignature(value) {
                const r = value.slice(0, 32);
                const s = value.slice(32, 64);
                return (
                  Buffer.isBuffer(value) &&
                  value.length === 64 &&
                  r.compare(EC_GROUP_ORDER) < 0 &&
                  s.compare(EC_GROUP_ORDER) < 0
                );
              }

              function assumeCompression(value, pubkey) {
                if (value === undefined && pubkey !== undefined)
                  return __isPointCompressed(pubkey);
                if (value === undefined) return true;
                return value;
              }

              function fromBuffer(d) {
                return new BN(d);
              }
              function toBuffer(d) {
                return d.toArrayLike(Buffer, 'be', 32);
              }
              function decodeFrom(P) {
                return secp256k1.curve.decodePoint(P);
              }
              function getEncoded(P, compressed) {
                return Buffer.from(P._encode(compressed));
              }

              function pointAdd(pA, pB, __compressed) {
                if (!isPoint(pA)) throw new TypeError(THROW_BAD_POINT);
                if (!isPoint(pB)) throw new TypeError(THROW_BAD_POINT);

                const a = decodeFrom(pA);
                const b = decodeFrom(pB);
                const pp = a.add(b);
                if (pp.isInfinity()) return null;

                const compressed = assumeCompression(__compressed, pA);
                return getEncoded(pp, compressed);
              }

              function pointAddScalar(p, tweak, __compressed) {
                if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
                if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);

                const compressed = assumeCompression(__compressed, p);
                const pp = decodeFrom(p);
                if (tweak.compare(ZERO32) === 0)
                  return getEncoded(pp, compressed);

                const tt = fromBuffer(tweak);
                const qq = G.mul(tt);
                const uu = pp.add(qq);
                if (uu.isInfinity()) return null;

                return getEncoded(uu, compressed);
              }

              function pointCompress(p, __compressed) {
                if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);

                const pp = decodeFrom(p);
                if (pp.isInfinity()) throw new TypeError(THROW_BAD_POINT);

                const compressed = assumeCompression(__compressed, p);

                return getEncoded(pp, compressed);
              }

              function pointFromScalar(d, __compressed) {
                if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);

                const dd = fromBuffer(d);
                const pp = G.mul(dd);
                if (pp.isInfinity()) return null;

                const compressed = assumeCompression(__compressed);
                return getEncoded(pp, compressed);
              }

              function pointMultiply(p, tweak, __compressed) {
                if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
                if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);

                const compressed = assumeCompression(__compressed, p);
                const pp = decodeFrom(p);
                const tt = fromBuffer(tweak);
                const qq = pp.mul(tt);
                if (qq.isInfinity()) return null;

                return getEncoded(qq, compressed);
              }

              function privateAdd(d, tweak) {
                if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
                if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);

                const dd = fromBuffer(d);
                const tt = fromBuffer(tweak);
                const dt = toBuffer(dd.add(tt).umod(n));
                if (!isPrivate(dt)) return null;

                return dt;
              }

              function privateSub(d, tweak) {
                if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
                if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);

                const dd = fromBuffer(d);
                const tt = fromBuffer(tweak);
                const dt = toBuffer(dd.sub(tt).umod(n));
                if (!isPrivate(dt)) return null;

                return dt;
              }

              function sign(hash, x) {
                return __sign(hash, x);
              }

              function signWithEntropy(hash, x, addData) {
                return __sign(hash, x, addData);
              }

              function __sign(hash, x, addData) {
                if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);
                if (!isPrivate(x)) throw new TypeError(THROW_BAD_PRIVATE);
                if (addData !== undefined && !isScalar(addData))
                  throw new TypeError(THROW_BAD_EXTRA_DATA);

                const d = fromBuffer(x);
                const e = fromBuffer(hash);

                let r, s;
                const checkSig = function (k) {
                  const kI = fromBuffer(k);
                  const Q = G.mul(kI);

                  if (Q.isInfinity()) return false;

                  r = Q.x.umod(n);
                  if (r.isZero() === 0) return false;

                  s = kI
                    .invm(n)
                    .mul(e.add(d.mul(r)))
                    .umod(n);
                  if (s.isZero() === 0) return false;

                  return true;
                };

                deterministicGenerateK(hash, x, checkSig, isPrivate, addData);

                // enforce low S values, see bip62: 'low s values in signatures'
                if (s.cmp(nDiv2) > 0) {
                  s = n.sub(s);
                }

                const buffer = Buffer.allocUnsafe(64);
                toBuffer(r).copy(buffer, 0);
                toBuffer(s).copy(buffer, 32);
                return buffer;
              }

              function verify(hash, q, signature, strict) {
                if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);
                if (!isPoint(q)) throw new TypeError(THROW_BAD_POINT);

                // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (1, isSignature enforces '< n - 1')
                if (!isSignature(signature))
                  throw new TypeError(THROW_BAD_SIGNATURE);

                const Q = decodeFrom(q);
                const r = fromBuffer(signature.slice(0, 32));
                const s = fromBuffer(signature.slice(32, 64));

                if (strict && s.cmp(nDiv2) > 0) {
                  return false;
                }

                // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (2, enforces '> 0')
                if (r.gtn(0) <= 0 /* || r.compareTo(n) >= 0 */) return false;
                if (s.gtn(0) <= 0 /* || s.compareTo(n) >= 0 */) return false;

                // 1.4.2 H = Hash(M), already done by the user
                // 1.4.3 e = H
                const e = fromBuffer(hash);

                // Compute s^-1
                const sInv = s.invm(n);

                // 1.4.4 Compute u1 = es^−1 mod n
                //               u2 = rs^−1 mod n
                const u1 = e.mul(sInv).umod(n);
                const u2 = r.mul(sInv).umod(n);

                // 1.4.5 Compute R = (xR, yR)
                //               R = u1G + u2Q
                const R = G.mulAdd(u1, Q, u2);

                // 1.4.5 (cont.) Enforce R is not at infinity
                if (R.isInfinity()) return false;

                // 1.4.6 Convert the field element R.x to an integer
                const xR = R.x;

                // 1.4.7 Set v = xR mod n
                const v = xR.umod(n);

                // 1.4.8 If v = r, output "valid", and if v != r, output "invalid"
                return v.eq(r);
              }

              module.exports = {
                isPoint,
                isPointCompressed,
                isPrivate,
                pointAdd,
                pointAddScalar,
                pointCompress,
                pointFromScalar,
                pointMultiply,
                privateAdd,
                privateSub,
                sign,
                signWithEntropy,
                verify,
              };
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { './rfc6979': 169, 'bn.js': 85, buffer: 183, elliptic: 100 },
      ],
      169: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              const createHmac = require('create-hmac');

              const ONE1 = Buffer.alloc(1, 1);
              const ZERO1 = Buffer.alloc(1, 0);

              // https://tools.ietf.org/html/rfc6979#section-3.2
              function deterministicGenerateK(
                hash,
                x,
                checkSig,
                isPrivate,
                extraEntropy
              ) {
                // Step A, ignored as hash already provided
                // Step B
                // Step C
                let k = Buffer.alloc(32, 0);
                let v = Buffer.alloc(32, 1);

                // Step D
                k = createHmac('sha256', k)
                  .update(v)
                  .update(ZERO1)
                  .update(x)
                  .update(hash)
                  .update(extraEntropy || '')
                  .digest();

                // Step E
                v = createHmac('sha256', k).update(v).digest();

                // Step F
                k = createHmac('sha256', k)
                  .update(v)
                  .update(ONE1)
                  .update(x)
                  .update(hash)
                  .update(extraEntropy || '')
                  .digest();

                // Step G
                v = createHmac('sha256', k).update(v).digest();

                // Step H1/H2a, ignored as tlen === qlen (256 bit)
                // Step H2b
                v = createHmac('sha256', k).update(v).digest();

                let T = v;

                // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA
                while (!isPrivate(T) || !checkSig(T)) {
                  k = createHmac('sha256', k).update(v).update(ZERO1).digest();

                  v = createHmac('sha256', k).update(v).digest();

                  // Step H1/H2a, again, ignored as tlen === qlen (256 bit)
                  // Step H2b again
                  v = createHmac('sha256', k).update(v).digest();
                  T = v;
                }

                return T;
              }

              module.exports = deterministicGenerateK;
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { buffer: 183, 'create-hmac': 93 },
      ],
      170: [
        function (require, module, exports) {
          var native = require('./native');

          function getTypeName(fn) {
            return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
          }

          function getValueTypeName(value) {
            return native.Nil(value) ? '' : getTypeName(value.constructor);
          }

          function getValue(value) {
            if (native.Function(value)) return '';
            if (native.String(value)) return JSON.stringify(value);
            if (value && native.Object(value)) return '';
            return value;
          }

          function captureStackTrace(e, t) {
            if (Error.captureStackTrace) {
              Error.captureStackTrace(e, t);
            }
          }

          function tfJSON(type) {
            if (native.Function(type))
              return type.toJSON ? type.toJSON() : getTypeName(type);
            if (native.Array(type)) return 'Array';
            if (type && native.Object(type)) return 'Object';

            return type !== undefined ? type : '';
          }

          function tfErrorString(type, value, valueTypeName) {
            var valueJson = getValue(value);

            return (
              'Expected ' +
              tfJSON(type) +
              ', got' +
              (valueTypeName !== '' ? ' ' + valueTypeName : '') +
              (valueJson !== '' ? ' ' + valueJson : '')
            );
          }

          function TfTypeError(type, value, valueTypeName) {
            valueTypeName = valueTypeName || getValueTypeName(value);
            this.message = tfErrorString(type, value, valueTypeName);

            captureStackTrace(this, TfTypeError);
            this.__type = type;
            this.__value = value;
            this.__valueTypeName = valueTypeName;
          }

          TfTypeError.prototype = Object.create(Error.prototype);
          TfTypeError.prototype.constructor = TfTypeError;

          function tfPropertyErrorString(
            type,
            label,
            name,
            value,
            valueTypeName
          ) {
            var description = '" of type ';
            if (label === 'key') description = '" with key type ';

            return tfErrorString(
              'property "' + tfJSON(name) + description + tfJSON(type),
              value,
              valueTypeName
            );
          }

          function TfPropertyTypeError(
            type,
            property,
            label,
            value,
            valueTypeName
          ) {
            if (type) {
              valueTypeName = valueTypeName || getValueTypeName(value);
              this.message = tfPropertyErrorString(
                type,
                label,
                property,
                value,
                valueTypeName
              );
            } else {
              this.message = 'Unexpected property "' + property + '"';
            }

            captureStackTrace(this, TfTypeError);
            this.__label = label;
            this.__property = property;
            this.__type = type;
            this.__value = value;
            this.__valueTypeName = valueTypeName;
          }

          TfPropertyTypeError.prototype = Object.create(Error.prototype);
          TfPropertyTypeError.prototype.constructor = TfTypeError;

          function tfCustomError(expected, actual) {
            return new TfTypeError(expected, {}, actual);
          }

          function tfSubError(e, property, label) {
            // sub child?
            if (e instanceof TfPropertyTypeError) {
              property = property + '.' + e.__property;

              e = new TfPropertyTypeError(
                e.__type,
                property,
                e.__label,
                e.__value,
                e.__valueTypeName
              );

              // child?
            } else if (e instanceof TfTypeError) {
              e = new TfPropertyTypeError(
                e.__type,
                property,
                label,
                e.__value,
                e.__valueTypeName
              );
            }

            captureStackTrace(e);
            return e;
          }

          module.exports = {
            TfTypeError: TfTypeError,
            TfPropertyTypeError: TfPropertyTypeError,
            tfCustomError: tfCustomError,
            tfSubError: tfSubError,
            tfJSON: tfJSON,
            getValueTypeName: getValueTypeName,
          };
        },
        { './native': 173 },
      ],
      171: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              var NATIVE = require('./native');
              var ERRORS = require('./errors');

              function _Buffer(value) {
                return Buffer.isBuffer(value);
              }

              function Hex(value) {
                return (
                  typeof value === 'string' && /^([0-9a-f]{2})+$/i.test(value)
                );
              }

              function _LengthN(type, length) {
                var name = type.toJSON();

                function Length(value) {
                  if (!type(value)) return false;
                  if (value.length === length) return true;

                  throw ERRORS.tfCustomError(
                    name + '(Length: ' + length + ')',
                    name + '(Length: ' + value.length + ')'
                  );
                }
                Length.toJSON = function () {
                  return name;
                };

                return Length;
              }

              var _ArrayN = _LengthN.bind(null, NATIVE.Array);
              var _BufferN = _LengthN.bind(null, _Buffer);
              var _HexN = _LengthN.bind(null, Hex);
              var _StringN = _LengthN.bind(null, NATIVE.String);

              function Range(a, b, f) {
                f = f || NATIVE.Number;
                function _range(value, strict) {
                  return f(value, strict) && value > a && value < b;
                }
                _range.toJSON = function () {
                  return `${f.toJSON()} between [${a}, ${b}]`;
                };
                return _range;
              }

              var INT53_MAX = Math.pow(2, 53) - 1;

              function Finite(value) {
                return typeof value === 'number' && isFinite(value);
              }
              function Int8(value) {
                return (value << 24) >> 24 === value;
              }
              function Int16(value) {
                return (value << 16) >> 16 === value;
              }
              function Int32(value) {
                return (value | 0) === value;
              }
              function Int53(value) {
                return (
                  typeof value === 'number' &&
                  value >= -INT53_MAX &&
                  value <= INT53_MAX &&
                  Math.floor(value) === value
                );
              }
              function UInt8(value) {
                return (value & 0xff) === value;
              }
              function UInt16(value) {
                return (value & 0xffff) === value;
              }
              function UInt32(value) {
                return value >>> 0 === value;
              }
              function UInt53(value) {
                return (
                  typeof value === 'number' &&
                  value >= 0 &&
                  value <= INT53_MAX &&
                  Math.floor(value) === value
                );
              }

              var types = {
                ArrayN: _ArrayN,
                Buffer: _Buffer,
                BufferN: _BufferN,
                Finite: Finite,
                Hex: Hex,
                HexN: _HexN,
                Int8: Int8,
                Int16: Int16,
                Int32: Int32,
                Int53: Int53,
                Range: Range,
                StringN: _StringN,
                UInt8: UInt8,
                UInt16: UInt16,
                UInt32: UInt32,
                UInt53: UInt53,
              };

              for (var typeName in types) {
                types[typeName].toJSON = function (t) {
                  return t;
                }.bind(null, typeName);
              }

              module.exports = types;
            }.call(this));
          }.call(this, {
            isBuffer: require('../../../../node_modules/is-buffer/index.js'),
          }));
        },
        {
          '../../../../node_modules/is-buffer/index.js': 187,
          './errors': 170,
          './native': 173,
        },
      ],
      172: [
        function (require, module, exports) {
          var ERRORS = require('./errors');
          var NATIVE = require('./native');

          // short-hand
          var tfJSON = ERRORS.tfJSON;
          var TfTypeError = ERRORS.TfTypeError;
          var TfPropertyTypeError = ERRORS.TfPropertyTypeError;
          var tfSubError = ERRORS.tfSubError;
          var getValueTypeName = ERRORS.getValueTypeName;

          var TYPES = {
            arrayOf: function arrayOf(type, options) {
              type = compile(type);
              options = options || {};

              function _arrayOf(array, strict) {
                if (!NATIVE.Array(array)) return false;
                if (NATIVE.Nil(array)) return false;
                if (
                  options.minLength !== undefined &&
                  array.length < options.minLength
                )
                  return false;
                if (
                  options.maxLength !== undefined &&
                  array.length > options.maxLength
                )
                  return false;
                if (
                  options.length !== undefined &&
                  array.length !== options.length
                )
                  return false;

                return array.every(function (value, i) {
                  try {
                    return typeforce(type, value, strict);
                  } catch (e) {
                    throw tfSubError(e, i);
                  }
                });
              }
              _arrayOf.toJSON = function () {
                var str = '[' + tfJSON(type) + ']';
                if (options.length !== undefined) {
                  str += '{' + options.length + '}';
                } else if (
                  options.minLength !== undefined ||
                  options.maxLength !== undefined
                ) {
                  str +=
                    '{' +
                    (options.minLength === undefined ? 0 : options.minLength) +
                    ',' +
                    (options.maxLength === undefined
                      ? Infinity
                      : options.maxLength) +
                    '}';
                }
                return str;
              };

              return _arrayOf;
            },

            maybe: function maybe(type) {
              type = compile(type);

              function _maybe(value, strict) {
                return NATIVE.Nil(value) || type(value, strict, maybe);
              }
              _maybe.toJSON = function () {
                return '?' + tfJSON(type);
              };

              return _maybe;
            },

            map: function map(propertyType, propertyKeyType) {
              propertyType = compile(propertyType);
              if (propertyKeyType) propertyKeyType = compile(propertyKeyType);

              function _map(value, strict) {
                if (!NATIVE.Object(value)) return false;
                if (NATIVE.Nil(value)) return false;

                for (var propertyName in value) {
                  try {
                    if (propertyKeyType) {
                      typeforce(propertyKeyType, propertyName, strict);
                    }
                  } catch (e) {
                    throw tfSubError(e, propertyName, 'key');
                  }

                  try {
                    var propertyValue = value[propertyName];
                    typeforce(propertyType, propertyValue, strict);
                  } catch (e) {
                    throw tfSubError(e, propertyName);
                  }
                }

                return true;
              }

              if (propertyKeyType) {
                _map.toJSON = function () {
                  return (
                    '{' +
                    tfJSON(propertyKeyType) +
                    ': ' +
                    tfJSON(propertyType) +
                    '}'
                  );
                };
              } else {
                _map.toJSON = function () {
                  return '{' + tfJSON(propertyType) + '}';
                };
              }

              return _map;
            },

            object: function object(uncompiled) {
              var type = {};

              for (var typePropertyName in uncompiled) {
                type[typePropertyName] = compile(uncompiled[typePropertyName]);
              }

              function _object(value, strict) {
                if (!NATIVE.Object(value)) return false;
                if (NATIVE.Nil(value)) return false;

                var propertyName;

                try {
                  for (propertyName in type) {
                    var propertyType = type[propertyName];
                    var propertyValue = value[propertyName];

                    typeforce(propertyType, propertyValue, strict);
                  }
                } catch (e) {
                  throw tfSubError(e, propertyName);
                }

                if (strict) {
                  for (propertyName in value) {
                    if (type[propertyName]) continue;

                    throw new TfPropertyTypeError(undefined, propertyName);
                  }
                }

                return true;
              }
              _object.toJSON = function () {
                return tfJSON(type);
              };

              return _object;
            },

            anyOf: function anyOf() {
              var types = [].slice.call(arguments).map(compile);

              function _anyOf(value, strict) {
                return types.some(function (type) {
                  try {
                    return typeforce(type, value, strict);
                  } catch (e) {
                    return false;
                  }
                });
              }
              _anyOf.toJSON = function () {
                return types.map(tfJSON).join('|');
              };

              return _anyOf;
            },

            allOf: function allOf() {
              var types = [].slice.call(arguments).map(compile);

              function _allOf(value, strict) {
                return types.every(function (type) {
                  try {
                    return typeforce(type, value, strict);
                  } catch (e) {
                    return false;
                  }
                });
              }
              _allOf.toJSON = function () {
                return types.map(tfJSON).join(' & ');
              };

              return _allOf;
            },

            quacksLike: function quacksLike(type) {
              function _quacksLike(value) {
                return type === getValueTypeName(value);
              }
              _quacksLike.toJSON = function () {
                return type;
              };

              return _quacksLike;
            },

            tuple: function tuple() {
              var types = [].slice.call(arguments).map(compile);

              function _tuple(values, strict) {
                if (NATIVE.Nil(values)) return false;
                if (NATIVE.Nil(values.length)) return false;
                if (strict && values.length !== types.length) return false;

                return types.every(function (type, i) {
                  try {
                    return typeforce(type, values[i], strict);
                  } catch (e) {
                    throw tfSubError(e, i);
                  }
                });
              }
              _tuple.toJSON = function () {
                return '(' + types.map(tfJSON).join(', ') + ')';
              };

              return _tuple;
            },

            value: function value(expected) {
              function _value(actual) {
                return actual === expected;
              }
              _value.toJSON = function () {
                return expected;
              };

              return _value;
            },
          };

          // TODO: deprecate
          TYPES.oneOf = TYPES.anyOf;

          function compile(type) {
            if (NATIVE.String(type)) {
              if (type[0] === '?') return TYPES.maybe(type.slice(1));

              return NATIVE[type] || TYPES.quacksLike(type);
            } else if (type && NATIVE.Object(type)) {
              if (NATIVE.Array(type)) {
                if (type.length !== 1)
                  throw new TypeError(
                    'Expected compile() parameter of type Array of length 1'
                  );
                return TYPES.arrayOf(type[0]);
              }

              return TYPES.object(type);
            } else if (NATIVE.Function(type)) {
              return type;
            }

            return TYPES.value(type);
          }

          function typeforce(type, value, strict, surrogate) {
            if (NATIVE.Function(type)) {
              if (type(value, strict)) return true;

              throw new TfTypeError(surrogate || type, value);
            }

            // JIT
            return typeforce(compile(type), value, strict);
          }

          // assign types to typeforce function
          for (var typeName in NATIVE) {
            typeforce[typeName] = NATIVE[typeName];
          }

          for (typeName in TYPES) {
            typeforce[typeName] = TYPES[typeName];
          }

          var EXTRA = require('./extra');
          for (typeName in EXTRA) {
            typeforce[typeName] = EXTRA[typeName];
          }

          typeforce.compile = compile;
          typeforce.TfTypeError = TfTypeError;
          typeforce.TfPropertyTypeError = TfPropertyTypeError;

          module.exports = typeforce;
        },
        { './errors': 170, './extra': 171, './native': 173 },
      ],
      173: [
        function (require, module, exports) {
          var types = {
            Array: function (value) {
              return (
                value !== null &&
                value !== undefined &&
                value.constructor === Array
              );
            },
            Boolean: function (value) {
              return typeof value === 'boolean';
            },
            Function: function (value) {
              return typeof value === 'function';
            },
            Nil: function (value) {
              return value === undefined || value === null;
            },
            Number: function (value) {
              return typeof value === 'number';
            },
            Object: function (value) {
              return typeof value === 'object';
            },
            String: function (value) {
              return typeof value === 'string';
            },
            '': function () {
              return true;
            },
          };

          // TODO: deprecate
          types.Null = types.Nil;

          for (var typeName in types) {
            types[typeName].toJSON = function (t) {
              return t;
            }.bind(null, typeName);
          }

          module.exports = types;
        },
        {},
      ],
      174: [
        function (require, module, exports) {
          (function (global) {
            (function () {
              /**
               * Module exports.
               */

              module.exports = deprecate;

              /**
               * Mark that a method should not be used.
               * Returns a modified function which warns once by default.
               *
               * If `localStorage.noDeprecation = true` is set, then it is a no-op.
               *
               * If `localStorage.throwDeprecation = true` is set, then deprecated functions
               * will throw an Error when invoked.
               *
               * If `localStorage.traceDeprecation = true` is set, then deprecated functions
               * will invoke `console.trace()` instead of `console.error()`.
               *
               * @param {Function} fn - the function to deprecate
               * @param {String} msg - the string to print to the console when `fn` is invoked
               * @returns {Function} a new "deprecated" version of `fn`
               * @api public
               */

              function deprecate(fn, msg) {
                if (config('noDeprecation')) {
                  return fn;
                }

                var warned = false;
                function deprecated() {
                  if (!warned) {
                    if (config('throwDeprecation')) {
                      throw new Error(msg);
                    } else if (config('traceDeprecation')) {
                      console.trace(msg);
                    } else {
                      console.warn(msg);
                    }
                    warned = true;
                  }
                  return fn.apply(this, arguments);
                }

                return deprecated;
              }

              /**
               * Checks `localStorage` for boolean values for the given `name`.
               *
               * @param {String} name
               * @returns {Boolean}
               * @api private
               */

              function config(name) {
                // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                try {
                  if (!global.localStorage) return false;
                } catch (_) {
                  return false;
                }
                var val = global.localStorage[name];
                if (null == val) return false;
                return String(val).toLowerCase() === 'true';
              }
            }.call(this));
          }.call(
            this,
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        {},
      ],
      175: [
        function (require, module, exports) {
          'use strict';
          var Buffer = require('safe-buffer').Buffer;

          // Number.MAX_SAFE_INTEGER
          var MAX_SAFE_INTEGER = 9007199254740991;

          function checkUInt53(n) {
            if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
              throw new RangeError('value out of range');
          }

          function encode(number, buffer, offset) {
            checkUInt53(number);

            if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(number));
            if (!Buffer.isBuffer(buffer))
              throw new TypeError('buffer must be a Buffer instance');
            if (!offset) offset = 0;

            // 8 bit
            if (number < 0xfd) {
              buffer.writeUInt8(number, offset);
              encode.bytes = 1;

              // 16 bit
            } else if (number <= 0xffff) {
              buffer.writeUInt8(0xfd, offset);
              buffer.writeUInt16LE(number, offset + 1);
              encode.bytes = 3;

              // 32 bit
            } else if (number <= 0xffffffff) {
              buffer.writeUInt8(0xfe, offset);
              buffer.writeUInt32LE(number, offset + 1);
              encode.bytes = 5;

              // 64 bit
            } else {
              buffer.writeUInt8(0xff, offset);
              buffer.writeUInt32LE(number >>> 0, offset + 1);
              buffer.writeUInt32LE((number / 0x100000000) | 0, offset + 5);
              encode.bytes = 9;
            }

            return buffer;
          }

          function decode(buffer, offset) {
            if (!Buffer.isBuffer(buffer))
              throw new TypeError('buffer must be a Buffer instance');
            if (!offset) offset = 0;

            var first = buffer.readUInt8(offset);

            // 8 bit
            if (first < 0xfd) {
              decode.bytes = 1;
              return first;

              // 16 bit
            } else if (first === 0xfd) {
              decode.bytes = 3;
              return buffer.readUInt16LE(offset + 1);

              // 32 bit
            } else if (first === 0xfe) {
              decode.bytes = 5;
              return buffer.readUInt32LE(offset + 1);

              // 64 bit
            } else {
              decode.bytes = 9;
              var lo = buffer.readUInt32LE(offset + 1);
              var hi = buffer.readUInt32LE(offset + 5);
              var number = hi * 0x0100000000 + lo;
              checkUInt53(number);

              return number;
            }
          }

          function encodingLength(number) {
            checkUInt53(number);

            return number < 0xfd
              ? 1
              : number <= 0xffff
              ? 3
              : number <= 0xffffffff
              ? 5
              : 9;
          }

          module.exports = {
            encode: encode,
            decode: decode,
            encodingLength: encodingLength,
          };
        },
        { 'safe-buffer': 158 },
      ],
      176: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              var bs58check = require('bs58check');

              function decodeRaw(buffer, version) {
                // check version only if defined
                if (version !== undefined && buffer[0] !== version)
                  throw new Error('Invalid network version');

                // uncompressed
                if (buffer.length === 33) {
                  return {
                    version: buffer[0],
                    privateKey: buffer.slice(1, 33),
                    compressed: false,
                  };
                }

                // invalid length
                if (buffer.length !== 34) throw new Error('Invalid WIF length');

                // invalid compression flag
                if (buffer[33] !== 0x01)
                  throw new Error('Invalid compression flag');

                return {
                  version: buffer[0],
                  privateKey: buffer.slice(1, 33),
                  compressed: true,
                };
              }

              function encodeRaw(version, privateKey, compressed) {
                var result = new Buffer(compressed ? 34 : 33);

                result.writeUInt8(version, 0);
                privateKey.copy(result, 1);

                if (compressed) {
                  result[33] = 0x01;
                }

                return result;
              }

              function decode(string, version) {
                return decodeRaw(bs58check.decode(string), version);
              }

              function encode(version, privateKey, compressed) {
                if (typeof version === 'number')
                  return bs58check.encode(
                    encodeRaw(version, privateKey, compressed)
                  );

                return bs58check.encode(
                  encodeRaw(
                    version.version,
                    version.privateKey,
                    version.compressed
                  )
                );
              }

              module.exports = {
                decode: decode,
                decodeRaw: decodeRaw,
                encode: encode,
                encodeRaw: encodeRaw,
              };
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { bs58check: 89, buffer: 183 },
      ],
      177: [
        function (require, module, exports) {
          (function (global) {
            (function () {
              'use strict';

              var objectAssign = require('object-assign');

              // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
              // original notice:

              /*!
               * The buffer module from node.js, for the browser.
               *
               * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
               * @license  MIT
               */
              function compare(a, b) {
                if (a === b) {
                  return 0;
                }

                var x = a.length;
                var y = b.length;

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                  if (a[i] !== b[i]) {
                    x = a[i];
                    y = b[i];
                    break;
                  }
                }

                if (x < y) {
                  return -1;
                }
                if (y < x) {
                  return 1;
                }
                return 0;
              }
              function isBuffer(b) {
                if (
                  global.Buffer &&
                  typeof global.Buffer.isBuffer === 'function'
                ) {
                  return global.Buffer.isBuffer(b);
                }
                return !!(b != null && b._isBuffer);
              }

              // based on node assert, original notice:
              // NB: The URL to the CommonJS spec is kept just for tradition.
              //     node-assert has evolved a lot since then, both in API and behavior.

              // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
              //
              // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
              //
              // Originally from narwhal.js (http://narwhaljs.org)
              // Copyright (c) 2009 Thomas Robinson <280north.com>
              //
              // Permission is hereby granted, free of charge, to any person obtaining a copy
              // of this software and associated documentation files (the 'Software'), to
              // deal in the Software without restriction, including without limitation the
              // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
              // sell copies of the Software, and to permit persons to whom the Software is
              // furnished to do so, subject to the following conditions:
              //
              // The above copyright notice and this permission notice shall be included in
              // all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
              // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
              // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
              // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

              var util = require('util/');
              var hasOwn = Object.prototype.hasOwnProperty;
              var pSlice = Array.prototype.slice;
              var functionsHaveNames = (function () {
                return function foo() {}.name === 'foo';
              })();
              function pToString(obj) {
                return Object.prototype.toString.call(obj);
              }
              function isView(arrbuf) {
                if (isBuffer(arrbuf)) {
                  return false;
                }
                if (typeof global.ArrayBuffer !== 'function') {
                  return false;
                }
                if (typeof ArrayBuffer.isView === 'function') {
                  return ArrayBuffer.isView(arrbuf);
                }
                if (!arrbuf) {
                  return false;
                }
                if (arrbuf instanceof DataView) {
                  return true;
                }
                if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                  return true;
                }
                return false;
              }
              // 1. The assert module provides functions that throw
              // AssertionError's when particular conditions are not met. The
              // assert module must conform to the following interface.

              var assert = (module.exports = ok);

              // 2. The AssertionError is defined in assert.
              // new assert.AssertionError({ message: message,
              //                             actual: actual,
              //                             expected: expected })

              var regex = /\s*function\s+([^\(\s]*)\s*/;
              // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
              function getName(func) {
                if (!util.isFunction(func)) {
                  return;
                }
                if (functionsHaveNames) {
                  return func.name;
                }
                var str = func.toString();
                var match = str.match(regex);
                return match && match[1];
              }
              assert.AssertionError = function AssertionError(options) {
                this.name = 'AssertionError';
                this.actual = options.actual;
                this.expected = options.expected;
                this.operator = options.operator;
                if (options.message) {
                  this.message = options.message;
                  this.generatedMessage = false;
                } else {
                  this.message = getMessage(this);
                  this.generatedMessage = true;
                }
                var stackStartFunction = options.stackStartFunction || fail;
                if (Error.captureStackTrace) {
                  Error.captureStackTrace(this, stackStartFunction);
                } else {
                  // non v8 browsers so we can have a stacktrace
                  var err = new Error();
                  if (err.stack) {
                    var out = err.stack;

                    // try to strip useless frames
                    var fn_name = getName(stackStartFunction);
                    var idx = out.indexOf('\n' + fn_name);
                    if (idx >= 0) {
                      // once we have located the function frame
                      // we need to strip out everything before it (and its line)
                      var next_line = out.indexOf('\n', idx + 1);
                      out = out.substring(next_line + 1);
                    }

                    this.stack = out;
                  }
                }
              };

              // assert.AssertionError instanceof Error
              util.inherits(assert.AssertionError, Error);

              function truncate(s, n) {
                if (typeof s === 'string') {
                  return s.length < n ? s : s.slice(0, n);
                } else {
                  return s;
                }
              }
              function inspect(something) {
                if (functionsHaveNames || !util.isFunction(something)) {
                  return util.inspect(something);
                }
                var rawname = getName(something);
                var name = rawname ? ': ' + rawname : '';
                return '[Function' + name + ']';
              }
              function getMessage(self) {
                return (
                  truncate(inspect(self.actual), 128) +
                  ' ' +
                  self.operator +
                  ' ' +
                  truncate(inspect(self.expected), 128)
                );
              }

              // At present only the three keys mentioned above are used and
              // understood by the spec. Implementations or sub modules can pass
              // other keys to the AssertionError's constructor - they will be
              // ignored.

              // 3. All of the following functions must throw an AssertionError
              // when a corresponding condition is not met, with a message that
              // may be undefined if not provided.  All assertion methods provide
              // both the actual and expected values to the assertion error for
              // display purposes.

              function fail(
                actual,
                expected,
                message,
                operator,
                stackStartFunction
              ) {
                throw new assert.AssertionError({
                  message: message,
                  actual: actual,
                  expected: expected,
                  operator: operator,
                  stackStartFunction: stackStartFunction,
                });
              }

              // EXTENSION! allows for well behaved errors defined elsewhere.
              assert.fail = fail;

              // 4. Pure assertion tests whether a value is truthy, as determined
              // by !!guard.
              // assert.ok(guard, message_opt);
              // This statement is equivalent to assert.equal(true, !!guard,
              // message_opt);. To test strictly for the value true, use
              // assert.strictEqual(true, guard, message_opt);.

              function ok(value, message) {
                if (!value) fail(value, true, message, '==', assert.ok);
              }
              assert.ok = ok;

              // 5. The equality assertion tests shallow, coercive equality with
              // ==.
              // assert.equal(actual, expected, message_opt);

              assert.equal = function equal(actual, expected, message) {
                if (actual != expected)
                  fail(actual, expected, message, '==', assert.equal);
              };

              // 6. The non-equality assertion tests for whether two objects are not equal
              // with != assert.notEqual(actual, expected, message_opt);

              assert.notEqual = function notEqual(actual, expected, message) {
                if (actual == expected) {
                  fail(actual, expected, message, '!=', assert.notEqual);
                }
              };

              // 7. The equivalence assertion tests a deep equality relation.
              // assert.deepEqual(actual, expected, message_opt);

              assert.deepEqual = function deepEqual(actual, expected, message) {
                if (!_deepEqual(actual, expected, false)) {
                  fail(
                    actual,
                    expected,
                    message,
                    'deepEqual',
                    assert.deepEqual
                  );
                }
              };

              assert.deepStrictEqual = function deepStrictEqual(
                actual,
                expected,
                message
              ) {
                if (!_deepEqual(actual, expected, true)) {
                  fail(
                    actual,
                    expected,
                    message,
                    'deepStrictEqual',
                    assert.deepStrictEqual
                  );
                }
              };

              function _deepEqual(actual, expected, strict, memos) {
                // 7.1. All identical values are equivalent, as determined by ===.
                if (actual === expected) {
                  return true;
                } else if (isBuffer(actual) && isBuffer(expected)) {
                  return compare(actual, expected) === 0;

                  // 7.2. If the expected value is a Date object, the actual value is
                  // equivalent if it is also a Date object that refers to the same time.
                } else if (util.isDate(actual) && util.isDate(expected)) {
                  return actual.getTime() === expected.getTime();

                  // 7.3 If the expected value is a RegExp object, the actual value is
                  // equivalent if it is also a RegExp object with the same source and
                  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                  return (
                    actual.source === expected.source &&
                    actual.global === expected.global &&
                    actual.multiline === expected.multiline &&
                    actual.lastIndex === expected.lastIndex &&
                    actual.ignoreCase === expected.ignoreCase
                  );

                  // 7.4. Other pairs that do not both pass typeof value == 'object',
                  // equivalence is determined by ==.
                } else if (
                  (actual === null || typeof actual !== 'object') &&
                  (expected === null || typeof expected !== 'object')
                ) {
                  return strict ? actual === expected : actual == expected;

                  // If both values are instances of typed arrays, wrap their underlying
                  // ArrayBuffers in a Buffer each to increase performance
                  // This optimization requires the arrays to have the same type as checked by
                  // Object.prototype.toString (aka pToString). Never perform binary
                  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                  // bit patterns are not identical.
                } else if (
                  isView(actual) &&
                  isView(expected) &&
                  pToString(actual) === pToString(expected) &&
                  !(
                    actual instanceof Float32Array ||
                    actual instanceof Float64Array
                  )
                ) {
                  return (
                    compare(
                      new Uint8Array(actual.buffer),
                      new Uint8Array(expected.buffer)
                    ) === 0
                  );

                  // 7.5 For all other Object pairs, including Array objects, equivalence is
                  // determined by having the same number of owned properties (as verified
                  // with Object.prototype.hasOwnProperty.call), the same set of keys
                  // (although not necessarily the same order), equivalent values for every
                  // corresponding key, and an identical 'prototype' property. Note: this
                  // accounts for both named and indexed properties on Arrays.
                } else if (isBuffer(actual) !== isBuffer(expected)) {
                  return false;
                } else {
                  memos = memos || { actual: [], expected: [] };

                  var actualIndex = memos.actual.indexOf(actual);
                  if (actualIndex !== -1) {
                    if (actualIndex === memos.expected.indexOf(expected)) {
                      return true;
                    }
                  }

                  memos.actual.push(actual);
                  memos.expected.push(expected);

                  return objEquiv(actual, expected, strict, memos);
                }
              }

              function isArguments(object) {
                return (
                  Object.prototype.toString.call(object) == '[object Arguments]'
                );
              }

              function objEquiv(a, b, strict, actualVisitedObjects) {
                if (
                  a === null ||
                  a === undefined ||
                  b === null ||
                  b === undefined
                )
                  return false;
                // if one is a primitive, the other must be same
                if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
                if (
                  strict &&
                  Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)
                )
                  return false;
                var aIsArgs = isArguments(a);
                var bIsArgs = isArguments(b);
                if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
                  return false;
                if (aIsArgs) {
                  a = pSlice.call(a);
                  b = pSlice.call(b);
                  return _deepEqual(a, b, strict);
                }
                var ka = objectKeys(a);
                var kb = objectKeys(b);
                var key, i;
                // having the same number of owned properties (keys incorporates
                // hasOwnProperty)
                if (ka.length !== kb.length) return false;
                //the same set of keys (although not necessarily the same order),
                ka.sort();
                kb.sort();
                //~~~cheap key test
                for (i = ka.length - 1; i >= 0; i--) {
                  if (ka[i] !== kb[i]) return false;
                }
                //equivalent values for every corresponding key, and
                //~~~possibly expensive deep test
                for (i = ka.length - 1; i >= 0; i--) {
                  key = ka[i];
                  if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                    return false;
                }
                return true;
              }

              // 8. The non-equivalence assertion tests for any deep inequality.
              // assert.notDeepEqual(actual, expected, message_opt);

              assert.notDeepEqual = function notDeepEqual(
                actual,
                expected,
                message
              ) {
                if (_deepEqual(actual, expected, false)) {
                  fail(
                    actual,
                    expected,
                    message,
                    'notDeepEqual',
                    assert.notDeepEqual
                  );
                }
              };

              assert.notDeepStrictEqual = notDeepStrictEqual;
              function notDeepStrictEqual(actual, expected, message) {
                if (_deepEqual(actual, expected, true)) {
                  fail(
                    actual,
                    expected,
                    message,
                    'notDeepStrictEqual',
                    notDeepStrictEqual
                  );
                }
              }

              // 9. The strict equality assertion tests strict equality, as determined by ===.
              // assert.strictEqual(actual, expected, message_opt);

              assert.strictEqual = function strictEqual(
                actual,
                expected,
                message
              ) {
                if (actual !== expected) {
                  fail(actual, expected, message, '===', assert.strictEqual);
                }
              };

              // 10. The strict non-equality assertion tests for strict inequality, as
              // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

              assert.notStrictEqual = function notStrictEqual(
                actual,
                expected,
                message
              ) {
                if (actual === expected) {
                  fail(actual, expected, message, '!==', assert.notStrictEqual);
                }
              };

              function expectedException(actual, expected) {
                if (!actual || !expected) {
                  return false;
                }

                if (
                  Object.prototype.toString.call(expected) == '[object RegExp]'
                ) {
                  return expected.test(actual);
                }

                try {
                  if (actual instanceof expected) {
                    return true;
                  }
                } catch (e) {
                  // Ignore.  The instanceof check doesn't work for arrow functions.
                }

                if (Error.isPrototypeOf(expected)) {
                  return false;
                }

                return expected.call({}, actual) === true;
              }

              function _tryBlock(block) {
                var error;
                try {
                  block();
                } catch (e) {
                  error = e;
                }
                return error;
              }

              function _throws(shouldThrow, block, expected, message) {
                var actual;

                if (typeof block !== 'function') {
                  throw new TypeError('"block" argument must be a function');
                }

                if (typeof expected === 'string') {
                  message = expected;
                  expected = null;
                }

                actual = _tryBlock(block);

                message =
                  (expected && expected.name
                    ? ' (' + expected.name + ').'
                    : '.') + (message ? ' ' + message : '.');

                if (shouldThrow && !actual) {
                  fail(
                    actual,
                    expected,
                    'Missing expected exception' + message
                  );
                }

                var userProvidedMessage = typeof message === 'string';
                var isUnwantedException = !shouldThrow && util.isError(actual);
                var isUnexpectedException = !shouldThrow && actual && !expected;

                if (
                  (isUnwantedException &&
                    userProvidedMessage &&
                    expectedException(actual, expected)) ||
                  isUnexpectedException
                ) {
                  fail(actual, expected, 'Got unwanted exception' + message);
                }

                if (
                  (shouldThrow &&
                    actual &&
                    expected &&
                    !expectedException(actual, expected)) ||
                  (!shouldThrow && actual)
                ) {
                  throw actual;
                }
              }

              // 11. Expected to throw an error:
              // assert.throws(block, Error_opt, message_opt);

              assert.throws = function (
                block,
                /*optional*/ error,
                /*optional*/ message
              ) {
                _throws(true, block, error, message);
              };

              // EXTENSION! This is annoying to write outside this module.
              assert.doesNotThrow = function (
                block,
                /*optional*/ error,
                /*optional*/ message
              ) {
                _throws(false, block, error, message);
              };

              assert.ifError = function (err) {
                if (err) throw err;
              };

              // Expose a strict only variant of assert
              function strict(value, message) {
                if (!value) fail(value, true, message, '==', strict);
              }
              assert.strict = objectAssign(strict, assert, {
                equal: assert.strictEqual,
                deepEqual: assert.deepStrictEqual,
                notEqual: assert.notStrictEqual,
                notDeepEqual: assert.notDeepStrictEqual,
              });
              assert.strict.strict = assert.strict;

              var objectKeys =
                Object.keys ||
                function (obj) {
                  var keys = [];
                  for (var key in obj) {
                    if (hasOwn.call(obj, key)) keys.push(key);
                  }
                  return keys;
                };
            }.call(this));
          }.call(
            this,
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        { 'object-assign': 188, 'util/': 180 },
      ],
      178: [
        function (require, module, exports) {
          if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                },
              });
            };
          } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function () {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            };
          }
        },
        {},
      ],
      179: [
        function (require, module, exports) {
          module.exports = function isBuffer(arg) {
            return (
              arg &&
              typeof arg === 'object' &&
              typeof arg.copy === 'function' &&
              typeof arg.fill === 'function' &&
              typeof arg.readUInt8 === 'function'
            );
          };
        },
        {},
      ],
      180: [
        function (require, module, exports) {
          (function (process, global) {
            (function () {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.

              var formatRegExp = /%[sdj%]/g;
              exports.format = function (f) {
                if (!isString(f)) {
                  var objects = [];
                  for (var i = 0; i < arguments.length; i++) {
                    objects.push(inspect(arguments[i]));
                  }
                  return objects.join(' ');
                }

                var i = 1;
                var args = arguments;
                var len = args.length;
                var str = String(f).replace(formatRegExp, function (x) {
                  if (x === '%%') return '%';
                  if (i >= len) return x;
                  switch (x) {
                    case '%s':
                      return String(args[i++]);
                    case '%d':
                      return Number(args[i++]);
                    case '%j':
                      try {
                        return JSON.stringify(args[i++]);
                      } catch (_) {
                        return '[Circular]';
                      }
                    default:
                      return x;
                  }
                });
                for (var x = args[i]; i < len; x = args[++i]) {
                  if (isNull(x) || !isObject(x)) {
                    str += ' ' + x;
                  } else {
                    str += ' ' + inspect(x);
                  }
                }
                return str;
              };

              // Mark that a method should not be used.
              // Returns a modified function which warns once by default.
              // If --no-deprecation is set, then it is a no-op.
              exports.deprecate = function (fn, msg) {
                // Allow for deprecating things in the process of starting up.
                if (isUndefined(global.process)) {
                  return function () {
                    return exports.deprecate(fn, msg).apply(this, arguments);
                  };
                }

                if (process.noDeprecation === true) {
                  return fn;
                }

                var warned = false;
                function deprecated() {
                  if (!warned) {
                    if (process.throwDeprecation) {
                      throw new Error(msg);
                    } else if (process.traceDeprecation) {
                      console.trace(msg);
                    } else {
                      console.error(msg);
                    }
                    warned = true;
                  }
                  return fn.apply(this, arguments);
                }

                return deprecated;
              };

              var debugs = {};
              var debugEnviron;
              exports.debuglog = function (set) {
                if (isUndefined(debugEnviron))
                  debugEnviron = process.env.NODE_DEBUG || '';
                set = set.toUpperCase();
                if (!debugs[set]) {
                  if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                    var pid = process.pid;
                    debugs[set] = function () {
                      var msg = exports.format.apply(exports, arguments);
                      console.error('%s %d: %s', set, pid, msg);
                    };
                  } else {
                    debugs[set] = function () {};
                  }
                }
                return debugs[set];
              };

              /**
               * Echos the value of a value. Trys to print the value out
               * in the best way possible given the different types.
               *
               * @param {Object} obj The object to print out.
               * @param {Object} opts Optional options object that alters the output.
               */
              /* legacy: obj, showHidden, depth, colors*/
              function inspect(obj, opts) {
                // default options
                var ctx = {
                  seen: [],
                  stylize: stylizeNoColor,
                };
                // legacy...
                if (arguments.length >= 3) ctx.depth = arguments[2];
                if (arguments.length >= 4) ctx.colors = arguments[3];
                if (isBoolean(opts)) {
                  // legacy...
                  ctx.showHidden = opts;
                } else if (opts) {
                  // got an "options" object
                  exports._extend(ctx, opts);
                }
                // set default options
                if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                if (isUndefined(ctx.depth)) ctx.depth = 2;
                if (isUndefined(ctx.colors)) ctx.colors = false;
                if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                if (ctx.colors) ctx.stylize = stylizeWithColor;
                return formatValue(ctx, obj, ctx.depth);
              }
              exports.inspect = inspect;

              // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
              inspect.colors = {
                bold: [1, 22],
                italic: [3, 23],
                underline: [4, 24],
                inverse: [7, 27],
                white: [37, 39],
                grey: [90, 39],
                black: [30, 39],
                blue: [34, 39],
                cyan: [36, 39],
                green: [32, 39],
                magenta: [35, 39],
                red: [31, 39],
                yellow: [33, 39],
              };

              // Don't use 'blue' not visible on cmd.exe
              inspect.styles = {
                special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                date: 'magenta',
                // "name": intentionally not styling
                regexp: 'red',
              };

              function stylizeWithColor(str, styleType) {
                var style = inspect.styles[styleType];

                if (style) {
                  return (
                    '\u001b[' +
                    inspect.colors[style][0] +
                    'm' +
                    str +
                    '\u001b[' +
                    inspect.colors[style][1] +
                    'm'
                  );
                } else {
                  return str;
                }
              }

              function stylizeNoColor(str, styleType) {
                return str;
              }

              function arrayToHash(array) {
                var hash = {};

                array.forEach(function (val, idx) {
                  hash[val] = true;
                });

                return hash;
              }

              function formatValue(ctx, value, recurseTimes) {
                // Provide a hook for user-specified inspect functions.
                // Check that value is an object with an inspect function on it
                if (
                  ctx.customInspect &&
                  value &&
                  isFunction(value.inspect) &&
                  // Filter out the util module, it's inspect function is special
                  value.inspect !== exports.inspect &&
                  // Also filter out any prototype objects using the circular check.
                  !(value.constructor && value.constructor.prototype === value)
                ) {
                  var ret = value.inspect(recurseTimes, ctx);
                  if (!isString(ret)) {
                    ret = formatValue(ctx, ret, recurseTimes);
                  }
                  return ret;
                }

                // Primitive types cannot have properties
                var primitive = formatPrimitive(ctx, value);
                if (primitive) {
                  return primitive;
                }

                // Look up the keys of the object.
                var keys = Object.keys(value);
                var visibleKeys = arrayToHash(keys);

                if (ctx.showHidden) {
                  keys = Object.getOwnPropertyNames(value);
                }

                // IE doesn't make error fields non-enumerable
                // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                if (
                  isError(value) &&
                  (keys.indexOf('message') >= 0 ||
                    keys.indexOf('description') >= 0)
                ) {
                  return formatError(value);
                }

                // Some type of object without properties can be shortcutted.
                if (keys.length === 0) {
                  if (isFunction(value)) {
                    var name = value.name ? ': ' + value.name : '';
                    return ctx.stylize('[Function' + name + ']', 'special');
                  }
                  if (isRegExp(value)) {
                    return ctx.stylize(
                      RegExp.prototype.toString.call(value),
                      'regexp'
                    );
                  }
                  if (isDate(value)) {
                    return ctx.stylize(
                      Date.prototype.toString.call(value),
                      'date'
                    );
                  }
                  if (isError(value)) {
                    return formatError(value);
                  }
                }

                var base = '',
                  array = false,
                  braces = ['{', '}'];

                // Make Array say that they are Array
                if (isArray(value)) {
                  array = true;
                  braces = ['[', ']'];
                }

                // Make functions say that they are functions
                if (isFunction(value)) {
                  var n = value.name ? ': ' + value.name : '';
                  base = ' [Function' + n + ']';
                }

                // Make RegExps say that they are RegExps
                if (isRegExp(value)) {
                  base = ' ' + RegExp.prototype.toString.call(value);
                }

                // Make dates with properties first say the date
                if (isDate(value)) {
                  base = ' ' + Date.prototype.toUTCString.call(value);
                }

                // Make error with message first say the error
                if (isError(value)) {
                  base = ' ' + formatError(value);
                }

                if (keys.length === 0 && (!array || value.length == 0)) {
                  return braces[0] + base + braces[1];
                }

                if (recurseTimes < 0) {
                  if (isRegExp(value)) {
                    return ctx.stylize(
                      RegExp.prototype.toString.call(value),
                      'regexp'
                    );
                  } else {
                    return ctx.stylize('[Object]', 'special');
                  }
                }

                ctx.seen.push(value);

                var output;
                if (array) {
                  output = formatArray(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    keys
                  );
                } else {
                  output = keys.map(function (key) {
                    return formatProperty(
                      ctx,
                      value,
                      recurseTimes,
                      visibleKeys,
                      key,
                      array
                    );
                  });
                }

                ctx.seen.pop();

                return reduceToSingleString(output, base, braces);
              }

              function formatPrimitive(ctx, value) {
                if (isUndefined(value))
                  return ctx.stylize('undefined', 'undefined');
                if (isString(value)) {
                  var simple =
                    "'" +
                    JSON.stringify(value)
                      .replace(/^"|"$/g, '')
                      .replace(/'/g, "\\'")
                      .replace(/\\"/g, '"') +
                    "'";
                  return ctx.stylize(simple, 'string');
                }
                if (isNumber(value)) return ctx.stylize('' + value, 'number');
                if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
                // For some reason typeof null is "object", so special case here.
                if (isNull(value)) return ctx.stylize('null', 'null');
              }

              function formatError(value) {
                return '[' + Error.prototype.toString.call(value) + ']';
              }

              function formatArray(
                ctx,
                value,
                recurseTimes,
                visibleKeys,
                keys
              ) {
                var output = [];
                for (var i = 0, l = value.length; i < l; ++i) {
                  if (hasOwnProperty(value, String(i))) {
                    output.push(
                      formatProperty(
                        ctx,
                        value,
                        recurseTimes,
                        visibleKeys,
                        String(i),
                        true
                      )
                    );
                  } else {
                    output.push('');
                  }
                }
                keys.forEach(function (key) {
                  if (!key.match(/^\d+$/)) {
                    output.push(
                      formatProperty(
                        ctx,
                        value,
                        recurseTimes,
                        visibleKeys,
                        key,
                        true
                      )
                    );
                  }
                });
                return output;
              }

              function formatProperty(
                ctx,
                value,
                recurseTimes,
                visibleKeys,
                key,
                array
              ) {
                var name, str, desc;
                desc = Object.getOwnPropertyDescriptor(value, key) || {
                  value: value[key],
                };
                if (desc.get) {
                  if (desc.set) {
                    str = ctx.stylize('[Getter/Setter]', 'special');
                  } else {
                    str = ctx.stylize('[Getter]', 'special');
                  }
                } else {
                  if (desc.set) {
                    str = ctx.stylize('[Setter]', 'special');
                  }
                }
                if (!hasOwnProperty(visibleKeys, key)) {
                  name = '[' + key + ']';
                }
                if (!str) {
                  if (ctx.seen.indexOf(desc.value) < 0) {
                    if (isNull(recurseTimes)) {
                      str = formatValue(ctx, desc.value, null);
                    } else {
                      str = formatValue(ctx, desc.value, recurseTimes - 1);
                    }
                    if (str.indexOf('\n') > -1) {
                      if (array) {
                        str = str
                          .split('\n')
                          .map(function (line) {
                            return '  ' + line;
                          })
                          .join('\n')
                          .substr(2);
                      } else {
                        str =
                          '\n' +
                          str
                            .split('\n')
                            .map(function (line) {
                              return '   ' + line;
                            })
                            .join('\n');
                      }
                    }
                  } else {
                    str = ctx.stylize('[Circular]', 'special');
                  }
                }
                if (isUndefined(name)) {
                  if (array && key.match(/^\d+$/)) {
                    return str;
                  }
                  name = JSON.stringify('' + key);
                  if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                    name = name.substr(1, name.length - 2);
                    name = ctx.stylize(name, 'name');
                  } else {
                    name = name
                      .replace(/'/g, "\\'")
                      .replace(/\\"/g, '"')
                      .replace(/(^"|"$)/g, "'");
                    name = ctx.stylize(name, 'string');
                  }
                }

                return name + ': ' + str;
              }

              function reduceToSingleString(output, base, braces) {
                var numLinesEst = 0;
                var length = output.reduce(function (prev, cur) {
                  numLinesEst++;
                  if (cur.indexOf('\n') >= 0) numLinesEst++;
                  return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                }, 0);

                if (length > 60) {
                  return (
                    braces[0] +
                    (base === '' ? '' : base + '\n ') +
                    ' ' +
                    output.join(',\n  ') +
                    ' ' +
                    braces[1]
                  );
                }

                return (
                  braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1]
                );
              }

              // NOTE: These type checking functions intentionally don't use `instanceof`
              // because it is fragile and can be easily faked with `Object.create()`.
              function isArray(ar) {
                return Array.isArray(ar);
              }
              exports.isArray = isArray;

              function isBoolean(arg) {
                return typeof arg === 'boolean';
              }
              exports.isBoolean = isBoolean;

              function isNull(arg) {
                return arg === null;
              }
              exports.isNull = isNull;

              function isNullOrUndefined(arg) {
                return arg == null;
              }
              exports.isNullOrUndefined = isNullOrUndefined;

              function isNumber(arg) {
                return typeof arg === 'number';
              }
              exports.isNumber = isNumber;

              function isString(arg) {
                return typeof arg === 'string';
              }
              exports.isString = isString;

              function isSymbol(arg) {
                return typeof arg === 'symbol';
              }
              exports.isSymbol = isSymbol;

              function isUndefined(arg) {
                return arg === void 0;
              }
              exports.isUndefined = isUndefined;

              function isRegExp(re) {
                return isObject(re) && objectToString(re) === '[object RegExp]';
              }
              exports.isRegExp = isRegExp;

              function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
              }
              exports.isObject = isObject;

              function isDate(d) {
                return isObject(d) && objectToString(d) === '[object Date]';
              }
              exports.isDate = isDate;

              function isError(e) {
                return (
                  isObject(e) &&
                  (objectToString(e) === '[object Error]' || e instanceof Error)
                );
              }
              exports.isError = isError;

              function isFunction(arg) {
                return typeof arg === 'function';
              }
              exports.isFunction = isFunction;

              function isPrimitive(arg) {
                return (
                  arg === null ||
                  typeof arg === 'boolean' ||
                  typeof arg === 'number' ||
                  typeof arg === 'string' ||
                  typeof arg === 'symbol' || // ES6 symbol
                  typeof arg === 'undefined'
                );
              }
              exports.isPrimitive = isPrimitive;

              exports.isBuffer = require('./support/isBuffer');

              function objectToString(o) {
                return Object.prototype.toString.call(o);
              }

              function pad(n) {
                return n < 10 ? '0' + n.toString(10) : n.toString(10);
              }

              var months = [
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec',
              ];

              // 26 Feb 16:19:34
              function timestamp() {
                var d = new Date();
                var time = [
                  pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds()),
                ].join(':');
                return [d.getDate(), months[d.getMonth()], time].join(' ');
              }

              // log is just a thin wrapper to console.log that prepends a timestamp
              exports.log = function () {
                console.log(
                  '%s - %s',
                  timestamp(),
                  exports.format.apply(exports, arguments)
                );
              };

              /**
               * Inherit the prototype methods from one constructor into another.
               *
               * The Function.prototype.inherits from lang.js rewritten as a standalone
               * function (not on Function.prototype). NOTE: If this file is to be loaded
               * during bootstrapping this function needs to be rewritten using some native
               * functions as prototype setup using normal JavaScript does not work as
               * expected during bootstrapping (see mirror.js in r114903).
               *
               * @param {function} ctor Constructor function which needs to inherit the
               *     prototype.
               * @param {function} superCtor Constructor function to inherit prototype from.
               */
              exports.inherits = require('inherits');

              exports._extend = function (origin, add) {
                // Don't do anything if add isn't an object
                if (!add || !isObject(add)) return origin;

                var keys = Object.keys(add);
                var i = keys.length;
                while (i--) {
                  origin[keys[i]] = add[keys[i]];
                }
                return origin;
              };

              function hasOwnProperty(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
              }
            }.call(this));
          }.call(
            this,
            require('_process'),
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
              ? self
              : typeof window !== 'undefined'
              ? window
              : {}
          ));
        },
        { './support/isBuffer': 179, _process: 189, inherits: 178 },
      ],
      181: [
        function (require, module, exports) {
          'use strict';

          exports.byteLength = byteLength;
          exports.toByteArray = toByteArray;
          exports.fromByteArray = fromByteArray;

          var lookup = [];
          var revLookup = [];
          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

          var code =
            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
          }

          // Support decoding URL-safe base64 strings, as Node.js does.
          // See: https://en.wikipedia.org/wiki/Base64#URL_applications
          revLookup['-'.charCodeAt(0)] = 62;
          revLookup['_'.charCodeAt(0)] = 63;

          function getLens(b64) {
            var len = b64.length;

            if (len % 4 > 0) {
              throw new Error('Invalid string. Length must be a multiple of 4');
            }

            // Trim off extra bytes after placeholder bytes are found
            // See: https://github.com/beatgammit/base64-js/issues/42
            var validLen = b64.indexOf('=');
            if (validLen === -1) validLen = len;

            var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

            return [validLen, placeHoldersLen];
          }

          // base64 is 4/3 + up to two characters of the original data
          function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
          }

          function _byteLength(b64, validLen, placeHoldersLen) {
            return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
          }

          function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];

            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

            var curByte = 0;

            // if there are placeholders, only get up to the last complete 4 chars
            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

            var i;
            for (i = 0; i < len; i += 4) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 18) |
                (revLookup[b64.charCodeAt(i + 1)] << 12) |
                (revLookup[b64.charCodeAt(i + 2)] << 6) |
                revLookup[b64.charCodeAt(i + 3)];
              arr[curByte++] = (tmp >> 16) & 0xff;
              arr[curByte++] = (tmp >> 8) & 0xff;
              arr[curByte++] = tmp & 0xff;
            }

            if (placeHoldersLen === 2) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 2) |
                (revLookup[b64.charCodeAt(i + 1)] >> 4);
              arr[curByte++] = tmp & 0xff;
            }

            if (placeHoldersLen === 1) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 10) |
                (revLookup[b64.charCodeAt(i + 1)] << 4) |
                (revLookup[b64.charCodeAt(i + 2)] >> 2);
              arr[curByte++] = (tmp >> 8) & 0xff;
              arr[curByte++] = tmp & 0xff;
            }

            return arr;
          }

          function tripletToBase64(num) {
            return (
              lookup[(num >> 18) & 0x3f] +
              lookup[(num >> 12) & 0x3f] +
              lookup[(num >> 6) & 0x3f] +
              lookup[num & 0x3f]
            );
          }

          function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i = start; i < end; i += 3) {
              tmp =
                ((uint8[i] << 16) & 0xff0000) +
                ((uint8[i + 1] << 8) & 0xff00) +
                (uint8[i + 2] & 0xff);
              output.push(tripletToBase64(tmp));
            }
            return output.join('');
          }

          function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
            var parts = [];
            var maxChunkLength = 16383; // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (
              var i = 0, len2 = len - extraBytes;
              i < len2;
              i += maxChunkLength
            ) {
              parts.push(
                encodeChunk(
                  uint8,
                  i,
                  i + maxChunkLength > len2 ? len2 : i + maxChunkLength
                )
              );
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
              tmp = uint8[len - 1];
              parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + '==');
            } else if (extraBytes === 2) {
              tmp = (uint8[len - 2] << 8) + uint8[len - 1];
              parts.push(
                lookup[tmp >> 10] +
                  lookup[(tmp >> 4) & 0x3f] +
                  lookup[(tmp << 2) & 0x3f] +
                  '='
              );
            }

            return parts.join('');
          }
        },
        {},
      ],
      182: [function (require, module, exports) {}, {}],
      183: [
        function (require, module, exports) {
          (function (Buffer) {
            (function () {
              /*!
               * The buffer module from node.js, for the browser.
               *
               * @author   Feross Aboukhadijeh <https://feross.org>
               * @license  MIT
               */
              /* eslint-disable no-proto */

              'use strict';

              var base64 = require('base64-js');
              var ieee754 = require('ieee754');

              exports.Buffer = Buffer;
              exports.SlowBuffer = SlowBuffer;
              exports.INSPECT_MAX_BYTES = 50;

              var K_MAX_LENGTH = 0x7fffffff;
              exports.kMaxLength = K_MAX_LENGTH;

              /**
               * If `Buffer.TYPED_ARRAY_SUPPORT`:
               *   === true    Use Uint8Array implementation (fastest)
               *   === false   Print warning and recommend using `buffer` v4.x which has an Object
               *               implementation (most compatible, even IE6)
               *
               * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
               * Opera 11.6+, iOS 4.2+.
               *
               * We report that the browser does not support typed arrays if the are not subclassable
               * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
               * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
               * for __proto__ and has a buggy typed array implementation.
               */
              Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

              if (
                !Buffer.TYPED_ARRAY_SUPPORT &&
                typeof console !== 'undefined' &&
                typeof console.error === 'function'
              ) {
                console.error(
                  'This browser lacks typed array (Uint8Array) support which is required by ' +
                    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                );
              }

              function typedArraySupport() {
                // Can typed array instances can be augmented?
                try {
                  var arr = new Uint8Array(1);
                  arr.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function () {
                      return 42;
                    },
                  };
                  return arr.foo() === 42;
                } catch (e) {
                  return false;
                }
              }

              Object.defineProperty(Buffer.prototype, 'parent', {
                enumerable: true,
                get: function () {
                  if (!Buffer.isBuffer(this)) return undefined;
                  return this.buffer;
                },
              });

              Object.defineProperty(Buffer.prototype, 'offset', {
                enumerable: true,
                get: function () {
                  if (!Buffer.isBuffer(this)) return undefined;
                  return this.byteOffset;
                },
              });

              function createBuffer(length) {
                if (length > K_MAX_LENGTH) {
                  throw new RangeError(
                    'The value "' + length + '" is invalid for option "size"'
                  );
                }
                // Return an augmented `Uint8Array` instance
                var buf = new Uint8Array(length);
                buf.__proto__ = Buffer.prototype;
                return buf;
              }

              /**
               * The Buffer constructor returns instances of `Uint8Array` that have their
               * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
               * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
               * and the `Uint8Array` methods. Square bracket notation works as expected -- it
               * returns a single octet.
               *
               * The `Uint8Array` prototype remains unmodified.
               */

              function Buffer(arg, encodingOrOffset, length) {
                // Common case.
                if (typeof arg === 'number') {
                  if (typeof encodingOrOffset === 'string') {
                    throw new TypeError(
                      'The "string" argument must be of type string. Received type number'
                    );
                  }
                  return allocUnsafe(arg);
                }
                return from(arg, encodingOrOffset, length);
              }

              // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
              if (
                typeof Symbol !== 'undefined' &&
                Symbol.species != null &&
                Buffer[Symbol.species] === Buffer
              ) {
                Object.defineProperty(Buffer, Symbol.species, {
                  value: null,
                  configurable: true,
                  enumerable: false,
                  writable: false,
                });
              }

              Buffer.poolSize = 8192; // not used by this implementation

              function from(value, encodingOrOffset, length) {
                if (typeof value === 'string') {
                  return fromString(value, encodingOrOffset);
                }

                if (ArrayBuffer.isView(value)) {
                  return fromArrayLike(value);
                }

                if (value == null) {
                  throw TypeError(
                    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                      'or Array-like Object. Received type ' +
                      typeof value
                  );
                }

                if (
                  isInstance(value, ArrayBuffer) ||
                  (value && isInstance(value.buffer, ArrayBuffer))
                ) {
                  return fromArrayBuffer(value, encodingOrOffset, length);
                }

                if (typeof value === 'number') {
                  throw new TypeError(
                    'The "value" argument must not be of type number. Received type number'
                  );
                }

                var valueOf = value.valueOf && value.valueOf();
                if (valueOf != null && valueOf !== value) {
                  return Buffer.from(valueOf, encodingOrOffset, length);
                }

                var b = fromObject(value);
                if (b) return b;

                if (
                  typeof Symbol !== 'undefined' &&
                  Symbol.toPrimitive != null &&
                  typeof value[Symbol.toPrimitive] === 'function'
                ) {
                  return Buffer.from(
                    value[Symbol.toPrimitive]('string'),
                    encodingOrOffset,
                    length
                  );
                }

                throw new TypeError(
                  'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                    'or Array-like Object. Received type ' +
                    typeof value
                );
              }

              /**
               * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
               * if value is a number.
               * Buffer.from(str[, encoding])
               * Buffer.from(array)
               * Buffer.from(buffer)
               * Buffer.from(arrayBuffer[, byteOffset[, length]])
               **/
              Buffer.from = function (value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length);
              };

              // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
              // https://github.com/feross/buffer/pull/148
              Buffer.prototype.__proto__ = Uint8Array.prototype;
              Buffer.__proto__ = Uint8Array;

              function assertSize(size) {
                if (typeof size !== 'number') {
                  throw new TypeError('"size" argument must be of type number');
                } else if (size < 0) {
                  throw new RangeError(
                    'The value "' + size + '" is invalid for option "size"'
                  );
                }
              }

              function alloc(size, fill, encoding) {
                assertSize(size);
                if (size <= 0) {
                  return createBuffer(size);
                }
                if (fill !== undefined) {
                  // Only pay attention to encoding if it's a string. This
                  // prevents accidentally sending in a number that would
                  // be interpretted as a start offset.
                  return typeof encoding === 'string'
                    ? createBuffer(size).fill(fill, encoding)
                    : createBuffer(size).fill(fill);
                }
                return createBuffer(size);
              }

              /**
               * Creates a new filled Buffer instance.
               * alloc(size[, fill[, encoding]])
               **/
              Buffer.alloc = function (size, fill, encoding) {
                return alloc(size, fill, encoding);
              };

              function allocUnsafe(size) {
                assertSize(size);
                return createBuffer(size < 0 ? 0 : checked(size) | 0);
              }

              /**
               * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
               * */
              Buffer.allocUnsafe = function (size) {
                return allocUnsafe(size);
              };
              /**
               * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
               */
              Buffer.allocUnsafeSlow = function (size) {
                return allocUnsafe(size);
              };

              function fromString(string, encoding) {
                if (typeof encoding !== 'string' || encoding === '') {
                  encoding = 'utf8';
                }

                if (!Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding);
                }

                var length = byteLength(string, encoding) | 0;
                var buf = createBuffer(length);

                var actual = buf.write(string, encoding);

                if (actual !== length) {
                  // Writing a hex string, for example, that contains invalid characters will
                  // cause everything after the first invalid character to be ignored. (e.g.
                  // 'abxxcd' will be treated as 'ab')
                  buf = buf.slice(0, actual);
                }

                return buf;
              }

              function fromArrayLike(array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0;
                var buf = createBuffer(length);
                for (var i = 0; i < length; i += 1) {
                  buf[i] = array[i] & 255;
                }
                return buf;
              }

              function fromArrayBuffer(array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                  throw new RangeError('"offset" is outside of buffer bounds');
                }

                if (array.byteLength < byteOffset + (length || 0)) {
                  throw new RangeError('"length" is outside of buffer bounds');
                }

                var buf;
                if (byteOffset === undefined && length === undefined) {
                  buf = new Uint8Array(array);
                } else if (length === undefined) {
                  buf = new Uint8Array(array, byteOffset);
                } else {
                  buf = new Uint8Array(array, byteOffset, length);
                }

                // Return an augmented `Uint8Array` instance
                buf.__proto__ = Buffer.prototype;
                return buf;
              }

              function fromObject(obj) {
                if (Buffer.isBuffer(obj)) {
                  var len = checked(obj.length) | 0;
                  var buf = createBuffer(len);

                  if (buf.length === 0) {
                    return buf;
                  }

                  obj.copy(buf, 0, 0, len);
                  return buf;
                }

                if (obj.length !== undefined) {
                  if (
                    typeof obj.length !== 'number' ||
                    numberIsNaN(obj.length)
                  ) {
                    return createBuffer(0);
                  }
                  return fromArrayLike(obj);
                }

                if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                  return fromArrayLike(obj.data);
                }
              }

              function checked(length) {
                // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                // length is NaN (which is otherwise coerced to zero.)
                if (length >= K_MAX_LENGTH) {
                  throw new RangeError(
                    'Attempt to allocate Buffer larger than maximum ' +
                      'size: 0x' +
                      K_MAX_LENGTH.toString(16) +
                      ' bytes'
                  );
                }
                return length | 0;
              }

              function SlowBuffer(length) {
                if (+length != length) {
                  // eslint-disable-line eqeqeq
                  length = 0;
                }
                return Buffer.alloc(+length);
              }

              Buffer.isBuffer = function isBuffer(b) {
                return (
                  b != null && b._isBuffer === true && b !== Buffer.prototype
                ); // so Buffer.isBuffer(Buffer.prototype) will be false
              };

              Buffer.compare = function compare(a, b) {
                if (isInstance(a, Uint8Array))
                  a = Buffer.from(a, a.offset, a.byteLength);
                if (isInstance(b, Uint8Array))
                  b = Buffer.from(b, b.offset, b.byteLength);
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                  throw new TypeError(
                    'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                  );
                }

                if (a === b) return 0;

                var x = a.length;
                var y = b.length;

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                  if (a[i] !== b[i]) {
                    x = a[i];
                    y = b[i];
                    break;
                  }
                }

                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
              };

              Buffer.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                  case 'hex':
                  case 'utf8':
                  case 'utf-8':
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                  case 'base64':
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return true;
                  default:
                    return false;
                }
              };

              Buffer.concat = function concat(list, length) {
                if (!Array.isArray(list)) {
                  throw new TypeError(
                    '"list" argument must be an Array of Buffers'
                  );
                }

                if (list.length === 0) {
                  return Buffer.alloc(0);
                }

                var i;
                if (length === undefined) {
                  length = 0;
                  for (i = 0; i < list.length; ++i) {
                    length += list[i].length;
                  }
                }

                var buffer = Buffer.allocUnsafe(length);
                var pos = 0;
                for (i = 0; i < list.length; ++i) {
                  var buf = list[i];
                  if (isInstance(buf, Uint8Array)) {
                    buf = Buffer.from(buf);
                  }
                  if (!Buffer.isBuffer(buf)) {
                    throw new TypeError(
                      '"list" argument must be an Array of Buffers'
                    );
                  }
                  buf.copy(buffer, pos);
                  pos += buf.length;
                }
                return buffer;
              };

              function byteLength(string, encoding) {
                if (Buffer.isBuffer(string)) {
                  return string.length;
                }
                if (
                  ArrayBuffer.isView(string) ||
                  isInstance(string, ArrayBuffer)
                ) {
                  return string.byteLength;
                }
                if (typeof string !== 'string') {
                  throw new TypeError(
                    'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                      'Received type ' +
                      typeof string
                  );
                }

                var len = string.length;
                var mustMatch = arguments.length > 2 && arguments[2] === true;
                if (!mustMatch && len === 0) return 0;

                // Use a for loop to avoid recursion
                var loweredCase = false;
                for (;;) {
                  switch (encoding) {
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                      return len;
                    case 'utf8':
                    case 'utf-8':
                      return utf8ToBytes(string).length;
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                      return len * 2;
                    case 'hex':
                      return len >>> 1;
                    case 'base64':
                      return base64ToBytes(string).length;
                    default:
                      if (loweredCase) {
                        return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                      }
                      encoding = ('' + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              }
              Buffer.byteLength = byteLength;

              function slowToString(encoding, start, end) {
                var loweredCase = false;

                // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                // property of a typed array.

                // This behaves neither like String nor Uint8Array in that we set start/end
                // to their upper/lower bounds if the value passed is out of range.
                // undefined is handled specially as per ECMA-262 6th Edition,
                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                if (start === undefined || start < 0) {
                  start = 0;
                }
                // Return early if start > this.length. Done here to prevent potential uint32
                // coercion fail below.
                if (start > this.length) {
                  return '';
                }

                if (end === undefined || end > this.length) {
                  end = this.length;
                }

                if (end <= 0) {
                  return '';
                }

                // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                end >>>= 0;
                start >>>= 0;

                if (end <= start) {
                  return '';
                }

                if (!encoding) encoding = 'utf8';

                while (true) {
                  switch (encoding) {
                    case 'hex':
                      return hexSlice(this, start, end);

                    case 'utf8':
                    case 'utf-8':
                      return utf8Slice(this, start, end);

                    case 'ascii':
                      return asciiSlice(this, start, end);

                    case 'latin1':
                    case 'binary':
                      return latin1Slice(this, start, end);

                    case 'base64':
                      return base64Slice(this, start, end);

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                      return utf16leSlice(this, start, end);

                    default:
                      if (loweredCase)
                        throw new TypeError('Unknown encoding: ' + encoding);
                      encoding = (encoding + '').toLowerCase();
                      loweredCase = true;
                  }
                }
              }

              // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
              // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
              // reliably in a browserify context because there could be multiple different
              // copies of the 'buffer' package in use. This method works even for Buffer
              // instances that were created from another copy of the `buffer` package.
              // See: https://github.com/feross/buffer/issues/154
              Buffer.prototype._isBuffer = true;

              function swap(b, n, m) {
                var i = b[n];
                b[n] = b[m];
                b[m] = i;
              }

              Buffer.prototype.swap16 = function swap16() {
                var len = this.length;
                if (len % 2 !== 0) {
                  throw new RangeError(
                    'Buffer size must be a multiple of 16-bits'
                  );
                }
                for (var i = 0; i < len; i += 2) {
                  swap(this, i, i + 1);
                }
                return this;
              };

              Buffer.prototype.swap32 = function swap32() {
                var len = this.length;
                if (len % 4 !== 0) {
                  throw new RangeError(
                    'Buffer size must be a multiple of 32-bits'
                  );
                }
                for (var i = 0; i < len; i += 4) {
                  swap(this, i, i + 3);
                  swap(this, i + 1, i + 2);
                }
                return this;
              };

              Buffer.prototype.swap64 = function swap64() {
                var len = this.length;
                if (len % 8 !== 0) {
                  throw new RangeError(
                    'Buffer size must be a multiple of 64-bits'
                  );
                }
                for (var i = 0; i < len; i += 8) {
                  swap(this, i, i + 7);
                  swap(this, i + 1, i + 6);
                  swap(this, i + 2, i + 5);
                  swap(this, i + 3, i + 4);
                }
                return this;
              };

              Buffer.prototype.toString = function toString() {
                var length = this.length;
                if (length === 0) return '';
                if (arguments.length === 0) return utf8Slice(this, 0, length);
                return slowToString.apply(this, arguments);
              };

              Buffer.prototype.toLocaleString = Buffer.prototype.toString;

              Buffer.prototype.equals = function equals(b) {
                if (!Buffer.isBuffer(b))
                  throw new TypeError('Argument must be a Buffer');
                if (this === b) return true;
                return Buffer.compare(this, b) === 0;
              };

              Buffer.prototype.inspect = function inspect() {
                var str = '';
                var max = exports.INSPECT_MAX_BYTES;
                str = this.toString('hex', 0, max)
                  .replace(/(.{2})/g, '$1 ')
                  .trim();
                if (this.length > max) str += ' ... ';
                return '<Buffer ' + str + '>';
              };

              Buffer.prototype.compare = function compare(
                target,
                start,
                end,
                thisStart,
                thisEnd
              ) {
                if (isInstance(target, Uint8Array)) {
                  target = Buffer.from(
                    target,
                    target.offset,
                    target.byteLength
                  );
                }
                if (!Buffer.isBuffer(target)) {
                  throw new TypeError(
                    'The "target" argument must be one of type Buffer or Uint8Array. ' +
                      'Received type ' +
                      typeof target
                  );
                }

                if (start === undefined) {
                  start = 0;
                }
                if (end === undefined) {
                  end = target ? target.length : 0;
                }
                if (thisStart === undefined) {
                  thisStart = 0;
                }
                if (thisEnd === undefined) {
                  thisEnd = this.length;
                }

                if (
                  start < 0 ||
                  end > target.length ||
                  thisStart < 0 ||
                  thisEnd > this.length
                ) {
                  throw new RangeError('out of range index');
                }

                if (thisStart >= thisEnd && start >= end) {
                  return 0;
                }
                if (thisStart >= thisEnd) {
                  return -1;
                }
                if (start >= end) {
                  return 1;
                }

                start >>>= 0;
                end >>>= 0;
                thisStart >>>= 0;
                thisEnd >>>= 0;

                if (this === target) return 0;

                var x = thisEnd - thisStart;
                var y = end - start;
                var len = Math.min(x, y);

                var thisCopy = this.slice(thisStart, thisEnd);
                var targetCopy = target.slice(start, end);

                for (var i = 0; i < len; ++i) {
                  if (thisCopy[i] !== targetCopy[i]) {
                    x = thisCopy[i];
                    y = targetCopy[i];
                    break;
                  }
                }

                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
              };

              // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
              // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
              //
              // Arguments:
              // - buffer - a Buffer to search
              // - val - a string, Buffer, or number
              // - byteOffset - an index into `buffer`; will be clamped to an int32
              // - encoding - an optional encoding, relevant is val is a string
              // - dir - true for indexOf, false for lastIndexOf
              function bidirectionalIndexOf(
                buffer,
                val,
                byteOffset,
                encoding,
                dir
              ) {
                // Empty buffer means no match
                if (buffer.length === 0) return -1;

                // Normalize byteOffset
                if (typeof byteOffset === 'string') {
                  encoding = byteOffset;
                  byteOffset = 0;
                } else if (byteOffset > 0x7fffffff) {
                  byteOffset = 0x7fffffff;
                } else if (byteOffset < -0x80000000) {
                  byteOffset = -0x80000000;
                }
                byteOffset = +byteOffset; // Coerce to Number.
                if (numberIsNaN(byteOffset)) {
                  // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                  byteOffset = dir ? 0 : buffer.length - 1;
                }

                // Normalize byteOffset: negative offsets start from the end of the buffer
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                if (byteOffset >= buffer.length) {
                  if (dir) return -1;
                  else byteOffset = buffer.length - 1;
                } else if (byteOffset < 0) {
                  if (dir) byteOffset = 0;
                  else return -1;
                }

                // Normalize val
                if (typeof val === 'string') {
                  val = Buffer.from(val, encoding);
                }

                // Finally, search either indexOf (if dir is true) or lastIndexOf
                if (Buffer.isBuffer(val)) {
                  // Special case: looking for empty string/buffer always fails
                  if (val.length === 0) {
                    return -1;
                  }
                  return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                } else if (typeof val === 'number') {
                  val = val & 0xff; // Search for a byte value [0-255]
                  if (typeof Uint8Array.prototype.indexOf === 'function') {
                    if (dir) {
                      return Uint8Array.prototype.indexOf.call(
                        buffer,
                        val,
                        byteOffset
                      );
                    } else {
                      return Uint8Array.prototype.lastIndexOf.call(
                        buffer,
                        val,
                        byteOffset
                      );
                    }
                  }
                  return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
                }

                throw new TypeError('val must be string, number or Buffer');
              }

              function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1;
                var arrLength = arr.length;
                var valLength = val.length;

                if (encoding !== undefined) {
                  encoding = String(encoding).toLowerCase();
                  if (
                    encoding === 'ucs2' ||
                    encoding === 'ucs-2' ||
                    encoding === 'utf16le' ||
                    encoding === 'utf-16le'
                  ) {
                    if (arr.length < 2 || val.length < 2) {
                      return -1;
                    }
                    indexSize = 2;
                    arrLength /= 2;
                    valLength /= 2;
                    byteOffset /= 2;
                  }
                }

                function read(buf, i) {
                  if (indexSize === 1) {
                    return buf[i];
                  } else {
                    return buf.readUInt16BE(i * indexSize);
                  }
                }

                var i;
                if (dir) {
                  var foundIndex = -1;
                  for (i = byteOffset; i < arrLength; i++) {
                    if (
                      read(arr, i) ===
                      read(val, foundIndex === -1 ? 0 : i - foundIndex)
                    ) {
                      if (foundIndex === -1) foundIndex = i;
                      if (i - foundIndex + 1 === valLength)
                        return foundIndex * indexSize;
                    } else {
                      if (foundIndex !== -1) i -= i - foundIndex;
                      foundIndex = -1;
                    }
                  }
                } else {
                  if (byteOffset + valLength > arrLength)
                    byteOffset = arrLength - valLength;
                  for (i = byteOffset; i >= 0; i--) {
                    var found = true;
                    for (var j = 0; j < valLength; j++) {
                      if (read(arr, i + j) !== read(val, j)) {
                        found = false;
                        break;
                      }
                    }
                    if (found) return i;
                  }
                }

                return -1;
              }

              Buffer.prototype.includes = function includes(
                val,
                byteOffset,
                encoding
              ) {
                return this.indexOf(val, byteOffset, encoding) !== -1;
              };

              Buffer.prototype.indexOf = function indexOf(
                val,
                byteOffset,
                encoding
              ) {
                return bidirectionalIndexOf(
                  this,
                  val,
                  byteOffset,
                  encoding,
                  true
                );
              };

              Buffer.prototype.lastIndexOf = function lastIndexOf(
                val,
                byteOffset,
                encoding
              ) {
                return bidirectionalIndexOf(
                  this,
                  val,
                  byteOffset,
                  encoding,
                  false
                );
              };

              function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0;
                var remaining = buf.length - offset;
                if (!length) {
                  length = remaining;
                } else {
                  length = Number(length);
                  if (length > remaining) {
                    length = remaining;
                  }
                }

                var strLen = string.length;

                if (length > strLen / 2) {
                  length = strLen / 2;
                }
                for (var i = 0; i < length; ++i) {
                  var parsed = parseInt(string.substr(i * 2, 2), 16);
                  if (numberIsNaN(parsed)) return i;
                  buf[offset + i] = parsed;
                }
                return i;
              }

              function utf8Write(buf, string, offset, length) {
                return blitBuffer(
                  utf8ToBytes(string, buf.length - offset),
                  buf,
                  offset,
                  length
                );
              }

              function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length);
              }

              function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length);
              }

              function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length);
              }

              function ucs2Write(buf, string, offset, length) {
                return blitBuffer(
                  utf16leToBytes(string, buf.length - offset),
                  buf,
                  offset,
                  length
                );
              }

              Buffer.prototype.write = function write(
                string,
                offset,
                length,
                encoding
              ) {
                // Buffer#write(string)
                if (offset === undefined) {
                  encoding = 'utf8';
                  length = this.length;
                  offset = 0;
                  // Buffer#write(string, encoding)
                } else if (length === undefined && typeof offset === 'string') {
                  encoding = offset;
                  length = this.length;
                  offset = 0;
                  // Buffer#write(string, offset[, length][, encoding])
                } else if (isFinite(offset)) {
                  offset = offset >>> 0;
                  if (isFinite(length)) {
                    length = length >>> 0;
                    if (encoding === undefined) encoding = 'utf8';
                  } else {
                    encoding = length;
                    length = undefined;
                  }
                } else {
                  throw new Error(
                    'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                  );
                }

                var remaining = this.length - offset;
                if (length === undefined || length > remaining)
                  length = remaining;

                if (
                  (string.length > 0 && (length < 0 || offset < 0)) ||
                  offset > this.length
                ) {
                  throw new RangeError(
                    'Attempt to write outside buffer bounds'
                  );
                }

                if (!encoding) encoding = 'utf8';

                var loweredCase = false;
                for (;;) {
                  switch (encoding) {
                    case 'hex':
                      return hexWrite(this, string, offset, length);

                    case 'utf8':
                    case 'utf-8':
                      return utf8Write(this, string, offset, length);

                    case 'ascii':
                      return asciiWrite(this, string, offset, length);

                    case 'latin1':
                    case 'binary':
                      return latin1Write(this, string, offset, length);

                    case 'base64':
                      // Warning: maxLength not taken into account in base64Write
                      return base64Write(this, string, offset, length);

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                      return ucs2Write(this, string, offset, length);

                    default:
                      if (loweredCase)
                        throw new TypeError('Unknown encoding: ' + encoding);
                      encoding = ('' + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              };

              Buffer.prototype.toJSON = function toJSON() {
                return {
                  type: 'Buffer',
                  data: Array.prototype.slice.call(this._arr || this, 0),
                };
              };

              function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                  return base64.fromByteArray(buf);
                } else {
                  return base64.fromByteArray(buf.slice(start, end));
                }
              }

              function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end);
                var res = [];

                var i = start;
                while (i < end) {
                  var firstByte = buf[i];
                  var codePoint = null;
                  var bytesPerSequence =
                    firstByte > 0xef
                      ? 4
                      : firstByte > 0xdf
                      ? 3
                      : firstByte > 0xbf
                      ? 2
                      : 1;

                  if (i + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint;

                    switch (bytesPerSequence) {
                      case 1:
                        if (firstByte < 0x80) {
                          codePoint = firstByte;
                        }
                        break;
                      case 2:
                        secondByte = buf[i + 1];
                        if ((secondByte & 0xc0) === 0x80) {
                          tempCodePoint =
                            ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                          if (tempCodePoint > 0x7f) {
                            codePoint = tempCodePoint;
                          }
                        }
                        break;
                      case 3:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        if (
                          (secondByte & 0xc0) === 0x80 &&
                          (thirdByte & 0xc0) === 0x80
                        ) {
                          tempCodePoint =
                            ((firstByte & 0xf) << 0xc) |
                            ((secondByte & 0x3f) << 0x6) |
                            (thirdByte & 0x3f);
                          if (
                            tempCodePoint > 0x7ff &&
                            (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                          ) {
                            codePoint = tempCodePoint;
                          }
                        }
                        break;
                      case 4:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        fourthByte = buf[i + 3];
                        if (
                          (secondByte & 0xc0) === 0x80 &&
                          (thirdByte & 0xc0) === 0x80 &&
                          (fourthByte & 0xc0) === 0x80
                        ) {
                          tempCodePoint =
                            ((firstByte & 0xf) << 0x12) |
                            ((secondByte & 0x3f) << 0xc) |
                            ((thirdByte & 0x3f) << 0x6) |
                            (fourthByte & 0x3f);
                          if (
                            tempCodePoint > 0xffff &&
                            tempCodePoint < 0x110000
                          ) {
                            codePoint = tempCodePoint;
                          }
                        }
                    }
                  }

                  if (codePoint === null) {
                    // we did not generate a valid codePoint so insert a
                    // replacement char (U+FFFD) and advance only 1 byte
                    codePoint = 0xfffd;
                    bytesPerSequence = 1;
                  } else if (codePoint > 0xffff) {
                    // encode to utf16 (surrogate pair dance)
                    codePoint -= 0x10000;
                    res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                    codePoint = 0xdc00 | (codePoint & 0x3ff);
                  }

                  res.push(codePoint);
                  i += bytesPerSequence;
                }

                return decodeCodePointsArray(res);
              }

              // Based on http://stackoverflow.com/a/22747272/680742, the browser with
              // the lowest limit is Chrome, with 0x10000 args.
              // We go 1 magnitude less, for safety
              var MAX_ARGUMENTS_LENGTH = 0x1000;

              function decodeCodePointsArray(codePoints) {
                var len = codePoints.length;
                if (len <= MAX_ARGUMENTS_LENGTH) {
                  return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
                }

                // Decode in chunks to avoid "call stack size exceeded".
                var res = '';
                var i = 0;
                while (i < len) {
                  res += String.fromCharCode.apply(
                    String,
                    codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
                  );
                }
                return res;
              }

              function asciiSlice(buf, start, end) {
                var ret = '';
                end = Math.min(buf.length, end);

                for (var i = start; i < end; ++i) {
                  ret += String.fromCharCode(buf[i] & 0x7f);
                }
                return ret;
              }

              function latin1Slice(buf, start, end) {
                var ret = '';
                end = Math.min(buf.length, end);

                for (var i = start; i < end; ++i) {
                  ret += String.fromCharCode(buf[i]);
                }
                return ret;
              }

              function hexSlice(buf, start, end) {
                var len = buf.length;

                if (!start || start < 0) start = 0;
                if (!end || end < 0 || end > len) end = len;

                var out = '';
                for (var i = start; i < end; ++i) {
                  out += toHex(buf[i]);
                }
                return out;
              }

              function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end);
                var res = '';
                for (var i = 0; i < bytes.length; i += 2) {
                  res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                }
                return res;
              }

              Buffer.prototype.slice = function slice(start, end) {
                var len = this.length;
                start = ~~start;
                end = end === undefined ? len : ~~end;

                if (start < 0) {
                  start += len;
                  if (start < 0) start = 0;
                } else if (start > len) {
                  start = len;
                }

                if (end < 0) {
                  end += len;
                  if (end < 0) end = 0;
                } else if (end > len) {
                  end = len;
                }

                if (end < start) end = start;

                var newBuf = this.subarray(start, end);
                // Return an augmented `Uint8Array` instance
                newBuf.__proto__ = Buffer.prototype;
                return newBuf;
              };

              /*
               * Need to make sure that buffer isn't trying to write out of bounds.
               */
              function checkOffset(offset, ext, length) {
                if (offset % 1 !== 0 || offset < 0)
                  throw new RangeError('offset is not uint');
                if (offset + ext > length)
                  throw new RangeError('Trying to access beyond buffer length');
              }

              Buffer.prototype.readUIntLE = function readUIntLE(
                offset,
                byteLength,
                noAssert
              ) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);

                var val = this[offset];
                var mul = 1;
                var i = 0;
                while (++i < byteLength && (mul *= 0x100)) {
                  val += this[offset + i] * mul;
                }

                return val;
              };

              Buffer.prototype.readUIntBE = function readUIntBE(
                offset,
                byteLength,
                noAssert
              ) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) {
                  checkOffset(offset, byteLength, this.length);
                }

                var val = this[offset + --byteLength];
                var mul = 1;
                while (byteLength > 0 && (mul *= 0x100)) {
                  val += this[offset + --byteLength] * mul;
                }

                return val;
              };

              Buffer.prototype.readUInt8 = function readUInt8(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 1, this.length);
                return this[offset];
              };

              Buffer.prototype.readUInt16LE = function readUInt16LE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                return this[offset] | (this[offset + 1] << 8);
              };

              Buffer.prototype.readUInt16BE = function readUInt16BE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                return (this[offset] << 8) | this[offset + 1];
              };

              Buffer.prototype.readUInt32LE = function readUInt32LE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);

                return (
                  (this[offset] |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16)) +
                  this[offset + 3] * 0x1000000
                );
              };

              Buffer.prototype.readUInt32BE = function readUInt32BE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);

                return (
                  this[offset] * 0x1000000 +
                  ((this[offset + 1] << 16) |
                    (this[offset + 2] << 8) |
                    this[offset + 3])
                );
              };

              Buffer.prototype.readIntLE = function readIntLE(
                offset,
                byteLength,
                noAssert
              ) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);

                var val = this[offset];
                var mul = 1;
                var i = 0;
                while (++i < byteLength && (mul *= 0x100)) {
                  val += this[offset + i] * mul;
                }
                mul *= 0x80;

                if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                return val;
              };

              Buffer.prototype.readIntBE = function readIntBE(
                offset,
                byteLength,
                noAssert
              ) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);

                var i = byteLength;
                var mul = 1;
                var val = this[offset + --i];
                while (i > 0 && (mul *= 0x100)) {
                  val += this[offset + --i] * mul;
                }
                mul *= 0x80;

                if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                return val;
              };

              Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 1, this.length);
                if (!(this[offset] & 0x80)) return this[offset];
                return (0xff - this[offset] + 1) * -1;
              };

              Buffer.prototype.readInt16LE = function readInt16LE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset] | (this[offset + 1] << 8);
                return val & 0x8000 ? val | 0xffff0000 : val;
              };

              Buffer.prototype.readInt16BE = function readInt16BE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset + 1] | (this[offset] << 8);
                return val & 0x8000 ? val | 0xffff0000 : val;
              };

              Buffer.prototype.readInt32LE = function readInt32LE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);

                return (
                  this[offset] |
                  (this[offset + 1] << 8) |
                  (this[offset + 2] << 16) |
                  (this[offset + 3] << 24)
                );
              };

              Buffer.prototype.readInt32BE = function readInt32BE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);

                return (
                  (this[offset] << 24) |
                  (this[offset + 1] << 16) |
                  (this[offset + 2] << 8) |
                  this[offset + 3]
                );
              };

              Buffer.prototype.readFloatLE = function readFloatLE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, true, 23, 4);
              };

              Buffer.prototype.readFloatBE = function readFloatBE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, false, 23, 4);
              };

              Buffer.prototype.readDoubleLE = function readDoubleLE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, true, 52, 8);
              };

              Buffer.prototype.readDoubleBE = function readDoubleBE(
                offset,
                noAssert
              ) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, false, 52, 8);
              };

              function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf))
                  throw new TypeError(
                    '"buffer" argument must be a Buffer instance'
                  );
                if (value > max || value < min)
                  throw new RangeError('"value" argument is out of bounds');
                if (offset + ext > buf.length)
                  throw new RangeError('Index out of range');
              }

              Buffer.prototype.writeUIntLE = function writeUIntLE(
                value,
                offset,
                byteLength,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                  checkInt(this, value, offset, byteLength, maxBytes, 0);
                }

                var mul = 1;
                var i = 0;
                this[offset] = value & 0xff;
                while (++i < byteLength && (mul *= 0x100)) {
                  this[offset + i] = (value / mul) & 0xff;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeUIntBE = function writeUIntBE(
                value,
                offset,
                byteLength,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                  checkInt(this, value, offset, byteLength, maxBytes, 0);
                }

                var i = byteLength - 1;
                var mul = 1;
                this[offset + i] = value & 0xff;
                while (--i >= 0 && (mul *= 0x100)) {
                  this[offset + i] = (value / mul) & 0xff;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeUInt8 = function writeUInt8(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
                this[offset] = value & 0xff;
                return offset + 1;
              };

              Buffer.prototype.writeUInt16LE = function writeUInt16LE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };

              Buffer.prototype.writeUInt16BE = function writeUInt16BE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
                return offset + 2;
              };

              Buffer.prototype.writeUInt32LE = function writeUInt32LE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 0xff;
                return offset + 4;
              };

              Buffer.prototype.writeUInt32BE = function writeUInt32BE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
                return offset + 4;
              };

              Buffer.prototype.writeIntLE = function writeIntLE(
                value,
                offset,
                byteLength,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength - 1);

                  checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }

                var i = 0;
                var mul = 1;
                var sub = 0;
                this[offset] = value & 0xff;
                while (++i < byteLength && (mul *= 0x100)) {
                  if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                    sub = 1;
                  }
                  this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeIntBE = function writeIntBE(
                value,
                offset,
                byteLength,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength - 1);

                  checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }

                var i = byteLength - 1;
                var mul = 1;
                var sub = 0;
                this[offset + i] = value & 0xff;
                while (--i >= 0 && (mul *= 0x100)) {
                  if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                    sub = 1;
                  }
                  this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeInt8 = function writeInt8(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
                if (value < 0) value = 0xff + value + 1;
                this[offset] = value & 0xff;
                return offset + 1;
              };

              Buffer.prototype.writeInt16LE = function writeInt16LE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };

              Buffer.prototype.writeInt16BE = function writeInt16BE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
                return offset + 2;
              };

              Buffer.prototype.writeInt32LE = function writeInt32LE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
                return offset + 4;
              };

              Buffer.prototype.writeInt32BE = function writeInt32BE(
                value,
                offset,
                noAssert
              ) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                if (value < 0) value = 0xffffffff + value + 1;
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
                return offset + 4;
              };

              function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length)
                  throw new RangeError('Index out of range');
                if (offset < 0) throw new RangeError('Index out of range');
              }

              function writeFloat(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  checkIEEE754(
                    buf,
                    value,
                    offset,
                    4,
                    3.4028234663852886e38,
                    -3.4028234663852886e38
                  );
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4);
                return offset + 4;
              }

              Buffer.prototype.writeFloatLE = function writeFloatLE(
                value,
                offset,
                noAssert
              ) {
                return writeFloat(this, value, offset, true, noAssert);
              };

              Buffer.prototype.writeFloatBE = function writeFloatBE(
                value,
                offset,
                noAssert
              ) {
                return writeFloat(this, value, offset, false, noAssert);
              };

              function writeDouble(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  checkIEEE754(
                    buf,
                    value,
                    offset,
                    8,
                    1.7976931348623157e308,
                    -1.7976931348623157e308
                  );
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8);
                return offset + 8;
              }

              Buffer.prototype.writeDoubleLE = function writeDoubleLE(
                value,
                offset,
                noAssert
              ) {
                return writeDouble(this, value, offset, true, noAssert);
              };

              Buffer.prototype.writeDoubleBE = function writeDoubleBE(
                value,
                offset,
                noAssert
              ) {
                return writeDouble(this, value, offset, false, noAssert);
              };

              // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
              Buffer.prototype.copy = function copy(
                target,
                targetStart,
                start,
                end
              ) {
                if (!Buffer.isBuffer(target))
                  throw new TypeError('argument should be a Buffer');
                if (!start) start = 0;
                if (!end && end !== 0) end = this.length;
                if (targetStart >= target.length) targetStart = target.length;
                if (!targetStart) targetStart = 0;
                if (end > 0 && end < start) end = start;

                // Copy 0 bytes; we're done
                if (end === start) return 0;
                if (target.length === 0 || this.length === 0) return 0;

                // Fatal error conditions
                if (targetStart < 0) {
                  throw new RangeError('targetStart out of bounds');
                }
                if (start < 0 || start >= this.length)
                  throw new RangeError('Index out of range');
                if (end < 0) throw new RangeError('sourceEnd out of bounds');

                // Are we oob?
                if (end > this.length) end = this.length;
                if (target.length - targetStart < end - start) {
                  end = target.length - targetStart + start;
                }

                var len = end - start;

                if (
                  this === target &&
                  typeof Uint8Array.prototype.copyWithin === 'function'
                ) {
                  // Use built-in when available, missing from IE11
                  this.copyWithin(targetStart, start, end);
                } else if (
                  this === target &&
                  start < targetStart &&
                  targetStart < end
                ) {
                  // descending copy from end
                  for (var i = len - 1; i >= 0; --i) {
                    target[i + targetStart] = this[i + start];
                  }
                } else {
                  Uint8Array.prototype.set.call(
                    target,
                    this.subarray(start, end),
                    targetStart
                  );
                }

                return len;
              };

              // Usage:
              //    buffer.fill(number[, offset[, end]])
              //    buffer.fill(buffer[, offset[, end]])
              //    buffer.fill(string[, offset[, end]][, encoding])
              Buffer.prototype.fill = function fill(val, start, end, encoding) {
                // Handle string cases:
                if (typeof val === 'string') {
                  if (typeof start === 'string') {
                    encoding = start;
                    start = 0;
                    end = this.length;
                  } else if (typeof end === 'string') {
                    encoding = end;
                    end = this.length;
                  }
                  if (encoding !== undefined && typeof encoding !== 'string') {
                    throw new TypeError('encoding must be a string');
                  }
                  if (
                    typeof encoding === 'string' &&
                    !Buffer.isEncoding(encoding)
                  ) {
                    throw new TypeError('Unknown encoding: ' + encoding);
                  }
                  if (val.length === 1) {
                    var code = val.charCodeAt(0);
                    if (
                      (encoding === 'utf8' && code < 128) ||
                      encoding === 'latin1'
                    ) {
                      // Fast path: If `val` fits into a single byte, use that numeric value.
                      val = code;
                    }
                  }
                } else if (typeof val === 'number') {
                  val = val & 255;
                }

                // Invalid ranges are not set to a default, so can range check early.
                if (start < 0 || this.length < start || this.length < end) {
                  throw new RangeError('Out of range index');
                }

                if (end <= start) {
                  return this;
                }

                start = start >>> 0;
                end = end === undefined ? this.length : end >>> 0;

                if (!val) val = 0;

                var i;
                if (typeof val === 'number') {
                  for (i = start; i < end; ++i) {
                    this[i] = val;
                  }
                } else {
                  var bytes = Buffer.isBuffer(val)
                    ? val
                    : Buffer.from(val, encoding);
                  var len = bytes.length;
                  if (len === 0) {
                    throw new TypeError(
                      'The value "' + val + '" is invalid for argument "value"'
                    );
                  }
                  for (i = 0; i < end - start; ++i) {
                    this[i + start] = bytes[i % len];
                  }
                }

                return this;
              };

              // HELPER FUNCTIONS
              // ================

              var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

              function base64clean(str) {
                // Node takes equal signs as end of the Base64 encoding
                str = str.split('=')[0];
                // Node strips out invalid characters like \n and \t from the string, base64-js does not
                str = str.trim().replace(INVALID_BASE64_RE, '');
                // Node converts strings with length < 2 to ''
                if (str.length < 2) return '';
                // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                while (str.length % 4 !== 0) {
                  str = str + '=';
                }
                return str;
              }

              function toHex(n) {
                if (n < 16) return '0' + n.toString(16);
                return n.toString(16);
              }

              function utf8ToBytes(string, units) {
                units = units || Infinity;
                var codePoint;
                var length = string.length;
                var leadSurrogate = null;
                var bytes = [];

                for (var i = 0; i < length; ++i) {
                  codePoint = string.charCodeAt(i);

                  // is surrogate component
                  if (codePoint > 0xd7ff && codePoint < 0xe000) {
                    // last char was a lead
                    if (!leadSurrogate) {
                      // no lead yet
                      if (codePoint > 0xdbff) {
                        // unexpected trail
                        if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                        continue;
                      } else if (i + 1 === length) {
                        // unpaired lead
                        if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                        continue;
                      }

                      // valid lead
                      leadSurrogate = codePoint;

                      continue;
                    }

                    // 2 leads in a row
                    if (codePoint < 0xdc00) {
                      if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                      leadSurrogate = codePoint;
                      continue;
                    }

                    // valid surrogate pair
                    codePoint =
                      (((leadSurrogate - 0xd800) << 10) |
                        (codePoint - 0xdc00)) +
                      0x10000;
                  } else if (leadSurrogate) {
                    // valid bmp char, but last char was a lead
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  }

                  leadSurrogate = null;

                  // encode utf8
                  if (codePoint < 0x80) {
                    if ((units -= 1) < 0) break;
                    bytes.push(codePoint);
                  } else if (codePoint < 0x800) {
                    if ((units -= 2) < 0) break;
                    bytes.push(
                      (codePoint >> 0x6) | 0xc0,
                      (codePoint & 0x3f) | 0x80
                    );
                  } else if (codePoint < 0x10000) {
                    if ((units -= 3) < 0) break;
                    bytes.push(
                      (codePoint >> 0xc) | 0xe0,
                      ((codePoint >> 0x6) & 0x3f) | 0x80,
                      (codePoint & 0x3f) | 0x80
                    );
                  } else if (codePoint < 0x110000) {
                    if ((units -= 4) < 0) break;
                    bytes.push(
                      (codePoint >> 0x12) | 0xf0,
                      ((codePoint >> 0xc) & 0x3f) | 0x80,
                      ((codePoint >> 0x6) & 0x3f) | 0x80,
                      (codePoint & 0x3f) | 0x80
                    );
                  } else {
                    throw new Error('Invalid code point');
                  }
                }

                return bytes;
              }

              function asciiToBytes(str) {
                var byteArray = [];
                for (var i = 0; i < str.length; ++i) {
                  // Node's code seems to be doing this and not & 0x7F..
                  byteArray.push(str.charCodeAt(i) & 0xff);
                }
                return byteArray;
              }

              function utf16leToBytes(str, units) {
                var c, hi, lo;
                var byteArray = [];
                for (var i = 0; i < str.length; ++i) {
                  if ((units -= 2) < 0) break;

                  c = str.charCodeAt(i);
                  hi = c >> 8;
                  lo = c % 256;
                  byteArray.push(lo);
                  byteArray.push(hi);
                }

                return byteArray;
              }

              function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str));
              }

              function blitBuffer(src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                  if (i + offset >= dst.length || i >= src.length) break;
                  dst[i + offset] = src[i];
                }
                return i;
              }

              // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
              // the `instanceof` check but they should be treated as of that type.
              // See: https://github.com/feross/buffer/issues/166
              function isInstance(obj, type) {
                return (
                  obj instanceof type ||
                  (obj != null &&
                    obj.constructor != null &&
                    obj.constructor.name != null &&
                    obj.constructor.name === type.name)
                );
              }
              function numberIsNaN(obj) {
                // For IE11 support
                return obj !== obj; // eslint-disable-line no-self-compare
              }
            }.call(this));
          }.call(this, require('buffer').Buffer));
        },
        { 'base64-js': 181, buffer: 183, ieee754: 185 },
      ],
      184: [
        function (require, module, exports) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          'use strict';

          var R = typeof Reflect === 'object' ? Reflect : null;
          var ReflectApply =
            R && typeof R.apply === 'function'
              ? R.apply
              : function ReflectApply(target, receiver, args) {
                  return Function.prototype.apply.call(target, receiver, args);
                };

          var ReflectOwnKeys;
          if (R && typeof R.ownKeys === 'function') {
            ReflectOwnKeys = R.ownKeys;
          } else if (Object.getOwnPropertySymbols) {
            ReflectOwnKeys = function ReflectOwnKeys(target) {
              return Object.getOwnPropertyNames(target).concat(
                Object.getOwnPropertySymbols(target)
              );
            };
          } else {
            ReflectOwnKeys = function ReflectOwnKeys(target) {
              return Object.getOwnPropertyNames(target);
            };
          }

          function ProcessEmitWarning(warning) {
            if (console && console.warn) console.warn(warning);
          }

          var NumberIsNaN =
            Number.isNaN ||
            function NumberIsNaN(value) {
              return value !== value;
            };

          function EventEmitter() {
            EventEmitter.init.call(this);
          }
          module.exports = EventEmitter;
          module.exports.once = once;

          // Backwards-compat with node 0.10.x
          EventEmitter.EventEmitter = EventEmitter;

          EventEmitter.prototype._events = undefined;
          EventEmitter.prototype._eventsCount = 0;
          EventEmitter.prototype._maxListeners = undefined;

          // By default EventEmitters will print a warning if more than 10 listeners are
          // added to it. This is a useful default which helps finding memory leaks.
          var defaultMaxListeners = 10;

          function checkListener(listener) {
            if (typeof listener !== 'function') {
              throw new TypeError(
                'The "listener" argument must be of type Function. Received type ' +
                  typeof listener
              );
            }
          }

          Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
            enumerable: true,
            get: function () {
              return defaultMaxListeners;
            },
            set: function (arg) {
              if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
                throw new RangeError(
                  'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                    arg +
                    '.'
                );
              }
              defaultMaxListeners = arg;
            },
          });

          EventEmitter.init = function () {
            if (
              this._events === undefined ||
              this._events === Object.getPrototypeOf(this)._events
            ) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            }

            this._maxListeners = this._maxListeners || undefined;
          };

          // Obviously not all Emitters should be limited to 10. This function allows
          // that to be increased. Set to zero for unlimited.
          EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
            if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
              throw new RangeError(
                'The value of "n" is out of range. It must be a non-negative number. Received ' +
                  n +
                  '.'
              );
            }
            this._maxListeners = n;
            return this;
          };

          function _getMaxListeners(that) {
            if (that._maxListeners === undefined)
              return EventEmitter.defaultMaxListeners;
            return that._maxListeners;
          }

          EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
            return _getMaxListeners(this);
          };

          EventEmitter.prototype.emit = function emit(type) {
            var args = [];
            for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
            var doError = type === 'error';

            var events = this._events;
            if (events !== undefined)
              doError = doError && events.error === undefined;
            else if (!doError) return false;

            // If there is no 'error' event listener then throw.
            if (doError) {
              var er;
              if (args.length > 0) er = args[0];
              if (er instanceof Error) {
                // Note: The comments on the `throw` lines are intentional, they show
                // up in Node's output if this results in an unhandled exception.
                throw er; // Unhandled 'error' event
              }
              // At least give some kind of context to the user
              var err = new Error(
                'Unhandled error.' + (er ? ' (' + er.message + ')' : '')
              );
              err.context = er;
              throw err; // Unhandled 'error' event
            }

            var handler = events[type];

            if (handler === undefined) return false;

            if (typeof handler === 'function') {
              ReflectApply(handler, this, args);
            } else {
              var len = handler.length;
              var listeners = arrayClone(handler, len);
              for (var i = 0; i < len; ++i)
                ReflectApply(listeners[i], this, args);
            }

            return true;
          };

          function _addListener(target, type, listener, prepend) {
            var m;
            var events;
            var existing;

            checkListener(listener);

            events = target._events;
            if (events === undefined) {
              events = target._events = Object.create(null);
              target._eventsCount = 0;
            } else {
              // To avoid recursion in the case that type === "newListener"! Before
              // adding it to the listeners, first emit "newListener".
              if (events.newListener !== undefined) {
                target.emit(
                  'newListener',
                  type,
                  listener.listener ? listener.listener : listener
                );

                // Re-assign `events` because a newListener handler could have caused the
                // this._events to be assigned to a new object
                events = target._events;
              }
              existing = events[type];
            }

            if (existing === undefined) {
              // Optimize the case of one listener. Don't need the extra array object.
              existing = events[type] = listener;
              ++target._eventsCount;
            } else {
              if (typeof existing === 'function') {
                // Adding the second element, need to change to array.
                existing = events[type] = prepend
                  ? [listener, existing]
                  : [existing, listener];
                // If we've already got an array, just append.
              } else if (prepend) {
                existing.unshift(listener);
              } else {
                existing.push(listener);
              }

              // Check for listener leak
              m = _getMaxListeners(target);
              if (m > 0 && existing.length > m && !existing.warned) {
                existing.warned = true;
                // No error code for this since it is a Warning
                // eslint-disable-next-line no-restricted-syntax
                var w = new Error(
                  'Possible EventEmitter memory leak detected. ' +
                    existing.length +
                    ' ' +
                    String(type) +
                    ' listeners ' +
                    'added. Use emitter.setMaxListeners() to ' +
                    'increase limit'
                );
                w.name = 'MaxListenersExceededWarning';
                w.emitter = target;
                w.type = type;
                w.count = existing.length;
                ProcessEmitWarning(w);
              }
            }

            return target;
          }

          EventEmitter.prototype.addListener = function addListener(
            type,
            listener
          ) {
            return _addListener(this, type, listener, false);
          };

          EventEmitter.prototype.on = EventEmitter.prototype.addListener;

          EventEmitter.prototype.prependListener = function prependListener(
            type,
            listener
          ) {
            return _addListener(this, type, listener, true);
          };

          function onceWrapper() {
            if (!this.fired) {
              this.target.removeListener(this.type, this.wrapFn);
              this.fired = true;
              if (arguments.length === 0)
                return this.listener.call(this.target);
              return this.listener.apply(this.target, arguments);
            }
          }

          function _onceWrap(target, type, listener) {
            var state = {
              fired: false,
              wrapFn: undefined,
              target: target,
              type: type,
              listener: listener,
            };
            var wrapped = onceWrapper.bind(state);
            wrapped.listener = listener;
            state.wrapFn = wrapped;
            return wrapped;
          }

          EventEmitter.prototype.once = function once(type, listener) {
            checkListener(listener);
            this.on(type, _onceWrap(this, type, listener));
            return this;
          };

          EventEmitter.prototype.prependOnceListener =
            function prependOnceListener(type, listener) {
              checkListener(listener);
              this.prependListener(type, _onceWrap(this, type, listener));
              return this;
            };

          // Emits a 'removeListener' event if and only if the listener was removed.
          EventEmitter.prototype.removeListener = function removeListener(
            type,
            listener
          ) {
            var list, events, position, i, originalListener;

            checkListener(listener);

            events = this._events;
            if (events === undefined) return this;

            list = events[type];
            if (list === undefined) return this;

            if (list === listener || list.listener === listener) {
              if (--this._eventsCount === 0) this._events = Object.create(null);
              else {
                delete events[type];
                if (events.removeListener)
                  this.emit('removeListener', type, list.listener || listener);
              }
            } else if (typeof list !== 'function') {
              position = -1;

              for (i = list.length - 1; i >= 0; i--) {
                if (list[i] === listener || list[i].listener === listener) {
                  originalListener = list[i].listener;
                  position = i;
                  break;
                }
              }

              if (position < 0) return this;

              if (position === 0) list.shift();
              else {
                spliceOne(list, position);
              }

              if (list.length === 1) events[type] = list[0];

              if (events.removeListener !== undefined)
                this.emit('removeListener', type, originalListener || listener);
            }

            return this;
          };

          EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

          EventEmitter.prototype.removeAllListeners =
            function removeAllListeners(type) {
              var listeners, events, i;

              events = this._events;
              if (events === undefined) return this;

              // not listening for removeListener, no need to emit
              if (events.removeListener === undefined) {
                if (arguments.length === 0) {
                  this._events = Object.create(null);
                  this._eventsCount = 0;
                } else if (events[type] !== undefined) {
                  if (--this._eventsCount === 0)
                    this._events = Object.create(null);
                  else delete events[type];
                }
                return this;
              }

              // emit removeListener for all listeners on all events
              if (arguments.length === 0) {
                var keys = Object.keys(events);
                var key;
                for (i = 0; i < keys.length; ++i) {
                  key = keys[i];
                  if (key === 'removeListener') continue;
                  this.removeAllListeners(key);
                }
                this.removeAllListeners('removeListener');
                this._events = Object.create(null);
                this._eventsCount = 0;
                return this;
              }

              listeners = events[type];

              if (typeof listeners === 'function') {
                this.removeListener(type, listeners);
              } else if (listeners !== undefined) {
                // LIFO order
                for (i = listeners.length - 1; i >= 0; i--) {
                  this.removeListener(type, listeners[i]);
                }
              }

              return this;
            };

          function _listeners(target, type, unwrap) {
            var events = target._events;

            if (events === undefined) return [];

            var evlistener = events[type];
            if (evlistener === undefined) return [];

            if (typeof evlistener === 'function')
              return unwrap
                ? [evlistener.listener || evlistener]
                : [evlistener];

            return unwrap
              ? unwrapListeners(evlistener)
              : arrayClone(evlistener, evlistener.length);
          }

          EventEmitter.prototype.listeners = function listeners(type) {
            return _listeners(this, type, true);
          };

          EventEmitter.prototype.rawListeners = function rawListeners(type) {
            return _listeners(this, type, false);
          };

          EventEmitter.listenerCount = function (emitter, type) {
            if (typeof emitter.listenerCount === 'function') {
              return emitter.listenerCount(type);
            } else {
              return listenerCount.call(emitter, type);
            }
          };

          EventEmitter.prototype.listenerCount = listenerCount;
          function listenerCount(type) {
            var events = this._events;

            if (events !== undefined) {
              var evlistener = events[type];

              if (typeof evlistener === 'function') {
                return 1;
              } else if (evlistener !== undefined) {
                return evlistener.length;
              }
            }

            return 0;
          }

          EventEmitter.prototype.eventNames = function eventNames() {
            return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
          };

          function arrayClone(arr, n) {
            var copy = new Array(n);
            for (var i = 0; i < n; ++i) copy[i] = arr[i];
            return copy;
          }

          function spliceOne(list, index) {
            for (; index + 1 < list.length; index++)
              list[index] = list[index + 1];
            list.pop();
          }

          function unwrapListeners(arr) {
            var ret = new Array(arr.length);
            for (var i = 0; i < ret.length; ++i) {
              ret[i] = arr[i].listener || arr[i];
            }
            return ret;
          }

          function once(emitter, name) {
            return new Promise(function (resolve, reject) {
              function errorListener(err) {
                emitter.removeListener(name, resolver);
                reject(err);
              }

              function resolver() {
                if (typeof emitter.removeListener === 'function') {
                  emitter.removeListener('error', errorListener);
                }
                resolve([].slice.call(arguments));
              }

              eventTargetAgnosticAddListener(emitter, name, resolver, {
                once: true,
              });
              if (name !== 'error') {
                addErrorHandlerIfEventEmitter(emitter, errorListener, {
                  once: true,
                });
              }
            });
          }

          function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
            if (typeof emitter.on === 'function') {
              eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
            }
          }

          function eventTargetAgnosticAddListener(
            emitter,
            name,
            listener,
            flags
          ) {
            if (typeof emitter.on === 'function') {
              if (flags.once) {
                emitter.once(name, listener);
              } else {
                emitter.on(name, listener);
              }
            } else if (typeof emitter.addEventListener === 'function') {
              // EventTarget does not have `error` event semantics like Node
              // EventEmitters, we do not listen for `error` events here.
              emitter.addEventListener(name, function wrapListener(arg) {
                // IE does not have builtin `{ once: true }` support so we
                // have to do it manually.
                if (flags.once) {
                  emitter.removeEventListener(name, wrapListener);
                }
                listener(arg);
              });
            } else {
              throw new TypeError(
                'The "emitter" argument must be of type EventEmitter. Received type ' +
                  typeof emitter
              );
            }
          }
        },
        {},
      ],
      185: [
        function (require, module, exports) {
          /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
          exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];

            i += d;

            e = s & ((1 << -nBits) - 1);
            s >>= -nBits;
            nBits += eLen;
            for (
              ;
              nBits > 0;
              e = e * 256 + buffer[offset + i], i += d, nBits -= 8
            ) {}

            m = e & ((1 << -nBits) - 1);
            e >>= -nBits;
            nBits += mLen;
            for (
              ;
              nBits > 0;
              m = m * 256 + buffer[offset + i], i += d, nBits -= 8
            ) {}

            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          };

          exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

            value = Math.abs(value);

            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }
              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }
              if (value * c >= 2) {
                e++;
                c /= 2;
              }

              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }

            for (
              ;
              mLen >= 8;
              buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
            ) {}

            e = (e << mLen) | m;
            eLen += mLen;
            for (
              ;
              eLen > 0;
              buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
            ) {}

            buffer[offset + i - d] |= s * 128;
          };
        },
        {},
      ],
      186: [
        function (require, module, exports) {
          arguments[4][130][0].apply(exports, arguments);
        },
        { dup: 130 },
      ],
      187: [
        function (require, module, exports) {
          /*!
           * Determine if an object is a Buffer
           *
           * @author   Feross Aboukhadijeh <https://feross.org>
           * @license  MIT
           */

          // The _isBuffer check is for Safari 5-7 support, because it's missing
          // Object.prototype.constructor. Remove this eventually
          module.exports = function (obj) {
            return (
              obj != null &&
              (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
            );
          };

          function isBuffer(obj) {
            return (
              !!obj.constructor &&
              typeof obj.constructor.isBuffer === 'function' &&
              obj.constructor.isBuffer(obj)
            );
          }

          // For Node v0.10 support. Remove this eventually.
          function isSlowBuffer(obj) {
            return (
              typeof obj.readFloatLE === 'function' &&
              typeof obj.slice === 'function' &&
              isBuffer(obj.slice(0, 0))
            );
          }
        },
        {},
      ],
      188: [
        function (require, module, exports) {
          /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

          'use strict';
          /* eslint-disable no-unused-vars */
          var getOwnPropertySymbols = Object.getOwnPropertySymbols;
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var propIsEnumerable = Object.prototype.propertyIsEnumerable;

          function toObject(val) {
            if (val === null || val === undefined) {
              throw new TypeError(
                'Object.assign cannot be called with null or undefined'
              );
            }

            return Object(val);
          }

          function shouldUseNative() {
            try {
              if (!Object.assign) {
                return false;
              }

              // Detect buggy property enumeration order in older V8 versions.

              // https://bugs.chromium.org/p/v8/issues/detail?id=4118
              var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
              test1[5] = 'de';
              if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
              }

              // https://bugs.chromium.org/p/v8/issues/detail?id=3056
              var test2 = {};
              for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
              }
              var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
              });
              if (order2.join('') !== '0123456789') {
                return false;
              }

              // https://bugs.chromium.org/p/v8/issues/detail?id=3056
              var test3 = {};
              'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
              });
              if (
                Object.keys(Object.assign({}, test3)).join('') !==
                'abcdefghijklmnopqrst'
              ) {
                return false;
              }

              return true;
            } catch (err) {
              // We don't expect any of the above to throw, but better to be safe.
              return false;
            }
          }

          module.exports = shouldUseNative()
            ? Object.assign
            : function (target, source) {
                var from;
                var to = toObject(target);
                var symbols;

                for (var s = 1; s < arguments.length; s++) {
                  from = Object(arguments[s]);

                  for (var key in from) {
                    if (hasOwnProperty.call(from, key)) {
                      to[key] = from[key];
                    }
                  }

                  if (getOwnPropertySymbols) {
                    symbols = getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                      if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                      }
                    }
                  }
                }

                return to;
              };
        },
        {},
      ],
      189: [
        function (require, module, exports) {
          // shim for using process in browser
          var process = (module.exports = {});

          // cached from whatever global is present so that test runners that stub it
          // don't break things.  But we need to wrap it in a try catch in case it is
          // wrapped in strict mode code which doesn't define any globals.  It's inside a
          // function because try/catches deoptimize in certain engines.

          var cachedSetTimeout;
          var cachedClearTimeout;

          function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
          }
          function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined');
          }
          (function () {
            try {
              if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
              } else {
                cachedSetTimeout = defaultSetTimout;
              }
            } catch (e) {
              cachedSetTimeout = defaultSetTimout;
            }
            try {
              if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
              } else {
                cachedClearTimeout = defaultClearTimeout;
              }
            } catch (e) {
              cachedClearTimeout = defaultClearTimeout;
            }
          })();
          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              //normal enviroments in sane situations
              return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if (
              (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
              setTimeout
            ) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }
            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedSetTimeout(fun, 0);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
              }
            }
          }
          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              //normal enviroments in sane situations
              return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if (
              (cachedClearTimeout === defaultClearTimeout ||
                !cachedClearTimeout) &&
              clearTimeout
            ) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }
            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedClearTimeout(marker);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
              }
            }
          }
          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;

          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return;
            }
            draining = false;
            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }
            if (queue.length) {
              drainQueue();
            }
          }

          function drainQueue() {
            if (draining) {
              return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while (len) {
              currentQueue = queue;
              queue = [];
              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }
              queueIndex = -1;
              len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }

          process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
              for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
              }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          };

          // v8 likes predictible objects
          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }
          Item.prototype.run = function () {
            this.fun.apply(null, this.array);
          };
          process.title = 'browser';
          process.browser = true;
          process.env = {};
          process.argv = [];
          process.version = ''; // empty string to avoid regexp issues
          process.versions = {};

          function noop() {}

          process.on = noop;
          process.addListener = noop;
          process.once = noop;
          process.off = noop;
          process.removeListener = noop;
          process.removeAllListeners = noop;
          process.emit = noop;
          process.prependListener = noop;
          process.prependOnceListener = noop;

          process.listeners = function (name) {
            return [];
          };

          process.binding = function (name) {
            throw new Error('process.binding is not supported');
          };

          process.cwd = function () {
            return '/';
          };
          process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
          };
          process.umask = function () {
            return 0;
          };
        },
        {},
      ],
      190: [
        function (require, module, exports) {
          arguments[4][158][0].apply(exports, arguments);
        },
        { buffer: 183, dup: 158 },
      ],
      191: [
        function (require, module, exports) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          module.exports = Stream;

          var EE = require('events').EventEmitter;
          var inherits = require('inherits');

          inherits(Stream, EE);
          Stream.Readable = require('readable-stream/lib/_stream_readable.js');
          Stream.Writable = require('readable-stream/lib/_stream_writable.js');
          Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
          Stream.Transform = require('readable-stream/lib/_stream_transform.js');
          Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
          Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js');
          Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js');

          // Backwards-compat with node 0.4.x
          Stream.Stream = Stream;

          // old-style streams.  Note that the pipe method (the only relevant
          // part of this class) is overridden in the Readable class.

          function Stream() {
            EE.call(this);
          }

          Stream.prototype.pipe = function (dest, options) {
            var source = this;

            function ondata(chunk) {
              if (dest.writable) {
                if (false === dest.write(chunk) && source.pause) {
                  source.pause();
                }
              }
            }

            source.on('data', ondata);

            function ondrain() {
              if (source.readable && source.resume) {
                source.resume();
              }
            }

            dest.on('drain', ondrain);

            // If the 'end' option is not supplied, dest.end() will be called when
            // source gets the 'end' or 'close' events.  Only dest.end() once.
            if (!dest._isStdio && (!options || options.end !== false)) {
              source.on('end', onend);
              source.on('close', onclose);
            }

            var didOnEnd = false;
            function onend() {
              if (didOnEnd) return;
              didOnEnd = true;

              dest.end();
            }

            function onclose() {
              if (didOnEnd) return;
              didOnEnd = true;

              if (typeof dest.destroy === 'function') dest.destroy();
            }

            // don't leave dangling pipes when there are errors.
            function onerror(er) {
              cleanup();
              if (EE.listenerCount(this, 'error') === 0) {
                throw er; // Unhandled stream error in pipe.
              }
            }

            source.on('error', onerror);
            dest.on('error', onerror);

            // remove all the event listeners that were added.
            function cleanup() {
              source.removeListener('data', ondata);
              dest.removeListener('drain', ondrain);

              source.removeListener('end', onend);
              source.removeListener('close', onclose);

              source.removeListener('error', onerror);
              dest.removeListener('error', onerror);

              source.removeListener('end', cleanup);
              source.removeListener('close', cleanup);

              dest.removeListener('close', cleanup);
            }

            source.on('end', cleanup);
            source.on('close', cleanup);

            dest.on('close', cleanup);

            dest.emit('pipe', source);

            // Allow for unix-like usage: A.pipe(B).pipe(C)
            return dest;
          };
        },
        {
          events: 184,
          inherits: 186,
          'readable-stream/lib/_stream_duplex.js': 193,
          'readable-stream/lib/_stream_passthrough.js': 194,
          'readable-stream/lib/_stream_readable.js': 195,
          'readable-stream/lib/_stream_transform.js': 196,
          'readable-stream/lib/_stream_writable.js': 197,
          'readable-stream/lib/internal/streams/end-of-stream.js': 201,
          'readable-stream/lib/internal/streams/pipeline.js': 203,
        },
      ],
      192: [
        function (require, module, exports) {
          arguments[4][142][0].apply(exports, arguments);
        },
        { dup: 142 },
      ],
      193: [
        function (require, module, exports) {
          arguments[4][143][0].apply(exports, arguments);
        },
        {
          './_stream_readable': 195,
          './_stream_writable': 197,
          _process: 189,
          dup: 143,
          inherits: 186,
        },
      ],
      194: [
        function (require, module, exports) {
          arguments[4][144][0].apply(exports, arguments);
        },
        { './_stream_transform': 196, dup: 144, inherits: 186 },
      ],
      195: [
        function (require, module, exports) {
          arguments[4][145][0].apply(exports, arguments);
        },
        {
          '../errors': 192,
          './_stream_duplex': 193,
          './internal/streams/async_iterator': 198,
          './internal/streams/buffer_list': 199,
          './internal/streams/destroy': 200,
          './internal/streams/from': 202,
          './internal/streams/state': 204,
          './internal/streams/stream': 205,
          _process: 189,
          buffer: 183,
          dup: 145,
          events: 184,
          inherits: 186,
          'string_decoder/': 206,
          util: 182,
        },
      ],
      196: [
        function (require, module, exports) {
          arguments[4][146][0].apply(exports, arguments);
        },
        { '../errors': 192, './_stream_duplex': 193, dup: 146, inherits: 186 },
      ],
      197: [
        function (require, module, exports) {
          arguments[4][147][0].apply(exports, arguments);
        },
        {
          '../errors': 192,
          './_stream_duplex': 193,
          './internal/streams/destroy': 200,
          './internal/streams/state': 204,
          './internal/streams/stream': 205,
          _process: 189,
          buffer: 183,
          dup: 147,
          inherits: 186,
          'util-deprecate': 207,
        },
      ],
      198: [
        function (require, module, exports) {
          arguments[4][148][0].apply(exports, arguments);
        },
        { './end-of-stream': 201, _process: 189, dup: 148 },
      ],
      199: [
        function (require, module, exports) {
          arguments[4][149][0].apply(exports, arguments);
        },
        { buffer: 183, dup: 149, util: 182 },
      ],
      200: [
        function (require, module, exports) {
          arguments[4][150][0].apply(exports, arguments);
        },
        { _process: 189, dup: 150 },
      ],
      201: [
        function (require, module, exports) {
          arguments[4][151][0].apply(exports, arguments);
        },
        { '../../../errors': 192, dup: 151 },
      ],
      202: [
        function (require, module, exports) {
          arguments[4][152][0].apply(exports, arguments);
        },
        { dup: 152 },
      ],
      203: [
        function (require, module, exports) {
          arguments[4][153][0].apply(exports, arguments);
        },
        { '../../../errors': 192, './end-of-stream': 201, dup: 153 },
      ],
      204: [
        function (require, module, exports) {
          arguments[4][154][0].apply(exports, arguments);
        },
        { '../../../errors': 192, dup: 154 },
      ],
      205: [
        function (require, module, exports) {
          arguments[4][155][0].apply(exports, arguments);
        },
        { dup: 155, events: 184 },
      ],
      206: [
        function (require, module, exports) {
          arguments[4][167][0].apply(exports, arguments);
        },
        { dup: 167, 'safe-buffer': 190 },
      ],
      207: [
        function (require, module, exports) {
          arguments[4][174][0].apply(exports, arguments);
        },
        { dup: 174 },
      ],
      bip86: [
        function (require, module, exports) {
          const { networks } = require('bitcoinjs-lib');
          const bip39 = require('bip39');
          const bitcoinNetworks = {
            mainnet: networks.bitcoin,
            testnet: networks.testnet,
          };
          const BIP32Factory = require('bip32').default;
          const ecurve = require('ecurve');
          const secp256k1 = ecurve.getCurveByName('secp256k1');
          const schnorr = require('bip-schnorr');
          const bech32 = require('bech32').bech32;
          const bech32m = require('bech32').bech32m;
          const ecc = require('tiny-secp256k1');
          const bip32 = BIP32Factory(ecc);

          /**
           * Constructor
           * Derive accounts from a mnemonic.
           * @param {string} mnemonic
           * @param {string} password
           * @param {boolean} isTestnet
           * @param {number} coinType - slip44
           * @param {object} network
           * @return
           */
          function fromMnemonic(
            mnemonic,
            password = '',
            isTestnet,
            coinType,
            network
          ) {
            this.seed = bip39.mnemonicToSeedSync(mnemonic, password);
            this.isTestnet = isTestnet === true;
            this.coinType = this.isTestnet ? 1 : coinType ? coinType : 0; // 0 is for Bitcoin and 1 is testnet for all coins
            this.network =
              network || this.isTestnet
                ? bitcoinNetworks.testnet
                : bitcoinNetworks.mainnet;
          }

          /**
           * Get root master private key
           * @return {string}
           */
          fromMnemonic.prototype.getRootPrivateKey = function () {
            let xprv = bip32.fromSeed(this.seed, this.network).toBase58();

            return xprv;
          };

          /**
           * Get root master public key
           * @return {string}
           */
          fromMnemonic.prototype.getRootPublicKey = function () {
            let xpub = bip32
              .fromSeed(this.seed, this.network)
              .neutered()
              .toBase58();

            return xpub;
          };

          /**
           * Derive a new master private key
           * @param {number} number
           * @param {number} changePurpose
           * @return {string}
           */
          fromMnemonic.prototype.deriveAccount = function (
            number,
            changePurpose
          ) {
            let purpose = changePurpose || 86,
              keypath =
                'm/' + purpose + "'/" + this.coinType + "'/" + number + "'",
              account = bip32
                .fromSeed(this.seed, this.network)
                .derivePath(keypath)
                .toBase58();

            return account;
          };

          /**
           * Constructor
           * Create key pairs from a private master key of mainnet and testnet.
           * @param {string} xprv/tprv
           * @param {object} networks
           */
          function fromXPrv(xprv, networks) {
            this.networks = networks || bitcoinNetworks;
            this.xprv = xprv;
            this.getNetwork(xprv);
          }

          fromXPrv.prototype.getNetwork = function (xprv) {
            let key = xprv.slice(0, 4);

            if (key !== 'xprv' && key !== 'tprv') {
              throw new Error('prefix is not supported');
            }

            if (key === 'xprv') {
              this.network = this.networks.mainnet;
              this.isTestnet = false;
            }

            if (key === 'tprv') {
              this.network = this.networks.testnet;
              this.isTestnet = true;
            }
          };

          /**
           * Get account master private key
           * @return {string}
           */
          fromXPrv.prototype.getAccountPrivateKey = function () {
            let xprv = bip32.fromBase58(this.xprv, this.network).toBase58();

            return xprv;
          };

          /**
           * Get account master public key
           * @return {string}
           */
          fromXPrv.prototype.getAccountPublicKey = function () {
            let xpub = bip32
              .fromBase58(this.xprv, this.network)
              .neutered()
              .toBase58();

            return xpub;
          };

          /**
           * Get private key
           * @param {number} index
           * @param {boolean} isChange
           * @return {string}
           */
          fromXPrv.prototype.getPrivateKey = function (index, isChange) {
            let change = isChange === true ? 1 : 0,
              prvkey = bip32
                .fromBase58(this.xprv, this.network)
                .derive(change)
                .derive(index);

            return prvkey.toWIF();
          };

          /**
           * Get public key
           * @param {number} index
           * @param {boolean} isChange
           * @return {string}
           */
          fromXPrv.prototype.getPublicKey = function (index, isChange) {
            let change = isChange === true ? 1 : 0,
              pubKey = bip32
                .fromBase58(this.xprv, this.network)
                .derive(change)
                .derive(index).publicKey;

            return pubKey.toString('hex');
          };

          /**
           * Get address
           * @param {number} index
           * @param {boolean} isChange
           * @param {number} purpose
           * @return {string}
           */
          fromXPrv.prototype.getAddress = function (index, isChange, purpose) {
            let change = isChange === true ? 1 : 0,
              pubkey = bip32
                .fromBase58(this.xprv, this.network)
                .derive(change)
                .derive(index).publicKey;

            return getP2TRAddress(pubkey, this.isTestnet);
          };

          /**
           * Constructor
           * Create public keys and addresses from a public master key of mainnet and testnet.
           * @param {string} xpub/tpub
           * @param {object} networks
           */
          function fromXPub(xpub, networks) {
            this.networks = networks || bitcoinNetworks;
            this.xpub = xpub;
            this.getNetwork(xpub);
          }

          fromXPub.prototype.getNetwork = function (xpub) {
            let key = xpub.slice(0, 4);

            if (key !== 'xpub' && key !== 'tpub') {
              throw new Error('prefix is not supported');
            }

            if (key === 'xpub') {
              this.network = this.networks.mainnet;
              this.isTestnet = false;
            }

            if (key === 'tpub') {
              this.network = this.networks.testnet;
              this.isTestnet = true;
            }
          };

          /**
           * Get account master public key
           * @return {string}
           */
          fromXPub.prototype.getAccountPublicKey = function () {
            let xpub = bip32
              .fromBase58(this.xpub, this.network)
              .neutered()
              .toBase58();

            return xpub;
          };

          /**
           * Get public key
           * @param {number} index
           * @param {boolean} isChange
           * @return {string}
           */
          fromXPub.prototype.getPublicKey = function (index, isChange) {
            let change = isChange === true ? 1 : 0,
              xpub = bip32
                .fromBase58(this.xpub, this.network)
                .derive(change)
                .derive(index);

            return xpub.publicKey.toString('hex');
          };

          /**
           * Get address
           * @param {number} index
           * @param {boolean} isChange
           * @param {number} purpose
           * @return {string}
           */
          fromXPub.prototype.getAddress = function (index, isChange, purpose) {
            let change = isChange === true ? 1 : 0,
              pubkey = bip32
                .fromBase58(this.xpub, this.network)
                .derive(change)
                .derive(index).publicKey;

            return getP2TRAddress(pubkey, this.isTestnet);
          };

          const getP2TRAddress = (pubkey, testnet = false) => {
            const pubKey = ecurve.Point.decodeFrom(secp256k1, pubkey);
            const taprootPubkey = schnorr.taproot.taprootConstruct(pubKey);
            const words = bech32.toWords(taprootPubkey);
            words.unshift(1);
            return bech32m.encode(testnet ? 'tb' : 'bc', words);
          };

          module.exports = {
            generateMnemonic: bip39.generateMnemonic,
            entropyToMnemonic: bip39.entropyToMnemonic,
            fromMnemonic,
            fromXPrv,
            fromXPub,
            getP2TRAddress,
          };
        },
        {
          bech32: 2,
          'bip-schnorr': 9,
          bip32: 46,
          bip39: 49,
          'bitcoinjs-lib': 65,
          ecurve: 97,
          'tiny-secp256k1': 168,
        },
      ],
    },
    {},
    []
  )('bip86');
});
